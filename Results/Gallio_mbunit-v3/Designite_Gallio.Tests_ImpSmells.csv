Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The method has 113 lines of code.
Long Method,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreTypesEquivalent,The method has 234 lines of code.
Complex Method,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreTypesEquivalent,Cyclomatic complexity of the method is 15
Complex Method,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreAttributeProvidersEquivalent,Cyclomatic complexity of the method is 10
Complex Method,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,JoinProducesCoveringsOfAllPairs,Cyclomatic complexity of the method is 14
Long Parameter List,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenSpaceRequirementsExceedPixelBuffer_Throws,The method has 5 parameters. Parameters: width' height' startOffset' stride' exactPixelBufferLengthRequired
Long Parameter List,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenArgumentsValid_ShouldCopyTheRegion,The method has 7 parameters. Parameters: x' y' width' height' startOffset' stride' pixelBufferLength
Long Parameter List,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,FindCommonPrefixLength,The method has 7 parameters. Parameters: content1' startIndex1' length1' content2' startIndex2' length2' expectedResult
Long Parameter List,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,FindCommonSuffixLength,The method has 7 parameters. Parameters: content1' startIndex1' length1' content2' startIndex2' length2' expectedResult
Long Parameter List,Gallio.Tests.Framework,CompositePatternAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CompositePatternAttributeTest.cs,SampleRunnerOutcome,The method has 5 parameters. Parameters: testMethodName' expectedOutcomeStatus' expectedOutcomeCategory' logStreamName' expectedLogOutput
Long Parameter List,Gallio.Tests.Framework.Data,CsvDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CsvDataSetTest.cs,BindValues,The method has 7 parameters. Parameters: document' fieldDelimiter' commentPrefix' hasHeader' bindingIndex' bindingPath' expectedValues
Long Parameter List,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,AssertTranslateReplacedIndex,The method has 5 parameters. Parameters: joinedDataSet' innerDataSet' binding' expectedIndex' message
Long Parameter List,Gallio.Tests.Runtime.ConsoleSupport,CommandLineOutputTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\ConsoleSupport\CommandLineOutputTests.cs,PringArgumentHelpTest,The method has 5 parameters. Parameters: longName' shortName' description' valueType' expectedOutput
Long Parameter List,Gallio.Tests.Runtime.ConsoleSupport,CommandLineOutputTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\ConsoleSupport\CommandLineOutputTests.cs,PrintArgumentHelpWidth40Chars,The method has 5 parameters. Parameters: longName' shortName' description' valueType' expectedOutput
Long Parameter List,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,IdentifyFileType_FileInspectorWithCandidates_WhenMatchCriteriaAndCandidatesAreVaried_ReturnsTypeIfMatchedOrUnknownOtherwise,The method has 5 parameters. Parameters: includeSupertypeAsCandidate' includeSubtypeAsCandidate' superRecognizerResult' subRecognizerResult' expectedMatchType
Long Identifier,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenSpaceRequirementsExceedPixelBuffer_Throws,The length of the parameter exactPixelBufferLengthRequired is 30.
Long Identifier,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,,The length of the parameter GenericParameterAttributesMask is 30.
Long Identifier,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,,The length of the parameter supportsGenericParameterAttributes is 34.
Long Identifier,Gallio.Tests.Framework.Assertions,WhenAssertionFailureBehaviorIsLogAndThrow,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionContextTest.cs,WhenCaptureExceptionIsTrueANonSilentAssertionFailureExceptionIsReifiedAsAnAssertionFailure,The length of the parameter captureExceptionAsAssertionFailure is 34.
Long Identifier,Gallio.Tests.Framework.Assertions,WhenAssertionFailureBehaviorIsLogAndThrow,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionContextTest.cs,WhenCaptureExceptionIsTrueOrFalseATestExceptionEscapesTheBlock,The length of the parameter captureExceptionAsAssertionFailure is 34.
Long Identifier,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,,The length of the parameter NonGenericClassEmptyMethodInfo is 30.
Long Identifier,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,,The length of the parameter NonGenericClassGenericMethodInfo is 32.
Long Identifier,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,,The length of the parameter NonGenericClassStaticMethodInfo is 31.
Long Identifier,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,,The length of the parameter AbstractClassOneParamConstructorInfo is 36.
Long Identifier,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,,The length of the parameter NonGenericClassOneParamConstructorInfo is 38.
Long Identifier,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,,The length of the parameter NonGenericClassTwoParamConstructorInfo is 38.
Long Identifier,Gallio.Tests.Model.Filters,FilterFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterFormatterTest.cs,RoundTripFormatting,The length of the parameter filterFromFormattedFilterExpression is 35.
Long Statement,Gallio.Tests.Common,ActionChainTestForTwoParameters,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\ActionChainTestForTwoParameters.cs,Around,The length of the statement  "            AssertTraceEquals("key'42: ghi'2"' "key'42: def'1"' "key'42: abc'0"' "key'42: xyz'0"' "key'42: uvw'1"' "key'42: rst'2"); " is 120.
Long Statement,Gallio.Tests.Common.Collections,EnumerableCounterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\EnumerableCounterTest.cs,Counts_custom_enumerable_with_count,The length of the statement  "            AssertStrategies(counter.Count()' CountingStrategyName.ByEnumeratingElements' CountingStrategyName.ByReflectedCountGetter); " is 123.
Long Statement,Gallio.Tests.Common.Diagnostics,ExceptionDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionDataTest.cs,WriteToBareBones,The length of the statement  "            Assert.AreEqual("[Marker \'Exception\'][Marker \'ExceptionType\']type[End]: [Marker \'ExceptionMessage\']message[End]\n[Marker \'StackTrace\']stacktrace[End][End]"' " is 164.
Long Statement,Gallio.Tests.Common.Diagnostics,ExceptionDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionDataTest.cs,WriteToEverything,The length of the statement  "            Assert.AreEqual("[Marker \'Exception\'][Marker \'ExceptionType\']type[End]: [Marker \'ExceptionMessage\']message[End] ---> [Marker \'Exception\'][Marker \'ExceptionType\']type[End]: [Marker \'ExceptionMessage\']message[End]\n" " is 226.
Long Statement,Gallio.Tests.Common.Diagnostics,ExceptionDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionDataTest.cs,WriteToEverything,The length of the statement  "                + (useStandardFormatting ? "" : "[Marker \'ExceptionPropertyName\']Prop1[End]: [Marker \'ExceptionPropertyValue\']Value1[End]\n[Marker \'ExceptionPropertyName\']Prop2[End]: [Marker \'ExceptionPropertyValue\']Value2[End]\n") " is 223.
Long Statement,Gallio.Tests.Common.Diagnostics,StackTraceDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\StackTraceDataTest.cs,ConstructsWithCodeElement,The length of the statement  "            mockCodeElement.Stub(x => x.CodeReference).Return(new CodeReference("AssemblyName"' "The.Ultimate.NameSpace"' "TypeName"' "MemberName"' "ParameterName")); " is 154.
Long Statement,Gallio.Tests.Common.Diagnostics,StackTraceDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\StackTraceDataTest.cs,ConstructsWithCodeElement,The length of the statement  "            Assert.AreEqual("[Marker \'StackTrace\']   at MemberName\n   at The.Ultimate.NameSpace.TypeName() in [Marker \'CodeLocation\']C:\\Path\\File.cs:line 123[End][End]"' writer.ToString()); " is 184.
Long Statement,Gallio.Tests.Common.Diagnostics,StackTraceDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\StackTraceDataTest.cs,WriteTo,The length of the statement  "            StackTraceData data = new StackTraceData("   at SomeMethod\r\n   at Gallio.Tests.Model.Diagnostics.StackTraceDataTest.WriteTo() in C:\\Source\\MbUnit\\v3\\src\\Gallio\\Gallio.Tests\\Model\\Diagnostics\\StackTraceDataTest.cs:line 70\r\n   at Gallio.Tests.Model.Diagnostics.StackTraceDataTest.Blah() in C:\\Source\\MbUnit\\v3\\src\\Gallio\\Gallio.Tests\\Model\\Diagnostics\\StackTraceDataTest.cs:line 72\r\n"); " is 408.
Long Statement,Gallio.Tests.Common.Diagnostics,StackTraceDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\StackTraceDataTest.cs,WriteTo,The length of the statement  "            Assert.AreEqual("[Marker \'StackTrace\']   at SomeMethod\n   at Gallio.Tests.Model.Diagnostics.StackTraceDataTest.WriteTo() in [Marker \'CodeLocation\']C:\\Source\\MbUnit\\v3\\src\\Gallio\\Gallio.Tests\\Model\\Diagnostics\\StackTraceDataTest.cs:line 70[End]\n   at Gallio.Tests.Model.Diagnostics.StackTraceDataTest.Blah() in [Marker \'CodeLocation\']C:\\Source\\MbUnit\\v3\\src\\Gallio\\Gallio.Tests\\Model\\Diagnostics\\StackTraceDataTest.cs:line 72[End][End]"' writer.ToString()); " is 482.
Long Statement,Gallio.Tests.Common.Diagnostics,ExceptionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionUtilsTest.cs,CreateInstanceWithoutTargetInvocationException_WhenConstructorSucceeds_ReturnsInstance,The length of the statement  "            object result = ExceptionUtils.CreateInstanceWithoutTargetInvocationException(typeof(object)' includeArgs ? Type.EmptyTypes : null); " is 132.
Long Statement,Gallio.Tests.Common.Diagnostics,ExceptionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionUtilsTest.cs,CreateInstanceWithoutTargetInvocationException_WhenConstructorThrows_ShouldNotWrapTheException,The length of the statement  "                ExceptionUtils.CreateInstanceWithoutTargetInvocationException(typeof(ThrowBoomWhenConstructed)' includeArgs ? Type.EmptyTypes : null); " is 134.
Long Statement,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The length of the statement  "                AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0' " is 127.
Long Statement,Gallio.Tests.Common.Markup.Tags,BinaryAttachmentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\BinaryAttachmentTest.cs,Throw_if_name_is_too_long,The length of the statement  "			Assert.That(() => new BinaryAttachment("aVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"' MimeTypes.Png' new byte[0])'  " is 254.
Long Statement,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenRectangleAreOutOfBounds_Throws,The length of the statement  "            var ex = Assert.Throws<ArgumentOutOfRangeException>(() => bitmapVideoFrame.CopyPixels(rectangle' pixelBuffer' startOffset' stride)); " is 132.
Long Statement,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The length of the statement  "            var ex = Assert.Throws<ArgumentOutOfRangeException>(() => bitmapVideoFrame.CopyPixels(rectangle' pixelBuffer' startOffset' stride)); " is 132.
Long Statement,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStrideIsLessThanWidth_Throws,The length of the statement  "            var ex = Assert.Throws<ArgumentOutOfRangeException>(() => bitmapVideoFrame.CopyPixels(rectangle' pixelBuffer' startOffset' stride)); " is 132.
Long Statement,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenSpaceRequirementsExceedPixelBuffer_Throws,The length of the statement  "                    Assert.Contains(ex.Message' "The combined rectangle dimensions' start offset and stride would cause pixels to be written out of bounds of the pixel buffer."); " is 158.
Long Statement,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The length of the statement  "            BitmapData bitmapData = bitmap.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' PixelFormat.Format32bppRgb); " is 129.
Long Statement,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Constructor_WhenVideoSizeDoesNotMatchGrabberScreenshotsSize_Throws,The length of the statement  "            Assert.Contains(ex.Message' "The video dimensions must be exactly the same as the screenshots obtained by the grabber."); " is 121.
Long Statement,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Constructor_WhenVideoSizeDoesNotMatchGrabberScreenshotsSize_Throws,The length of the statement  "            Assert.Contains(ex.Message' "The video dimensions must be exactly the same as the screenshots obtained by the grabber."); " is 121.
Long Statement,Gallio.Tests.Common.Messaging,TopicPatternTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Messaging\TopicPatternTest.cs,Constructor_WhenPatternContainsInvalidCharacters_Throws,The length of the statement  "            Assert.Contains(ex.Message' "A topic pattern must consist of dot-delimited alphanumeric words with the optional wildcards '*' amd '#'."); " is 137.
Long Statement,Gallio.Tests.Common.Policies,VersionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\VersionPolicyTest.cs,GetVersionNumber_WhenAssemblyIsProvided_ReturnsFileVersionWhenAvailableOrAssemblyVersionOtherwise,The length of the statement  "            var attribs = (AssemblyFileVersionAttribute[])assembly.GetCustomAttributes(typeof(AssemblyFileVersionAttribute)' false); " is 120.
Long Statement,Gallio.Tests.Common.Policies,SpecialPathPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\SpecialPathPolicyTest.cs,GetLocalUserApplicationDataDirectory_ReturnsTempDirectoryOfPartition,The length of the statement  "                Assert.AreEqual(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' @"Gallio\Test")' result.ToString()); " is 140.
Long Statement,Gallio.Tests.Common.Policies,SpecialPathPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\SpecialPathPolicyTest.cs,GetRoamingUserApplicationDataDirectory_ReturnsTempDirectoryOfPartition,The length of the statement  "                Assert.AreEqual(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @"Gallio\Test")' result.ToString()); " is 135.
Long Statement,Gallio.Tests.Common.Policies,SpecialPathPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\SpecialPathPolicyTest.cs,GetCommonApplicationDataDirectory_ReturnsTempDirectoryOfPartition,The length of the statement  "                Assert.AreEqual(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' @"Gallio\Test")' result.ToString()); " is 141.
Long Statement,Gallio.Tests.Common.Policies,UnhandledExceptionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\UnhandledExceptionPolicyTest.cs,PolicyPerformsCorrelationThenReporting,The length of the statement  "            using (IHost host = new IsolatedProcessHostFactory(RuntimeAccessor.Instance).CreateHost(new HostSetup()' new MarkupStreamLogger(TestLog.Default))) " is 146.
Long Statement,Gallio.Tests.Common.Policies,UnhandledExceptionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\UnhandledExceptionPolicyTest.cs,PolicyPerformsCorrelationThenReporting,The length of the statement  "                finalArgs = (CorrelatedExceptionEventArgs)host.GetHostService().Do<object' object>(PolicyPerformsCorrelationThenReportingCallback' null); " is 137.
Long Statement,Gallio.Tests.Common.Policies,UnhandledExceptionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\UnhandledExceptionPolicyTest.cs,PolicyHandlesUnhandledExceptionsAndRecursion,The length of the statement  "            using (IHost host = new IsolatedProcessHostFactory(RuntimeAccessor.Instance).CreateHost(new HostSetup()' new MarkupStreamLogger(TestLog.Default))) " is 146.
Long Statement,Gallio.Tests.Common.Policies,UnhandledExceptionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\UnhandledExceptionPolicyTest.cs,PolicyHandlesUnhandledExceptionsAndRecursion,The length of the statement  "                args = (List<CorrelatedExceptionEventArgs>)host.GetHostService().Do<object' object>(PolicyHandlesUnhandledExceptionsAndRecursionCallback' null); " is 144.
Long Statement,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,GetType,The length of the statement  "                    ITypeInfo[] genericArguments = GenericCollectionUtils.ConvertAllToArray<Type' ITypeInfo>(type.GetGenericArguments()' Reflector.Wrap); " is 133.
Long Statement,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,GetGenericTypeParameter,The length of the statement  "            IGenericParameterInfo wrapper = (IGenericParameterInfo)GetType(parameter.DeclaringType).GenericArguments[parameter.GenericParameterPosition]; " is 141.
Long Statement,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,GetGenericMethodParameter,The length of the statement  "            IGenericParameterInfo wrapper = (IGenericParameterInfo)GetMethod((MethodInfo)parameter.DeclaringMethod).GenericArguments[parameter.GenericParameterPosition]; " is 157.
Long Statement,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,AttributeWrapper,The length of the statement  "            IAttributeInfo info = GenericCollectionUtils.ToArray(GetType(type).GetAttributeInfos(Reflector.Wrap(typeof(SampleAttribute))' true))[index]; " is 140.
Long Statement,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,AttributeWrapper,The length of the statement  "                    Assert.AreEqual(1' fieldValues.Count' "The implementation may return values for uninitialized fields' but there is only one such field."); " is 138.
Long Statement,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,AttributeWrapper,The length of the statement  "                    Assert.AreEqual(1' propertyValues.Count' "The implementation may return values uninitialized properties' but there is only one such field."); " is 141.
Long Statement,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamIsNull_Throws,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => AssemblyUtils.GetAssemblyMetadata((Stream)null' AssemblyMetadataFields.Default)); " is 124.
Long Statement,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenFilePathIsNull_Throws,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => AssemblyUtils.GetAssemblyMetadata((string)null' AssemblyMetadataFields.Default)); " is 124.
Long Statement,Gallio.Tests.Common.Reflection,ReflectionOnlyAssemblyLoaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ReflectionOnlyAssemblyLoaderTest.cs,LoadsAssembliesFromHintPathPreferentially,The length of the statement  "            string binDir = Path.GetDirectoryName(AssemblyUtils.GetAssemblyLocalPath(typeof(ReflectionOnlyAssemblyLoader).Assembly)); " is 121.
Long Statement,Gallio.Tests.Common.Reflection,ReflectionOnlyAssemblyLoaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ReflectionOnlyAssemblyLoaderTest.cs,LoadsAssembliesFromHintPathPreferentially,The length of the statement  "            IAssemblyInfo assembly = loader.ReflectionPolicy.LoadAssembly(new AssemblyName("Gallio")); // would ordinarily be loaded from somewhere else " is 140.
Long Statement,Gallio.Tests.Common.Reflection,ReflectorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ReflectorTest.cs,IsUnresolved_ReturnsTrueForUnresolvedMembersTypes,The length of the statement  "            S member = (S) typeof(S).GetConstructors(BindingFlags.NonPublic | BindingFlags.Instance)[0].Invoke(new object[] { Mocks.Stub<T>() }); " is 133.
Long Statement,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreEquivalent,The length of the statement  "                Assert.AreEqual(Path.GetFileName(AssemblyUtils.GetAssemblyLocalPath(target))' Path.GetFileName(info.Path)' StringComparison.InvariantCultureIgnoreCase); " is 152.
Long Statement,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreEquivalent,The length of the statement  "                Assert.AreEqual(Path.GetFileName(AssemblyUtils.GetAssemblyLocalPath(target))' Path.GetFileName(infoLocation.Path)' StringComparison.InvariantCultureIgnoreCase); " is 160.
Long Statement,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreEquivalent,The length of the statement  "            AreEqualWhenResolved(target.IsGenericMethod ? target.GetGenericMethodDefinition() : null' info.GenericMethodDefinition); " is 120.
Long Statement,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreEquivalent,The length of the statement  "            Assert.AreEqual(target.GenericParameterAttributes & GenericParameterAttributesMask' info.GenericParameterAttributes & GenericParameterAttributesMask); " is 150.
Long Statement,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreTypesEquivalent,The length of the statement  "                BindingFlags constructorFlags = supportsStaticConstructors ? All : BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic; " is 136.
Long Statement,Gallio.Tests.Common.Reflection,BindingRedirectTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyBindingTest.cs,Constructor_WhenOldVersionIsInvalid_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Old version must be a version number like ;1.2.3.4' or a range like '1.0.0.0-1.1.65535.65535'."); " is 126.
Long Statement,Gallio.Tests.Common.Reflection.Impl,CciDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\CciDebugSymbolResolverTest.cs,GetSourceLocationForMethod_ReturnsUnknownIfAssemblyExistsButThereIsNoPDB,The length of the statement  "            CodeLocation codeLocation = new CciDebugSymbolResolver().GetSourceLocationForMethod(typeof(ILogger).Assembly.Location' 0); " is 122.
Long Statement,Gallio.Tests.Common.Reflection.Impl,CciDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\CciDebugSymbolResolverTest.cs,GetSourceLocationForMethod,The length of the statement  "            MethodInfo method = typeof(Sample).GetMethod(methodName' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 149.
Long Statement,Gallio.Tests.Common.Reflection.Impl,ComDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\ComDebugSymbolResolverTest.cs,GetSourceLocationForMethod_ReturnsUnknownIfAssemblyExistsButThereIsNoPDB,The length of the statement  "            CodeLocation codeLocation = new ComDebugSymbolResolver(AvoidLocks).GetSourceLocationForMethod(typeof(ILogger).Assembly.Location' 0); " is 132.
Long Statement,Gallio.Tests.Common.Reflection.Impl,ComDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\ComDebugSymbolResolverTest.cs,GetSourceLocationForMethod_ReturnsUnknownIfMethodTokenNotValid,The length of the statement  "            CodeLocation codeLocation = new ComDebugSymbolResolver(AvoidLocks).GetSourceLocationForMethod(GetType().Assembly.Location' 0); " is 126.
Long Statement,Gallio.Tests.Common.Reflection.Impl,ComDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\ComDebugSymbolResolverTest.cs,GetSourceLocationForMethod,The length of the statement  "            MethodInfo method = typeof(Sample).GetMethod(methodName' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 149.
Long Statement,Gallio.Tests.Common.Reflection.Impl,DefaultXmlDocumentationResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\DefaultXmlDocumentationResolverTest.cs,GetXmlDocumentation_GetsDocumentationForDocumentedMember,The length of the statement  "            Assert.AreEqual("<summary>\nA documented class.\n</summary>\n<remarks>\nThe XML documentation of this test is significant.\n  Including the leading whitespace on this line.\n    And the extra 8 trailing spaces on this line!\n</remarks>"' " is 237.
Long Statement,Gallio.Tests.Common.Reflection.Impl,ReflectorTypeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\ReflectorTypeUtilsTest.cs,GetDefaultValueReturnsDefaultValueForAssociatedTypeCode,The length of the statement  "                Assert.AreEqual(ReflectionUtils.GetDefaultValue(code)' ReflectorTypeUtils.GetDefaultValue(Reflector.Wrap(associatedType))); " is 123.
Long Statement,Gallio.Tests.Common.Reflection.Impl,UnresolvedCodeElementFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\UnresolvedCodeElementFactoryTest.cs,Instance_WhenRuntimeIsDotNet20_ReturnsDotNet20Instance,The length of the statement  "            Assert.IsInstanceOfType<Gallio.Common.Reflection.Impl.DotNet20.UnresolvedCodeElementFactoryInternal>(UnresolvedCodeElementFactory.Instance); " is 140.
Long Statement,Gallio.Tests.Common.Reflection.Impl,XmlDocumentationUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\XmlDocumentationUtilsTest.cs,FormatId_OverloadedMethodWithParameters,The length of the statement  "            Assert.AreEqual("M:MbUnit.TestResources.DocumentedClass.DocumentedMethod(System.Int32'MbUnit.TestResources.DocumentedClass'MbUnit.TestResources.DocumentedClass.GenericNestedClass{System.Int32})"' " is 195.
Long Statement,Gallio.Tests.Common.Reflection.Impl,XmlDocumentationUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\XmlDocumentationUtilsTest.cs,FormatId_GenericMethodWithParameters,The length of the statement  "            Assert.AreEqual("M:MbUnit.TestResources.DocumentedClass.GenericNestedClass`1.DocumentedGenericMethodWithParameters``1(``0'`0'System.Int32)"' " is 140.
Long Statement,Gallio.Tests.Common.Reflection.Impl,XmlDocumentationUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\XmlDocumentationUtilsTest.cs,FormatId_GenericMethodDefinitionWithParameters,The length of the statement  "            Assert.AreEqual("M:MbUnit.TestResources.DocumentedClass.GenericNestedClass`1.DocumentedGenericMethodWithParameters``1(``0'`0'System.Int32)"' " is 140.
Long Statement,Gallio.Tests.Common.Reflection.Impl,XmlDocumentationUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\XmlDocumentationUtilsTest.cs,FormatId_OperatorMethod,The length of the statement  "            Assert.AreEqual("M:MbUnit.TestResources.DocumentedClass.op_Addition(MbUnit.TestResources.DocumentedClass'MbUnit.TestResources.DocumentedClass)"' " is 144.
Long Statement,Gallio.Tests.Common.Reflection.Impl,XmlDocumentationUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\XmlDocumentationUtilsTest.cs,FormatId_ImplicitConversionOperatorMethod,The length of the statement  "            Assert.AreEqual("M:MbUnit.TestResources.DocumentedClass.op_Implicit(MbUnit.TestResources.DocumentedClass)~System.Int32"' " is 120.
Long Statement,Gallio.Tests.Common.Reflection.Impl,XmlDocumentationUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\XmlDocumentationUtilsTest.cs,FormatId_ExplicitConversionOperatorMethod,The length of the statement  "            Assert.AreEqual("M:MbUnit.TestResources.DocumentedClass.op_Explicit(MbUnit.TestResources.DocumentedClass)~System.Double"' " is 121.
Long Statement,Gallio.Tests.Common.Reflection.Impl,XmlDocumentationUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\XmlDocumentationUtilsTest.cs,GetXmlDocumentation_Type,The length of the statement  "            Assert.AreEqual("<summary>\nA documented class.\n</summary>\n<remarks>\nThe XML documentation of this test is significant.\n  Including the leading whitespace on this line.\n    And the extra 8 trailing spaces on this line!\n</remarks>"' " is 237.
Long Statement,Gallio.Tests.Common.Remoting,BinaryIpcChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryIpcChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The length of the statement  "            var hostFactory = (IsolatedAppDomainHostFactory)RuntimeAccessor.ServiceLocator.ResolveByComponentId(IsolatedAppDomainHostFactory.ComponentId); " is 142.
Long Statement,Gallio.Tests.Common.Remoting,BinaryTcpChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryTcpChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The length of the statement  "            var hostFactory = (IsolatedAppDomainHostFactory)RuntimeAccessor.ServiceLocator.ResolveByComponentId(IsolatedAppDomainHostFactory.ComponentId); " is 142.
Long Statement,Gallio.Tests.Common.Remoting,BinaryTcpChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryTcpChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The length of the statement  "                using (BinaryTcpClientChannel clientChannel = new BinaryTcpClientChannel("localhost"' PortNumber' TimeSpan.FromSeconds(30))) " is 124.
Long Statement,Gallio.Tests.Common.Text,WhenDocumentsAreVeryLargeAndContainManyDifferences,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,RunTimeIsBoundedForPathologicalCaseWithNoCommonalities,The length of the statement  "                Assert.LessThan(boundedMillis' unboundedMillis' "The bounded approximated algorithm should be faster than the unbounded precise algorithm."); " is 141.
Long Statement,Gallio.Tests.Common.Text,WhenDocumentsAreVeryLargeAndContainManyDifferences,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,RunWorstCaseDiff,The length of the statement  "                Assert.AreElementsEqual(new[] { new Diff(DiffKind.Change' new Range(0' problemSize)' new Range(0' problemSize)) }' diffSet.Diffs); " is 130.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_collections,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 127.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_missing_attribute_at_the_end,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 127.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_missing_attribute_at_the_end,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.MissingAttribute' XmlPathRoot.Strict.Element(0).Attribute(2)' DiffTargets.Expected) }); " is 133.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_missing_attribute_in_the_middle,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 127.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_missing_attribute_in_the_middle,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(1)' DiffTargets.Actual) }); " is 134.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_exceeding_attribute_at_the_end,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 127.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_exceeding_attribute_at_the_end,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(2)' DiffTargets.Actual) }); " is 134.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_exceeding_attribute_in_the_middle,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 127.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_exceeding_attribute_in_the_middle,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(1)' DiffTargets.Actual) }); " is 134.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_one_unexpected_value,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 127.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_one_unexpected_value,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.MismatchedAttribute' XmlPathRoot.Strict.Element(0).Attribute(1)' DiffTargets.Both) }); " is 132.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_several_unexpected_values,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 127.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_unordered_collections,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' Options.IgnoreAttributesOrder); " is 133.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_unordered_collections_with_missing_attribute,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' Options.IgnoreAttributesOrder); " is 133.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_unordered_collections_with_missing_attribute,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.MissingAttribute' XmlPathRoot.Strict.Element(0).Attribute(0)' DiffTargets.Expected) }); " is 133.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_unordered_collections_with_excess_attribute,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' Options.IgnoreAttributesOrder); " is 133.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_unordered_collections_with_excess_attribute,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(1)' DiffTargets.Actual) }); " is 134.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_unordered_collections_with_unexpected_attribute_value,The length of the statement  "            DiffSet diffSet = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' Options.IgnoreAttributesOrder); " is 133.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_equal_unordered_collections_with_unexpected_attribute_value,The length of the statement  "            AssertDiff(diffSet' new[] { new Diff(DiffType.MismatchedAttribute' XmlPathRoot.Strict.Element(0).Attribute(1)' DiffTargets.Both) }); " is 132.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_same_index,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 120.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_different_index,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 120.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_ignoring_name_case,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' Options.IgnoreAttributesNameCase); " is 129.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_name_differing_by_case,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 120.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_name_differing_by_case,The length of the statement  "            AssertDiff(diff' new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Actual)); " is 123.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_name,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 120.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_name,The length of the statement  "            AssertDiff(diff' new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Actual)); " is 123.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_value_differing_by_case,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 120.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_value_differing_by_case,The length of the statement  "            AssertDiff(diff' new Diff(DiffType.MismatchedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Both)); " is 121.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_ignoring_value_case,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' Options.IgnoreAttributesValueCase); " is 130.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_value,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Element(0)' XmlPathRoot.Strict.Element(0)' XmlOptions.Strict.Value); " is 120.
Long Statement,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_value,The length of the statement  "            AssertDiff(diff' new Diff(DiffType.MismatchedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Both)); " is 121.
Long Statement,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_item_differing_by_name_case,The length of the statement  "            var diff = actual.Diff(expected' XmlPathRoot.Strict.Empty' XmlPathRoot.Strict.Empty' XmlOptions.Custom.IgnoreElementsNameCase.Value); " is 133.
Long Statement,Gallio.Tests.Framework.Assertions,AssertionConditionEvaluatorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionConditionEvaluatorTest.cs,FailureDescribesExpectedResultAndConditionAndParameters,The length of the statement  "            Assert.AreEqual(String.Format("Expected the condition to evaluate to {0}."' expectedResult.ToString().ToLowerInvariant())' failure.Description); " is 144.
Long Statement,Gallio.Tests.Framework.Assertions,AssertionFailureBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureBuilderTest.cs,ShowsExpectedAndActualValueWithDiffs_RepresentationalEquality,The length of the statement  "                new AssertionFailure.LabeledValue("Remark"' "Both values look the same when formatted but they are distinct instances.") " is 120.
Long Statement,Gallio.Tests.Framework.Assertions,AssertionFailureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureTest.cs,ToStringEverything,The length of the statement  "            Assert.AreEqual("Description\nMessage goes here\n\nExpected Value : \"Expected value\"\nActual Value   : \"Actual value\"\nVery Long Label That Will Not Be Padded : \"\"\nx              : 42\n\nSystem.Exception: Boom\n\nSystem.Exception: Kaput\n\nStack goes here\nInner\n"' failure.ToString()); " is 294.
Long Statement,Gallio.Tests.Framework.Assertions,AssertionFailureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureTest.cs,WriteToEverything,The length of the statement  "            Assert.AreEqual("[Marker \'AssertionFailure\'][Section \'Description\']\nMessage goes here\n\n[Marker \'Monospace\'][Marker \'Label\']Expected Value : [End]\"Expected value\"\n[Marker \'Label\']Actual Value   : [End]\"Actual value\"\n[Marker \'Label\']Very Long Label That Will Not Be Padded : [End]\"\"\n[Marker \'Label\']x              : [End]42\n[End]\n[Marker \'Exception\'][Marker \'ExceptionType\']System.Exception[End]: [Marker \'ExceptionMessage\']Boom[End][End]\n\n[Marker \'Exception\'][Marker \'ExceptionType\']System.Exception[End]: [Marker \'ExceptionMessage\']Kaput[End][End]\n\n[Marker \'StackTrace\']Stack goes here[End]\n[Marker \'AssertionFailure\'][Section \'Inner\']\n[End]\n[End][End]\n[End]"' writer.ToString()); " is 734.
Long Statement,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,StartRecording_WithCaptureParametersIncludingZoomFactor_CapturesZoomedVideo,The length of the statement  "                Assert.Throws<ScreenshotNotAvailableException>(() => Capture.StartRecording(new CaptureParameters() { Zoom = 0.25 }' 5)' " is 120.
Long Statement,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,AutoEmbedScreenshot_EmbedsImageWhenTriggered,The length of the statement  "            TestStepRun run = Runner.GetPrimaryTestStepRun(CodeReference.CreateFromMember(typeof(AutoEmbedScreenshotSamples).GetMethod(testName))); " is 135.
Long Statement,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,AutoEmbedRecording_EmbedsVideoWhenTriggered,The length of the statement  "            TestStepRun run = Runner.GetPrimaryTestStepRun(CodeReference.CreateFromMember(typeof(AutoEmbedRecordingSamples).GetMethod(testName))); " is 134.
Long Statement,Gallio.Tests.Framework,CompositePatternAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CompositePatternAttributeTest.cs,SampleRunnerOutcome,The length of the statement  "            var run = Runner.GetPrimaryTestStepRun(CodeReference.CreateFromMember(typeof(CompositePatternAttributeSample).GetMethod(testMethodName))); " is 138.
Long Statement,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The length of the statement  "            Assert.AreEqual(0' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(42)' new NonReflexiveGenericComparableStub(42))); " is 134.
Long Statement,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The length of the statement  "            Assert.AreEqual(1' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(56)' new NonReflexiveGenericComparableStub(42))); " is 134.
Long Statement,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The length of the statement  "            Assert.AreEqual(-1' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(32)' new NonReflexiveGenericComparableStub(42))); " is 135.
Long Statement,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,WhenActionThrowsANonTestException_RunReturnsFailedAndLogsTheException,The length of the statement  "            Assert.AreEqual(TestOutcome.Failed' sandbox.Run(writer' delegate { throw new InvalidOperationException("Foo"); }' null)); " is 121.
Long Statement,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,WhenActionThrowsTestExceptionWithExcludedStackTraceAndDefaultMessage_RunReturnsOutputAndLogsNothing,The length of the statement  "            Assert.AreEqual(TestOutcome.Canceled' sandbox.Run(writer' delegate { throw new SilentTestException(TestOutcome.Canceled); }' null)); " is 132.
Long Statement,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,WhenActionThrowsTestExceptionWithExcludedStackTraceAndNonDefaultMessage_RunReturnsOutputAndLogsTheMessageButNotTheException,The length of the statement  "            Assert.AreEqual(TestOutcome.Error' sandbox.Run(writer' delegate { throw new SilentTestException(TestOutcome.Error' "Message."); }' null)); " is 138.
Long Statement,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,WhenActionFailsAndADescriptionWasProvided_TheDescriptionAppearsInTheLog,The length of the statement  "            Assert.AreEqual(TestOutcome.Failed' sandbox.Run(writer' delegate { throw new InvalidOperationException("Foo"); }' "SetUp")); " is 124.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,EachTestStepHasItsOwnChildContext,The length of the statement  "            Assert.AreSame(stepFinishedContext' stepRunningContext' "Should return same context on exit from step as was active during step."); " is 131.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ExecutionWithUnexpiredTimeout,The length of the statement  "            Assert.AreEqual("RunStep_NameActionAndTimeout_ExecutionWithUnexpiredTimeout"' context.TestStep.CodeElement.CodeReference.MemberName); " is 133.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ExecutionWithExpiredTimeout,The length of the statement  "            Assert.AreEqual("RunStep_NameActionAndTimeout_ExecutionWithExpiredTimeout"' context.TestStep.CodeElement.CodeReference.MemberName); " is 131.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionTimeoutIsTestCaseAndCodeElement_ArgumentValidation,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => TestStep.RunStep(null' () => { }' TimeSpan.FromSeconds(60)' false' Reflector.Wrap(typeof(TestStepTest)))); " is 149.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionTimeoutIsTestCaseAndCodeElement_ArgumentValidation,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => TestStep.RunStep("Abc"' null' TimeSpan.FromSeconds(60)' false' Reflector.Wrap(typeof(TestStepTest)))); " is 145.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionTimeoutIsTestCaseAndCodeElement_ArgumentValidation,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => TestStep.RunStep("Abc"' () => { }' TimeSpan.FromSeconds(-1)' false' Reflector.Wrap(typeof(TestStepTest)))); " is 156.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStepAndVerifyOutcome_ExecutionWithCorrectOutcome,The length of the statement  "            Assert.AreEqual("RunStepAndVerifyOutcome_ExecutionWithCorrectOutcome"' context.TestStep.CodeElement.CodeReference.MemberName); " is 126.
Long Statement,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStepAndVerifyOutcome_ExecutionWithIncorrectOutcome,The length of the statement  "            Assert.Contains(context.TestStep.CodeElement.CodeReference.MemberName' "RunStepAndVerifyOutcome_ExecutionWithIncorrectOutcome"); " is 128.
Long Statement,Gallio.Tests.Framework,TestContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestContextTest.cs,AutoExecute_WhenActionIsNull_Throws,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => TestContext.CurrentContext.AutoExecute(TriggerEvent.TestFailed' null' () => { })); " is 125.
Long Statement,Gallio.Tests.Framework,TestContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestContextTest.cs,AutoExecute_ExecutesActionWhenTriggeredAndCleanupAlways,The length of the statement  "            TestStepRun run = Runner.GetPrimaryTestStepRun(CodeReference.CreateFromMember(typeof(AutoExecuteSamples).GetMethod(testName))); " is 127.
Long Statement,Gallio.Tests.Framework,TestLogTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestLogTest.cs,AssertContainsStaticVersionsOfDeclaredMethods,The length of the statement  "            foreach (MethodInfo sourceMethod in sourceType.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly)) " is 131.
Long Statement,Gallio.Tests.Framework,TestLogTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestLogTest.cs,AssertContainsStaticVersionsOfDeclaredMethods,The length of the statement  "                Type[] parameterTypes = GenericCollectionUtils.ConvertAllToArray<ParameterInfo' Type>(sourceMethod.GetParameters()' delegate(ParameterInfo parameter) " is 149.
Long Statement,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The length of the statement  "            Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput); " is 144.
Long Statement,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The length of the statement  "            Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput); " is 151.
Long Statement,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The length of the statement  "            Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput); " is 152.
Long Statement,Gallio.Tests.Framework.Pattern,ProcessTestExecutorIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\PatternTestExecutorIntegrationTest.cs,WritesMessageAndSetsOutcomeToSkippedWhenNoDataForParameterizedTest,The length of the statement  "                AssertLogContains(run' "Test skipped because it is parameterized but no data was provided."' MarkupStreamNames.Warnings); " is 121.
Long Statement,Gallio.Tests.Framework.Pattern,PatternTestFrameworkStackDepthTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\PatternTestFrameworkStackDepthTest.cs,StackDepthIsBounded,The length of the statement  "            var primaryTestStepRun = Runner.GetPrimaryTestStepRun(CodeReference.CreateFromMember(sampleType.GetMethod(methodName))); " is 120.
Long Statement,Gallio.Tests.Framework.Pattern,TestAssemblyExecutionParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\TestAssemblyExecutionParametersTest.cs,DefaultTestCaseTimeoutMustBeNullOrNonNegative,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => TestAssemblyExecutionParameters.DefaultTestCaseTimeout = TimeSpan.FromMinutes(-1)); " is 132.
Long Statement,Gallio.Tests.Integration,StubFormatterIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Integration\StubFormatterIntegrationTest.cs,StubFormatterIsUsedWhenRuntimeIsNotInitialized,The length of the statement  "            appDomainSetup.ApplicationBase = Path.GetDirectoryName(AssemblyUtils.GetFriendlyAssemblyLocation(remoteCodeType.Assembly)); " is 123.
Long Statement,Gallio.Tests.Integration,StubFormatterIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Integration\StubFormatterIntegrationTest.cs,StubFormatterIsUsedWhenRuntimeIsNotInitialized,The length of the statement  "                RemoteCode remoteCode = (RemoteCode)appDomain.CreateInstanceAndUnwrap(remoteCodeType.Assembly.FullName' remoteCodeType.FullName); " is 129.
Long Statement,Gallio.Tests.Integration,StubContextIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Integration\StubContextIntegrationTest.cs,StubContextIsUsedWhenRuntimeIsNotInitialized,The length of the statement  "            appDomainSetup.ApplicationBase = Path.GetDirectoryName(AssemblyUtils.GetFriendlyAssemblyLocation(remoteCodeType.Assembly)); " is 123.
Long Statement,Gallio.Tests.Integration,StubContextIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Integration\StubContextIntegrationTest.cs,StubContextIsUsedWhenRuntimeIsNotInitialized,The length of the statement  "                RemoteCode remoteCode = (RemoteCode)appDomain.CreateInstanceAndUnwrap(remoteCodeType.Assembly.FullName' remoteCodeType.FullName); " is 129.
Long Statement,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,HandlesDegenerateCaseWithZeroProviders,The length of the statement  "            List<IList<IDataItem>> items = new List<IList<IDataItem>>(CombinatorialJoinStrategy.Instance.Join(providers' bindingsPerProvider' true)); " is 137.
Long Statement,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The length of the statement  "                List<IList<IDataItem>> items = new List<IList<IDataItem>>(CombinatorialJoinStrategy.Instance.Join(providers' bindingsPerProvider' true)); " is 137.
Long Statement,Gallio.Tests.Framework.Data,CsvReaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CsvReaderTest.cs,ReadRecords,The length of the statement  "            Assert.Over.Pairs(expectedRecords' actualRecords' (expectedRecord' actualRecord) => Assert.AreEqual((string[])expectedRecord' actualRecord)); " is 141.
Long Statement,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The length of the statement  "            ItemSequenceDataSet dataSet1 = new ItemSequenceDataSet(new IDataItem[] { new ScalarDataItem<int>(1' null' false)' new ScalarDataItem<int>(2' null' false) }' 1); " is 160.
Long Statement,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The length of the statement  "            ItemSequenceDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[] { new ScalarDataItem<int>(10' null' false)' new ScalarDataItem<int>(20' null' false) }' 1); " is 162.
Long Statement,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,GetItemsAppliesNoTranslationIfNoAliasesAreDefined,The length of the statement  "                Expect.Call(dataSet.GetItems(null' true)).IgnoreArguments().Do((GetItemsDelegate)delegate(ICollection<DataBinding> bindings' " is 124.
Long Statement,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,GetItemsAppliesIndexAliasTranslation,The length of the statement  "                Expect.Call(dataSet.GetItems(null' true)).IgnoreArguments().Do((GetItemsDelegate)delegate(ICollection<DataBinding> bindings' " is 124.
Long Statement,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The length of the statement  "                Expect.Call(strategy.Join(null' null' true)).IgnoreArguments().Do((JoinDelegate)delegate(IList<IDataProvider> joinProviders' IList<ICollection<DataBinding>> joinBindingsPerProvider' " is 181.
Long Statement,Gallio.Tests.Framework.Data,MergedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MergedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The length of the statement  "                Expect.Call(strategy.Merge(null' null' false)).IgnoreArguments().Do((MergeDelegate)delegate(IList<IDataProvider> mergeProviders' ICollection<DataBinding> mergeBindings' " is 168.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,ConstructorThrowsWhenMissingGenericParamSlotForGenericMethod,The length of the statement  "            new MethodInvocationSpec(typeof(NonGenericClass)' NonGenericClassGenericMethodInfo' slotValues' NullConverter.Instance); " is 120.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,ConstructorThrowsWhenGenericParamSlotDoesNotBelongToTheMethod,The length of the statement  "            new MethodInvocationSpec(typeof(NonGenericClass)' NonGenericClassGenericMethodInfo' slotValues' NullConverter.Instance); " is 120.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeInstanceMethodThrowsWhenInstanceIsOfWrongType,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(NonGenericClass)' NonGenericClassEmptyMethodInfo' slotValues' NullConverter.Instance); " is 146.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeInstanceMethodWithGenericMethod,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeInstanceMethodWithGenericMethodInstantiation,The length of the statement  "            IMethodInfo method = Reflector.Wrap(type.GetMethod("InstanceMethod"' PublicInstance).Resolve(true).MakeGenericMethod(typeof(int))); " is 131.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeInstanceMethodWithGenericMethodInstantiation,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeInstanceMethodWithGenericMethodOnGenericTypeDefn,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeStaticMethodWithGenericMethod,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeStaticMethodWithGenericMethodInstantiation,The length of the statement  "            IMethodInfo method = Reflector.Wrap(type.GetMethod("StaticMethod"' PublicStatic).Resolve(true).MakeGenericMethod(typeof(int))); " is 127.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeStaticMethodWithGenericMethodInstantiation,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeStaticMethodWithGenericMethodOnGenericTypeDefn,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,InvokeThrowsUnwrappedException,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(NonGenericClass)' method' slotValues' NullConverter.Instance); " is 122.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,SpecPropertiesDescribeTheMethod,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,FormatDescribesTheMethod,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(GenericClass<int>)' method' slotValues' NullConverter.Instance); " is 124.
Long Statement,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,FormatStringIsJustTheEntityIfThereAreNoSlots,The length of the statement  "            MethodInvocationSpec spec = new MethodInvocationSpec(typeof(NonGenericClass)' NonGenericClassEmptyMethodInfo' slotValues' NullConverter.Instance); " is 146.
Long Statement,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsIfTypeIsAGenericParameter,The length of the statement  "            new ObjectCreationSpec(GenericClassDefInfo.GenericArguments[0]' EmptyArray<KeyValuePair<ISlotInfo' object>>.Instance' Mocks.Stub<IConverter>()); " is 144.
Long Statement,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsIfTypeIsAnArray,The length of the statement  "            new ObjectCreationSpec(EmptyClassInfo.MakeArrayType(1)' EmptyArray<KeyValuePair<ISlotInfo' object>>.Instance' Mocks.Stub<IConverter>()); " is 136.
Long Statement,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsIfTypeIsAPointer,The length of the statement  "            new ObjectCreationSpec(EmptyClassInfo.MakePointerType()' EmptyArray<KeyValuePair<ISlotInfo' object>>.Instance' Mocks.Stub<IConverter>()); " is 137.
Long Statement,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsIfTypeIsAByRef,The length of the statement  "            new ObjectCreationSpec(EmptyClassInfo.MakeByRefType()' EmptyArray<KeyValuePair<ISlotInfo' object>>.Instance' Mocks.Stub<IConverter>()); " is 135.
Long Statement,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,SpecPropertiesDescribeTheObject,The length of the statement  "            List<KeyValuePair<PropertyInfo' object>> propertyValues = new List<KeyValuePair<PropertyInfo' object>>(spec.ResolvedPropertyValues); " is 132.
Long Statement,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,FormatDescribesTheObject,The length of the statement  "            Assert.AreEqual("Foo<int>(1): fieldValue=2' Property=3"' spec.Format("Foo"' RuntimeAccessor.ServiceLocator.Resolve<IFormatter>())); " is 131.
Long Statement,Gallio.Tests.Framework.Data,ObjectDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectDataBinderTest.cs,AccessorThrowsIfItemIsNull,The length of the statement  "            IDataAccessor accessor = binder.Register(new DataBindingContext(Mocks.Stub<IConverter>())' Mocks.Stub<IDataSourceResolver>()); " is 126.
Long Statement,Gallio.Tests.Framework.Data,ObjectDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectDataBinderTest.cs,AccessorCreatesNewObjectsThroughSlotBinding,The length of the statement  "            source.AddDataSet(new ItemSequenceDataSet(new IDataItem[] { new ListDataItem<object>(new object[] { 42' typeof(int) }' null' false) }' 2)); " is 139.
Long Statement,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,HandlesDegenerateCaseWithZeroProviders,The length of the statement  "            List<IList<IDataItem>> items = new List<IList<IDataItem>>(PairwiseJoinStrategy.Instance.Join(providers' bindingsPerProvider' true)); " is 132.
Long Statement,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The length of the statement  "                List<IList<IDataItem>> items = new List<IList<IDataItem>>(PairwiseJoinStrategy.Instance.Join(providers' bindingsPerProvider' true)); " is 132.
Long Statement,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,HandlesDegenerateCaseWithMoreThanOneProviderButOneIsEmpty,The length of the statement  "                List<IList<IDataItem>> items = new List<IList<IDataItem>>(PairwiseJoinStrategy.Instance.Join(providers' bindingsPerProvider' true)); " is 132.
Long Statement,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,JoinProducesCoveringsOfAllPairs,The length of the statement  "            List<IList<IDataItem>> itemLists = new List<IList<IDataItem>>(PairwiseJoinStrategy.Instance.Join(providers' bindingsPerProvider' true)); " is 136.
Long Statement,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,JoinProducesCoveringsOfAllPairs,The length of the statement  "            Assert.LessThanOrEqualTo(values.Length' empiricalUpperBound' "There were more combinations produced than previously measured.  Has the algorithm gotten worse?"); " is 161.
Long Statement,Gallio.Tests.Framework.Data,ScalarDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ScalarDataBinderTest.cs,AccessorObtainsAValueFromTheRow,The length of the statement  "                Assert.IsTrue(context.DataSets.Contains(source)' "The data sets list should contain the source that was resolved during binder registration."); " is 143.
Long Statement,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The length of the statement  "                List<IList<IDataItem>> items = new List<IList<IDataItem>>(SequentialJoinStrategy.Instance.Join(providers' bindingsPerProvider' true)); " is 134.
Long Statement,Gallio.Tests.Framework.Data,XmlDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\XmlDataSetTest.cs,ProducesMetadata,The length of the statement  "            document.LoadXml("<root><rows><row a=\"42\" b=\"x\"><metadata xmlns=\"http://www.gallio.org/\"><entry key=\"Metadata\" value=\"abc\"/></metadata></row><row a=\"53\" b=\"y\"><metadata xmlns=\"http://www.gallio.org/\"><entry key=\"Metadata\" value=\"def\"/></metadata></row></rows></root>"); " is 289.
Long Statement,Gallio.Tests.Model,ModelNormalizationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\ModelNormalizationTest.cs,TestDataShouldBeNormalized,The length of the statement  "            TestData testData = Runner.GetTestData(CodeReference.CreateFromMember(typeof(ModelNormalizationSample).GetMethod("Test"))); " is 123.
Long Statement,Gallio.Tests.Model,ModelNormalizationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\ModelNormalizationTest.cs,TestStepRunShouldBeNormalized,The length of the statement  "            TestStepRun testStepRun = Runner.GetPrimaryTestStepRun(CodeReference.CreateFromMember(typeof(ModelNormalizationSample).GetMethod("Test"))); " is 139.
Long Statement,Gallio.Tests.Model,ModelNormalizationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\ModelNormalizationTest.cs,AnnotationShouldBeNormalized,The length of the statement  "            AnnotationData annotation = Report.TestModel.Annotations.Find(x => x.CodeReference == CodeReference.CreateFromMember(typeof(ModelNormalizationSample).GetMethod("Test"))); " is 170.
Long Statement,Gallio.Tests.Model,ModelNormalizationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\ModelNormalizationTest.cs,AnnotationShouldBeNormalized,The length of the statement  "            Assert.AreEqual("Annotation message with invalid characters *?*."' annotation.Message' "Annotation message should be normalized."); " is 131.
Long Statement,Gallio.Tests.Model,ModelNormalizationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\ModelNormalizationTest.cs,AnnotationShouldBeNormalized,The length of the statement  "            Assert.AreEqual("Annotation details with invalid characters *?*."' annotation.Details' "Annotation details should be normalized."); " is 131.
Long Statement,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,PopulateTestTree,The length of the statement  "            var testIsolationProvider = (ITestIsolationProvider) RuntimeAccessor.ServiceLocator.ResolveByComponentId("Gallio.LocalTestIsolationProvider"); " is 142.
Long Statement,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,PopulateTestTree_CapturesTestStructureAndBasicMetadata,The length of the statement  "            Assert.AreEqual(SimpleFixtureAssembly.Location' assemblyTest.Metadata.GetValue(MetadataKeys.File)' StringComparison.OrdinalIgnoreCase); " is 135.
Long Statement,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,PopulateTestTree_CapturesTestStructureAndBasicMetadata,The length of the statement  "            Assert.AreEqual(new CodeReference(SimpleFixtureAssembly.FullName' SimpleFixtureNamespace' SimpleFixtureNamespace + ".SimpleTest"' null' null)' " is 142.
Long Statement,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,PopulateTestTree_CapturesTestStructureAndBasicMetadata,The length of the statement  "            Assert.AreEqual(new CodeReference(SimpleFixtureAssembly.FullName' SimpleFixtureNamespace' SimpleFixtureNamespace + ".SimpleTest"' "Pass"' null)' " is 144.
Long Statement,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,PopulateTestTree_CapturesTestStructureAndBasicMetadata,The length of the statement  "            Assert.AreEqual(new CodeReference(SimpleFixtureAssembly.FullName' SimpleFixtureNamespace' SimpleFixtureNamespace + ".SimpleTest"' "Fail"' null)' " is 144.
Long Statement,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,MetadataImport_XmlDocumentation,The length of the statement  "            Assert.AreEqual("<summary>\nA simple test fixture.\n</summary>"' test.Metadata.GetValue(MetadataKeys.XmlDocumentation)); " is 120.
Long Statement,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,MetadataImport_AssemblyAttributes,The length of the statement  "            Assert.AreEqual("A sample test assembly for " + TestFrameworkHandle.GetTraits().Name + "."' assemblyTest.Metadata.GetValue(MetadataKeys.Description)); " is 150.
Long Statement,Gallio.Tests.Model.Filters,FilterSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterSetTest.cs,RulesConstructor_WhenSuccessful_InitializesProperties,The length of the statement  "            var filterRules = new[] { new FilterRule<object>(FilterRuleType.Exclusion' new AnyFilter<object>())' new FilterRule<object>(FilterRuleType.Inclusion' new NoneFilter<object>()) }; " is 178.
Long Statement,Gallio.Tests.Model.Filters,FilterSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterSetTest.cs,HasInclusionRules_WhenOnlyExclusionRules_ReturnsFalse,The length of the statement  "            var filterSet = new FilterSet<object>(new[] { new FilterRule<object>(FilterRuleType.Exclusion' new AnyFilter<object>()) }); " is 123.
Long Statement,Gallio.Tests.Model.Filters,FilterParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterParserTest.cs,OrFilter,The length of the statement  "            Assert.AreEqual(parsedFilter.ToString()' "Or({ Type(Equality('" + type1 + "')' True)' Type(Equality('" + type2 + "')' True) })"); " is 129.
Long Statement,Gallio.Tests.Model.Filters,FilterParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterParserTest.cs,AndFilter,The length of the statement  "            Assert.AreEqual(parsedFilter.ToString()' "And({ Type(Equality('" + type1 + "')' True)' Type(Equality('" + type2 + "')' True) })"); " is 130.
Long Statement,Gallio.Tests.Model.Filters,FilterParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterParserTest.cs,NotFilter,The length of the statement  "            Assert.AreEqual(parsedFilter.ToString()' "And({ Type(Equality('" + type1 + "')' True)' Not(Type(Equality('" + type2 + "')' True)) })"); " is 135.
Long Statement,Gallio.Tests.Model.Filters,FilterParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterParserTest.cs,ComplexFilter2,The length of the statement  "            string filter = "not ((Type: " + fixture1TypeName + ") or (Type: " + fixture2TypeName + ")) and Type:" + fixture3TypeName + ""; " is 127.
Long Statement,Gallio.Tests.Model.Filters,FilterParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterParserTest.cs,ComplexFilter2,The length of the statement  "            Assert.AreEqual(parsedFilter.ToString()' "And({ Not(Or({ Type(Equality('" + fixture1TypeName + "')' True)' Type(Equality('" + fixture2TypeName + "')' True) }))' Type(Equality('" + fixture3TypeName + "')' True) })"); " is 215.
Long Statement,Gallio.Tests.Model.Filters,TypeFilterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\TypeFilterTest.cs,IsMatchWithAssemblyQualifiedName,The length of the statement  "                new TypeFilter<ITestDescriptor>(new EqualityFilter<string>(type.AssemblyQualifiedName)' includeDerivedTypes).IsMatch(component)); " is 129.
Long Statement,Gallio.Tests.Model.Filters,TypeFilterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\TypeFilterTest.cs,IsMatchConsidersDotDelimiterNestedTypes,The length of the statement  "            Assert.IsTrue(new TypeFilter<ITestDescriptor>(new EqualityFilter<string>(typeof(NestedTypeFilterTest).FullName.Replace('+'' '.'))' false).IsMatch(component)); " is 158.
Long Statement,Gallio.Tests.Reports.Vtl,FormatHtmlHelperTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\FormatHtmlHelperTest.cs,Flatten,The length of the statement  "            Assert.AreEqual("<root><parent a='123'>blah blah</parent><parent b='456'><child>abcefg</child></parent></root>"' flat); // Semantics should be unchanged. " is 153.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Constructs_with_null_preferenceManager_should_throw_exception,The length of the statement  "            new VtlReportFormatter(null' "ext"' MimeTypes.PlainText' new DirectoryInfo("content")' "vm"' EmptyArray<string>.Instance' true); " is 128.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Constructs_with_null_extension_should_throw_exception,The length of the statement  "            new VtlReportFormatter(fakeReportPreferenceManager' null' MimeTypes.PlainText' new DirectoryInfo("content")' "vm"' EmptyArray<string>.Instance' true); " is 150.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Constructs_with_null_contentType_should_throw_exception,The length of the statement  "            new VtlReportFormatter(fakeReportPreferenceManager' "ext"' null' new DirectoryInfo("content")' "vm"' EmptyArray<string>.Instance' true); " is 136.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Constructs_with_null_resourceDirectory_should_throw_exception,The length of the statement  "            new VtlReportFormatter(fakeReportPreferenceManager' "ext"' MimeTypes.PlainText' null' "vm"' EmptyArray<string>.Instance' true); " is 127.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Constructs_with_null_templatePath_should_throw_exception,The length of the statement  "            new VtlReportFormatter(fakeReportPreferenceManager' "ext"' MimeTypes.PlainText' new DirectoryInfo("content")' null' EmptyArray<string>.Instance' true); " is 151.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Constructs_with_null_resourcePaths_should_throw_exception,The length of the statement  "            new VtlReportFormatter(fakeReportPreferenceManager' "ext"' MimeTypes.PlainText' new DirectoryInfo("content")' "vm"' null' true); " is 128.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Constructs_with_null_resource_containing_null_element_should_throw_exception,The length of the statement  "            new VtlReportFormatter(fakeReportPreferenceManager' "ext"' MimeTypes.PlainText' new DirectoryInfo("content")' "vm"' new string[] { null }' true); " is 145.
Long Statement,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Format,The length of the statement  "            var formatter = new VtlReportFormatter(fakeReportPreferenceManager' "ext"' MimeTypes.PlainText' new DirectoryInfo("content")' "Gallio.Tests.Reports.SampleTemplate.vm"' EmptyArray<string>.Instance' false); " is 204.
Long Statement,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The length of the statement  "            TestLog.WriteLine("Video encoding {2} frames at {0}x{1} took {3}s"' width' height' frames' stopwatch.Elapsed.TotalSeconds); " is 123.
Long Statement,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The length of the statement  "            TestLog.EmbedPlainText("Plain Text"' "This is some plain text.\nLalalala...\n\tIndented with TAB.\nThis should all appear to be preformatted."); " is 144.
Long Statement,Gallio.Tests.Reports,MHtmlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\MHtmlReportFormatterTest.cs,FormatWritesTheArchivedReport,The length of the statement  "                        .Do((FormatDelegate)delegate(IReportWriter innerReportWriter' ReportFormatterOptions innerFormatterOptions' IProgressMonitor innerProgressMonitor) " is 146.
Long Statement,Gallio.Tests.Reports,MHtmlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\MHtmlReportFormatterTest.cs,FormatWritesTheArchivedReport,The length of the statement  "                            using (StreamWriter contentWriter = new StreamWriter(innerReportWriter.ReportContainer.OpenWrite("Foo.html"' MimeTypes.Html' Encoding.UTF8))) " is 141.
Long Statement,Gallio.Tests.Reports,MHtmlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\MHtmlReportFormatterTest.cs,FormatWritesTheArchivedReport,The length of the statement  "                            using (StreamWriter contentWriter = new StreamWriter(innerReportWriter.ReportContainer.OpenWrite("Foo.css"' null' null))) " is 121.
Long Statement,Gallio.Tests.Reports,MHtmlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\MHtmlReportFormatterTest.cs,FormatWritesTheArchivedReport,The length of the statement  "                    Assert.Contains(reportContents' Convert.ToBase64String(Encoding.UTF8.GetBytes("<html><body>Some HTML</body></html>")' Base64FormattingOptions.InsertLineBreaks)); " is 161.
Long Statement,Gallio.Tests.Reports,MHtmlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\MHtmlReportFormatterTest.cs,FormatWritesTheArchivedReport,The length of the statement  "                    Assert.Contains(reportContents' Convert.ToBase64String(Encoding.UTF8.GetBytes("An attachment.")' Base64FormattingOptions.InsertLineBreaks)); " is 140.
Long Statement,Gallio.Tests.Reports,MHtmlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\MHtmlReportFormatterTest.cs,FormatWritesTheArchivedReport,The length of the statement  "                    Assert.Contains(reportContents' Convert.ToBase64String(Encoding.UTF8.GetBytes("#Some CSS.")' Base64FormattingOptions.InsertLineBreaks)); " is 136.
Long Statement,Gallio.Tests.Reports,XmlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\XmlReportFormatterTest.cs,FormatWritesTheReportWithTheSpecifiedAttachmentContentDisposition,The length of the statement  "                options.AddProperty(XmlReportFormatter.AttachmentContentDispositionOption' AttachmentContentDisposition.Link.ToString()); " is 121.
Long Statement,Gallio.Tests.Reports,XsltReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\XsltReportFormatterTest.cs,TheDefaultAttachmentContentDispositionIsAbsent,The length of the statement  "            XsltReportFormatter formatter = new XsltReportFormatter("ext"' MimeTypes.PlainText' new DirectoryInfo("content")' "xslt"' new string[] { "res1"' "res2" }); " is 155.
Long Statement,Gallio.Tests.Reports,XsltReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\XsltReportFormatterTest.cs,TheDefaultAttachmentContentDispositionCanBeChanged,The length of the statement  "            XsltReportFormatter formatter = new XsltReportFormatter("ext"' MimeTypes.PlainText' new DirectoryInfo("content")' "xslt"' new string[] { "res1"' "res2" }); " is 155.
Long Statement,Gallio.Tests.Reports,XsltReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\XsltReportFormatterTest.cs,FormatWritesTheTransformedReport,The length of the statement  "            string resourcePath = Path.Combine(Path.GetDirectoryName(AssemblyUtils.GetAssemblyLocalPath(GetType().Assembly))' @"..\Reports"); " is 129.
Long Statement,Gallio.Tests.Reports,XsltReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\XsltReportFormatterTest.cs,FormatWritesTheTransformedReport,The length of the statement  "                    XsltReportFormatter formatter = new XsltReportFormatter("ext"' MimeTypes.PlainText' new DirectoryInfo(resourcePath)' "Diagnostic.xslt"' new string[] { "MbUnitLogo.png" }); " is 171.
Long Statement,Gallio.Tests.Reports,XsltReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\XsltReportFormatterTest.cs,FormatWritesTheTransformedReport,The length of the statement  "                    reportFormatterOptions.AddProperty(XsltReportFormatter.AttachmentContentDispositionOption' AttachmentContentDisposition.Link.ToString()); " is 137.
Long Statement,Gallio.Tests.Runtime.Caching,WithInitiallyNonExistentDiskCache,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Caching\SimpleDiskCacheTest.cs,GroupsAreNotCreatedImplicitlyWhenAFileIsOpenedWithoutOptionToCreate,The length of the statement  "                Assert.Throws<DiskCacheException>(delegate { cache.Groups["A"].OpenFile("file"' FileMode.Open' FileAccess.ReadWrite' FileShare.None); }); " is 137.
Long Statement,Gallio.Tests.Runtime.Caching,WithInitiallyNonExistentDiskCache,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Caching\SimpleDiskCacheTest.cs,GetFileInfoReturnsAFileWithinTheGroup,The length of the statement  "                Assert.AreEqual(Path.Combine(cache.Groups["A"].Location.FullName' "Abc\\def.txt")' cache.Groups["A"].GetFileInfo("Abc\\def.txt").FullName); " is 139.
Long Statement,Gallio.Tests.Runtime.Caching,WithInitiallyNonExistentDiskCache,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Caching\SimpleDiskCacheTest.cs,GetSubdirectoryInfoReturnsADirectoryWithinTheGroup,The length of the statement  "                Assert.AreEqual(Path.Combine(cache.Groups["A"].Location.FullName' "Abc\\def")' cache.Groups["A"].GetSubdirectoryInfo("Abc\\def").FullName); " is 139.
Long Statement,Gallio.Tests.Runtime.Caching,WithInitiallyNonExistentDiskCache,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Caching\SimpleDiskCacheTest.cs,OpenFileReallyOpensAFileAndCreatesItsContainingDirectory,The length of the statement  "                using (StreamWriter writer = new StreamWriter(cache.Groups["A"].OpenFile("foo\\bar.txt"' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))) " is 151.
Long Statement,Gallio.Tests.Runtime.ConsoleSupport,CommandLineArgumentAttributeTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\ConsoleSupport\CommandLineArgumentAttributeTests.cs,LocalizedArgumentAttributeMultipleSynonyms,The length of the statement  "            attribute.Synonyms = new[] { "#CommandLineArgumentAttributeTests_Synonym1"' "#CommandLineArgumentAttributeTests_Synonym2" }; " is 124.
Long Statement,Gallio.Tests.Runtime.ConsoleSupport,CommandLineOutputTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\ConsoleSupport\CommandLineOutputTests.cs,PrintArgumentWithEnumType,The length of the statement  "                "  /enum_argument:<enum>\r\n                     desc  The available options are: 'Test1'' 'Test2''\r\n                     'Test3'.  (Short form: /ea)\r\n"; " is 157.
Long Statement,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Recursive_conversions_attempts_are_denied,The length of the statement  "            mockRule.Expect(x => x.GetConversionCost(typeof(int)' typeof(string)' converter)).Do((GetConversionCostDelegate)delegate " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,CachingPluginLoaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\CachingPluginLoaderTest.cs,PopulateCatalog_WhenPluginXmlContainsPreprocessorInstructions_AppliesThem,The length of the statement  "            string pluginContents = "<plugin pluginId=\"pluginId\" xmlns=\"http://www.gallio.org/\"><traits><?ifdef A?><name>A</name><?endif?><?ifdef B?><property>B</property><?endif?></traits></plugin>"; " is 192.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentHandleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ComponentHandleTest.cs,CreateInstanceGeneric_WhenServiceTypeDoesNotMatchDescriptor_Throws,The length of the statement  "            var ex = Assert.Throws<ArgumentException>(() => ComponentHandle.CreateInstance<object' DummyTraits>(componentDescriptor)); " is 122.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentHandleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ComponentHandleTest.cs,CreateInstanceGeneric_WhenServiceTypeDoesNotMatchDescriptor_Throws,The length of the statement  "            Assert.Contains(ex.Message' "The component descriptor is not compatible with the requested component handle type because it has a different service type or traits type."); " is 171.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentHandleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ComponentHandleTest.cs,CreateInstanceGeneric_WhenTraitsTypeDoesNotMatchDescriptor_Throws,The length of the statement  "            var ex = Assert.Throws<ArgumentException>(() => ComponentHandle.CreateInstance<ServiceDescriptor' Traits>(componentDescriptor)); " is 128.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentHandleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ComponentHandleTest.cs,CreateInstanceGeneric_WhenTraitsTypeDoesNotMatchDescriptor_Throws,The length of the statement  "            Assert.Contains(ex.Message' "The component descriptor is not compatible with the requested component handle type because it has a different service type or traits type."); " is 171.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentHandleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ComponentHandleTest.cs,CreateStub_WhenComponentIdIsNull_Throws,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => ComponentHandle.CreateStub<DummyService' DummyTraits>(null' component' traits)); " is 123.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentHandleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ComponentHandleTest.cs,CreateStub_WhenComponentIsNull_Throws,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => ComponentHandle.CreateStub<DummyService' DummyTraits>(componentId' null' traits)); " is 125.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentHandleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ComponentHandleTest.cs,CreateStub_WhenTraitsIsNull_Throws,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => ComponentHandle.CreateStub<DummyService' DummyTraits>(null' component' traits)); " is 123.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolveByServiceLocation,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenArgumentIsNullAndTypeIsScalarOfNonGenericComponentHandle_Throws,The length of the statement  "                var ex = Assert.Throws<RuntimeException>(() => dependencyResolver.ResolveDependency("service"' typeof(ComponentHandle)' null)); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolveByServiceLocation,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenArgumentIsNullAndTypeIsArrayOfGenericComponentHandle_ResolvesDependencyWithServiceLocatorByTypeAndReturnsAllMatches,The length of the statement  "                serviceLocator.Expect(x => x.ResolveAllHandles(typeof(IService))).Return(new ComponentHandle[] { componentHandle1' componentHandle2 }); " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolveByServiceLocation,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenArgumentIsNullAndTypeIsArrayOfNonGenericComponentHandle_Throws,The length of the statement  "                var ex = Assert.Throws<RuntimeException>(() => dependencyResolver.ResolveDependency("service"' typeof(ComponentHandle[])' null)); " is 129.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolveByConfiguration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenArgumentSpecifiesComponentIdThatDoesNotActuallyImplementServiceType_Throws,The length of the statement  "                var ex = Assert.Throws<RuntimeException>(() => dependencyResolver.ResolveDependency("service"' typeof(IService)' "${componentId}")); " is 132.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolveByConfiguration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenArgumentSpecifiesComponentIdThatDoesNotActuallyImplementServiceType_Throws,The length of the statement  "                Assert.AreEqual(string.Format("Could not inject component with id 'componentId' into a dependency of type '{0}' because it is of the wrong type even though the component was explicitly specified using the '${{component.id}}' property value syntax."' " is 249.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolveByConfiguration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenDependencyIsOfTypeAssemblySignature_ConvertsPropertyStringToAssemblySignature,The length of the statement  "                var result = dependencyResolver.ResolveDependency("assemblySig"' typeof(AssemblySignature)' "Name' Version=1.0.0.0-2.0.0.0"); " is 125.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginLoaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginLoaderTest.cs,PopulateCatalog_WhenPluginFileContainsPreprocessorInstructions_AppliesThem,The length of the statement  "            string pluginContents = "<plugin pluginId=\"pluginId\" xmlns=\"http://www.gallio.org/\"><traits><?ifdef A?><name>A</name><?endif?><?ifdef B?><property>B</property><?endif?></traits></plugin>"; " is 192.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginLoaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginLoaderTest.cs,PopulateCatalog_WhenPluginXmlContainsPreprocessorInstructions_AppliesThem,The length of the statement  "            string pluginContents = "<plugin pluginId=\"pluginId\" xmlns=\"http://www.gallio.org/\"><traits><?ifdef A?><name>A</name><?endif?><?ifdef B?><property>B</property><?endif?></traits></plugin>"; " is 192.
Long Statement,Gallio.Tests.Runtime.Extensibility,RegistryResourceLocatorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryResourceLocatorTest.cs,ResourceResourcePath_WhenResourceUriIsInPluginSchemeAndPluginCannotBeResolved_Throws,The length of the statement  "            var ex = Assert.Throws<RuntimeException>(() => locator.ResolveResourcePath(new Uri("plugin://pluginId/PluginBase/somefile.txt"))); " is 130.
Long Statement,Gallio.Tests.Runtime.Extensibility,RegistryResourceLocatorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryResourceLocatorTest.cs,ResourceResourcePath_WhenResourceUriIsInPluginSchemeAndPluginCannotBeResolved_Throws,The length of the statement  "            Assert.AreEqual("Could not resolve resource uri 'plugin://pluginid/PluginBase/somefile.txt' because no plugin appears to be registered with the requested id."' ex.Message); " is 172.
Long Statement,Gallio.Tests.Runtime.Extensibility,RegistryResourceLocatorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryResourceLocatorTest.cs,ResourceResourcePath_WhenResourceUriIsInUnrecognized_Throws,The length of the statement  "            Assert.AreEqual("Could not resolve resource uri 'bad-scheme:///somefile.txt' because the scheme was not recognized.  The uri scheme must be 'file' or 'plugin'."' ex.Message); " is 174.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsSatisfied_BuildsTheObjectWithTheResolvedDependency,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithRequiredDependencyOnService)' new PropertySet()); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsSatisfied_BuildsTheObjectWithTheResolvedDependency,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("service"' typeof(IService)' null)).Return(DependencyResolution.Satisfied(service)); " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsNotSatisfied_Throws,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithRequiredDependencyOnService)' new PropertySet()); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsNotSatisfied_Throws,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("service"' typeof(IService)' null)).Return(DependencyResolution.Unsatisfied()); " is 130.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsNotSatisfied_Throws,The length of the statement  "                Assert.AreEqual(string.Format("Could not resolve required dependency 'service' of type '{0}'."' typeof(IService))' ex.Message); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsNotSatisfiedDueToException_Throws,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithRequiredDependencyOnService)' new PropertySet()); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsNotSatisfiedDueToException_Throws,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("service"' typeof(IService)' null)).Throw(new InvalidOperationException("Boom")); " is 132.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithNoParameterValueAndItIsNotSatisfiedDueToException_Throws,The length of the statement  "                Assert.AreEqual(string.Format("Could not resolve required dependency 'service' of type '{0}' due to an exception."' typeof(IService))' ex.Message); " is 147.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasOptionalDependencyWithNoParameterValueAndItIsSatisfied_BuildsTheObjectWithTheResolvedDependency,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithOptionalDependencyOnService)' new PropertySet()); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasOptionalDependencyWithNoParameterValueAndItIsSatisfied_BuildsTheObjectWithTheResolvedDependency,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("Service"' typeof(IService)' null)).Return(DependencyResolution.Satisfied(service)); " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasOptionalDependencyWithNoParameterValueAndItIsNotSatisfied_BuildsTheObjectWithoutTheResolvedDependency,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithOptionalDependencyOnService)' new PropertySet()); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasOptionalDependencyWithNoParameterValueAndItIsNotSatisfied_BuildsTheObjectWithoutTheResolvedDependency,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("Service"' typeof(IService)' null)).Return(DependencyResolution.Unsatisfied()); " is 130.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasOptionalDependencyWithNoParameterValueAndItIsNotSatisfiedDueToException_Throws,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithOptionalDependencyOnService)' new PropertySet()); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasOptionalDependencyWithNoParameterValueAndItIsNotSatisfiedDueToException_Throws,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("Service"' typeof(IService)' null)).Throw(new InvalidOperationException("Boom")); " is 132.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasOptionalDependencyWithNoParameterValueAndItIsNotSatisfiedDueToException_Throws,The length of the statement  "                Assert.AreEqual(string.Format("Could not resolve optional dependency 'Service' of type '{0}' due to an exception."' typeof(IService))' ex.Message); " is 147.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithAParameterValueAndItIsSatisfied_BuildsTheObjectWithTheResolvedDependency,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithRequiredDependencyOnProperty)' new PropertySet() " is 126.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasRequiredDependencyWithAParameterValueAndItIsSatisfied_BuildsTheObjectWithTheResolvedDependency,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("property"' typeof(string)' "value")).Return(DependencyResolution.Satisfied("value")); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasMultipleConstructors_UsesPublicConstructorWithMostParameters,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("service"' typeof(IService)' null)).Return(DependencyResolution.Satisfied(service)); " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasMultipleConstructors_UsesPublicConstructorWithMostParameters,The length of the statement  "                dependencyResolver.Expect(x => x.ResolveDependency("property"' typeof(string)' "value")).Return(DependencyResolution.Satisfied("value")); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasNoPublicConstructors_Throws,The length of the statement  "                var objectFactory = new ObjectFactory(dependencyResolver' typeof(ComponentWithNoPublicConstructors)' new PropertySet()); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentHasNoPublicConstructors_Throws,The length of the statement  "                Assert.AreEqual(string.Format("Type '{0}' does not have any public constructors."' typeof(ComponentWithNoPublicConstructors))' ex.Message); " is 139.
Long Statement,Gallio.Tests.Runtime.Extensibility,DependencyInjection,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\ObjectFactoryTest.cs,CreateInstance_WhenComponentIsAbstract_Throws,The length of the statement  "                Assert.AreEqual(string.Format("Type '{0}' is abstract and cannot be instantiated."' typeof(AbstractComponent))' ex.Message); " is 124.
Long Statement,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenServiceRegistrationWellFormed_RegistersTheService,The length of the statement  "                registry.Expect(x => x.RegisterService(null)).Callback(Enlist(serviceRegistrations)).Return(MockRepository.GenerateStub<IServiceDescriptor>()); " is 143.
Long Statement,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenServiceRegistrationFails_Throws,The length of the statement  "                registry.Expect(x => x.RegisterPlugin(null)).IgnoreArguments().Return(MockRepository.GenerateStub<IPluginDescriptor>()); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenComponentRegistrationWellFormed_RegistersTheComponent,The length of the statement  "                registry.Expect(x => x.RegisterComponent(null)).Callback(Enlist(componentRegistrations)).Return(MockRepository.GenerateStub<IComponentDescriptor>()); " is 149.
Long Statement,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenComponentRegistrationFails_Throws,The length of the statement  "                registry.Expect(x => x.RegisterPlugin(null)).IgnoreArguments().Return(MockRepository.GenerateStub<IPluginDescriptor>()); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenComponentRefersToUnregisteredService_Throws,The length of the statement  "                registry.Expect(x => x.RegisterPlugin(null)).IgnoreArguments().Return(MockRepository.GenerateStub<IPluginDescriptor>()); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenComponentRefersToUnregisteredService_Throws,The length of the statement  "                Assert.AreEqual("Could not register component 'componentId' of plugin 'pluginId' because it implements service 'serviceId' which was not found in the registry."' ex.Message); " is 174.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingPluginDependencies,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenPluginDependenciesPresent_RegistersPluginsInTopologicallySortedOrder,The length of the statement  "                registry.Expect(x => x.RegisterPlugin(null)).Callback(Enlist(pluginRegistrations)).Return(MockRepository.GenerateStub<IPluginDescriptor>()).Repeat.Times(4); " is 156.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingPluginDependencies,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenPluginDependencyCycleExists_Throws,The length of the statement  "                Assert.AreEqual("Could not topologically sort the following plugins either due to dependency cycles or duplicate dependencies: 'plugin2Id'' 'plugin1Id'."' ex.Message); " is 167.
Long Statement,Gallio.Tests.Runtime.Extensibility,ProbingForAssembliesAndDisablingPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenAssemblyCodeBaseIsRelativeToPluginBaseDirectoryAndExists_DoesNotDisablePlugin,The length of the statement  "                var baseDirectory = new DirectoryInfo(Path.GetDirectoryName(AssemblyUtils.GetFriendlyAssemblyCodeBase(typeof(IRuntime).Assembly))); " is 131.
Long Statement,Gallio.Tests.Runtime.Extensibility,ProbingForAssembliesAndDisablingPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenAssemblyHasACodeBaseButIsNotFoundByProbing_DisablesPlugin,The length of the statement  "                    Assemblies = { new Assembly("ThisAssemblyCannotBeFoundByProbing") { CodeBase = "ThisAssemblyCannotBeFoundByProbing.dll" } }' " is 124.
Long Statement,Gallio.Tests.Runtime.Extensibility,ProbingForAssembliesAndDisablingPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenAssemblyHasACodeBaseButIsNotFoundByProbing_DisablesPlugin,The length of the statement  "                pluginDescriptor.Expect(x => x.Disable("Could not find assembly 'ThisAssemblyCannotBeFoundByProbing' after probing for its code base in 'C:\\ThisAssemblyCannotBeFoundByProbing.dll'' 'C:\\bin\\ThisAssemblyCannotBeFoundByProbing.dll'' 'C:\\probing\\ThisAssemblyCannotBeFoundByProbing.dll'' 'C:\\bin\\probing\\ThisAssemblyCannotBeFoundByProbing.dll'.")); " is 351.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,Resolve_WhenServiceTypeNotRegistered_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,Resolve_WhenServiceTypeRegisteredButNoComponents_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,Resolve_WhenServiceTypeRegisteredButMoreThanOneComponent_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there are more than one of them registered and enabled so the request is ambiguous."); " is 199.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,Resolve_WhenServiceTypeMapsToExactlyOneComponentButItIsDisabled_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveGeneric_WhenServiceTypeNotRegistered_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveGeneric_WhenServiceTypeRegisteredButNoComponents_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveGeneric_WhenServiceTypeRegisteredButMoreThanOneComponent_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there are more than one of them registered and enabled so the request is ambiguous."); " is 199.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveGeneric_WhenServiceTypeMapsToExactlyOneComponentButItIsDisabled_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveByComponentId_WhenComponentNotRegistered_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component with id 'componentId' because it does not appear to be registered."); " is 126.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveByComponentId_WhenComponentRegisteredButItIsDisabled_ReturnsResolvedComponent,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component with id 'componentId' because it has been disabled.  Reason: "); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandle_WhenServiceTypeNotRegistered_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandle_WhenServiceTypeRegisteredButNoComponents_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandle_WhenServiceTypeRegisteredButMoreThanOneComponent_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there are more than one of them registered and enabled so the request is ambiguous."); " is 199.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandle_WhenServiceTypeMapsToExactlyOneComponentButItIsDisabled_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandleGeneric_WhenServiceTypeNotRegistered_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandleGeneric_WhenServiceTypeRegisteredButNoComponents_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandleGeneric_WhenServiceTypeRegisteredButMoreThanOneComponent_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there are more than one of them registered and enabled so the request is ambiguous."); " is 199.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandleGeneric_WhenServiceTypeMapsToExactlyOneComponentButItIsDisabled_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component for service type '" + typeof(DummyService) + "' because there do not appear to be any components registered and enabled for that service type."); " is 202.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandleByComponentId_WhenComponentNotRegistered_Throws,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component with id 'componentId' because it does not appear to be registered."); " is 126.
Long Statement,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveHandleByComponentId_WhenComponentRegisteredButItIsDisabled_ReturnsComponentHandle,The length of the statement  "                Assert.Contains(ex.Message' "Could not resolve component with id 'componentId' because it has been disabled.  Reason: "); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,FakeRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,RegisterPlugin,The length of the statement  "                var plugin = RegisterPlugin(new PluginRegistration(pluginId' new TypeName(typeof(DefaultPlugin))' new DirectoryInfo(@"C:\")) " is 124.
Long Statement,Gallio.Tests.Runtime.Extensibility,FakeRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,RegisterComponent,The length of the statement  "                var component = RegisterComponent(new ComponentRegistration(plugin' service' componentId' new TypeName(componentType))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,SingletonHandlerFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\SingletonHandlerFactoryTest.cs,CreateHandler_WhenArgumentsValid_ReturnsAHandlerThatGeneratesTheSameComponentInstanceEachTime,The length of the statement  "            Assert.AreSame(instance1' instance2' "Should return same instance each time because the component is considered a singleton."); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,InstanceHandlerFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\InstanceHandlerFactoryTest.cs,CreateHandler_WhenInstanceIsNotOfRequestedType_Throws,The length of the statement  "            Assert.AreEqual("Could not satisfy contract of type 'System.Int32' using pre-manufactured instance of type 'System.String'."' ex.Message); " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegistryPlugin_WhenRegistrationContainsNullAssemblyBinding_Throws,The length of the statement  "                var pluginRegistration = new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegistryPlugin_WhenRegistrationContainsNullPluginDependency_Throws,The length of the statement  "                var pluginRegistration = new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegistryPlugin_WhenRegistrationContainsNullProbingPath_Throws,The length of the statement  "                var pluginRegistration = new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenArgumentsValid_RegistersThePluginAndReturnsItsDescriptor,The length of the statement  "                var dependentPlugin = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 144.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenArgumentsValid_RegistersThePluginAndReturnsItsDescriptor,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterService_WhenArgumentsValid_RegistersTheServiceAndReturnsItsDescriptor,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenArgumentsValid_RegistersTheComponentAndReturnsItsDescriptor,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenArgumentsValid_RegistersTheComponentAndReturnsItsDescriptor,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenArgumentsValid_RegistersTheComponentAndReturnsItsDescriptor,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin2' "serviceId"' new TypeName("Service' Assembly"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenArgumentsValid_RegistersTheComponentAndReturnsItsDescriptor,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin2' service' "componentId"' new TypeName("Component' Assembly")) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenArgumentsValidButNoComponentTypeNameProvided_UsesTheDefaultComponentTypeSepcifiedByTheService,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenPluginIdNotUnique_Throws,The length of the statement  "                registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenPluginIdNotUnique_Throws,The length of the statement  "                    registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenPluginDependencyBelongsToDifferentRegistry_Throws,The length of the statement  "                var foreignPlugin = foreignRegistry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 148.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenPluginDependencyListNotClosed_AutomaticallyAddsIndirectDependency,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenPluginDependencyListNotClosed_AutomaticallyAddsIndirectDependency,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")) " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterPlugin_WhenPluginDependencyListNotClosed_AutomaticallyAddsIndirectDependency,The length of the statement  "                var plugin3 = registry.RegisterPlugin(new PluginRegistration("plugin3Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")) " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterService_WhenPluginBelongsToDifferentRegistry_Throws,The length of the statement  "                var foreignPlugin = foreignRegistry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 148.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterService_WhenServiceIdNotUnique_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterService_WhenServiceIdNotUnique_Throws,The length of the statement  "                    registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); // same service id " is 125.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterService_WhenServiceTypeNameNotUnique_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterService_WhenServiceTypeNameNotUnique_Throws,The length of the statement  "                    registry.RegisterService(new ServiceRegistration(plugin' "differentServiceId"' new TypeName("Service' Assembly"))); // same service type " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterService_WhenServiceTypeNameNotUnique_Throws,The length of the statement  "                Assert.Contains(ex.Message' "There is already a service registered with type name 'Service' Assembly'.  This service has id 'differentServiceId' and the other service has id 'serviceId'."); " is 189.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenPluginBelongsToDifferentRegistry_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenPluginBelongsToDifferentRegistry_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenPluginBelongsToDifferentRegistry_Throws,The length of the statement  "                var foreignPlugin = foreignRegistry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 148.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenPluginBelongsToDifferentRegistry_Throws,The length of the statement  "                    registry.RegisterComponent(new ComponentRegistration(foreignPlugin' service' "componentId"' new TypeName("Component' Assembly"))); " is 130.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToDifferentRegistry_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToDifferentRegistry_Throws,The length of the statement  "                var foreignPlugin = foreignRegistry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 148.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToDifferentRegistry_Throws,The length of the statement  "                var foreignService = foreignRegistry.RegisterService(new ServiceRegistration(foreignPlugin' "serviceId"' new TypeName("Service' Assembly"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToDifferentRegistry_Throws,The length of the statement  "                    registry.RegisterComponent(new ComponentRegistration(plugin' foreignService' "componentId"' new TypeName("Component' Assembly"))); " is 130.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToPluginNotIndicatedAsAPluginDependency_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToPluginNotIndicatedAsAPluginDependency_Throws,The length of the statement  "                var foreignPlugin = registry.RegisterPlugin(new PluginRegistration("foreignPluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 148.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToPluginNotIndicatedAsAPluginDependency_Throws,The length of the statement  "                var foreignService = registry.RegisterService(new ServiceRegistration(foreignPlugin' "foreignServiceId"' new TypeName("Service' Assembly"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToPluginNotIndicatedAsAPluginDependency_Throws,The length of the statement  "                    registry.RegisterComponent(new ComponentRegistration(plugin' foreignService' "componentId"' new TypeName("Component' Assembly"))); " is 130.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenServiceBelongsToPluginNotIndicatedAsAPluginDependency_Throws,The length of the statement  "                Assert.Contains(ex.Message' "The service belongs to a plugin that was not declared as a dependency of the plugin that provides this component.  Plugin 'pluginId' should declare a dependency on plugin 'foreignPluginId'."); " is 221.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenComponentIdNotUnique_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenComponentIdNotUnique_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenComponentIdNotUnique_Throws,The length of the statement  "                registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName("Component' Assembly"))); " is 123.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenComponentIdNotUnique_Throws,The length of the statement  "                    registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName("Component' Assembly"))); " is 123.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenComponentMissingComponentTypeAndTheServiceDoesNotHaveADefaultComponentType_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenComponentMissingComponentTypeAndTheServiceDoesNotHaveADefaultComponentType_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,Registration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,RegisterComponent_WhenComponentMissingComponentTypeAndTheServiceDoesNotHaveADefaultComponentType_Throws,The length of the statement  "                Assert.Contains(ex.Message' "The specified service descriptor does not have a default component type name so the component registration must specify a component type name but it does not."); " is 190.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Indexer_WhenPluginIdIsRegistered_ReturnsPlugin,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Indexer_WhenServiceIdIsRegistered_ReturnsService,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Indexer_WhenServiceIdIsRegistered_ReturnsService,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetByServiceType_WhenServiceTypeIsRegistered_ReturnsService,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetByServiceType_WhenServiceTypeIsRegistered_ReturnsService,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetByServiceTypeName_WhenServiceTypeNameIsRegistered_ReturnsService,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetByServiceTypeName_WhenServiceTypeNameIsRegistered_ReturnsService,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Indexer_WhenComponentIdIsRegistered_ReturnsComponent,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Indexer_WhenComponentIdIsRegistered_ReturnsComponent,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Indexer_WhenComponentIdIsRegistered_ReturnsComponent,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName("Component' Assembly"))); " is 139.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceId_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceId_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceId_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var component1 = registry.RegisterComponent(new ComponentRegistration(plugin' service' "component1Id"' new TypeName("Component' Assembly"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceId_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var component2 = registry.RegisterComponent(new ComponentRegistration(plugin' service' "component2Id"' new TypeName("Component' Assembly"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceId_WhenComponentsNotRegistered_ReturnsEmptyList,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceType_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceType_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceType_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var component1 = registry.RegisterComponent(new ComponentRegistration(plugin' service' "component1Id"' new TypeName("Component' Assembly"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceType_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var component2 = registry.RegisterComponent(new ComponentRegistration(plugin' service' "component2Id"' new TypeName("Component' Assembly"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceType_WhenComponentsNotRegistered_ReturnsEmptyList,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceTypeName_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceTypeName_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceTypeName_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var component1 = registry.RegisterComponent(new ComponentRegistration(plugin' service' "component1Id"' new TypeName("Component1' Assembly"))); " is 142.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceTypeName_WhenComponentsRegistered_ReturnsComponentList,The length of the statement  "                var component2 = registry.RegisterComponent(new ComponentRegistration(plugin' service' "component2Id"' new TypeName("Component2' Assembly"))); " is 142.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentLookup,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,FindByServiceTypeName_WhenComponentsNotRegistered_ReturnsEmptyList,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorSearchPaths,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetSearchPaths_WhenResourcePathIsEmpty_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("InvalidPlugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorSearchPaths,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetSearchPaths_WhenResourcePathIsNull_ReturnsBinAndProbingPaths,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("InvalidPlugin' Assembly")' new DirectoryInfo(@"C:\")) " is 139.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorSearchPaths,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetSearchPaths_WhenResourcePathIsRelative_ReturnsBinAndProbingPathsWithResourcePathAppended,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("InvalidPlugin' Assembly")' new DirectoryInfo(@"C:\")) " is 139.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorSearchPaths,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,GetSearchPaths_WhenResourcePathIsAbsolute_ReturnsResourcePathItself,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("InvalidPlugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginType_WhenTypeIsInvalid_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("InvalidPlugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 141.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginType_WhenTypeIsValid_ReturnsType,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\"))); " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(IPlugin))' Is.Equal(typeof(DummyPlugin))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(IPlugin))' Is.Equal(typeof(DummyPlugin))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenComponentHasDependencyOnTraits_OwnTraitsAreResolved,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenComponentHasDependencyOnTraits_OwnTraitsAreResolved,The length of the statement  "                var args = handlerFactory.GetArgumentsForCallsMadeOn(x => x.CreateHandler(null' null' null' null)' x => x.IgnoreArguments()); " is 125.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenComponentHasDependencyOnPluginDescriptor_OwnPluginDescriptorIsResolved,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginHandler_WhenComponentHasDependencyOnPluginDescriptor_OwnPluginDescriptorIsResolved,The length of the statement  "                var args = handlerFactory.GetArgumentsForCallsMadeOn(x => x.CreateHandler(null' null' null' null)' x => x.IgnoreArguments()); " is 125.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(PluginTraits))' Is.Equal(typeof(PluginTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 143.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(PluginTraits))' Is.Equal(typeof(PluginTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 143.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePlugin_WhenWellFormed_ReturnsPluginObject,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePlugin_WhenWellFormed_ReturnsPluginObject,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(IPlugin))' Is.Equal(typeof(DummyPlugin))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePlugin_WhenActivationFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePlugin_WhenActivationFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(IPlugin))' Is.Equal(typeof(DummyPlugin))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginTraits_WhenWellFormed_ReturnsPluginTraitsObject,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginTraits_WhenWellFormed_ReturnsPluginTraitsObject,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(PluginTraits))' Is.Equal(typeof(PluginTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 143.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginTraits_WhenActivationFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName(typeof(DummyPlugin))' new DirectoryInfo(@"C:\")) " is 133.
Long Statement,Gallio.Tests.Runtime.Extensibility,PluginDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolvePluginTraits_WhenActivationFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(PluginTraits))' Is.Equal(typeof(PluginTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 143.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveServiceType_WhenTypeIsInvalid_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveServiceType_WhenTypeIsInvalid_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("InvalidService' Assembly"))); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveServiceType_WhenTypeIsValid_ReturnsType,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveServiceType_WhenTypeIsValid_ReturnsType,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeIsInvalid_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeIsInvalid_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("InvalidService' Assembly"))); " is 127.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeHasTraitsAttribute_ReturnsIndicatedTraitsType,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeHasTraitsAttribute_ReturnsIndicatedTraitsType,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithTraits)))); " is 131.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeDoesNotHaveTraitsAttribute_ReturnsDefaultTraitsType,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeDoesNotHaveTraitsAttribute_ReturnsDefaultTraitsType,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeHasInvalidTraitsAttribute_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ServiceDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsType_WhenServiceTypeHasInvalidTraitsAttribute_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithInvalidTraits)))); " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentType_WhenTypeIsInvalid_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentType_WhenTypeIsInvalid_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentType_WhenTypeIsInvalid_Throws,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName("InvalidComponent' Assembly"))); " is 146.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentType_WhenTypeIsValid_ReturnsType,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentType_WhenTypeIsValid_ReturnsType,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentType_WhenTypeIsValid_ReturnsType,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent)))); " is 140.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(DummyService))' Is.Equal(typeof(DummyComponent))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 145.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(DummyService))' Is.Equal(typeof(DummyComponent))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 145.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnTraits_OwnTraitsAreResolved,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnTraits_OwnTraitsAreResolved,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithTraits)))); " is 131.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnTraits_OwnTraitsAreResolved,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponentWithTraits))) " is 148.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnTraits_OwnTraitsAreResolved,The length of the statement  "                var args = handlerFactory.GetArgumentsForCallsMadeOn(x => x.CreateHandler(null' null' null' null)' x => x.IgnoreArguments()); " is 125.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnComponentDescriptor_OwnComponentDescriptorIsResolved,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnComponentDescriptor_OwnComponentDescriptorIsResolved,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithTraits)))); " is 131.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnComponentDescriptor_OwnComponentDescriptorIsResolved,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponentWithTraits))) " is 148.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnComponentDescriptor_OwnComponentDescriptorIsResolved,The length of the statement  "                var args = handlerFactory.GetArgumentsForCallsMadeOn(x => x.CreateHandler(null' null' null' null)' x => x.IgnoreArguments()); " is 125.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentHandler_WhenComponentHasDependencyOnComponentDescriptor_OwnComponentDescriptorIsResolved,The length of the statement  "                var dependencyResolution = suppliedDependencyResolver.ResolveDependency("descriptor"' typeof(IComponentDescriptor)' null); " is 122.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithTraits))) " is 129.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactoryFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(Traits))' Is.Equal(typeof(DummyTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithTraits))) " is 129.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveTraitsHandler_WhenHandlerFactorySucceeds_ReturnsHandler,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(Traits))' Is.Equal(typeof(DummyTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenWellFormed_ReturnsComponentObject,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenWellFormed_ReturnsComponentObject,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenWellFormed_ReturnsComponentObject,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenWellFormed_ReturnsComponentObject,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(DummyService))' Is.Equal(typeof(DummyComponent))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 145.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenActivationFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenActivationFails_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyService)))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenActivationFails_Throws,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponent_WhenActivationFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(DummyService))' Is.Equal(typeof(DummyComponent))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 145.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenWellFormed_ReturnsComponentTraitsObject,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenWellFormed_ReturnsComponentTraitsObject,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithTraits))) " is 129.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenWellFormed_ReturnsComponentTraitsObject,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenWellFormed_ReturnsComponentTraitsObject,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(Traits))' Is.Equal(typeof(DummyTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenActivationFails_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenActivationFails_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName(typeof(DummyServiceWithTraits))) " is 129.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenActivationFails_Throws,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin' service' "componentId"' new TypeName(typeof(DummyComponent))) " is 138.
Long Statement,Gallio.Tests.Runtime.Extensibility,ComponentDescriptorResolution,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,ResolveComponentTraits_WhenActivationFails_Throws,The length of the statement  "                    .Constraints(Is.NotNull()' Is.Equal(typeof(Traits))' Is.Equal(typeof(DummyTraits))' Is.Equal(new PropertySet() { { "Name"' "Value" } })) " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Disable_WhenReasonIsNull_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,Disable_WhenAlreadyDisabled_OverwritesTheReason,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginNotDisabled_ReturnsFalse,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabledDirectly_ReturnsTrue,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabledIndirectlyViaDependency_ReturnsTrue,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabledIndirectlyViaDependency_ReturnsTrue,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")) " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginNotDisabled_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabled_ReturnsTheReason,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabledIndirectlyViaDependency_DescribesTheDependency,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 136.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledPlugins,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabledIndirectlyViaDependency_DescribesTheDependency,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\")) " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginNotDisabled_ReturnsFalse,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginNotDisabled_ReturnsFalse,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabled_ReturnsTrue,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabled_ReturnsTrue,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginNotDisabled_Throws,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginNotDisabled_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabled_ReturnsTheReason,The length of the statement  "                var plugin = registry.RegisterPlugin(new PluginRegistration("pluginId"' new TypeName("Plugin' Assembly")' new DirectoryInfo(@"C:\"))); " is 134.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledServices,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabled_ReturnsTheReason,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin' "serviceId"' new TypeName("Service' Assembly"))); " is 120.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginAndServiceNotDisabled_ReturnsFalse,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin1' Assembly")' new DirectoryInfo(@"C:\"))); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginAndServiceNotDisabled_ReturnsFalse,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin2' Assembly")' new DirectoryInfo(@"C:\")) " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginAndServiceNotDisabled_ReturnsFalse,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin1' "serviceId"' new TypeName("Service' Assembly"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginAndServiceNotDisabled_ReturnsFalse,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin2' service' "componentId"' new TypeName("Component' Assembly"))); " is 140.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabled_ReturnsTrue,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin1' Assembly")' new DirectoryInfo(@"C:\"))); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabled_ReturnsTrue,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin2' Assembly")' new DirectoryInfo(@"C:\")) " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabled_ReturnsTrue,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin1' "serviceId"' new TypeName("Service' Assembly"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenPluginDisabled_ReturnsTrue,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin2' service' "componentId"' new TypeName("Component' Assembly"))); " is 140.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenServiceDisabled_ReturnsTrue,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin1' Assembly")' new DirectoryInfo(@"C:\"))); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenServiceDisabled_ReturnsTrue,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin2' Assembly")' new DirectoryInfo(@"C:\")) " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenServiceDisabled_ReturnsTrue,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin1' "serviceId"' new TypeName("Service' Assembly"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,IsDisabled_WhenServiceDisabled_ReturnsTrue,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin2' service' "componentId"' new TypeName("Component' Assembly"))); " is 140.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginAndServiceNotDisabled_Throws,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin1' Assembly")' new DirectoryInfo(@"C:\"))); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginAndServiceNotDisabled_Throws,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin2' Assembly")' new DirectoryInfo(@"C:\")) " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginAndServiceNotDisabled_Throws,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin1' "serviceId"' new TypeName("Service' Assembly"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginAndServiceNotDisabled_Throws,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin2' service' "componentId"' new TypeName("Component' Assembly"))); " is 140.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabled_ReturnsTheReason,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin1' Assembly")' new DirectoryInfo(@"C:\"))); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabled_ReturnsTheReason,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin2' Assembly")' new DirectoryInfo(@"C:\")) " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabled_ReturnsTheReason,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin1' "serviceId"' new TypeName("Service' Assembly"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenPluginDisabled_ReturnsTheReason,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin2' service' "componentId"' new TypeName("Component' Assembly"))); " is 140.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenServiceDisabled_DescribesTheDependency,The length of the statement  "                var plugin1 = registry.RegisterPlugin(new PluginRegistration("plugin1Id"' new TypeName("Plugin1' Assembly")' new DirectoryInfo(@"C:\"))); " is 137.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenServiceDisabled_DescribesTheDependency,The length of the statement  "                var plugin2 = registry.RegisterPlugin(new PluginRegistration("plugin2Id"' new TypeName("Plugin2' Assembly")' new DirectoryInfo(@"C:\")) " is 135.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenServiceDisabled_DescribesTheDependency,The length of the statement  "                var service = registry.RegisterService(new ServiceRegistration(plugin1' "serviceId"' new TypeName("Service' Assembly"))); " is 121.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenServiceDisabled_DescribesTheDependency,The length of the statement  "                var component = registry.RegisterComponent(new ComponentRegistration(plugin2' service' "componentId"' new TypeName("Component' Assembly"))); " is 140.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenServiceDisabled_DescribesTheDependency,The length of the statement  "                // Assert.AreEqual("The service implemented by this component was disabled.  Reason: The plugin that provides this service was disabled.  Reason: The reason"' component.DisabledReason); " is 185.
Long Statement,Gallio.Tests.Runtime.Extensibility,DisabledComponents,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryTest.cs,DisabledReason_WhenServiceDisabled_DescribesTheDependency,The length of the statement  "                Assert.AreEqual("The plugin that provides this component was disabled.  Reason: The plugin depends on another disabled plugin: 'plugin1Id'."' component.DisabledReason); " is 168.
Long Statement,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,IdentifyFileType_FileInspectorWithCandidates_WhenCandidatesIsNull_Throws,The length of the statement  "            Assert.Throws<ArgumentNullException>(() => fileTypeManager.IdentifyFileType(MockRepository.GenerateStub<IFileInspector>()' null)); " is 130.
Long Statement,Gallio.Tests.Runtime.FileTypes,LazyFileInspectorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\LazyFileInspectorTest.cs,TryGetStream_WhenPreviouslyReturnedStreamWasClosed_ReturnsNewStream,The length of the statement  "                Assert.AreNotSame(returnedStream' secondReturnedStream' "Should have returned a new stream since the previous one was closed."); " is 128.
Long Statement,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The length of the statement  "                    "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})"); " is 121.
Long Statement,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,CheckedAndUnchecked,The length of the statement  "            AssertFormat(() => checked(x + unchecked(y + checked(x * x)) * x) + y' "() => checked(x + unchecked(y + checked(x * x)) * x) + y"); " is 131.
Long Statement,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format,The length of the statement  "            string expectedResult = "{Gallio.Tests.Runtime.Formatting.StructuralFormattingRuleTest+SampleObject: Field = {42}' Left = null' Property = {101}' ReadOnlyProperty = {blah}' Right = null}"; " is 188.
Long Statement,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format_CyclicGraphShouldPrintPlaceholderForObjectAndNotCauseStackOverflowException,The length of the statement  "            string expectedResult = "{Gallio.Tests.Runtime.Formatting.StructuralFormattingRuleTest+SampleObject: Field = {0}' Left = {...}' Property = {0}' ReadOnlyProperty = {blah}' Right = null}"; " is 186.
Long Statement,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format_DeepGraphShouldStopAfterTwoLevels,The length of the statement  "            string expectedResult = "{Gallio.Tests.Runtime.Formatting.StructuralFormattingRuleTest+SampleObject: Field = {1}' Left = {Gallio.Tests.Runtime.Formatting.StructuralFormattingRuleTest+SampleObject: Field = {2}' Left = {...}' Property = {0}' ReadOnlyProperty = {blah}' Right = null}' Property = {0}' ReadOnlyProperty = {blah}' Right = null}"; " is 340.
Long Statement,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format_ShouldRemoveObjectFromReentanceVisitedSetWhenAllPrinted,The length of the statement  "            string expectedResult = "{Gallio.Tests.Runtime.Formatting.StructuralFormattingRuleTest+SampleObject: Field = {0}' Left = null' Property = {0}' ReadOnlyProperty = {blah}' Right = null}"; " is 185.
Long Statement,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format_ShouldUseReferentialEqualityForDeterminingReentrance,The length of the statement  "            string expectedResult = "{Gallio.Tests.Runtime.Formatting.StructuralFormattingRuleTest+SampleObject: Field = {1}' Left = {Gallio.Tests.Runtime.Formatting.StructuralFormattingRuleTest+SampleObject: Field = {1}' Left = null' Property = {0}' ReadOnlyProperty = {blah}' Right = null}' Property = {0}' ReadOnlyProperty = {blah}' Right = null}"; " is 339.
Long Statement,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format_ShouldUseReferentialEqualityForDeterminingReentrance,The length of the statement  "            Assert.AreEqual(expectedResult' Formatter.Format(value)' "Both the outer and inner objects should be printed even through they are considered equal by value."); " is 160.
Long Statement,Gallio.Tests.Runtime.Hosting,AbstractHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\AbstractHostFactoryTest.cs,CreateInstanceFromCreatesAValidObjectHandle,The length of the statement  "                RemoteHostFactoryTest.TestService serviceProxy = (RemoteHostFactoryTest.TestService)host.GetHostService().CreateInstanceFrom( " is 125.
Long Statement,Gallio.Tests.Runtime.Hosting,AbstractHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\AbstractHostFactoryTest.cs,HostRunsInRequestedWorkingDirectory,The length of the statement  "                "Current working directory of the calling process should be unchanged or at least restored once the host is disposed."); " is 120.
Long Statement,Gallio.Tests.Runtime.Hosting,RemoteHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\RemoteHostFactoryTest.cs,HostRunsWithSpecifiedApplicationBaseDirectory,The length of the statement  "                AssertArePathsEqualIgnoringFinalBackslash(Path.GetTempPath()' host.GetHostService().Do<object' string>(GetApplicationBaseDirectory' null)); " is 139.
Long Statement,Gallio.Tests.Runtime.Logging,SeverityPrefixParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Logging\SeverityPrefixParserTest.cs,WritesFormattedMessageToTextWriter,The length of the statement  "                Assert.AreEqual(line.StartsWith("[")' hasSeverity' "Should indicate whether the line had its own severity indication."); " is 120.
Long Statement,Gallio.Tests.Model.Commands,DefaultTestCommandFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Commands\DefaultTestCommandFactoryTest.cs,RootCommandIncludesOnlyNonExcludedTestsInHierarchyEvenIfAChildTestMightHaveBeenOtherwiseIncluded,The length of the statement  "            BuildCommands(new FilterSet<ITestDescriptor>(new[] { new FilterRule<ITestDescriptor>(FilterRuleType.Exclusion' new NameFilter<ITestDescriptor>(new EqualityFilter<string>("A"))) })' false); " is 188.
Long Statement,Gallio.Tests.Model.Commands,DefaultTestCommandFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Commands\DefaultTestCommandFactoryTest.cs,GetTest,The length of the statement  "            foreach (Test test in TreeUtils.GetPreOrderTraversal<Test>(model.RootTest' delegate(Test parent) { return parent.Children; })) " is 126.
Long Statement,Gallio.Tests.Model.Commands,DefaultTestCommandFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Commands\DefaultTestCommandFactoryTest.cs,AssertCommandExplicit,The length of the statement  "                Assert.AreEqual(Array.IndexOf(names' node.Test.Name) != -1' node.IsExplicit' "Test '{0}' had incorrect explicit flag."' node.Test.Name); " is 136.
Long Statement,Gallio.Tests.Runtime.Preferences,FilePreferenceManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceManagerTest.cs,LocalUserPreferences_ReturnsFilePreferenceStoreInLocalUserAppData,The length of the statement  "            Assert.AreEqual(SpecialPathPolicy.For("Preferences").GetLocalUserApplicationDataDirectory()' preferenceStore.PreferenceStoreDir); " is 129.
Long Statement,Gallio.Tests.Runtime.Preferences,FilePreferenceManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceManagerTest.cs,RoamingUserPreferences_ReturnsFilePreferenceStoreInRoamingUserAppData,The length of the statement  "            Assert.AreEqual(SpecialPathPolicy.For("Preferences").GetRoamingUserApplicationDataDirectory()' preferenceStore.PreferenceStoreDir); " is 131.
Long Statement,Gallio.Tests.Runtime.Preferences,FilePreferenceManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceManagerTest.cs,CommonPreferences_ReturnsFilePreferenceStoreInCommonAppData,The length of the statement  "            Assert.AreEqual(SpecialPathPolicy.For("Preferences").GetCommonApplicationDataDirectory()' preferenceStore.PreferenceStoreDir); " is 126.
Long Statement,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,FormatTestCaseResultSummaryAllValuesSet,The length of the statement  "            Assert.AreEqual("3 run' 20 passed' 123 failed (41 error' 42 timeout)' 61 inconclusive (31 canceled)' 33 skipped (11 ignored' 12 pending)"' stats.FormatTestCaseResultSummary()); " is 176.
Long Statement,Gallio.Tests.Runner.Reports.Schema,ReportTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\ReportTest.cs,RoundTripXmlSerialization,The length of the statement  "            report.TestPackageRun.RootTestStepRun.Children.Add(new TestStepRun(new TestStepData("child"' "child"' "child"' "child"))); " is 122.
Complex Conditional,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenArgumentsValid_ShouldCopyTheRegion,The conditional expression  "bx < x || by < y || bx - x >= width || by - y >= height"  is complex.
Complex Conditional,Gallio.Tests.Common.Reflection,WrapperAssert,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\WrapperAssert.cs,AreTypesEquivalent,The conditional expression  "info.IsArray || info.IsByRef || info.IsPointer || info.IsGenericParameter"  is complex.
Empty Catch Block,Gallio.Tests.Common.Diagnostics,ExceptionDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionDataTest.cs,PopulateStackTrace,The method has an empty catch block.
Empty Catch Block,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,AttributeWrapper,The method has an empty catch block.
Empty Catch Block,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,AttributeWrapper,The method has an empty catch block.
Empty Catch Block,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,AttributeWrapper,The method has an empty catch block.
Empty Catch Block,Gallio.Tests.Framework.Assertions,AssertionHelperTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionHelperTest.cs,Verify_WhenCalled_IncrementsAssertionCountEachTime,The method has an empty catch block.
Magic Number,Gallio.Tests.Common,ActionChainTestForTwoParameters,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\ActionChainTestForTwoParameters.cs,Before,The following statement contains a magic number: chain.Before(CreateAction("ghi"' 2));
Magic Number,Gallio.Tests.Common,ActionChainTestForTwoParameters,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\ActionChainTestForTwoParameters.cs,Before,The following statement contains a magic number: chain.Action("key"' 42);
Magic Number,Gallio.Tests.Common,ActionChainTestForTwoParameters,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\ActionChainTestForTwoParameters.cs,After,The following statement contains a magic number: chain.After(CreateAction("ghi"' 2));
Magic Number,Gallio.Tests.Common,ActionChainTestForTwoParameters,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\ActionChainTestForTwoParameters.cs,After,The following statement contains a magic number: chain.Action("key"' 42);
Magic Number,Gallio.Tests.Common,ActionChainTestForTwoParameters,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\ActionChainTestForTwoParameters.cs,Around,The following statement contains a magic number: chain.Around(CreateActionDecorator("ghi"' "rst"' 2));
Magic Number,Gallio.Tests.Common,ActionChainTestForTwoParameters,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\ActionChainTestForTwoParameters.cs,Around,The following statement contains a magic number: chain.Action("key"' 42);
Magic Number,Gallio.Tests.Common,LazyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\LazyTest.cs,Constructs_ok,The following statement contains a magic number: var x = new Lazy<int>(() =>              {                  count++;                  return 123;              });
Magic Number,Gallio.Tests.Common,LazyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\LazyTest.cs,Constructs_ok,The following statement contains a magic number: Assert.AreEqual(123' x.Value);
Magic Number,Gallio.Tests.Common,LazyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\LazyTest.cs,Constructs_ok,The following statement contains a magic number: Assert.AreEqual(123' x.Value);
Magic Number,Gallio.Tests.Common,FuncChainTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\FuncChainTest.cs,Around,The following statement contains a magic number: chain.Around((str' inner) => inner(str + "x") * 3);
Magic Number,Gallio.Tests.Common,FuncChainTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\FuncChainTest.cs,Around,The following statement contains a magic number: Assert.AreEqual(15' chain.Func("test"));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(42' memoizer.Memoize("42"' () => 42));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(42' memoizer.Memoize("42"' () => 42));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(42' memoizer.Memoize("42"' () => { throw new InvalidOperationException("Should not be called"); }));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(31' memoizer.Memoize("31"' () => 31));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(31' memoizer.Memoize("31"' () => 31));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(31' memoizer.Memoize("31"' () => { throw new InvalidOperationException("Should not be called"); }));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(42' memoizer.Memoize("42"' () => { throw new InvalidOperationException("Should not be called"); }));
Magic Number,Gallio.Tests.Common,KeyedMemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\KeyedMemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesItByKey,The following statement contains a magic number: Assert.AreEqual(31' memoizer.Memoize("31"' () => { throw new InvalidOperationException("Should not be called"); }));
Magic Number,Gallio.Tests.Common,MemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\MemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesIt,The following statement contains a magic number: Assert.AreEqual(42' memoizer.Memoize(() => 42));
Magic Number,Gallio.Tests.Common,MemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\MemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesIt,The following statement contains a magic number: Assert.AreEqual(42' memoizer.Memoize(() => 42));
Magic Number,Gallio.Tests.Common,MemoizerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\MemoizerTest.cs,WhenValueNotPresentPopulatesAndMemoizesIt,The following statement contains a magic number: Assert.AreEqual(42' memoizer.Memoize(() => { throw new InvalidOperationException("Should not be called"); }));
Magic Number,Gallio.Tests.Common.Collections,CollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\CollectionUtilsTest.cs,ConstantArray_with_negative_length_should_throw_exception,The following statement contains a magic number: CollectionUtils.ConstantArray(9' -1);
Magic Number,Gallio.Tests.Common.Collections,CollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\CollectionUtilsTest.cs,ConstantArray_with_zero_length,The following statement contains a magic number: var array = CollectionUtils.ConstantArray(9' 0);
Magic Number,Gallio.Tests.Common.Collections,CollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\CollectionUtilsTest.cs,ConstantArray,The following statement contains a magic number: var array = CollectionUtils.ConstantArray(123.456' 66);
Magic Number,Gallio.Tests.Common.Collections,CollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\CollectionUtilsTest.cs,ConstantArray,The following statement contains a magic number: var array = CollectionUtils.ConstantArray(123.456' 66);
Magic Number,Gallio.Tests.Common.Collections,CollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\CollectionUtilsTest.cs,ConstantArray,The following statement contains a magic number: Assert.Count(66' array);
Magic Number,Gallio.Tests.Common.Collections,CollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\CollectionUtilsTest.cs,ConstantArray,The following statement contains a magic number: Assert.ForAll(array' x => x == 123.456);
Magic Number,Gallio.Tests.Common.Collections,EnumerableCounterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\EnumerableCounterTest.cs,AssertStrategies,The following statement contains a magic number: Assert.ForAll(actualStrategies' o => o.Count == 3);
Magic Number,Gallio.Tests.Common.Collections,GenericCollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\GenericCollectionUtilsTest.cs,AddAllIfNotAlreadyPresent,The following statement contains a magic number: Assert.Count(2' output);
Magic Number,Gallio.Tests.Common.Collections,GenericCollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\GenericCollectionUtilsTest.cs,Selects_ok,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 1' 2' 3 }' output);
Magic Number,Gallio.Tests.Common.Collections,GenericCollectionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\GenericCollectionUtilsTest.cs,Selects_ok,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 1' 2' 3 }' output);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Node root = new Node(1'                  new Node(2' new Node(3)' new Node(4)' new Node(5))'                  new Node(6' new Node(7' new Node(8)))'                  new Node(9));
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,TreeUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\TreeUtilsTest.cs,GetPreOrderTraversal,The following statement contains a magic number: Assert.AreElementsEqual(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9 }' ids);
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,CanCopyAnEmptyCollection,The following statement contains a magic number: copy.SetValue(new Key<int>("key")' 33);
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,CanCopyAnEmptyCollection,The following statement contains a magic number: Assert.AreEqual(33' copy.GetValue(new Key<int>("key")));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,CanCopyANonEmptyCollection,The following statement contains a magic number: source.SetValue(new Key<int>("key")' 42);
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,CanCopyANonEmptyCollection,The following statement contains a magic number: Assert.AreEqual(42' copy.GetValue(new Key<int>("key")));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,CanCopyANonEmptyCollection,The following statement contains a magic number: copy.SetValue(new Key<int>("key")' 33);
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,CanCopyANonEmptyCollection,The following statement contains a magic number: Assert.AreEqual(33' copy.GetValue(new Key<int>("key")));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,CanCopyANonEmptyCollection,The following statement contains a magic number: Assert.AreEqual(42' source.GetValue(new Key<int>("key")));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,NonExistantValuesCannotBeRetrieved,The following statement contains a magic number: Assert.AreEqual(42' collection.GetValueOrDefault(new Key<int>("key")' 42));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,NonExistantValuesCannotBeRetrieved,The following statement contains a magic number: Assert.AreEqual(42' collection.GetValueOrDefault(new Key<int>("key")' 42));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,ExistingValuesCanBeRetrieved,The following statement contains a magic number: collection.SetValue(new Key<int>("key")' 123);
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,ExistingValuesCanBeRetrieved,The following statement contains a magic number: Assert.AreEqual(123' collection.GetValue(new Key<int>("key")));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,ExistingValuesCanBeRetrieved,The following statement contains a magic number: Assert.AreEqual(123' collection.GetValueOrDefault(new Key<int>("key")' 0));
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,ExistingValuesCanBeRetrieved,The following statement contains a magic number: Assert.AreEqual(123' value);
Magic Number,Gallio.Tests.Common.Collections,UserDataCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Collections\UserDataCollectionTest.cs,ExistingValuesCanBeRemoved,The following statement contains a magic number: collection.SetValue(new Key<int>("key")' 123);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Read_WhenActionIsNull_Throws,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Read_WhenFuncIsNull_Throws,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Write_WhenActionIsNull_Throws,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Write_WhenFuncIsNull_Throws,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Read_WithAction_ProvidesContents,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Read_WithAction_ProvidesContents,The following statement contains a magic number: Assert.AreEqual(11' actualValue);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Write_WithAction_ProvidesContents,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Write_WithAction_ProvidesContents,The following statement contains a magic number: Assert.AreEqual(11' actualValue);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Read_WithFunc_ProvidesContents,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Read_WithFunc_ProvidesContents,The following statement contains a magic number: Assert.AreEqual(11' actualValue);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Write_WithFunc_ProvidesContents,The following statement contains a magic number: LockBox<int> box = new LockBox<int>(11);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,Write_WithFunc_ProvidesContents,The following statement contains a magic number: Assert.AreEqual(11' actualValue);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,ReadersAndWritersDoNotInterfere,The following statement contains a magic number: Tasks.StartThreadTask("Reader"' () =>                      {                          while (! done)                          {                              box.Read(value => Assert.IsTrue(value.Length%2 == 0));                              Thread.Sleep(0);                          }                      });
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,ReadersAndWritersDoNotInterfere,The following statement contains a magic number: i % 3 != 0
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,ReadersAndWritersDoNotInterfere,The following statement contains a magic number: i < 10
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,ReadersAndWritersDoNotInterfere,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Gallio.Tests.Common.Concurrency,LockBoxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\LockBoxTest.cs,ReadersAndWritersDoNotInterfere,The following statement contains a magic number: box.Read(value => Assert.AreEqual(writeCount * 2' value.Length));
Magic Number,Gallio.Tests.Common.Concurrency,WhenProcessCompletes,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ProcessTaskTest.cs,SetUp,The following statement contains a magic number: Assert.IsTrue(processTask.Join(TimeSpan.FromSeconds(10))' "Wait for exit");
Magic Number,Gallio.Tests.Common.Concurrency,WhenProcessCompletes,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ProcessTaskTest.cs,TerminatedEventIsFired,The following statement contains a magic number: Assert.IsTrue(terminatedSuccessfully.WaitOne(1000)' "Terminated successfully.");
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,RunThrowsIfCalledReentrantlyOnDifferentThread,The following statement contains a magic number: scope.Run(delegate              {                  Tasks.StartThreadTask("Reentrant Call to Scope.Run"' () =>                  {                      Assert.Throws<InvalidOperationException>(delegate                      {                          scope.Run(delegate { });                      });                  });                  Tasks.JoinAndVerify(TimeSpan.FromMilliseconds(500));              });
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,RunCanBeCalledRepeatedly,The following statement contains a magic number: i < 3
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,RunCanBeCalledRepeatedly,The following statement contains a magic number: Assert.AreEqual(3' count);
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,AbortFromADifferentThreadUnwindsGracefully,The following statement contains a magic number: Assert.IsNotNull(scope.Run(delegate              {                  count += 1;                  barrier.Set();                  Thread.Sleep(5000);                    count += 1; // should not run              }));
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,AbortFromADifferentThreadUnwindsGracefully,The following statement contains a magic number: Tasks.JoinAndVerify(TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,TryToAsynchronouslyHitARunningActionAtRandomTimes,The following statement contains a magic number: const int Iterations = 50;
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,TryToAsynchronouslyHitARunningActionAtRandomTimes,The following statement contains a magic number: Tasks.StartThreadTask("Background Abort"' delegate                  {                      Thread.Sleep(random.Next(5));                      scope.Abort();                  });
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,TryToAsynchronouslyHitARunningActionAtRandomTimes,The following statement contains a magic number: timeout.ElapsedMilliseconds > 500
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,TryToAsynchronouslyHitARunningActionAtRandomTimes,The following statement contains a magic number: scope.Run(delegate { Thread.SpinWait(1000); }) == null
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,TryToAsynchronouslyHitARunningActionAtRandomTimes,The following statement contains a magic number: Tasks.JoinAndVerify(TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,ProtectInAnotherThreadJustRunsTheAction,The following statement contains a magic number: Tasks.JoinAndVerify(TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,AbortWaitsUntilProtectedScopeEndsBeforeOccurring,The following statement contains a magic number: Assert.IsNotNull(scope.Run(delegate              {                  count += 1;                    using (scope.Protect())                  {                      count += 1;                      barrier.Set();                      Thread.Sleep(5000);                      count += 1;                  }                    count += 1; // should not run              }));
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,AbortWaitsUntilProtectedScopeEndsBeforeOccurring,The following statement contains a magic number: Assert.AreEqual(3' count);
Magic Number,Gallio.Tests.Common.Concurrency,ThreadAbortScopeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\ThreadAbortScopeTest.cs,AbortWaitsUntilProtectedScopeEndsBeforeOccurring,The following statement contains a magic number: Tasks.JoinAndVerify(TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Common.Concurrency,WorkSchedulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\WorkSchedulerTest.cs,ShouldWaitForAllActionsToFinishBeforeReturning,The following statement contains a magic number: actions[i] = () =>                  {                      Thread.Sleep((actionIndex + 1) * 71 % 37);                      TestLog.WriteLine("Iteration #{0} finished after {1}ms"' actionIndex + 1' stopwatch.ElapsedMilliseconds);                      finished[actionIndex] = true;                  };
Magic Number,Gallio.Tests.Common.Concurrency,WorkSchedulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\WorkSchedulerTest.cs,ShouldWaitForAllActionsToFinishBeforeReturning,The following statement contains a magic number: actions[i] = () =>                  {                      Thread.Sleep((actionIndex + 1) * 71 % 37);                      TestLog.WriteLine("Iteration #{0} finished after {1}ms"' actionIndex + 1' stopwatch.ElapsedMilliseconds);                      finished[actionIndex] = true;                  };
Magic Number,Gallio.Tests.Common.Concurrency,WorkSchedulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\WorkSchedulerTest.cs,SupportsReentrance,The following statement contains a magic number: Assert.AreEqual(21' Fibonnaci(scheduler' 8));
Magic Number,Gallio.Tests.Common.Concurrency,WorkSchedulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\WorkSchedulerTest.cs,SupportsReentrance,The following statement contains a magic number: Assert.AreEqual(21' Fibonnaci(scheduler' 8));
Magic Number,Gallio.Tests.Common.Concurrency,WorkSchedulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\WorkSchedulerTest.cs,Fibonnaci,The following statement contains a magic number: count < 2
Magic Number,Gallio.Tests.Common.Concurrency,WorkSchedulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Concurrency\WorkSchedulerTest.cs,Fibonnaci,The following statement contains a magic number: scheduler.Run(new Action[]              {                  () => Interlocked.Add(ref sum' Fibonnaci(scheduler' count - 1))'                  () => Interlocked.Add(ref sum' Fibonnaci(scheduler' count - 2))              });
Magic Number,Gallio.Tests.Common.Diagnostics,StackTraceDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\StackTraceDataTest.cs,ConstructsWithCodeElement,The following statement contains a magic number: mockCodeElement.Stub(x => x.GetCodeLocation()).Return(new CodeLocation("C:\\Path\\File.cs"' 123' 456));
Magic Number,Gallio.Tests.Common.Diagnostics,StackTraceDataTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\StackTraceDataTest.cs,ConstructsWithCodeElement,The following statement contains a magic number: mockCodeElement.Stub(x => x.GetCodeLocation()).Return(new CodeLocation("C:\\Path\\File.cs"' 123' 456));
Magic Number,Gallio.Tests.Common.Diagnostics,ExceptionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionUtilsTest.cs,Return42,The following statement contains a magic number: return 42;
Magic Number,Gallio.Tests.Common.Diagnostics,ExceptionUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Diagnostics\ExceptionUtilsTest.cs,InvokeMethodWithoutTargetInvocationException_WhenMethodSucceeds_ReturnsResult,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Gallio.Tests.Common.IO,ContentFileTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\IO\ContentFileTest.cs,OpenStream_from_file_content,The following statement contains a magic number: mockFileSystem.Expect(x => x.OpenRead(@"c:\Path")).Return(new MemoryStream(new byte[] { 1' 2' 3 }));
Magic Number,Gallio.Tests.Common.IO,ContentFileTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\IO\ContentFileTest.cs,OpenStream_from_file_content,The following statement contains a magic number: mockFileSystem.Expect(x => x.OpenRead(@"c:\Path")).Return(new MemoryStream(new byte[] { 1' 2' 3 }));
Magic Number,Gallio.Tests.Common.IO,ContentFileTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\IO\ContentFileTest.cs,OpenStream_from_file_content,The following statement contains a magic number: Assert.AreElementsEqual(new byte[] { 1' 2' 3 }' actual);
Magic Number,Gallio.Tests.Common.IO,ContentFileTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\IO\ContentFileTest.cs,OpenStream_from_file_content,The following statement contains a magic number: Assert.AreElementsEqual(new byte[] { 1' 2' 3 }' actual);
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Linq,ExpressionInstrumentorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Linq\ExpressionInstrumentorTest.cs,AllExpressionTypes,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertTrace(() => x + y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Add" });                  AssertTrace(() => checked(x + y)' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "AddChecked" });                  AssertTrace(() => x & y' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "And" });                  AssertTrace(() => true && x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "AndAlso" });                  AssertTrace(() => arr[0]' 0'                      new[] { "Constant"' "MemberAccess"' "Constant"' "ArrayIndex" });                  AssertTrace(() => arr ?? arr' arr'                      new[] { "Constant"' "MemberAccess"' "Coalesce" });                  AssertTrace(() => x / y' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Divide" });                  AssertTrace(() => x == y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Equal" });                  AssertTrace(() => x ^ y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "ExclusiveOr" });                  AssertTrace(() => x > y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThan" });                  AssertTrace(() => x >= y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "GreaterThanOrEqual" });                  AssertTrace(() => ((Gallio.Common.Func<int>)(() => 5))()' 5'                      new[] { "Lambda"' "Convert"' "Invoke" });                  AssertTrace(() => x << y' 20'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LeftShift" });                  AssertTrace(() => x < y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThan" });                  AssertTrace(() => x <= y' false'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "LessThanOrEqual" });                  AssertTrace(() => x % y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Modulo" });                  AssertTrace(() => x * y' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Multiply" });                  AssertTrace(() => checked(x * y)' 10'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "MultiplyChecked" });                  AssertTrace(() => x != y' true'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "NotEqual" });                  AssertTrace(() => x | y' 7'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Or" });                  AssertTrace(() => false || x == 5' true'                      new[] { "Constant"' "Constant"' "MemberAccess"' "Constant"' "Equal"' "OrElse" });                  AssertTrace(Expression.Lambda<System.Func<double>>(Expression.Power(Expression.Constant(3.0)' Expression.Constant(4.0)))' 81.0'                      new[] { "Constant"' "Constant"' "Power" });                  AssertTrace(() => x >> y' 1'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "RightShift" });                  AssertTrace(() => x - y' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "Subtract" });                  AssertTrace(() => checked(x - y)' 3'                      new[] { "Constant"' "MemberAccess"' "Constant"' "MemberAccess"' "SubtractChecked" });                    // call                  AssertTrace(() => arr.ToString()' arr.ToString()'                      new[] { "Constant"' "MemberAccess"' "Call" });                    // conditional                  AssertTrace(() => x == 3 ? 1 : 2' 2'                      new[] { "Constant"' "MemberAccess"' "Constant"' "Equal"' "Constant"' "Conditional" });                    // lambda (done elsewhere)                    // list init                  AssertTrace(() => new List<int> { 1' 2' 3 }.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "ListInit"' "MemberAccess" });                    // member init                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Bar' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.List.Count' 3'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                  AssertTrace(() => new MemberInitType { Bar = 42' List = { 1' 2' 3 }' Aggregate = { Foo = 42 } }.Aggregate.Foo' 42'                      new[] { "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "MemberInit"' "MemberAccess"' "MemberAccess" });                                    // member access (done elsewhere)                    // new                  AssertTrace(() => new MemberInitType().Bar' 0'                      new[] { "New"' "MemberAccess" });                    // new array bounds                  AssertTrace(() => new int[3].Length' 3'                      new[] { "Constant"' "NewArrayBounds"' "ArrayLength" });                    // new array init                  AssertTrace(() => new int[] { 1' 2' 3 }.Length' 3'                      new[] { "Constant"' "Constant"' "Constant"' "NewArrayInit"' "ArrayLength" });                    // parameter                  AssertTrace(i => i == 2' 2' true'                      new[] { "Parameter"' "Constant"' "Equal" });                    // quote                  AssertTrace(() => AssertTrace(() => x == 5' true' new[] { "Constant"' "MemberAccess"' "Constant"' "Equal" })'                      new[] { "Quote"' "Constant"' "Constant"' "Constant"' "Constant"' "Constant"' "NewArrayInit"' "Call" });                    // type binary                  AssertTrace(() => ((object)x) is int' true'                      new[] { "Constant"' "MemberAccess"' "Convert"' "TypeIs" });                    // unary                  AssertTrace(() => arr.Length' 1'                      new[] { "Constant"' "MemberAccess"' "ArrayLength" });                  AssertTrace(() => (double)x' x'                      new[] { "Constant"' "MemberAccess"' "Convert" });                  AssertTrace(() => checked((double)x)' x'                      new[] { "Constant"' "MemberAccess"' "ConvertChecked" });                  AssertTrace(() => -x' -x'                      new[] { "Constant"' "MemberAccess"' "Negate" });                  AssertTrace(() => checked(-x)' -x'                      new[] { "Constant"' "MemberAccess"' "NegateChecked" });                  AssertTrace(() => ~x' ~x'                      new[] { "Constant"' "MemberAccess"' "Not" });                  AssertTrace(() => x as object' x'                      new[] { "Constant"' "MemberAccess"' "TypeAs" });                  AssertTrace(() => +z' z'                      new[] { "Constant"' "MemberAccess"' "UnaryPlus" });              });
Magic Number,Gallio.Tests.Common.Markup,AttachmentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\AttachmentTest.cs,ToAttachmentData_Binary,The following statement contains a magic number: byte[] bytes = new byte[] { 1' 2' 3 };
Magic Number,Gallio.Tests.Common.Markup,AttachmentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\AttachmentTest.cs,ToAttachmentData_Binary,The following statement contains a magic number: byte[] bytes = new byte[] { 1' 2' 3 };
Magic Number,Gallio.Tests.Common.Markup,AttachmentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\AttachmentTest.cs,FromAttachmentData_Binary,The following statement contains a magic number: byte[] bytes = new byte[] { 1' 2' 3 };
Magic Number,Gallio.Tests.Common.Markup,AttachmentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\AttachmentTest.cs,FromAttachmentData_Binary,The following statement contains a magic number: byte[] bytes = new byte[] { 1' 2' 3 };
Magic Number,Gallio.Tests.Common.Markup,MarkerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\MarkerTest.cs,CanChainAttributesFluently,The following statement contains a magic number: Assert.AreEqual(2' marker.Attributes.Count);
Magic Number,Gallio.Tests.Common.Markup,StructuredTextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\StructuredTextTest.cs,GetTextLength,The following statement contains a magic number: Assert.AreEqual(10' Example.GetTextLength());
Magic Number,Gallio.Tests.Common.Markup,StructuredTextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\StructuredTextTest.cs,TruncatedWriteToTruncatesWhenLengthIsInsufficient5,The following statement contains a magic number: Assert.IsTrue(Example.TruncatedWriteTo(writer' 5));
Magic Number,Gallio.Tests.Common.Markup,StructuredTextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\StructuredTextTest.cs,TruncatedWriteToTruncatesWhenLengthIsInsufficient8,The following statement contains a magic number: Assert.IsTrue(Example.TruncatedWriteTo(writer' 8));
Magic Number,Gallio.Tests.Common.Markup.Tags,BinaryAttachmentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\BinaryAttachmentTest.cs,GetDistinctInstances,The following statement contains a magic number: var bytes = new byte[random.Next(0' 1000)];
Magic Number,Gallio.Tests.Common.Markup.Tags,BinaryAttachmentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\BinaryAttachmentTest.cs,GetDistinctInstances,The following statement contains a magic number: i < 10000
Magic Number,Gallio.Tests.Common.Markup.Tags,BodyTagTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\Tags\BodyTagTest.cs,GetDistinctInstances,The following statement contains a magic number: int count = random.Next(1' 10);
Magic Number,Gallio.Tests.Common.Markup.Tags,BodyTagTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\Tags\BodyTagTest.cs,GetDistinctInstances,The following statement contains a magic number: i < 10000
Magic Number,Gallio.Tests.Common.Markup.Tags,SectionTagTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\Tags\SectionTagTest.cs,GetDistinctInstances,The following statement contains a magic number: int count = random.Next(0' 10);
Magic Number,Gallio.Tests.Common.Markup.Tags,SectionTagTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Markup\Tags\SectionTagTest.cs,GetDistinctInstances,The following statement contains a magic number: i<10000
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var data = new double[]              {                  432' 452' 465' 459' 426' 429' 460' 429' 424' 478' 419' 468' 448' 476' 444' 462' 438' 447'                  466' 449' 439' 441' 427' 440' 464' 444' 446' 436' 454' 462' 473' 429' 443' 424' 463' 428'                  429' 467' 454' 431' 458' 449' 423' 419' 458' 467' 490' 459' 420' 447' 427' 466' 433' 445'                  444' 457' 436' 476' 453' 450' 461' 459' 452' 448' 435' 479' 434' 457' 441' 441' 423' 416'                  432' 435' 471' 433' 473' 451' 451' 449' 452' 480' 454' 481' 465' 446' 437' 445' 475' 456'                  483' 431' 393' 448' 452' 439' 452' 460' 428' 475' 435' 443' 414' 486' 497' 434' 480' 459'                  472' 458' 420' 412' 433' 379' 431' 505' 418' 458' 509' 452' 461' 423' 477' 469' 471' 472'                  406' 427' 441' 402' 455' 438' 444' 458' 440' 446' 456' 458' 463' 458' 452' 405' 452' 461'                  488' 415' 444' 479' 478' 482' 460' 444' 483' 425' 457' 459' 408' 447' 460' 464' 452' 446'                  431' 435' 468' 436' 467' 430' 475' 425' 460' 453' 442' 457' 457' 427' 438' 463' 454' 443'                  452' 441' 444' 414' 436' 456' 484' 482' 427' 437' 459' 444' 445' 424' 450' 427' 451' 426'                  433' 437' 432' 443' 440' 438' 418' 474' 440' 452' 446' 464' 485' 435' 464' 460' 458' 450'                  464' 488' 425' 443' 437' 432' 426              };
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: Assert.AreEqual(1E5' data.Sum());
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: Assert.Count(223' data);
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var test = new ChiSquareTest(1E5 / 223' data' 1);
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: var test = new ChiSquareTest(1E5 / 223' data' 1);
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: Assert.AreEqual(222' test.DegreesOfFreedom);
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: Assert.AreApproximatelyEqual(207.677' test.ChiSquareValue' 0.001);
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: Assert.AreApproximatelyEqual(207.677' test.ChiSquareValue' 0.001);
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: Assert.AreApproximatelyEqual(0.746' test.TwoTailedPValue' 0.001);
Magic Number,Gallio.Tests.Common.Mathematics,ChiSquareTestTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\ChiSquareTestTest.cs,ChiSquare,The following statement contains a magic number: Assert.AreApproximatelyEqual(0.746' test.TwoTailedPValue' 0.001);
Magic Number,Gallio.Tests.Common.Mathematics,GammaTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\GammaTest.cs,CalculatePValue,The following statement contains a magic number: double actual = Gamma.IncompleteGamma(degreesOfFreedom / 2d' chiSquareValue / 2d);
Magic Number,Gallio.Tests.Common.Mathematics,GammaTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\GammaTest.cs,CalculatePValue,The following statement contains a magic number: double actual = Gamma.IncompleteGamma(degreesOfFreedom / 2d' chiSquareValue / 2d);
Magic Number,Gallio.Tests.Common.Mathematics,GammaTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Mathematics\GammaTest.cs,CalculatePValue,The following statement contains a magic number: Assert.AreApproximatelyEqual(expectedProbability' actual' 0.00001);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Bitmap_ReturnsBitmapProvidedInConstructor,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Bitmap_ReturnsBitmapProvidedInConstructor,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Width_ReturnsBitmapWidth,The following statement contains a magic number: var bitmap = new Bitmap(32' 16);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Width_ReturnsBitmapWidth,The following statement contains a magic number: var bitmap = new Bitmap(32' 16);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Width_ReturnsBitmapWidth,The following statement contains a magic number: Assert.AreEqual(32' bitmapVideoFrame.Width);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Height_ReturnsBitmapHeight,The following statement contains a magic number: var bitmap = new Bitmap(32' 16);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Height_ReturnsBitmapHeight,The following statement contains a magic number: var bitmap = new Bitmap(32' 16);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,Height_ReturnsBitmapHeight,The following statement contains a magic number: Assert.AreEqual(16' bitmapVideoFrame.Height);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenPixelBufferIsNull_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenPixelBufferIsNull_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenPixelBufferIsNull_Throws,The following statement contains a magic number: var rectangle = new Rectangle(0' 0' 32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenPixelBufferIsNull_Throws,The following statement contains a magic number: var rectangle = new Rectangle(0' 0' 32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenPixelBufferIsNull_Throws,The following statement contains a magic number: int stride = 32;
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenRectangleAreOutOfBounds_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenRectangleAreOutOfBounds_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenRectangleAreOutOfBounds_Throws,The following statement contains a magic number: int[] pixelBuffer = new int[32 * 32];
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenRectangleAreOutOfBounds_Throws,The following statement contains a magic number: int[] pixelBuffer = new int[32 * 32];
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenRectangleAreOutOfBounds_Throws,The following statement contains a magic number: int stride = 32;
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The following statement contains a magic number: var rectangle = new Rectangle(0' 0' 32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The following statement contains a magic number: var rectangle = new Rectangle(0' 0' 32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The following statement contains a magic number: int[] pixelBuffer = new int[32 * 32];
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The following statement contains a magic number: int[] pixelBuffer = new int[32 * 32];
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStartOffsetIsOutOfBounds_Throws,The following statement contains a magic number: int stride = 32;
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStrideIsLessThanWidth_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStrideIsLessThanWidth_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStrideIsLessThanWidth_Throws,The following statement contains a magic number: var rectangle = new Rectangle(0' 0' 32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStrideIsLessThanWidth_Throws,The following statement contains a magic number: var rectangle = new Rectangle(0' 0' 32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStrideIsLessThanWidth_Throws,The following statement contains a magic number: int[] pixelBuffer = new int[32 * 32];
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenStrideIsLessThanWidth_Throws,The following statement contains a magic number: int[] pixelBuffer = new int[32 * 32];
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenSpaceRequirementsExceedPixelBuffer_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenSpaceRequirementsExceedPixelBuffer_Throws,The following statement contains a magic number: var bitmap = new Bitmap(32' 32);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenArgumentsValid_ShouldCopyTheRegion,The following statement contains a magic number: var bitmap = new Bitmap(4' 4);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenArgumentsValid_ShouldCopyTheRegion,The following statement contains a magic number: var bitmap = new Bitmap(4' 4);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenArgumentsValid_ShouldCopyTheRegion,The following statement contains a magic number: int component = bx + by * 10;
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenArgumentsValid_ShouldCopyTheRegion,The following statement contains a magic number: Color color = Color.FromArgb(component' component + 100' component + 200);
Magic Number,Gallio.Tests.Common.Media,BitmapVideoFrameTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\BitmapVideoFrameTest.cs,CopyPixels_WhenArgumentsValid_ShouldCopyTheRegion,The following statement contains a magic number: Color color = Color.FromArgb(component' component + 100' component + 200);
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,FontSize_CanGetSet,The following statement contains a magic number: Assert.AreEqual(16' overlay.FontSize);
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,FontSize_CanGetSet,The following statement contains a magic number: overlay.FontSize = 12;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,FontSize_CanGetSet,The following statement contains a magic number: Assert.AreEqual(12' overlay.FontSize);
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: const int width = 400;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: const int height = 300;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: double scale = 8.0 / (height * Math.PI);
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: int xCenter = width / 2;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: int yCenter = height / 2;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: int r = (int)Math.Floor(Math.Sin((x - xCenter) * scale) * Math.Cos((y - yCenter) * scale) * 127) + 127;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: int r = (int)Math.Floor(Math.Sin((x - xCenter) * scale) * Math.Cos((y - yCenter) * scale) * 127) + 127;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: int pixel = (r << 16) | (g << 8) | b;
Magic Number,Gallio.Tests.Common.Media,CaptionOverlayTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptionOverlayTest.cs,CreateBitmapWithBackground,The following statement contains a magic number: int pixel = (r << 16) | (g << 8) | b;
Magic Number,Gallio.Tests.Common.Media,CaptureParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptureParametersTest.cs,Zoom_CanGetAndSetValue,The following statement contains a magic number: parameters.Zoom = 1.0 / 16;
Magic Number,Gallio.Tests.Common.Media,CaptureParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptureParametersTest.cs,Zoom_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(1.0 / 16' parameters.Zoom);
Magic Number,Gallio.Tests.Common.Media,CaptureParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptureParametersTest.cs,Zoom_CanGetAndSetValue,The following statement contains a magic number: parameters.Zoom = 16;
Magic Number,Gallio.Tests.Common.Media,CaptureParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptureParametersTest.cs,Zoom_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(16' parameters.Zoom);
Magic Number,Gallio.Tests.Common.Media,CaptureParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptureParametersTest.cs,Zoom_CanGetAndSetValue,The following statement contains a magic number: var ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.Zoom = 1.0 / 17);
Magic Number,Gallio.Tests.Common.Media,CaptureParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\CaptureParametersTest.cs,Zoom_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.Zoom = 17);
Magic Number,Gallio.Tests.Common.Media,OverlayManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\OverlayManagerTest.cs,PaintOverlays_PaintsAllOverlaysAndRestoresGraphicsContextForEachOne,The following statement contains a magic number: var request = new OverlayPaintRequest(graphics' new Rectangle(0' 0' 32' 32)' 0' 0);
Magic Number,Gallio.Tests.Common.Media,OverlayManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\OverlayManagerTest.cs,PaintOverlays_PaintsAllOverlaysAndRestoresGraphicsContextForEachOne,The following statement contains a magic number: var request = new OverlayPaintRequest(graphics' new Rectangle(0' 0' 32' 32)' 0' 0);
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Constructor_WhenScreenGrabberIsNull_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(100' 100' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Constructor_WhenScreenGrabberIsNull_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(100' 100' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Constructor_WhenScreenGrabberIsNull_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(100' 100' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Constructor_WhenVideoSizeDoesNotMatchGrabberScreenshotsSize_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(1' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Constructor_WhenVideoSizeDoesNotMatchGrabberScreenshotsSize_Throws,The following statement contains a magic number: video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' 1' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Grabber_ReturnsGrabber,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Grabber_WhenDisposed_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Video_ReturnsVideo,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Video_WhenDisposed_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Start_WhenDisposed_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Stop_WhenDisposed_Throws,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Start_CapturesVideoUntilStopped,The following statement contains a magic number: var grabber = new ScreenGrabber(new CaptureParameters() { Zoom = 0.25 });
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Start_CapturesVideoUntilStopped,The following statement contains a magic number: var video = new FlashScreenVideo(new FlashScreenVideoParameters(grabber.ScreenshotWidth' grabber.ScreenshotHeight' 5));
Magic Number,Gallio.Tests.Common.Media,ScreenRecorderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenRecorderTest.cs,Start_CapturesVideoUntilStopped,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,ScreenshotWidth_ReturnsScaledWidth,The following statement contains a magic number: var parameters = new CaptureParameters() { Zoom = 0.25 };
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,ScreenshotWidth_ReturnsScaledWidth,The following statement contains a magic number: Assert.AreApproximatelyEqual(ScreenGrabber.GetScreenSize().Width / 2' grabber.ScreenshotWidth' 1);
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,ScreenshotHeight_ReturnsScaledHeight,The following statement contains a magic number: var parameters = new CaptureParameters() { Zoom = 0.25 };
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,ScreenshotHeight_ReturnsScaledHeight,The following statement contains a magic number: Assert.AreApproximatelyEqual(ScreenGrabber.GetScreenSize().Height / 2' grabber.ScreenshotHeight' 1);
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,CaptureScreenshot_WhenBitmapIsNullAndZoomed_CapturesScaledScreenshotIntoNewBitmap,The following statement contains a magic number: var parameters = new CaptureParameters() { Zoom = 0.25 };
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,CaptureScreenshot_WhenBitmapIsNullAndZoomed_CapturesScaledScreenshotIntoNewBitmap,The following statement contains a magic number: Assert.Multiple(() =>                          {                              Assert.AreApproximatelyEqual(ScreenGrabber.GetScreenSize().Width / 2'                                  grabber.ScreenshotWidth' 1);                              Assert.AreApproximatelyEqual(ScreenGrabber.GetScreenSize().Height / 2'                                  grabber.ScreenshotHeight' 1);                              Assert.AreEqual(grabber.ScreenshotWidth' bitmap.Width);                              Assert.AreEqual(grabber.ScreenshotHeight' bitmap.Height);                          });
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,CaptureScreenshot_WhenBitmapIsNullAndZoomed_CapturesScaledScreenshotIntoNewBitmap,The following statement contains a magic number: Assert.Multiple(() =>                          {                              Assert.AreApproximatelyEqual(ScreenGrabber.GetScreenSize().Width / 2'                                  grabber.ScreenshotWidth' 1);                              Assert.AreApproximatelyEqual(ScreenGrabber.GetScreenSize().Height / 2'                                  grabber.ScreenshotHeight' 1);                              Assert.AreEqual(grabber.ScreenshotWidth' bitmap.Width);                              Assert.AreEqual(grabber.ScreenshotHeight' bitmap.Height);                          });
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,CaptureScreenshot_WhenBitmapIsNotNull_CapturesScreenshotIntoProvidedBitmap,The following statement contains a magic number: var parameters = new CaptureParameters() { Zoom = 0.25 };
Magic Number,Gallio.Tests.Common.Media,ScreenGrabberTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\ScreenGrabberTest.cs,CaptureScreenshot_WhenBitmapIsNotTheRightSize_Throws,The following statement contains a magic number: var parameters = new CaptureParameters() { Zoom = 0.25 };
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: var ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(0' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: var ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(0' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(4096' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(4096' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(4096' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(1' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(1' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(4095' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(4095' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(4095' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(100' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(100' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesWidth,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(100' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: var ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 0' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: var ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 0' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 4096' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 4096' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 4096' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 1' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 1' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 4095' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 4095' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 4095' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 100' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 100' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesHeight,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 100' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: var ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 16' 0));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: var ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 16' 0));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 16' -1));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => new FlashScreenVideoParameters(16' 16' -1));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 16' 1));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 16' 1));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Constructor_ValidatesFramesPerSecond,The following statement contains a magic number: Assert.DoesNotThrow(() => new FlashScreenVideoParameters(16' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Width_ReturnsWidth,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Width_ReturnsWidth,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Width_ReturnsWidth,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Width_ReturnsWidth,The following statement contains a magic number: Assert.AreEqual(32' parameters.Width);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Height_ReturnsHeight,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Height_ReturnsHeight,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Height_ReturnsHeight,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,Height_ReturnsHeight,The following statement contains a magic number: Assert.AreEqual(16' parameters.Height);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,FramesPerSecond_ReturnsFramesPerSecond,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,FramesPerSecond_ReturnsFramesPerSecond,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,FramesPerSecond_ReturnsFramesPerSecond,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,FramesPerSecond_ReturnsFramesPerSecond,The following statement contains a magic number: Assert.AreEqual(30' parameters.FramesPerSecond);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(64' parameters.BlockWidth);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: parameters.BlockWidth = 256;
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(256' parameters.BlockWidth);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: parameters.BlockWidth = 16;
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(16' parameters.BlockWidth);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.BlockWidth = 256 + 16);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.BlockWidth = 256 + 16);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockWidth_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.BlockWidth = 17);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(64' parameters.BlockHeight);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: parameters.BlockHeight = 256;
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(256' parameters.BlockHeight);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: parameters.BlockHeight = 16;
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(16' parameters.BlockHeight);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.BlockHeight = 256 + 16);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.BlockHeight = 256 + 16);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,BlockHeight_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.BlockHeight = 17);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,CompressionLevel_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,CompressionLevel_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,CompressionLevel_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,CompressionLevel_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(6' parameters.CompressionLevel);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,CompressionLevel_CanGetAndSetValue,The following statement contains a magic number: parameters.CompressionLevel = 9;
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,CompressionLevel_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(9' parameters.CompressionLevel);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,CompressionLevel_CanGetAndSetValue,The following statement contains a magic number: ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameters.CompressionLevel = 10);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,KeyFramePeriod_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,KeyFramePeriod_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,KeyFramePeriod_CanGetAndSetValue,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(32' 16' 30);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoParametersTest.cs,KeyFramePeriod_CanGetAndSetValue,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(2)' parameters.KeyFramePeriod);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,MimeType_ReturnsFlashVideoMimeType,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,MimeType_ReturnsFlashVideoMimeType,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,MimeType_ReturnsFlashVideoMimeType,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsNull_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsNull_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsNull_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameWidthIsIncorrect_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameWidthIsIncorrect_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameWidthIsIncorrect_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameWidthIsIncorrect_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(30' 16))));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameWidthIsIncorrect_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(30' 16))));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameHeightIsIncorrect_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameHeightIsIncorrect_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameHeightIsIncorrect_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameHeightIsIncorrect_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(32' 20))));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameHeightIsIncorrect_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(32' 20))));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,FrameCount_WhenInitiallyCreated_IsZero,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 32' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,FrameCount_WhenInitiallyCreated_IsZero,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 32' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,FrameCount_WhenInitiallyCreated_IsZero,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 32' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 32' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 32' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 32' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(32' 32)));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(32' 32)));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(32' 32)));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: flashScreenVideo.AddFrame(new BitmapVideoFrame(new Bitmap(32' 32)));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,AddFrame_WhenFrameIsValid_IncreasesFrameCount,The following statement contains a magic number: Assert.AreEqual(2' flashScreenVideo.FrameCount);
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,Save_WhenStreamIsNull_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,Save_WhenStreamIsNull_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Media,FlashScreenVideoTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Media\FlashScreenVideoTest.cs,Save_WhenStreamIsNull_Throws,The following statement contains a magic number: var flashScreenVideo = new FlashScreenVideo(new FlashScreenVideoParameters(32' 16' 30));
Magic Number,Gallio.Tests.Common.Policies,VersionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\VersionPolicyTest.cs,GetVersionLabel_WhenVersionIsProvided_ReturnsFormattedLabel,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,Gallio.Tests.Common.Policies,VersionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\VersionPolicyTest.cs,GetVersionLabel_WhenVersionIsProvided_ReturnsFormattedLabel,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,Gallio.Tests.Common.Policies,VersionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\VersionPolicyTest.cs,GetVersionLabel_WhenVersionIsProvided_ReturnsFormattedLabel,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,Gallio.Tests.Common.Policies,UnhandledExceptionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\UnhandledExceptionPolicyTest.cs,PolicyHandlesUnhandledExceptionsAndRecursion,The following statement contains a magic number: Assert.Count(3' args);
Magic Number,Gallio.Tests.Common.Policies,UnhandledExceptionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\UnhandledExceptionPolicyTest.cs,PolicyHandlesUnhandledExceptionsAndRecursion,The following statement contains a magic number: Assert.AreEqual("Reporting error."' args[2].Exception.Message);
Magic Number,Gallio.Tests.Common.Policies,UnhandledExceptionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Policies\UnhandledExceptionPolicyTest.cs,PolicyHandlesUnhandledExceptionsAndRecursion,The following statement contains a magic number: Assert.IsTrue(args[2].IsRecursive);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersion(new Version(1' 2' 3' 4));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersion(new Version(1' 2' 3' 4));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersion(new Version(1' 2' 3' 4));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 3' 4)' sig.MinVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 3' 4)' sig.MinVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 3' 4)' sig.MinVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 3' 4)' sig.MaxVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 3' 4)' sig.MaxVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersion_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 3' 4)' sig.MaxVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersion(new Version(1' 2' 3' 4));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersion(new Version(1' 2' 3' 4));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersion(new Version(1' 2' 3' 4));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNotNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersionRange(new Version(1' 0' 0' 0)' new Version(1' 2' 65535' 65535));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNotNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersionRange(new Version(1' 0' 0' 0)' new Version(1' 2' 65535' 65535));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNotNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: sig.SetVersionRange(new Version(1' 0' 0' 0)' new Version(1' 2' 65535' 65535));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNotNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 65535' 65535)' sig.MaxVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNotNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 65535' 65535)' sig.MaxVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenBothArgumentsNotNull_SetsBothMinAndMaxVersion,The following statement contains a magic number: Assert.AreEqual(new Version(1' 2' 65535' 65535)' sig.MaxVersion);
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenOneArgumentNullButNotTheOther_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(null' new Version(1' 2' 3' 4)));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenOneArgumentNullButNotTheOther_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(null' new Version(1' 2' 3' 4)));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenOneArgumentNullButNotTheOther_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(null' new Version(1' 2' 3' 4)));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenOneArgumentNullButNotTheOther_Throws,The following statement contains a magic number: ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(new Version(1' 2' 3' 4)' null));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenOneArgumentNullButNotTheOther_Throws,The following statement contains a magic number: ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(new Version(1' 2' 3' 4)' null));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenOneArgumentNullButNotTheOther_Throws,The following statement contains a magic number: ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(new Version(1' 2' 3' 4)' null));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenMinGreaterThanMax_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(new Version(2' 0' 0' 0)' new Version(1' 2' 3' 4)));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenMinGreaterThanMax_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(new Version(2' 0' 0' 0)' new Version(1' 2' 3' 4)));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenMinGreaterThanMax_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(new Version(2' 0' 0' 0)' new Version(1' 2' 3' 4)));
Magic Number,Gallio.Tests.Common.Reflection,AssemblySignatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblySignatureTest.cs,SetVersionRange_WhenMinGreaterThanMax_Throws,The following statement contains a magic number: var ex = Assert.Throws<ArgumentException>(() => sig.SetVersionRange(new Version(2' 0' 0' 0)' new Version(1' 2' 3' 4)));
Magic Number,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,ArraysOfRank3,The following statement contains a magic number: WrapperAssert.AreEquivalent(typeof(ReflectionPolicySample).MakeArrayType(3)' type.MakeArrayType(3)' false);
Magic Number,Gallio.Tests.Common.Reflection,BaseReflectionPolicyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\BaseReflectionPolicyTest.cs,ArraysOfRank3,The following statement contains a magic number: WrapperAssert.AreEquivalent(typeof(ReflectionPolicySample).MakeArrayType(3)' type.MakeArrayType(3)' false);
Magic Number,Gallio.Tests.Common.Reflection,CodeElementSorterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeElementSorterTest.cs,SortMembersByDeclaringType,The following statement contains a magic number: Assert.AreElementsEqual(new IMethodInfo[] { members[0]' members[2]' members[1] }' sortedMembers);
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,ToString,The following statement contains a magic number: Assert.AreEqual("file(11)"' new CodeLocation("file"' 11' 0).ToString());
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,ToString,The following statement contains a magic number: Assert.AreEqual("file(11'33)"' new CodeLocation("file"' 11' 33).ToString());
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,ToString,The following statement contains a magic number: Assert.AreEqual("file(11'33)"' new CodeLocation("file"' 11' 33).ToString());
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(CodeLocation.Unknown.Equals(new CodeLocation("file"' 42' 33)));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(CodeLocation.Unknown.Equals(new CodeLocation("file"' 42' 33)));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(CodeLocation.Unknown == new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(CodeLocation.Unknown == new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(CodeLocation.Unknown != new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(CodeLocation.Unknown != new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33).Equals(new CodeLocation("file"' 42' 33)));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33).Equals(new CodeLocation("file"' 42' 33)));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33).Equals(new CodeLocation("file"' 42' 33)));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33).Equals(new CodeLocation("file"' 42' 33)));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33) == new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33) == new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33) == new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsTrue(new CodeLocation("file"' 42' 33) == new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(new CodeLocation("file"' 42' 33) != new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(new CodeLocation("file"' 42' 33) != new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(new CodeLocation("file"' 42' 33) != new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,Equality,The following statement contains a magic number: Assert.IsFalse(new CodeLocation("file"' 42' 33) != new CodeLocation("file"' 42' 33));
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,GetHashCode_SeemsSane,The following statement contains a magic number: Assert.AreNotEqual(new CodeLocation("file"' 42' 33).GetHashCode()'                  CodeLocation.Unknown.GetHashCode());
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,GetHashCode_SeemsSane,The following statement contains a magic number: Assert.AreNotEqual(new CodeLocation("file"' 42' 33).GetHashCode()'                  CodeLocation.Unknown.GetHashCode());
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,RoundTripXmlSerializationFullyPopulatedProperties,The following statement contains a magic number: var value = new CodeLocation("path"' 42' 33);
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,RoundTripXmlSerializationFullyPopulatedProperties,The following statement contains a magic number: var value = new CodeLocation("path"' 42' 33);
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,RoundTripBinarySerializationFullyPopulatedProperties,The following statement contains a magic number: CodeLocation instance = new CodeLocation("path"' 42' 33);
Magic Number,Gallio.Tests.Common.Reflection,CodeLocationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\CodeLocationTest.cs,RoundTripBinarySerializationFullyPopulatedProperties,The following statement contains a magic number: CodeLocation instance = new CodeLocation("path"' 42' 33);
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,IsAssembly_WhenStreamDoesNotContainPEHeaderSignature_ReturnsFalse,The following statement contains a magic number: stream.SetLength(1024);
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamDoesNotContainPEHeaderSignature_ReturnsNull,The following statement contains a magic number: stream.SetLength(1024);
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamIsAnMSILAssembly_ReturnsMetadata,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.IsNotNull(metadata);                  Assert.AreEqual(2' metadata.MajorRuntimeVersion);                  Assert.AreEqual(5' metadata.MinorRuntimeVersion);                  Assert.AreEqual(ProcessorArchitecture.MSIL' metadata.ProcessorArchitecture);              });
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamIsAnMSILAssembly_ReturnsMetadata,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.IsNotNull(metadata);                  Assert.AreEqual(2' metadata.MajorRuntimeVersion);                  Assert.AreEqual(5' metadata.MinorRuntimeVersion);                  Assert.AreEqual(ProcessorArchitecture.MSIL' metadata.ProcessorArchitecture);              });
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamIsAnx86Assembly_ReturnsMetadata,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.IsNotNull(metadata);                  Assert.AreEqual(2' metadata.MajorRuntimeVersion);                  Assert.AreEqual(5' metadata.MinorRuntimeVersion);                  Assert.AreEqual(ProcessorArchitecture.X86' metadata.ProcessorArchitecture);              });
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamIsAnx86Assembly_ReturnsMetadata,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.IsNotNull(metadata);                  Assert.AreEqual(2' metadata.MajorRuntimeVersion);                  Assert.AreEqual(5' metadata.MinorRuntimeVersion);                  Assert.AreEqual(ProcessorArchitecture.X86' metadata.ProcessorArchitecture);              });
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamIsAnx64Assembly_ReturnsMetadata,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.IsNotNull(metadata);                  Assert.AreEqual(2' metadata.MajorRuntimeVersion);                  Assert.AreEqual(5' metadata.MinorRuntimeVersion);                  Assert.AreEqual(ProcessorArchitecture.Amd64' metadata.ProcessorArchitecture);              });
Magic Number,Gallio.Tests.Common.Reflection,AssemblyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\AssemblyUtilsTest.cs,GetAssemblyMetadata_WhenStreamIsAnx64Assembly_ReturnsMetadata,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.IsNotNull(metadata);                  Assert.AreEqual(2' metadata.MajorRuntimeVersion);                  Assert.AreEqual(5' metadata.MinorRuntimeVersion);                  Assert.AreEqual(ProcessorArchitecture.Amd64' metadata.ProcessorArchitecture);              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_WhenDelegateTypesIncompatible_Throws,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(VoidDelegate1)' new IntDelegate1(() => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntDelegate1)' new IntIntDelegate1(x => 42)));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntOutIntDelegate1((out int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));                  Assert.Throws<InvalidOperationException>(() => ProxyUtils.CoerceDelegate(                      typeof(IntOutIntDelegate1)' new IntRefIntDelegate1((ref int x) => { x = 42; return 42; })));              });
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntInt_To_IntInt,The following statement contains a magic number: int result = d2(4);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntInt_To_IntInt,The following statement contains a magic number: Assert.AreEqual(16' result);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntRefInt_To_IntRefInt,The following statement contains a magic number: int arg = 4;
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntRefInt_To_IntRefInt,The following statement contains a magic number: Assert.AreEqual(16' result);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntRefInt_To_IntRefInt,The following statement contains a magic number: Assert.AreEqual(5' arg);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntOutInt_To_IntOutInt,The following statement contains a magic number: IntOutIntDelegate1 d1 = (out int x) => { called = true; x = 4; return x * x; };
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntOutInt_To_IntOutInt,The following statement contains a magic number: Assert.AreEqual(16' result);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntOutInt_To_IntOutInt,The following statement contains a magic number: Assert.AreEqual(4' arg);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntRefInt_To_ObjectRefObject,The following statement contains a magic number: object arg = 4;
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntRefInt_To_ObjectRefObject,The following statement contains a magic number: Assert.AreEqual(16' result);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_IntRefInt_To_ObjectRefObject,The following statement contains a magic number: Assert.AreEqual(5' arg);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_ObjectRefObject_To_IntRefInt,The following statement contains a magic number: int arg = 4;
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_ObjectRefObject_To_IntRefInt,The following statement contains a magic number: Assert.AreEqual(16' result);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_ObjectRefObject_To_IntRefInt,The following statement contains a magic number: Assert.AreEqual(5' arg);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_ObjectRefObject_To_ObjectRefObject,The following statement contains a magic number: object arg = 4;
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_ObjectRefObject_To_ObjectRefObject,The following statement contains a magic number: Assert.AreEqual(16' result);
Magic Number,Gallio.Tests.Common.Reflection,ProxyUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\ProxyUtilsTest.cs,CoerceDelegate_ObjectRefObject_To_ObjectRefObject,The following statement contains a magic number: Assert.AreEqual(5' arg);
Magic Number,Gallio.Tests.Common.Reflection.Impl,CciDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\CciDebugSymbolResolverTest.cs,GetSourceLocationForMethod_ReturnsValidLocationForConcreteMethod,The following statement contains a magic number: Assert.Between(codeLocation.Line' 1000' 1003);
Magic Number,Gallio.Tests.Common.Reflection.Impl,CciDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\CciDebugSymbolResolverTest.cs,GetSourceLocationForMethod_ReturnsValidLocationForConcreteMethod,The following statement contains a magic number: Assert.Between(codeLocation.Line' 1000' 1003);
Magic Number,Gallio.Tests.Common.Reflection.Impl,ComDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\ComDebugSymbolResolverTest.cs,GetSourceLocationForMethod_ReturnsValidLocationForConcreteMethod,The following statement contains a magic number: Assert.Between(codeLocation.Line' 1000' 1003);
Magic Number,Gallio.Tests.Common.Reflection.Impl,ComDebugSymbolResolverTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\ComDebugSymbolResolverTest.cs,GetSourceLocationForMethod_ReturnsValidLocationForConcreteMethod,The following statement contains a magic number: Assert.Between(codeLocation.Line' 1000' 1003);
Magic Number,Gallio.Tests.Common.Reflection.Impl,DebugSymbolUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\DebugSymbolUtilsTest.cs,GetSourceLocation_Method_ReturnsValidLocationForConcreteMethod,The following statement contains a magic number: Assert.Between(codeLocation.Line' 1000' 1003);
Magic Number,Gallio.Tests.Common.Reflection.Impl,DebugSymbolUtilsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Reflection\Impl\DebugSymbolUtilsTest.cs,GetSourceLocation_Method_ReturnsValidLocationForConcreteMethod,The following statement contains a magic number: Assert.Between(codeLocation.Line' 1000' 1003);
Magic Number,Gallio.Tests.Common.Remoting,BinaryIpcChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryIpcChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Common.Remoting,BinaryIpcChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryIpcChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Common.Remoting,BinaryIpcChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryIpcChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Common.Remoting,BinaryTcpChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryTcpChannelTest.cs,BinaryTcpClientChannelConstructorThrowsIfHostNameIsNull,The following statement contains a magic number: new BinaryTcpClientChannel(null' 1' TimeSpan.FromSeconds(30));
Magic Number,Gallio.Tests.Common.Remoting,BinaryTcpChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryTcpChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Common.Remoting,BinaryTcpChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryTcpChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Common.Remoting,BinaryTcpChannelTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Remoting\BinaryTcpChannelTest.cs,RegisteredServiceCanBeAccessedWithGetService,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ContainsDocumentAndDiffs,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new[] { new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 3)) }' "abc"' "def");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ContainsDocumentAndDiffs,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new[] { new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 3)) }' "abc"' "def");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ContainsDocumentAndDiffs,The following statement contains a magic number: Assert.AreElementsEqual(new[] { new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 3)) }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ContainsDocumentAndDiffs,The following statement contains a magic number: Assert.AreElementsEqual(new[] { new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 3)) }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffListMustNotContainGaps,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffListMustNotContainGaps,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffListMustNotContainGaps,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffListMustNotContainOverlappingSegments,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.Change' new Range(0' 3)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffListMustNotContainOverlappingSegments,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.Change' new Range(0' 3)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffListMustNotContainOverlappingSegments,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.Change' new Range(0' 3)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffCanConsistOfMultipleContiguousSegments,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))'                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffCanConsistOfMultipleContiguousSegments,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))'                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DiffCanConsistOfMultipleContiguousSegments,The following statement contains a magic number: new DiffSet(new Diff[] { new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))'                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))'                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 2)) }' "abc"' "dbfg");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_InterleavedStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_InterleavedStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_InterleavedStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_InterleavedStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_InterleavedStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_InterleavedStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_RightOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_RightOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_RightOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_RightOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_RightOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_RightOnlyStyle,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 1)' new Range(1' 1))' // same                  new Diff(DiffKind.Change' new Range(2' 1)' new Range(2' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(3' 1)' new Range(2' 1))' // same                  new Diff(DiffKind.Change' new Range(4' 0)' new Range(3' 1))' // addition              }' "acde"' "bcef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: DiffSet diffSet = new DiffSet(new Diff[] {                   new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 1))' // change                  new Diff(DiffKind.NoChange' new Range(1' 20)' new Range(1' 20))' // same                  new Diff(DiffKind.Change' new Range(21' 1)' new Range(21' 0))' // deletion                  new Diff(DiffKind.NoChange' new Range(22' 20)' new Range(21' 20))' // same                  new Diff(DiffKind.Change' new Range(42' 0)' new Range(41' 1))' // addition              }' "accccccccccccccccccccdeeeeeeeeeeeeeeeeeeee"' "bcccccccccccccccccccceeeeeeeeeeeeeeeeeeeef");
Magic Number,Gallio.Tests.Common.Text,DiffSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,WriteTo_LeftOnlyWithLimitedContext,The following statement contains a magic number: diffSet.WriteTo(writer' DiffStyle.LeftOnly' 7);
Magic Number,Gallio.Tests.Common.Text,WhenDocumentsAreEqualy,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,NoChangeSpansBothDocuments,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] { new Diff(DiffKind.NoChange' new Range(0' 14)' new Range(0' 14)) }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenDocumentsAreEqualy,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,NoChangeSpansBothDocuments,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] { new Diff(DiffKind.NoChange' new Range(0' 14)' new Range(0' 14)) }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenExactlyOneDocumentIsEmpty,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,IfLeftDocumentIsEmptyChangeSpansRightDocument,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] { new Diff(DiffKind.Change' new Range(0' 0)' new Range(0' 5)) }'                      diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenExactlyOneDocumentIsEmpty,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,IfRightDocumentIsEmptyChangeSpansLeftDocument,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] { new Diff(DiffKind.Change' new Range(0' 5)' new Range(0' 0)) }'                      diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenCommonPrefixOrSuffixIsFound,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ProblemSizeIsReducedButDiffOffsetsAreStillCorrect,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.NoChange' new Range(0' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(3' 3)' new Range(3' 2))'                      new Diff(DiffKind.NoChange' new Range(6' 2)' new Range(5' 2))'                      new Diff(DiffKind.Change' new Range(8' 3)' new Range(7' 2))'                      new Diff(DiffKind.NoChange' new Range(11' 2)' new Range(9' 2))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,InsertAtHeadAndDeleteAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 0)' new Range(0' 1))'                      new Diff(DiffKind.NoChange' new Range(0' 2)' new Range(1' 2))'                      new Diff(DiffKind.Change' new Range(2' 1)' new Range(3' 0))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,InsertAtHeadAndDeleteAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 0)' new Range(0' 1))'                      new Diff(DiffKind.NoChange' new Range(0' 2)' new Range(1' 2))'                      new Diff(DiffKind.Change' new Range(2' 1)' new Range(3' 0))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,InsertAtHeadAndDeleteAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 0)' new Range(0' 1))'                      new Diff(DiffKind.NoChange' new Range(0' 2)' new Range(1' 2))'                      new Diff(DiffKind.Change' new Range(2' 1)' new Range(3' 0))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,InsertAtHeadAndDeleteAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 0)' new Range(0' 1))'                      new Diff(DiffKind.NoChange' new Range(0' 2)' new Range(1' 2))'                      new Diff(DiffKind.Change' new Range(2' 1)' new Range(3' 0))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DeleteAtHeadAndInsertAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(1' 2)' new Range(0' 2))'                      new Diff(DiffKind.Change' new Range(3' 0)' new Range(2' 1))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DeleteAtHeadAndInsertAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(1' 2)' new Range(0' 2))'                      new Diff(DiffKind.Change' new Range(3' 0)' new Range(2' 1))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DeleteAtHeadAndInsertAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(1' 2)' new Range(0' 2))'                      new Diff(DiffKind.Change' new Range(3' 0)' new Range(2' 1))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,DeleteAtHeadAndInsertAtTail,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 1)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(1' 2)' new Range(0' 2))'                      new Diff(DiffKind.Change' new Range(3' 0)' new Range(2' 1))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenOptimizationUsedShouldYieldSameResultsAsWhenOptimizationIsUsed,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,MultipleAdjacentChanges,The following statement contains a magic number: Assert.AreElementsEqual(new Diff[] {                      new Diff(DiffKind.Change' new Range(0' 3)' new Range(0' 0))'                      new Diff(DiffKind.NoChange' new Range(3' 3)' new Range(0' 3))'                      new Diff(DiffKind.Change' new Range(6' 0)' new Range(3' 3))'                      new Diff(DiffKind.NoChange' new Range(6' 3)' new Range(6' 3))                  }' diffSet.Diffs);
Magic Number,Gallio.Tests.Common.Text,WhenDocumentsAreVeryLargeAndContainManyDifferences,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,RunTimeIsBoundedForPathologicalCaseWithNoCommonalities,The following statement contains a magic number: const int problemSize = 3000;
Magic Number,Gallio.Tests.Common.Text,WhenDocumentsAreVeryLargeAndContainManyDifferences,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,RunWorstCaseDiff,The following statement contains a magic number: i < problemSize * 2
Magic Number,Gallio.Tests.Common.Text,RegressionTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ComputesValidDiffsForRandomInputs,The following statement contains a magic number: a.Append((char)(random.Next(6) + 'a'));
Magic Number,Gallio.Tests.Common.Text,RegressionTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffSetTest.cs,ComputesValidDiffsForRandomInputs,The following statement contains a magic number: b.Append((char)(random.Next(6) + 'a'));
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: var diff = new Diff(DiffKind.Change' new Range(1' 3)' new Range(2' 4));
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: var diff = new Diff(DiffKind.Change' new Range(1' 3)' new Range(2' 4));
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: var diff = new Diff(DiffKind.Change' new Range(1' 3)' new Range(2' 4));
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.AreEqual(new Range(1' 3)' diff.LeftRange);
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.AreEqual(new Range(2' 4)' diff.RightRange);
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.AreEqual(new Range(2' 4)' diff.RightRange);
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ToStringFormatting,The following statement contains a magic number: Assert.AreEqual("Change: [1 .. 3)' [2 .. 6)"' new Diff(DiffKind.Change' new Range(1' 2)' new Range(2' 4)).ToString());
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ToStringFormatting,The following statement contains a magic number: Assert.AreEqual("Change: [1 .. 3)' [2 .. 6)"' new Diff(DiffKind.Change' new Range(1' 2)' new Range(2' 4)).ToString());
Magic Number,Gallio.Tests.Common.Text,DiffTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\DiffTest.cs,ToStringFormatting,The following statement contains a magic number: Assert.AreEqual("Change: [1 .. 3)' [2 .. 6)"' new Diff(DiffKind.Change' new Range(1' 2)' new Range(2' 4)).ToString());
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: var range = new Range(3' 4);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: var range = new Range(3' 4);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.AreEqual(3' range.StartIndex);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.AreEqual(4' range.Length);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.AreEqual(7' range.EndIndex);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,BetweenInitializesProperties,The following statement contains a magic number: var range = Range.Between(3' 4);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,BetweenInitializesProperties,The following statement contains a magic number: var range = Range.Between(3' 4);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,BetweenInitializesProperties,The following statement contains a magic number: Assert.AreEqual(3' range.StartIndex);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,BetweenInitializesProperties,The following statement contains a magic number: Assert.AreEqual(4' range.EndIndex);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,SubstringOfThrowsIfStringIsNull,The following statement contains a magic number: var range = new Range(0' 4);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,SubstringOfThrowsIfRangeIsOutOfBounds,The following statement contains a magic number: var range = new Range(3' 4);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,SubstringOfThrowsIfRangeIsOutOfBounds,The following statement contains a magic number: var range = new Range(3' 4);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,SubstringOfReturnsStringWhenRangeIsCorrect,The following statement contains a magic number: Assert.AreEqual("cdef"' new Range(2' 4).SubstringOf("abcdefg"));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,SubstringOfReturnsStringWhenRangeIsCorrect,The following statement contains a magic number: Assert.AreEqual("cdef"' new Range(2' 4).SubstringOf("abcdefg"));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithThrowsIfRangeIsDisjoint,The following statement contains a magic number: var a = new Range(2' 3);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithThrowsIfRangeIsDisjoint,The following statement contains a magic number: var a = new Range(2' 3);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithThrowsIfRangeIsDisjoint,The following statement contains a magic number: var b = new Range(4' 2);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithThrowsIfRangeIsDisjoint,The following statement contains a magic number: var b = new Range(4' 2);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithThrowsIfRangeOverlaps,The following statement contains a magic number: var a = new Range(2' 3);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithThrowsIfRangeOverlaps,The following statement contains a magic number: var a = new Range(2' 3);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithThrowsIfRangeOverlaps,The following statement contains a magic number: var b = new Range(3' 1);
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithFollowingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(2' 1).ExtendWith(new Range(3' 2)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithFollowingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(2' 1).ExtendWith(new Range(3' 2)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithFollowingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(2' 1).ExtendWith(new Range(3' 2)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithFollowingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(2' 1).ExtendWith(new Range(3' 2)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithFollowingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(2' 1).ExtendWith(new Range(3' 2)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithPrecedingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(3' 2).ExtendWith(new Range(2' 1)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithPrecedingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(3' 2).ExtendWith(new Range(2' 1)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithPrecedingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(3' 2).ExtendWith(new Range(2' 1)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithPrecedingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(3' 2).ExtendWith(new Range(2' 1)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ExtendWithPrecedingRange,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' new Range(3' 2).ExtendWith(new Range(2' 1)));
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ToStringFormatting,The following statement contains a magic number: Assert.AreEqual("[2 .. 5)"' new Range(2' 3).ToString());
Magic Number,Gallio.Tests.Common.Text,RangeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RangeTest.cs,ToStringFormatting,The following statement contains a magic number: Assert.AreEqual("[2 .. 5)"' new Range(2' 3).ToString());
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentAndRangeThrowsIfRangeExceedsBounds,The following statement contains a magic number: new Substring("abcde"' new Range(3' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentAndRangeThrowsIfRangeExceedsBounds,The following statement contains a magic number: new Substring("abcde"' new Range(3' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentOnlyInitializesProperties,The following statement contains a magic number: Assert.AreEqual(new Range(0' 5)' substring.Range);
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentOnlyInitializesProperties,The following statement contains a magic number: Assert.AreEqual(5' substring.Length);
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentAndRangeInitializesProperties,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(2' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentAndRangeInitializesProperties,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(2' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentAndRangeInitializesProperties,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' substring.Range);
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentAndRangeInitializesProperties,The following statement contains a magic number: Assert.AreEqual(new Range(2' 3)' substring.Range);
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ConstructorWithContentAndRangeInitializesProperties,The following statement contains a magic number: Assert.AreEqual(3' substring.Length);
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ToStringExtractsSubstring,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(2' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,ToStringExtractsSubstring,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(2' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,IndexerThrowsIfIndexTooLow,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(1' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,IndexerThrowsIfIndexTooHigh,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(1' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,IndexerThrowsIfIndexTooHigh,The following statement contains a magic number: Assert.Throws<IndexOutOfRangeException>(() => c = substring[3]);
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,IndexerReturnsIndexedCharWithAppropriateOffsets,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(1' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,IndexerReturnsIndexedCharWithAppropriateOffsets,The following statement contains a magic number: Assert.AreEqual('d'' substring[2]);
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,Extract,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(1' 3));
Magic Number,Gallio.Tests.Common.Text,SubstringTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\SubstringTest.cs,Extract2,The following statement contains a magic number: Substring substring = new Substring("abcde"' new Range(1' 3));
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: var attribute1 = new Gallio.Common.Xml.NodeAttribute(123' "name1"' "value1"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: var attribute1 = new Gallio.Common.Xml.NodeAttribute(123' "name1"' "value1"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: var attribute2 = new Gallio.Common.Xml.NodeAttribute(456' "name2"' "value2"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: var attribute2 = new Gallio.Common.Xml.NodeAttribute(456' "name2"' "value2"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: var attribute3 = new Gallio.Common.Xml.NodeAttribute(789' "name3"' "value3"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: var attribute3 = new Gallio.Common.Xml.NodeAttribute(789' "name3"' "value3"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: Assert.Count(3' collection);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,MakeStubCollection,The following statement contains a magic number: list.Add(new Gallio.Common.Xml.NodeAttribute(i' namesValues[2 * i]' namesValues[2 * i + 1]' namesValues.Length / 2));
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,MakeStubCollection,The following statement contains a magic number: list.Add(new Gallio.Common.Xml.NodeAttribute(i' namesValues[2 * i]' namesValues[2 * i + 1]' namesValues.Length / 2));
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,MakeStubCollection,The following statement contains a magic number: list.Add(new Gallio.Common.Xml.NodeAttribute(i' namesValues[2 * i]' namesValues[2 * i + 1]' namesValues.Length / 2));
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,MakeStubCollection,The following statement contains a magic number: i < namesValues.Length / 2
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_missing_attribute_at_the_end,The following statement contains a magic number: AssertDiff(diffSet' new[] { new Diff(DiffType.MissingAttribute' XmlPathRoot.Strict.Element(0).Attribute(2)' DiffTargets.Expected) });
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_exceeding_attribute_at_the_end,The following statement contains a magic number: AssertDiff(diffSet' new[] { new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(2)' DiffTargets.Actual) });
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeCollectionTest.cs,Diff_collections_with_several_unexpected_values,The following statement contains a magic number: AssertDiff(diffSet' new[] {                   new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(0)' DiffTargets.Both)'                  new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(2)' DiffTargets.Both) });
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Constructs_with_invalid_count_should_throw_exception,The following statement contains a magic number: new NodeAttribute(5' "name"' "value"' invalidCount);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Constructs_ok,The following statement contains a magic number: var attribute = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Constructs_ok,The following statement contains a magic number: var attribute = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Constructs_ok,The following statement contains a magic number: Assert.AreEqual(123' attribute.Index);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,AreNamesEqual,The following statement contains a magic number: var attribute = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,AreNamesEqual,The following statement contains a magic number: var attribute = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,AreValuesEqual,The following statement contains a magic number: var attribute = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,AreValuesEqual,The following statement contains a magic number: var attribute = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_same_index,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_same_index,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_same_index,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_same_index,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_different_index,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_different_index,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_different_index,The following statement contains a magic number: var expected = new NodeAttribute(456' "planet"' "Saturn"' 789);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_with_different_index,The following statement contains a magic number: var expected = new NodeAttribute(456' "planet"' "Saturn"' 789);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_ignoring_name_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_ignoring_name_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_ignoring_name_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "PLANET"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_equal_attributes_ignoring_name_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "PLANET"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_name_differing_by_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_name_differing_by_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_name_differing_by_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "PLANET"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_name_differing_by_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "PLANET"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_name_differing_by_case,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Actual));
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_name,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_name,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_name,The following statement contains a magic number: var expected = new NodeAttribute(123' "orb"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_name,The following statement contains a magic number: var expected = new NodeAttribute(123' "orb"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_name,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.UnexpectedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Actual));
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_value_differing_by_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "sAtUrN"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_value_differing_by_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "sAtUrN"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_value_differing_by_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_value_differing_by_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_value_differing_by_case,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.MismatchedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Both));
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_ignoring_value_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "sAtUrN"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_ignoring_value_case,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "sAtUrN"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_ignoring_value_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_ignoring_value_case,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_value,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Jupiter"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_value,The following statement contains a magic number: var actual = new NodeAttribute(123' "planet"' "Jupiter"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_value,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_value,The following statement contains a magic number: var expected = new NodeAttribute(123' "planet"' "Saturn"' 456);
Magic Number,Gallio.Tests.Common.Xml,NodeAttributeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeAttributeTest.cs,Diff_attributes_with_different_value,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.MismatchedAttribute' XmlPathRoot.Strict.Element(0).Attribute(123)' DiffTargets.Both));
Magic Number,Gallio.Tests.Common.Xml,NodeDeclarationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeDeclarationTest.cs,Constructs_ok,The following statement contains a magic number: var attribute1 = new NodeAttribute(123' "name1"' "value1"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeDeclarationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeDeclarationTest.cs,Constructs_ok,The following statement contains a magic number: var attribute1 = new NodeAttribute(123' "name1"' "value1"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeDeclarationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeDeclarationTest.cs,Constructs_ok,The following statement contains a magic number: var attribute2 = new NodeAttribute(456' "name2"' "value2"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeDeclarationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeDeclarationTest.cs,Constructs_ok,The following statement contains a magic number: var attribute2 = new NodeAttribute(456' "name2"' "value2"' 999);
Magic Number,Gallio.Tests.Common.Xml,NodeCollectionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCollectionTest.cs,Constructs_ok,The following statement contains a magic number: Assert.Count(3' collection);
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Constructs_ok,The following statement contains a magic number: var comment = new NodeComment(index' 456' " Jack Burton ");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var expected = new NodeComment(456' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var expected = new NodeComment(456' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var expected = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var expected = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_value,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_value,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_value,The following statement contains a magic number: var expected = new NodeComment(123' 456' "SomeOtherText");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_value,The following statement contains a magic number: var expected = new NodeComment(123' 456' "SomeOtherText");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_value,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.MismatchedComment' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Both));
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var actual = new NodeComment(123' 456' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var expected = new NodeComment(123' 456' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var expected = new NodeComment(123' 456' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.MismatchedComment' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Both));
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: var actual = new NodeComment(123' 456' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: var actual = new NodeComment(123' 456' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeCommentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeCommentTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.UnexpectedComment' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Actual));
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Constructs_with_negative_index_should_throw_exception,The following statement contains a magic number: new NodeContent(-1' 123' "blah blah");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Constructs_with_null_value_should_throw_exception,The following statement contains a magic number: new NodeContent(0' 123' null);
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Constructs_ok,The following statement contains a magic number: var comment = new NodeContent(index' 123' " Jack Burton ");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var expected = new NodeContent(456' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var expected = new NodeContent(456' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var expected = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var expected = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_ignoring_name_case,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_ignoring_name_case,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_ignoring_name_case,The following statement contains a magic number: var expected = new NodeContent(123' 123' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_equal_ignoring_name_case,The following statement contains a magic number: var expected = new NodeContent(123' 123' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var actual = new NodeContent(123' 123' "Text");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var expected = new NodeContent(123' 123' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: var expected = new NodeContent(123' 123' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_value_differing_by_case,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.MismatchedContent' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Both));
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: var actual = new NodeContent(123' 123' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: var actual = new NodeContent(123' 123' "TEXT");
Magic Number,Gallio.Tests.Common.Xml,NodeContentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeContentTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.UnexpectedContent' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Actual));
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_with_negative_index_should_throw_exception,The following statement contains a magic number: new NodeElement(-1' 123' "name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_with_null_name_should_throw_exception,The following statement contains a magic number: new NodeElement(0' 123' null' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_with_null_attributes_should_throw_exception,The following statement contains a magic number: new NodeElement(0' 123' "name"' null' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_with_null_child_should_throw_exception,The following statement contains a magic number: new NodeElement(0' 123' "name"' NodeAttributeCollection.Empty' null);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_empty_element,The following statement contains a magic number: var element = new NodeElement(index' 123' "Planet"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_non_empty_element,The following statement contains a magic number: var attribute1 = new Gallio.Common.Xml.NodeAttribute(0' "diameter"' "4878 km"' 2);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_non_empty_element,The following statement contains a magic number: var attribute2 = new Gallio.Common.Xml.NodeAttribute(1' "revolution"' "58.6 d"' 2);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Constructs_non_empty_element,The following statement contains a magic number: var element = new NodeElement(0' 123' "Planet"' new[] { attribute1' attribute2 }' new[] { mockChild1' mockChild2 });
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,AreNamesEqual,The following statement contains a magic number: var element = new NodeElement(0' 123' "planet"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_expected_value_should_throw_exception,The following statement contains a magic number: var actual = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var actual = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_path_should_throw_exception,The following statement contains a magic number: var expected = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var actual = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_null_pathExpected_should_throw_exception,The following statement contains a magic number: var expected = new NodeElement(123' 123' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var expected = new NodeElement(456' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_different_index,The following statement contains a magic number: var expected = new NodeElement(456' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var expected = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_same_index,The following statement contains a magic number: var expected = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name,The following statement contains a magic number: var expected = new NodeElement(123' 456' "SomeOtherName"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name,The following statement contains a magic number: var expected = new NodeElement(123' 456' "SomeOtherName"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.MismatchedElement' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Both));
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name_case,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name_case,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name_case,The following statement contains a magic number: var expected = new NodeElement(123' 456' "NAME"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name_case,The following statement contains a magic number: var expected = new NodeElement(123' 456' "NAME"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_item_differing_by_name_case,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.MismatchedElement' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Both));
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_item_differing_by_name_case,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_item_differing_by_name_case,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_item_differing_by_name_case,The following statement contains a magic number: var expected = new NodeElement(123' 456' "NAME"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_equal_with_item_differing_by_name_case,The following statement contains a magic number: var expected = new NodeElement(123' 456' "NAME"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: var actual = new NodeElement(123' 456' "Name"' NodeAttributeCollection.Empty' EmptyArray<INode>.Instance);
Magic Number,Gallio.Tests.Common.Xml,NodeElementTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\NodeElementTest.cs,Diff_with_items_differing_by_type,The following statement contains a magic number: AssertDiff(diff' new Diff(DiffType.UnexpectedElement' XmlPathRoot.Strict.Empty.Element(123)' DiffTargets.Actual));
Magic Number,Gallio.Tests.Common.Xml,ParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\ParserTest.cs,Parse,The following statement contains a magic number: Assert.AreEqual(2' children.Count);
Magic Number,Gallio.Tests.Common.Xml,ParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\ParserTest.cs,Parse,The following statement contains a magic number: Assert.Count(2' children);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Attribute_with_negative_index_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Attribute(-1);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Formats_strict_path_with_one_element,The following statement contains a magic number: var actual = XmlPathRoot.Strict.Element(123).ToString();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Formats_complex_strict_path,The following statement contains a magic number: var actual = XmlPathRoot.Strict.Element(123).Element(456).Element(789).Attribute(666).ToString();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Formats_complex_strict_path,The following statement contains a magic number: var actual = XmlPathRoot.Strict.Element(123).Element(456).Element(789).Attribute(666).ToString();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Formats_complex_strict_path,The following statement contains a magic number: var actual = XmlPathRoot.Strict.Element(123).Element(456).Element(789).Attribute(666).ToString();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Formats_complex_strict_path,The following statement contains a magic number: var actual = XmlPathRoot.Strict.Element(123).Element(456).Element(789).Attribute(666).ToString();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_non_root_element_to_declaration_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Declaration();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_attribute_to_declaration_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Attribute(123).Declaration();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_attribute_to_declaration_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Attribute(123).Declaration();
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_root_to_attribute_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Empty.Attribute(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_attribute_to_attribute_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Attribute(123).Attribute(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_attribute_to_attribute_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Attribute(123).Attribute(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_attribute_to_attribute_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Attribute(123).Attribute(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_declaration_to_attribute_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Declaration().Attribute(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_declaration_to_attribute_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Declaration().Attribute(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_declaration_to_element_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Declaration().Element(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_declaration_to_element_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Declaration().Element(123);
Magic Number,Gallio.Tests.Common.Xml.Paths,IXmlPathTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Xml\Paths\IXmlPathTest.cs,Extends_declaration_to_declaration_should_throw_exception,The following statement contains a magic number: XmlPathRoot.Strict.Element(123).Declaration().Declaration();
Magic Number,Gallio.Tests.Framework.Assertions,AssertionHelperTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionHelperTest.cs,Verify_WhenCalled_IncrementsAssertionCountEachTime,The following statement contains a magic number: Assert.AreEqual(2' secondCount);
Magic Number,Gallio.Tests.Framework.Assertions,AssertionHelperTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionHelperTest.cs,Explain_should_decorate_several_inner_assertion_failures,The following statement contains a magic number: Assert.Count(2' failures[0].InnerFailures);
Magic Number,Gallio.Tests.Framework.Assertions,AssertionConditionEvaluatorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionConditionEvaluatorTest.cs,FailureMessageIgnoresValueOfTopLevelNotExpression,The following statement contains a magic number: int x = 42;
Magic Number,Gallio.Tests.Framework.Assertions,AssertionConditionEvaluatorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionConditionEvaluatorTest.cs,FailureMessageIgnoresRepeatedOccurrencesOfAVariable,The following statement contains a magic number: int x = 42;
Magic Number,Gallio.Tests.Framework.Assertions,AssertionConditionEvaluatorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionConditionEvaluatorTest.cs,FailureMessageIgnoresRepeatedOccurrencesOfAVariable,The following statement contains a magic number: AssertionFailure failure = AssertionConditionEvaluator.Eval(() => x * 2 == x + 1' true' null);
Magic Number,Gallio.Tests.Framework.Assertions,AssertionFailureBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureBuilderTest.cs,CanAddRawLabeledValue,The following statement contains a magic number: builder.AddRawLabeledValue("Abc"' 123);
Magic Number,Gallio.Tests.Framework.Assertions,AssertionFailureBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureBuilderTest.cs,CanAddRawLabeledValue,The following statement contains a magic number: builder.AddRawLabeledValue("Def"' 3.0m);
Magic Number,Gallio.Tests.Framework.Assertions,AssertionFailureBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureBuilderTest.cs,TruncatesDiffContextWhenTooLong,The following statement contains a magic number: int split = AssertionFailureBuilder.CompressedDiffContextLength / 2;
Magic Number,Gallio.Tests.Framework.Assertions,AssertionFailureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureTest.cs,ToStringEverything,The following statement contains a magic number: AssertionFailure failure = new AssertionFailureBuilder("Description")                  .SetMessage("Message goes here")                  .SetStackTrace(new StackTraceData("Stack goes here"))                  .AddRawExpectedValue("Expected value")                  .AddRawActualValue("Actual value")                  .AddRawLabeledValue("Very Long Label That Will Not Be Padded"' "")                  .AddRawLabeledValue("x"' 42)                  .AddException(new Exception("Boom"))                  .AddException(new Exception("Kaput"))                  .AddInnerFailure(new AssertionFailureBuilder("Inner").SetStackTrace(null).ToAssertionFailure())                  .ToAssertionFailure();
Magic Number,Gallio.Tests.Framework.Assertions,AssertionFailureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Assertions\AssertionFailureTest.cs,WriteToEverything,The following statement contains a magic number: AssertionFailure failure = new AssertionFailureBuilder("Description")                  .SetMessage("Message goes here")                  .SetStackTrace(new StackTraceData("Stack goes here"))                  .AddRawExpectedValue("Expected value")                  .AddRawActualValue("Actual value")                  .AddRawLabeledValue("Very Long Label That Will Not Be Padded"' "")                  .AddRawLabeledValue("x"' 42)                  .AddException(new Exception("Boom"))                  .AddException(new Exception("Kaput"))                  .AddInnerFailure(new AssertionFailureBuilder("Inner").SetStackTrace(null).ToAssertionFailure())                  .ToAssertionFailure();
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,Screenshot_WithCaptureParametersIncludingZoomFactor_CapturesZoomedScreenshot,The following statement contains a magic number: Assert.Multiple(() =>                      {                          Assert.AreApproximatelyEqual(screenSize.Width / 2' bitmap.Width' 1);                          Assert.AreApproximatelyEqual(screenSize.Height / 2' bitmap.Height' 1);                      });
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,Screenshot_WithCaptureParametersIncludingZoomFactor_CapturesZoomedScreenshot,The following statement contains a magic number: Assert.Multiple(() =>                      {                          Assert.AreApproximatelyEqual(screenSize.Width / 2' bitmap.Width' 1);                          Assert.AreApproximatelyEqual(screenSize.Height / 2' bitmap.Height' 1);                      });
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,StartRecording_CapturesVideo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,StartRecording_WhenCaptureParametersIsNull_Throws,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => Capture.StartRecording(null' 5.0));
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,StartRecording_WithCaptureParametersIncludingZoomFactor_CapturesZoomedVideo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,StartRecording_WithCaptureParametersIncludingZoomFactor_CapturesZoomedVideo,The following statement contains a magic number: Assert.Multiple(() =>                      {                          Assert.AreApproximatelyEqual(screenSize.Width / 2' recorder.Video.Parameters.Width' 1);                          Assert.AreApproximatelyEqual(screenSize.Height / 2' recorder.Video.Parameters.Height' 1);                      });
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,StartRecording_WithCaptureParametersIncludingZoomFactor_CapturesZoomedVideo,The following statement contains a magic number: Assert.Multiple(() =>                      {                          Assert.AreApproximatelyEqual(screenSize.Width / 2' recorder.Video.Parameters.Width' 1);                          Assert.AreApproximatelyEqual(screenSize.Height / 2' recorder.Video.Parameters.Height' 1);                      });
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,AutoEmbedRecording_WhenCaptureParametersIsNull_Throws,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => Capture.AutoEmbedRecording(TriggerEvent.TestFinished' "name"' null' 5));
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,SetCaptionFontSize_WhenFontSizeIsValid_SetsTheCaptionFontSize,The following statement contains a magic number: Capture.SetCaptionFontSize(5);
Magic Number,Gallio.Tests.Framework,CaptureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,SetCaptionFontSize_WhenFontSizeIsValid_SetsTheCaptionFontSize,The following statement contains a magic number: Assert.AreEqual(5' Capture.GetCaptionOverlay().FontSize);
Magic Number,Gallio.Tests.Framework,AutoEmbedScreenshotSamples,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,Register,The following statement contains a magic number: Capture.AutoEmbedScreenshot(triggerEvent' null' new CaptureParameters() { Zoom = 0.25 });
Magic Number,Gallio.Tests.Framework,AutoEmbedRecordingSamples,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,Triggered,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Gallio.Tests.Framework,AutoEmbedRecordingSamples,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,NotTriggered,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Gallio.Tests.Framework,AutoEmbedRecordingSamples,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,Register,The following statement contains a magic number: Capture.AutoEmbedRecording(triggerEvent' null' new CaptureParameters() { Zoom = 0.25 }' 5);
Magic Number,Gallio.Tests.Framework,AutoEmbedRecordingSamples,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\CaptureTest.cs,Register,The following statement contains a magic number: Capture.AutoEmbedRecording(triggerEvent' null' new CaptureParameters() { Zoom = 0.25 }' 5);
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesValuesUsingObjectEquality,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(1' 2));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new[] { 2' 3' 5' 7 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5' 7 }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new int[] { }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new int[] { }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new int[] { }' new[] { 2' 3' 5 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new int[] { }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new int[] { }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesArraysByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new[] { 2' 3' 5 }' new int[] { }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsTrue(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesDistinctIfTheyHaveDifferentTypes,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int> { 1' 2 }' new[] { 1' 2 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,EqualsComparesSimpleEnumerablesDistinctIfTheyHaveDifferentTypes,The following statement contains a magic number: Assert.IsFalse(comparisonSemantics.Equals(new List<int> { 1' 2 }' new[] { 1' 2 }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 11 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareComparesSimpleEnumerablesRecursivelyByContent,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new List<int[]> { new[] { 1' 2 }' new[] { 9' 10 } }'                  new List<int[]> { new[] { 1' 2 }' new[] { 9' 10' 11 } }));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new ComparableStub(42)' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new ComparableStub(42)' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new ComparableStub(56)' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new ComparableStub(56)' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new ComparableStub(32)' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new ComparableStub(32)' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new ComparableStub(42)' null));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new ComparableStub(42)' new object()));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(null' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new object()' new ComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new GenericComparableStub(42)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new GenericComparableStub(42)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new GenericComparableStub(56)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new GenericComparableStub(56)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new GenericComparableStub(32)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new GenericComparableStub(32)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new GenericComparableStub(42)' null));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareUsesGenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(null' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare<object>(new GenericComparableStub(42)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare<object>(new GenericComparableStub(42)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare<object>(new GenericComparableStub(56)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare<object>(new GenericComparableStub(56)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare<object>(new GenericComparableStub(32)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare<object>(new GenericComparableStub(32)' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare<object>(new GenericComparableStub(42)' null));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanFindAppropriateUnificationOfenericIComparableWhenAvailable,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare<object>(null' new GenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(42)' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(0' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(42)' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(56)' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(56)' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(32)' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(32)' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare(new NonReflexiveGenericComparableStub(42)' null));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare<object>(new NonReflexiveGenericComparableStub(42)' new Base()));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(-1' comparisonSemantics.Compare(null' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,CompareCanHandleCasesWhereIComparableIsNotImplementedReflexively,The following statement contains a magic number: Assert.AreEqual(1' comparisonSemantics.Compare<object>(new Base()' new NonReflexiveGenericComparableStub(42)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(1' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(1' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(1' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(1' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(1' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(1' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(2' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(2' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(2' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(2' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(2' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(2' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(true' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(2' 0' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(false' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(0' 23' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(false' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(0' 23' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(false' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(0' 23' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(false' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(0' 23' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(false' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(0' 23' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(false' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(0' 23' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,ApproximatelyEqual_DateTime,The following statement contains a magic number: Assert.AreEqual(false' comparisonSemantics.ApproximatelyEqual(                  new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)' new TimeSpan(0' 23' 0' 0)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_Double,The following statement contains a magic number: Assert.AreEqual(1.5' differencer(3.5' 2.0));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_Double,The following statement contains a magic number: Assert.AreEqual(1.5' differencer(3.5' 2.0));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_Double,The following statement contains a magic number: Assert.AreEqual(1.5' differencer(3.5' 2.0));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_DateTime,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(-1' 0' 0' 0)' differencer(new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_DateTime,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(-1' 0' 0' 0)' differencer(new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_DateTime,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(-1' 0' 0' 0)' differencer(new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_DateTime,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(-1' 0' 0' 0)' differencer(new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_DateTime,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(-1' 0' 0' 0)' differencer(new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)));
Magic Number,Gallio.Tests.Framework,DefaultComparisonSemanticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\DefaultComparisonSemanticsTest.cs,GetSubtractionFunc_DateTime,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(-1' 0' 0' 0)' differencer(new DateTime(2008' 03' 14)' new DateTime(2008' 03' 15)));
Magic Number,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,RunCanBeAbortedInProgress,The following statement contains a magic number: TestOutcome outcome = sandbox.Run(writer' () =>              {                  ready.Set();                  Thread.Sleep(10000);                  completed = true;              }' "Run Description");
Magic Number,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,RunWillBeAbortedByTimeoutIfItExpiresBeforeItIsFinished,The following statement contains a magic number: RunWithTimeout(TimeSpan.FromMilliseconds(10000)' TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,RunWillBeAbortedByTimeoutIfItExpiresBeforeItIsFinished,The following statement contains a magic number: RunWithTimeout(TimeSpan.FromMilliseconds(10000)' TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,RunWillNotBeAbortedByTimeoutIfItExpiresAfterItIsFinished,The following statement contains a magic number: RunWithTimeout(TimeSpan.FromMilliseconds(1)' TimeSpan.FromMilliseconds(10000));
Magic Number,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,WhenSandboxEntersProtectedContext_AbortsAreDeferred,The following statement contains a magic number: TestOutcome outcome = sandbox.Run(writer' () =>              {                  using (sandbox.Protect())                  {                      barrier.Set();                      Thread.Sleep(300);                      completed = true;                  }                  Thread.Sleep(300);              }' "Run Description");
Magic Number,Gallio.Tests.Framework,SandboxTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\SandboxTest.cs,WhenSandboxEntersProtectedContext_AbortsAreDeferred,The following statement contains a magic number: TestOutcome outcome = sandbox.Run(writer' () =>              {                  using (sandbox.Protect())                  {                      barrier.Set();                      Thread.Sleep(300);                      completed = true;                  }                  Thread.Sleep(300);              }' "Run Description");
Magic Number,Gallio.Tests.Framework,TasksSample,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TasksTest.cs,TaskThatTakesAShortAmountOfTimeToCompleteAfterTheTestFinishes,The following statement contains a magic number: Tasks.StartThreadTask("Task"' () => {                      TestLog.WriteLine("Started.");                      Thread.Sleep(1000);                      TestLog.WriteLine("Finished.");                  });
Magic Number,Gallio.Tests.Framework,TasksSample,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TasksTest.cs,TaskThatTakesAVeryLongAmountOfTimeToCompleteAfterTheTestFinishes,The following statement contains a magic number: Tasks.StartThreadTask("Task"' () =>                  {                      TestLog.WriteLine("Started.");                      Thread.Sleep(60000);                      TestLog.WriteLine("Finished.");                  });
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ArgumentValidation,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => TestStep.RunStep(null' () => { }' TimeSpan.FromSeconds(60)));
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ArgumentValidation,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => TestStep.RunStep("Abc"' null' TimeSpan.FromSeconds(60)));
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ExecutionWithUnexpiredTimeout,The following statement contains a magic number: TestContext context = TestStep.RunStep("Abc"' () =>              {                  ran = true;                  Thread.Sleep(100);                  Assert.TerminateSilently(TestOutcome.Pending);              }' TimeSpan.FromSeconds(60));
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ExecutionWithUnexpiredTimeout,The following statement contains a magic number: TestContext context = TestStep.RunStep("Abc"' () =>              {                  ran = true;                  Thread.Sleep(100);                  Assert.TerminateSilently(TestOutcome.Pending);              }' TimeSpan.FromSeconds(60));
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ExecutionWithExpiredTimeout,The following statement contains a magic number: TestContext context = TestStep.RunStep("Abc"' () =>              {                  ran = true;                  Thread.Sleep(1000);                  shouldNotGetHere = true;                  Assert.TerminateSilently(TestOutcome.Skipped);              }' TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionAndTimeout_ExecutionWithExpiredTimeout,The following statement contains a magic number: TestContext context = TestStep.RunStep("Abc"' () =>              {                  ran = true;                  Thread.Sleep(1000);                  shouldNotGetHere = true;                  Assert.TerminateSilently(TestOutcome.Skipped);              }' TimeSpan.FromMilliseconds(100));
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionTimeoutIsTestCaseAndCodeElement_ArgumentValidation,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => TestStep.RunStep(null' () => { }' TimeSpan.FromSeconds(60)' false' Reflector.Wrap(typeof(TestStepTest))));
Magic Number,Gallio.Tests.Framework,TestStepTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\TestStepTest.cs,RunStep_NameActionTimeoutIsTestCaseAndCodeElement_ArgumentValidation,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => TestStep.RunStep("Abc"' null' TimeSpan.FromSeconds(60)' false' Reflector.Wrap(typeof(TestStepTest))));
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 1' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 1' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' -1' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 0' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Int32.MaxValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Int32.MaxValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Int32.MinValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Int32.MinValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Int32.MaxValue' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Int32.MinValue' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Int32.MaxValue' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Int32.MinValue' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' Int32.MinValue };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' Int32.MaxValue };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new SequentialInt32Generator              {                  Start = 0'                  End = 100'                  Step = 1'                  Filter = IsPrime              };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 1' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 1' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' -1' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 0' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.MaxValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.MaxValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.MinValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.MinValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.PositiveInfinity' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.PositiveInfinity' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.NegativeInfinity' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.NegativeInfinity' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.NaN' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.NaN' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Double.MaxValue' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Double.MinValue' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Double.PositiveInfinity' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Double.NegativeInfinity' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Double.NaN' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Double.MaxValue' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Double.MinValue' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Double.PositiveInfinity' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Double.NegativeInfinity' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Double.NaN' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' Int32.MinValue };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' Int32.MaxValue };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new SequentialDoubleGenerator              {                  Start = 0'                  End = 100'                  Step = 1'                  Filter = IsPrime              };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new double[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Int32.MinValue' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Int32.MaxValue' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Int32.MinValue' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Int32.MaxValue' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 5' 1' };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 5' 1' };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 20' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 20' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomInt32Generator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => (d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomInt32Generator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => (d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomInt32Generator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => (d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.Count(50' values);
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomInt32GeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomInt32GeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.Multiple(() =>              {                  foreach (int value in values)                  {                      Assert.AreEqual(0' value % 2);                  }              });
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.MinValue' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.MaxValue' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.PositiveInfinity' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.NegativeInfinity' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Double.NaN' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Double.MinValue' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Double.MaxValue' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Double.PositiveInfinity' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Double.NegativeInfinity' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Double.NaN' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 5' 1' };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 5' 1' };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 20' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 20' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomDoubleGenerator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => ((int)d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomDoubleGenerator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => ((int)d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomDoubleGenerator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => ((int)d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.Count(50' values);
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDoubleGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDoubleGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.Multiple(() =>              {                  foreach (double value in values)                  {                      Assert.AreEqual(0' (int)value % 2);                  }              });
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomStockStringGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomStockStringGeneratorTest.cs,Generate_sequence_ok,The following statement contains a magic number: var generator = new RandomStockStringGenerator              {                  Values = new[] { "A"' "B"' "C"' "D" }'                  Count = 8              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomStockStringGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomStockStringGeneratorTest.cs,Generate_sequence_ok,The following statement contains a magic number: Assert.Count(8' values);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 1' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 1' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' -1' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' 0' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Decimal.MaxValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Decimal.MaxValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Decimal.MinValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Decimal.MinValue' 10' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Decimal.MaxValue' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' Decimal.MinValue' null' 10 };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Decimal.MaxValue' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' Decimal.MinValue' null };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' Int32.MinValue };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 1' 10' null' Int32.MaxValue };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new SequentialDecimalGenerator              {                  Start = 0'                  End = 100'                  Step = 1'                  Filter = d => IsPrime(d)              };
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,SequentialDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\SequentialDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.AreElementsEqual(new decimal[] { 2' 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }' actualOutput);
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Decimal.MinValue' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { Decimal.MaxValue' 10' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Decimal.MinValue' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' Decimal.MaxValue' 1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 5' 1' };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 5' 1' };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 20' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,GetInvalidProperyValues,The following statement contains a magic number: yield return new object[] { 10' 20' -1 };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomDecimalGenerator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => ((int)d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomDecimalGenerator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => ((int)d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: var generator = new RandomDecimalGenerator              {                  Minimum = 0'                  Maximum = 100'                  Count = 50'                  Filter = d => ((int)d % 2) == 0              };
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.Count(50' values);
Magic Number,Gallio.Tests.Framework.Data.Generation,RandomDecimalGeneratorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\Generation\RandomDecimalGeneratorTest.cs,Generate_filtered_sequence,The following statement contains a magic number: Assert.Multiple(() =>              {                  foreach (decimal value in values)                  {                      Assert.AreEqual(0' (int)value % 2);                  }              });
Magic Number,Gallio.Tests.Common.Text.RegularExpression,ElementSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\ElementSetTest.cs,GetRandomString,The following statement contains a magic number: i < 10
Magic Number,Gallio.Tests.Common.Text.RegularExpression,ElementLiteralTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\ElementLiteralTest.cs,GetRandomString,The following statement contains a magic number: i < 10
Magic Number,Gallio.Tests.Common.Text.RegularExpression,RegexLiteTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\RegexLiteTest.cs,Construct_with_pattern,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 100; i++)                  {                      string actual = pattern.GetRandomString(random);                      TestLog.WriteLine(actual);                      Assert.FullMatch(actual' expected);                  }              });
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_negative_minimum_should_throw_exception,The following statement contains a magic number: new Quantifier(-1' 10);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_negative_maximum_should_throw_exception,The following statement contains a magic number: new Quantifier(10' -1);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_minimum_greater_than_maximum_should_throw_exception,The following statement contains a magic number: new Quantifier(10' 1);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_range_ok,The following statement contains a magic number: var quantifier = new Quantifier(2' 8);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_range_ok,The following statement contains a magic number: var quantifier = new Quantifier(2' 8);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_range_ok,The following statement contains a magic number: Assert.AreEqual(2' quantifier.Minimum);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_range_ok,The following statement contains a magic number: Assert.AreEqual(8' quantifier.Maximum);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_constant_ok,The following statement contains a magic number: var quantifier = new Quantifier(5);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_constant_ok,The following statement contains a magic number: Assert.AreEqual(5' quantifier.Minimum);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,Constructs_with_constant_ok,The following statement contains a magic number: Assert.AreEqual(5' quantifier.Maximum);
Magic Number,Gallio.Tests.Common.Text.RegularExpression,QuantifierTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Common\Text\RegularExpression\QuantifierTest.cs,GetRandomQuantity,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 100; i++)                  {                      var actual = quantifier.GetRandomRepeat(random);                      Assert.Between(actual' minimum' maximum);                  }              });
Magic Number,Gallio.Tests.Framework.Pattern,FixtureMemberInvokerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,Invoke_member_with_invalid_number_of_arguments_should_throw_exception,The following statement contains a magic number: Assert.Throws<PatternUsageErrorException>(() => invoker.Invoke(1' 2));
Magic Number,Gallio.Tests.Framework.Pattern,FixtureMemberInvokerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,Invoke_member_with_incompatible_argument_should_throw_exception,The following statement contains a magic number: Assert.Throws<PatternUsageErrorException>(() => invoker.Invoke(1' new object()' 3));
Magic Number,Gallio.Tests.Framework.Pattern,FixtureMemberInvokerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,PublicInstanceMethodInt32,The following statement contains a magic number: return 123;
Magic Number,Gallio.Tests.Framework.Pattern,FixtureMemberInvokerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,PrivateInstanceMethodInt32,The following statement contains a magic number: return 123;
Magic Number,Gallio.Tests.Framework.Pattern,FixtureMemberInvokerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,PublicStaticMethodInt32,The following statement contains a magic number: return 123;
Magic Number,Gallio.Tests.Framework.Pattern,FixtureMemberInvokerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,PrivateStaticMethodInt32,The following statement contains a magic number: return 123;
Magic Number,Gallio.Tests.Framework.Pattern,FixtureMemberInvokerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,IsOdd,The following statement contains a magic number: return value % 2 == 0;
Magic Number,Gallio.Tests.Framework.Pattern,Sample,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,PublicStaticMethodInt32,The following statement contains a magic number: return 123;
Magic Number,Gallio.Tests.Framework.Pattern,Sample,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\FixtureMemberInvokerTest.cs,PrivateStaticMethodInt32,The following statement contains a magic number: return 123;
Magic Number,Gallio.Tests.Framework.Pattern,PatternTestFrameworkStackDepthTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\PatternTestFrameworkStackDepthTest.cs,ManualSingleStepTime,The following statement contains a magic number: const int trials = 5;
Magic Number,Gallio.Tests.Framework.Pattern,PatternTestFrameworkStackDepthTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\PatternTestFrameworkStackDepthTest.cs,ManualSingleStepTime,The following statement contains a magic number: const int stepsPerTrial = 5;
Magic Number,Gallio.Tests.Framework.Pattern,TestAssemblyExecutionParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\TestAssemblyExecutionParametersTest.cs,DegreeOfParallelismDefault,The following statement contains a magic number: Assert.AreEqual(Math.Max(2' Environment.ProcessorCount)' TestAssemblyExecutionParameters.DegreeOfParallelism);
Magic Number,Gallio.Tests.Framework.Pattern,TestAssemblyExecutionParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\TestAssemblyExecutionParametersTest.cs,DefaultTestCaseTimeout,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromMinutes(10)' TestAssemblyExecutionParameters.DefaultTestCaseTimeout);
Magic Number,Gallio.Tests.Framework.Pattern,TestAssemblyExecutionParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\TestAssemblyExecutionParametersTest.cs,DefaultTestCaseTimeoutMustBeNullOrNonNegative,The following statement contains a magic number: Assert.DoesNotThrow(() => TestAssemblyExecutionParameters.DefaultTestCaseTimeout = TimeSpan.FromMinutes(4));
Magic Number,Gallio.Tests.Framework.Pattern,TestAssemblyExecutionParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\TestAssemblyExecutionParametersTest.cs,DefaultTestCaseTimeoutMustBeNullOrNonNegative,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromMinutes(4)' TestAssemblyExecutionParameters.DefaultTestCaseTimeout);
Magic Number,Gallio.Tests.Framework.Pattern,TestAssemblyExecutionParametersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Pattern\TestAssemblyExecutionParametersTest.cs,DefaultTestCaseTimeoutMustBeNullOrNonNegative,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromMinutes(4)' TestAssemblyExecutionParameters.DefaultTestCaseTimeout);
Magic Number,Gallio.Tests.Framework.Data,ValueSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ValueSequenceDataSetTest.cs,ItemsAreScalarDataItemsThatContainValuesAtBindingIndexZero,The following statement contains a magic number: Assert.Count(2' items);
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' false)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }              };
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' false)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }              };
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' false)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }              };
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' false)                  }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)                  }              };
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindingsPerProvider[2]' true)).Return(itemsPerProvider[2]);
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindingsPerProvider[2]' true)).Return(itemsPerProvider[2]);
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindingsPerProvider[2]' true)).Return(itemsPerProvider[2]);
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: Assert.Count(12' items);
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][k]' items[index][2]);
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][k]' items[index][2]);
Magic Number,Gallio.Tests.Framework.Data,CombinatorialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CombinatorialJoinStrategyTest.cs,JoinsItemsCombinatorially,The following statement contains a magic number: k < itemsPerProvider[2].Length
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Expect.Call(providers[0].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(3' null' true)'                  });
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(3' null' true)'                  });
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Assert.Count(3' items);
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Assert.AreEqual(2' items[1].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Assert.AreEqual(3' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Assert.AreEqual(3' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,ConcatenationMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConcatenationMergeStrategyTest.cs,CombinesItemsIntoASingleSequence,The following statement contains a magic number: Assert.IsTrue(items[2].IsDynamic);
Magic Number,Gallio.Tests.Framework.Data,ConstantDataBindingAccessorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConstantDataBindingAccessorTest.cs,GetValueThrowsIfItemIsNull,The following statement contains a magic number: new ConstantDataAccessor(42).GetValue(null);
Magic Number,Gallio.Tests.Framework.Data,ConstantDataBindingAccessorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConstantDataBindingAccessorTest.cs,GetValueReturnsSameConstantAndSuppliedInTheConstructor,The following statement contains a magic number: Assert.AreEqual(42' new ConstantDataAccessor(42).GetValue(item));
Magic Number,Gallio.Tests.Framework.Data,ConstantDataBindingAccessorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ConstantDataBindingAccessorTest.cs,GetValueReturnsSameConstantAndSuppliedInTheConstructor,The following statement contains a magic number: Assert.AreEqual(42' new ConstantDataAccessor(42).GetValue(item));
Magic Number,Gallio.Tests.Framework.Data,CsvDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CsvDataSetTest.cs,CanGetDescriptiveDataBindingsFromItem,The following statement contains a magic number: Assert.AreElementsEqual(new[]              {                  new DataBinding(0' "Fruit")'                  new DataBinding(1' "[Metadata]")'                  new DataBinding(2' null)              }' items[0].GetBindingsForInformalDescription());
Magic Number,Gallio.Tests.Framework.Data,CsvReaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CsvReaderTest.cs,UpdatesTheLineNumber,The following statement contains a magic number: Assert.AreEqual(3' reader.PreviousRecordLineNumber);
Magic Number,Gallio.Tests.Framework.Data,CsvReaderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\CsvReaderTest.cs,UpdatesTheLineNumber,The following statement contains a magic number: Assert.AreEqual(3' reader.PreviousRecordLineNumber);
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: ItemSequenceDataSet dataSet1 = new ItemSequenceDataSet(new IDataItem[] { new ScalarDataItem<int>(1' null' false)' new ScalarDataItem<int>(2' null' false) }' 1);
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: ItemSequenceDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[] { new ScalarDataItem<int>(10' null' false)' new ScalarDataItem<int>(20' null' false) }' 1);
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: ItemSequenceDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[] { new ScalarDataItem<int>(10' null' false)' new ScalarDataItem<int>(20' null' false) }' 1);
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.Count(4' combinatorialItems);
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(10' accessor2.GetValue(combinatorialItems[0]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(20' accessor2.GetValue(combinatorialItems[1]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(2' accessor1.GetValue(combinatorialItems[2]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(2' accessor1.GetValue(combinatorialItems[2]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(10' accessor2.GetValue(combinatorialItems[2]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(10' accessor2.GetValue(combinatorialItems[2]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(2' accessor1.GetValue(combinatorialItems[3]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(2' accessor1.GetValue(combinatorialItems[3]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(20' accessor2.GetValue(combinatorialItems[3]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(20' accessor2.GetValue(combinatorialItems[3]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.Count(2' sequentialItems);
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(10' accessor2.GetValue(sequentialItems[0]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(2' accessor1.GetValue(sequentialItems[1]));
Magic Number,Gallio.Tests.Framework.Data,DataBindingContextTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingContextTest.cs,RegisteredBindingsAreFetchedByItemsAccordingToStrategy,The following statement contains a magic number: Assert.AreEqual(20' accessor2.GetValue(sequentialItems[1]));
Magic Number,Gallio.Tests.Framework.Data,DataRowTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataRowTest.cs,ShouldAcceptMultipleValues,The following statement contains a magic number: DataRow row = new DataRow("abc"' 123' 3.4);
Magic Number,Gallio.Tests.Framework.Data,DataRowTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataRowTest.cs,ShouldAcceptMultipleValues,The following statement contains a magic number: DataRow row = new DataRow("abc"' 123' 3.4);
Magic Number,Gallio.Tests.Framework.Data,DataRowTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataRowTest.cs,ShouldAcceptMultipleValues,The following statement contains a magic number: Assert.AreEqual(123' row.GetValue(new DataBinding(1' null)));
Magic Number,Gallio.Tests.Framework.Data,DataRowTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataRowTest.cs,ShouldAcceptMultipleValues,The following statement contains a magic number: Assert.AreEqual(3.4' row.GetValue(new DataBinding(2' null)));
Magic Number,Gallio.Tests.Framework.Data,DataRowTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataRowTest.cs,ShouldAcceptMultipleValues,The following statement contains a magic number: Assert.AreEqual(3.4' row.GetValue(new DataBinding(2' null)));
Magic Number,Gallio.Tests.Framework.Data,DataRowTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataRowTest.cs,ShouldProvideFluentInterfaceForBuildingMetadata,The following statement contains a magic number: Assert.Count(4' map);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,AddIndexAliasThrowsIfPathIsNull,The following statement contains a magic number: source.AddIndexAlias(null' 2);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesNoTranslationIfNoAliasesAreDefined,The following statement contains a magic number: SetupResult.For(dataSet.ColumnCount).Return(2);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesNoTranslationIfNoAliasesAreDefined,The following statement contains a magic number: Expect.Call(dataSet.CanBind(null)).IgnoreArguments().Do((CanBindDelegate)delegate(DataBinding binding)                  {                      Assert.AreEqual("untranslatedPath"' binding.Path);                      Assert.AreEqual(5' binding.Index);                      return false;                  });
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesNoTranslationIfNoAliasesAreDefined,The following statement contains a magic number: Assert.IsFalse(source.CanBind(new DataBinding(5' "untranslatedPath")));
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesIndexAliasTranslation,The following statement contains a magic number: SetupResult.For(dataSet.ColumnCount).Return(2);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesIndexAliasTranslation,The following statement contains a magic number: Expect.Call(dataSet.CanBind(null)).IgnoreArguments().Do((CanBindDelegate)delegate(DataBinding binding)                  {                      Assert.AreEqual("translatedPath"' binding.Path);                      Assert.AreEqual(2' binding.Index);                      return true;                  });
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesIndexAliasTranslation,The following statement contains a magic number: Expect.Call(dataSet.CanBind(null)).IgnoreArguments().Do((CanBindDelegate)delegate(DataBinding binding)                  {                      Assert.AreEqual("untranslatedPath"' binding.Path);                      Assert.AreEqual(5' binding.Index);                      return false;                  });
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesIndexAliasTranslation,The following statement contains a magic number: source.AddIndexAlias("translatedPath"' 2);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesIndexAliasTranslation,The following statement contains a magic number: Assert.IsTrue(source.CanBind(new DataBinding(5' "translatedPath")));
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanBindAppliesIndexAliasTranslation,The following statement contains a magic number: Assert.IsFalse(source.CanBind(new DataBinding(5' "untranslatedPath")));
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,GetItemsAppliesNoTranslationIfNoAliasesAreDefined,The following statement contains a magic number: SetupResult.For(dataSet.ColumnCount).Return(2);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,GetItemsAppliesIndexAliasTranslation,The following statement contains a magic number: SetupResult.For(dataSet.ColumnCount).Return(3);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,GetItemsAppliesIndexAliasTranslation,The following statement contains a magic number: Expect.Call(dataSet.GetItems(null' true)).IgnoreArguments().Do((GetItemsDelegate)delegate(ICollection<DataBinding> bindings'                      bool includeDynamicItems)                  {                      Assert.IsTrue(includeDynamicItems);                        List<IDataItem> items = new List<IDataItem>();                      items.Add(new ListDataItem<object>(new object[] { "abc"' "def"' "ghi" }' metadataPairs' true));                        List<DataBinding> bindingList = new List<DataBinding>(bindings);                        Assert.AreEqual("translatedPath"' bindingList[0].Path);                      Assert.AreEqual(2' bindingList[0].Index);                        Assert.AreEqual("untranslatedPath"' bindingList[1].Path);                      Assert.AreEqual(1' bindingList[1].Index);                        return items;                  });
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,GetItemsAppliesIndexAliasTranslation,The following statement contains a magic number: source.AddIndexAlias("translatedPath"' 2);
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,GetItemsAppliesIndexAliasTranslation,The following statement contains a magic number: DataBinding[] bindings = new DataBinding[] {                      new DataBinding(5' "translatedPath")'                      new DataBinding(1' "untranslatedPath")                  };
Magic Number,Gallio.Tests.Framework.Data,DataSourceTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataSourceTest.cs,CanGetDescriptiveDataBindingsFromItem,The following statement contains a magic number: dataSet.AddDataSet(new ItemSequenceDataSet(new[] { new DataRow("abc"' "def") }' 2));
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,ConstructorThrowsIfFactoryKindIsUndefined,The following statement contains a magic number: new FactoryDataSet(delegate { return null; }' (FactoryKind) 100000' 1);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataSet,The following statement contains a magic number: CheckFactory(new IDataSet[]              {                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(1' "a").WithMetadata("Id"' "1a")'                      new DataRow(2' "b").WithMetadata("Id"' "2b")                  }' 2)'                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(3' "c").WithMetadata("Id"' "3c")                  }' 2)'              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataSet,The following statement contains a magic number: CheckFactory(new IDataSet[]              {                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(1' "a").WithMetadata("Id"' "1a")'                      new DataRow(2' "b").WithMetadata("Id"' "2b")                  }' 2)'                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(3' "c").WithMetadata("Id"' "3c")                  }' 2)'              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataSet,The following statement contains a magic number: CheckFactory(new IDataSet[]              {                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(1' "a").WithMetadata("Id"' "1a")'                      new DataRow(2' "b").WithMetadata("Id"' "2b")                  }' 2)'                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(3' "c").WithMetadata("Id"' "3c")                  }' 2)'              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataSet,The following statement contains a magic number: CheckFactory(new IDataSet[]              {                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(1' "a").WithMetadata("Id"' "1a")'                      new DataRow(2' "b").WithMetadata("Id"' "2b")                  }' 2)'                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(3' "c").WithMetadata("Id"' "3c")                  }' 2)'              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataSet,The following statement contains a magic number: CheckFactory(new IDataSet[]              {                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(1' "a").WithMetadata("Id"' "1a")'                      new DataRow(2' "b").WithMetadata("Id"' "2b")                  }' 2)'                  new ItemSequenceDataSet(new IDataItem[] {                      new DataRow(3' "c").WithMetadata("Id"' "3c")                  }' 2)'              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataItem,The following statement contains a magic number: CheckFactory(new IDataItem[]              {                  new DataRow(1' "a").WithMetadata("Id"' "1a")'                  new DataRow(2' "b").WithMetadata("Id"' "2b")'                  new DataRow(3' "c").WithMetadata("Id"' "3c")              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataItem,The following statement contains a magic number: CheckFactory(new IDataItem[]              {                  new DataRow(1' "a").WithMetadata("Id"' "1a")'                  new DataRow(2' "b").WithMetadata("Id"' "2b")'                  new DataRow(3' "c").WithMetadata("Id"' "3c")              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithDataItem,The following statement contains a magic number: CheckFactory(new IDataItem[]              {                  new DataRow(1' "a").WithMetadata("Id"' "1a")'                  new DataRow(2' "b").WithMetadata("Id"' "2b")'                  new DataRow(3' "c").WithMetadata("Id"' "3c")              }' factoryKind' 2' true);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithObjectArray,The following statement contains a magic number: CheckFactory(new object[][]              {                  new object[] { 1' "a" }'                  new object[] { 2' "b" }'                  new object[] { 3' "c" }              }' factoryKind' 2' false);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithObjectArray,The following statement contains a magic number: CheckFactory(new object[][]              {                  new object[] { 1' "a" }'                  new object[] { 2' "b" }'                  new object[] { 3' "c" }              }' factoryKind' 2' false);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithObjectArray,The following statement contains a magic number: CheckFactory(new object[][]              {                  new object[] { 1' "a" }'                  new object[] { 2' "b" }'                  new object[] { 3' "c" }              }' factoryKind' 2' false);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithObject,The following statement contains a magic number: CheckFactory(new object[]              {                  1'                  2'                  3              }' factoryKind' 1' false);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,WithObject,The following statement contains a magic number: CheckFactory(new object[]              {                  1'                  2'                  3              }' factoryKind' 1' false);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,CheckFactory,The following statement contains a magic number: Assert.Count(3' items);
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,CheckFactory,The following statement contains a magic number: Assert.AreEqual(2' items[1].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,CheckFactory,The following statement contains a magic number: Assert.AreEqual(3' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,CheckFactory,The following statement contains a magic number: Assert.AreEqual(3' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,CheckFactory,The following statement contains a magic number: Assert.AreEqual("c"' items[2].GetValue(bindings[1]));
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,CheckFactory,The following statement contains a magic number: columnCount >= 2
Magic Number,Gallio.Tests.Framework.Data,FactoryDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\FactoryDataSetTest.cs,CheckFactory,The following statement contains a magic number: Assert.AreEqual("3c"' DataItemUtils.GetMetadata(items[2]).GetValue("Id"));
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Expect.Call(providers[0].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Expect.Call(providers[0].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Assert.Count(3' items);
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Assert.AreEqual(2' items[1].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Assert.AreEqual(3' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Assert.AreEqual(3' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Assert.IsTrue(items[2].IsDynamic);
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[0].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(3' null' false)'                      new ScalarDataItem<int>(6' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[0].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(3' null' false)'                      new ScalarDataItem<int>(6' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[0].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' true)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(3' null' false)'                      new ScalarDataItem<int>(6' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[1].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      badItem'                      new ScalarDataItem<int>(2' null' true)'                      new ScalarDataItem<int>(6' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(4' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[1].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      badItem'                      new ScalarDataItem<int>(2' null' true)'                      new ScalarDataItem<int>(6' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(4' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[1].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      badItem'                      new ScalarDataItem<int>(2' null' true)'                      new ScalarDataItem<int>(6' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(4' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(5' null' false)'                      new ScalarDataItem<int>(3' null' false)'                      new ScalarDataItem<int>(2' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(5' null' false)'                      new ScalarDataItem<int>(3' null' false)'                      new ScalarDataItem<int>(2' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(5' null' false)'                      new ScalarDataItem<int>(3' null' false)'                      new ScalarDataItem<int>(2' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(5' null' false)'                      new ScalarDataItem<int>(3' null' false)'                      new ScalarDataItem<int>(2' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Assert.Count(3' items);
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Assert.AreEqual(2' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Assert.AreEqual(2' items[2].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,IntersectionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\IntersectionMergeStrategyTest.cs,KeepsOnlyIntersectionIncludingRightNumberOfDuplicatesAndExcludesBadItems,The following statement contains a magic number: Assert.IsTrue(items[2].IsDynamic);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: SetupResult.For(dataSetWithTwoColumns.ColumnCount).Return(2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: SetupResult.For(dataSetWithThreeColumns.ColumnCount).Return(3);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: Assert.AreEqual(2' dataSet.ColumnCount);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: Assert.AreEqual(5' dataSet.ColumnCount);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesExternalBindings,The following statement contains a magic number: dataSet1.AddDataSet(new ItemSequenceDataSet(EmptyArray<IDataItem>.Instance' 3));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesExternalBindings,The following statement contains a magic number: IDataSet dataSet2 = new ItemSequenceDataSet(EmptyArray<IDataItem>.Instance' 2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesExternalBindings,The following statement contains a magic number: Assert.IsFalse(dataSet.CanBind(new DataBinding(5' null))'                  "Cannot bind because index 5 is beyond the range of columns in the joined data set.");
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesExternalBindings,The following statement contains a magic number: Assert.IsTrue(dataSet.CanBind(new DataBinding(4' null))'                  "Can bind because index 4 is within the range of columns in the joined data set.");
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesScopedBindings,The following statement contains a magic number: dataSet1.AddDataSet(new ItemSequenceDataSet(EmptyArray<IDataItem>.Instance' 3));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesScopedBindings,The following statement contains a magic number: IDataSet dataSet2 = new ItemSequenceDataSet(EmptyArray<IDataItem>.Instance' 2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesScopedBindings,The following statement contains a magic number: Assert.IsFalse(dataSet.CanBind(dataSet.TranslateBinding(dataSet1' new DataBinding(3' null)))'                  "Cannot bind because index 3 is beyond the range of columns in the scoped data set.");
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanBindResolvesScopedBindings,The following statement contains a magic number: Assert.IsFalse(dataSet.CanBind(dataSet.TranslateBinding(dataSet2' new DataBinding(2' null)))'                  "Cannot bind because index 2 is beyond the range of columns in the scoped data set.");
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: dataSet1.AddDataSet(new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 1' 2' 3 }' metadata1' false)'                  new ListDataItem<int>(new int[] { -1' -2' -3 }' metadata2' false)              }' 3));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: dataSet1.AddDataSet(new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 1' 2' 3 }' metadata1' false)'                  new ListDataItem<int>(new int[] { -1' -2' -3 }' metadata2' false)              }' 3));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: dataSet1.AddDataSet(new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 1' 2' 3 }' metadata1' false)'                  new ListDataItem<int>(new int[] { -1' -2' -3 }' metadata2' false)              }' 3));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: dataSet1.AddDataSet(new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 1' 2' 3 }' metadata1' false)'                  new ListDataItem<int>(new int[] { -1' -2' -3 }' metadata2' false)              }' 3));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: dataSet1.AddDataSet(new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 1' 2' 3 }' metadata1' false)'                  new ListDataItem<int>(new int[] { -1' -2' -3 }' metadata2' false)              }' 3));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: IDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 4' 5 }' metadata2' false)'                  new ListDataItem<int>(new int[] { -4' -5 }' null' true)              }' 2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: IDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 4' 5 }' metadata2' false)'                  new ListDataItem<int>(new int[] { -4' -5 }' null' true)              }' 2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: IDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 4' 5 }' metadata2' false)'                  new ListDataItem<int>(new int[] { -4' -5 }' null' true)              }' 2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: IDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 4' 5 }' metadata2' false)'                  new ListDataItem<int>(new int[] { -4' -5 }' null' true)              }' 2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: IDataSet dataSet2 = new ItemSequenceDataSet(new IDataItem[]              {                  new ListDataItem<int>(new int[] { 4' 5 }' metadata2' false)'                  new ListDataItem<int>(new int[] { -4' -5 }' null' true)              }' 2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: DataBinding indexThreeBinding = new DataBinding(3' null);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Expect.Call(strategy.Join(null' null' true)).IgnoreArguments().Do((JoinDelegate)delegate(IList<IDataProvider> joinProviders' IList<ICollection<DataBinding>> joinBindingsPerProvider'                      bool includeDynamicItems)                  {                      Assert.IsTrue(includeDynamicItems);                      Assert.AreElementsEqual(new IDataProvider[] { dataSet1' dataSet2 }' joinProviders);                        Assert.Count(2' joinBindingsPerProvider);                        Assert.AreElementsEqual(new DataBinding[] { pathBinding' indexZeroBinding' pathBinding }' joinBindingsPerProvider[0]);                      Assert.AreElementsEqual(new DataBinding[] { indexZeroBinding' indexOneBinding }' joinBindingsPerProvider[1]);                        return results;                  });
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.Count(2' items);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(2' items[0].GetValue(bindings[1]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(1' items[0].GetValue(bindings[2]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(4' items[0].GetValue(bindings[3]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(4' items[0].GetValue(bindings[3]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(2' items[0].GetValue(bindings[4]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(2' items[0].GetValue(bindings[4]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(5' items[0].GetValue(bindings[5]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(5' items[0].GetValue(bindings[5]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.Count(3' map);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-2' items[1].GetValue(bindings[1]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-1' items[1].GetValue(bindings[2]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-4' items[1].GetValue(bindings[3]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-4' items[1].GetValue(bindings[3]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-2' items[1].GetValue(bindings[4]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-2' items[1].GetValue(bindings[4]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-5' items[1].GetValue(bindings[5]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,GetItemsDelegatesToTheStrategy,The following statement contains a magic number: Assert.AreEqual(-5' items[1].GetValue(bindings[5]));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,TranslateBindingReplacesTheDataBindingIndexWhenPresentAsNeeded,The following statement contains a magic number: SetupResult.For(dataSetWithTwoColumns.ColumnCount).Return(2);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,TranslateBindingReplacesTheDataBindingIndexWhenPresentAsNeeded,The following statement contains a magic number: SetupResult.For(dataSetWithThreeColumns.ColumnCount).Return(3);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,TranslateBindingReplacesTheDataBindingIndexWhenPresentAsNeeded,The following statement contains a magic number: AssertTranslateReplacedIndex(dataSet' dataSetWithThreeColumns' bindingWithIndex' 3'                      "Offset of data set is 2 so index should be incremented by 2.");
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,TranslateBindingSupportsReplaceIndex,The following statement contains a magic number: DataBinding changedDataBinding = dataBinding.ReplaceIndex(5);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,TranslateBindingSupportsReplaceIndex,The following statement contains a magic number: Assert.AreEqual(5' changedDataBinding.Index);
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanGetDescriptiveDataBindingsFromItem,The following statement contains a magic number: source.AddDataSet(new ItemSequenceDataSet(new[] { new DataRow("abc"' "def") }' 2));
Magic Number,Gallio.Tests.Framework.Data,JoinedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\JoinedDataSetTest.cs,CanGetDescriptiveDataBindingsFromItem,The following statement contains a magic number: Assert.AreElementsEqual(new[]              {                  new DataBinding(0' null)'                  new DataBinding(1' "abc")'                  new DataBinding(2' null)              }' items[0].GetBindingsForInformalDescription());
Magic Number,Gallio.Tests.Framework.Data,ListDataItemTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ListDataItemTest.cs,GetValueReturnsValueOnlyIfTheBindingIndexIsWithinTheListCount,The following statement contains a magic number: object[] values = new object[] { "abc"' "def"' 42 };
Magic Number,Gallio.Tests.Framework.Data,MergedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MergedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: SetupResult.For(dataSetWithTwoColumns.ColumnCount).Return(2);
Magic Number,Gallio.Tests.Framework.Data,MergedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MergedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: SetupResult.For(dataSetWithThreeColumns.ColumnCount).Return(3);
Magic Number,Gallio.Tests.Framework.Data,MergedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MergedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: Assert.AreEqual(2' dataSet.ColumnCount);
Magic Number,Gallio.Tests.Framework.Data,MergedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MergedDataSetTest.cs,AddingDataSetsUpdatesTheColumnCountAndDataSetsCollection,The following statement contains a magic number: Assert.AreEqual(3' dataSet.ColumnCount);
Magic Number,Gallio.Tests.Framework.Data,MergedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MergedDataSetTest.cs,CanBindReturnsTrueOnlyIfAllDataSetsCanSatisfyTheBinding,The following statement contains a magic number: SetupResult.For(dataSetWithTwoColumns.ColumnCount).Return(2);
Magic Number,Gallio.Tests.Framework.Data,MergedDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MergedDataSetTest.cs,CanBindReturnsTrueOnlyIfAllDataSetsCanSatisfyTheBinding,The following statement contains a magic number: SetupResult.For(dataSetWithThreeColumns.ColumnCount).Return(3);
Magic Number,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,ConstructorThrowsIfSlotValuesContainsANullSlot,The following statement contains a magic number: new MethodInvocationSpec(typeof(NonGenericClass)' NonGenericClassEmptyMethodInfo'                  new KeyValuePair<ISlotInfo' object>[] { new KeyValuePair<ISlotInfo' object>(null' 42) }'                  Mocks.Stub<IConverter>());
Magic Number,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,ConstructorThrowsWhenMissingGenericParamSlotForGenericMethod,The following statement contains a magic number: slotValues.Add(NonGenericClassGenericMethodInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,ConstructorThrowsWhenGenericParamSlotDoesNotBelongToTheMethod,The following statement contains a magic number: slotValues.Add(NonGenericClassGenericMethodInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,MethodInvocationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\MethodInvocationSpecTest.cs,ConstructorThrowsWhenParamSlotBelongsToDifferentMethod,The following statement contains a magic number: slotValues.Add(NonGenericClassStaticMethodInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsIfSlotValuesContainsANullSlot,The following statement contains a magic number: new ObjectCreationSpec(EmptyClassInfo'                  new KeyValuePair<ISlotInfo' object>[] { new KeyValuePair<ISlotInfo' object>(null' 42) }'                  Mocks.Stub<IConverter>());
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenConstructorParametersBelongToDifferentConstructor,The following statement contains a magic number: slotValues.Add(NonGenericClassOneParamConstructorInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenConstructorParametersBelongToDifferentConstructor,The following statement contains a magic number: slotValues.Add(NonGenericClassTwoParamConstructorInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenNotAllConstructorParametersHaveValues,The following statement contains a magic number: slotValues.Add(NonGenericClassTwoParamConstructorInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenAbstractClassProvidedAndThereAreConstructorParameters,The following statement contains a magic number: slotValues.Add(AbstractClassOneParamConstructorInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenConstructorParameterSlotBelongsToDifferentType,The following statement contains a magic number: slotValues.Add(NonGenericClassOneParamConstructorInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenFieldSlotBelongsToDifferentType,The following statement contains a magic number: slotValues.Add(NonGenericClassFieldInfo' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenPropertySlotBelongsToDifferentType,The following statement contains a magic number: slotValues.Add(NonGenericClassPropertyInfo' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenGenericClassParamSlotBelongsToDifferentType,The following statement contains a magic number: slotValues.Add(GenericClassParamInfo' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenMethodParamSlotUsedInsteadOfAConstructorParam,The following statement contains a magic number: slotValues.Add(NonGenericClassMethodInfo.Parameters[0]' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,ConstructorThrowsWhenGenericParamSlotForGenericClassDefIsNotAssignedToAType,The following statement contains a magic number: slotValues.Add(GenericClassParamInfo' 42);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClass,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClass,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClass,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClass,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiation,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiation,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiation,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiation,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiationDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiationDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiationDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericClassInstantiationDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStruct,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStruct,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStruct,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStruct,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiation,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiation,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiation,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiation,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiationDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiationDefaultConstructor,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiationDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(2' instance.fieldValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,CreateInstanceWithGenericStructInstantiationDefaultConstructor,The following statement contains a magic number: Assert.AreEqual(3' instance.propertyValue);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,SpecPropertiesDescribeTheObject,The following statement contains a magic number: slotValues.Add(field' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,SpecPropertiesDescribeTheObject,The following statement contains a magic number: slotValues.Add(property' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,SpecPropertiesDescribeTheObject,The following statement contains a magic number: Assert.AreEqual(2' fieldValues[0].Value);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,SpecPropertiesDescribeTheObject,The following statement contains a magic number: Assert.AreEqual(3' propertyValues[0].Value);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,FormatDescribesTheObject,The following statement contains a magic number: slotValues.Add(type.GetFields(PublicInstance)[0]' 2);
Magic Number,Gallio.Tests.Framework.Data,ObjectCreationSpecTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectCreationSpecTest.cs,FormatDescribesTheObject,The following statement contains a magic number: slotValues.Add(type.GetProperties(PublicInstance)[0]' 3);
Magic Number,Gallio.Tests.Framework.Data,ObjectDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectDataBinderTest.cs,AccessorCreatesNewObjectsThroughSlotBinding,The following statement contains a magic number: source.AddDataSet(new ItemSequenceDataSet(new IDataItem[] { new ListDataItem<object>(new object[] { 42' typeof(int) }' null' false) }' 2));
Magic Number,Gallio.Tests.Framework.Data,ObjectDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectDataBinderTest.cs,AccessorCreatesNewObjectsThroughSlotBinding,The following statement contains a magic number: source.AddDataSet(new ItemSequenceDataSet(new IDataItem[] { new ListDataItem<object>(new object[] { 42' typeof(int) }' null' false) }' 2));
Magic Number,Gallio.Tests.Framework.Data,ObjectDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ObjectDataBinderTest.cs,AccessorCreatesNewObjectsThroughSlotBinding,The following statement contains a magic number: Assert.AreEqual(42' holder.Value' "Should have set the value via the constructor parameter.");
Magic Number,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)                  }'              };
Magic Number,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,HandlesDegenerateCaseWithOneProvider,The following statement contains a magic number: Assert.Count(2' items);
Magic Number,Gallio.Tests.Framework.Data,PairwiseJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\PairwiseJoinStrategyTest.cs,HandlesDegenerateCaseWithMoreThanOneProviderButOneIsEmpty,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)                  }'                  new IDataItem[0]              };
Magic Number,Gallio.Tests.Framework.Data,BoundDataAccessorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\BoundDataAccessorTest.cs,GetValueCallsRowsGetValueWithTheBinding,The following statement contains a magic number: Expect.Call(item.GetValue(binding)).Return(42);
Magic Number,Gallio.Tests.Framework.Data,BoundDataAccessorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\BoundDataAccessorTest.cs,GetValueCallsRowsGetValueWithTheBinding,The following statement contains a magic number: Assert.AreEqual(42' accessor.GetValue(item));
Magic Number,Gallio.Tests.Framework.Data,ItemSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ItemSequenceDataSetTest.cs,ColumnCountIsSameAsSpecifiedInConstructor,The following statement contains a magic number: ItemSequenceDataSet dataSet = new ItemSequenceDataSet(EmptyArray<IDataItem>.Instance' 5);
Magic Number,Gallio.Tests.Framework.Data,ItemSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ItemSequenceDataSetTest.cs,ColumnCountIsSameAsSpecifiedInConstructor,The following statement contains a magic number: Assert.AreEqual(5' dataSet.ColumnCount);
Magic Number,Gallio.Tests.Framework.Data,ItemSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ItemSequenceDataSetTest.cs,RowEnumerationIsSameAsSpecifiedInConstructorWhenIncludingDynamicRows,The following statement contains a magic number: ItemSequenceDataSet dataSet = new ItemSequenceDataSet(items' 5);
Magic Number,Gallio.Tests.Framework.Data,ItemSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ItemSequenceDataSetTest.cs,RowEnumerationIsFilteredWhenNotIncludingDynamicRows,The following statement contains a magic number: items.Add(new ScalarDataItem<int>(42' null' true));
Magic Number,Gallio.Tests.Framework.Data,ItemSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ItemSequenceDataSetTest.cs,RowEnumerationIsFilteredWhenNotIncludingDynamicRows,The following statement contains a magic number: items.Add(new ScalarDataItem<int>(53' null' false));
Magic Number,Gallio.Tests.Framework.Data,ItemSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ItemSequenceDataSetTest.cs,RowEnumerationIsFilteredWhenNotIncludingDynamicRows,The following statement contains a magic number: ItemSequenceDataSet dataSet = new ItemSequenceDataSet(items' 5);
Magic Number,Gallio.Tests.Framework.Data,ItemSequenceDataSetTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ItemSequenceDataSetTest.cs,CanBindReturnsTrueOnlyIfTheBindingIndexIsBetweenZeroAndColumnCount,The following statement contains a magic number: ItemSequenceDataSet dataSet = new ItemSequenceDataSet(EmptyArray<IDataItem>.Instance' 3);
Magic Number,Gallio.Tests.Framework.Data,ScalarDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ScalarDataBinderTest.cs,AccessorObtainsAValueFromTheRow,The following statement contains a magic number: source.AddDataSet(new ItemSequenceDataSet(new IDataItem[]              {                  new ScalarDataItem<int>(42' null' false)'                  new ScalarDataItem<string>("42"' null' false)              }' 1));
Magic Number,Gallio.Tests.Framework.Data,ScalarDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ScalarDataBinderTest.cs,AccessorObtainsAValueFromTheRow,The following statement contains a magic number: Assert.Count(2' items);
Magic Number,Gallio.Tests.Framework.Data,ScalarDataBinderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ScalarDataBinderTest.cs,AccessorObtainsAValueFromTheRow,The following statement contains a magic number: Assert.AreEqual(42' accessor.GetValue(items[0]));
Magic Number,Gallio.Tests.Framework.Data,ScalarDataItemTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ScalarDataItemTest.cs,GetValueReturnsValueOnlyIfTheBindingIndexIsZero,The following statement contains a magic number: ScalarDataItem<object> item = new ScalarDataItem<object>(42' null' false);
Magic Number,Gallio.Tests.Framework.Data,ScalarDataItemTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\ScalarDataItemTest.cs,GetValueReturnsValueOnlyIfTheBindingIndexIsZero,The following statement contains a magic number: Assert.AreEqual(42' value);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)                  }'                  new IDataItem[] { }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' false)                  }              };
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)                  }'                  new IDataItem[] { }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' false)                  }              };
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: IDataItem[][] itemsPerProvider = new IDataItem[][] {                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)                  }'                  new IDataItem[] { }'                  new IDataItem[] {                      new ScalarDataItem<int>(1' null' false)'                      new ScalarDataItem<int>(2' null' false)'                      new ScalarDataItem<int>(3' null' false)                  }              };
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindingsPerProvider[2]' true)).Return(itemsPerProvider[2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindingsPerProvider[2]' true)).Return(itemsPerProvider[2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindingsPerProvider[2]' true)).Return(itemsPerProvider[2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.Count(3' items);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][0]' items[0][2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][0]' items[0][2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][1]' items[1][2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][1]' items[1][2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(NullDataItem.Instance' items[2][0]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(NullDataItem.Instance' items[2][1]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][2]' items[2][2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][2]' items[2][2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][2]' items[2][2]);
Magic Number,Gallio.Tests.Framework.Data,SequentialJoinStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\SequentialJoinStrategyTest.cs,JoinsItemsSequentiallyAndPadsWithNullsUntilExhausted,The following statement contains a magic number: Assert.AreSame(itemsPerProvider[2][2]' items[2][2]);
Magic Number,Gallio.Tests.Framework.Data,DataBindingTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingTest.cs,ConstructorWithPathAndIndex,The following statement contains a magic number: DataBinding binding = new DataBinding(42' "path");
Magic Number,Gallio.Tests.Framework.Data,DataBindingTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingTest.cs,ConstructorWithPathAndIndex,The following statement contains a magic number: Assert.AreEqual(42' binding.Index);
Magic Number,Gallio.Tests.Framework.Data,DataBindingTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingTest.cs,ReplaceIndexCreatesANewInstanceWithTheNewIndex,The following statement contains a magic number: DataBinding oldBinding = new DataBinding(42' "path");
Magic Number,Gallio.Tests.Framework.Data,DataBindingTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingTest.cs,ReplaceIndexCreatesANewInstanceWithTheNewIndex,The following statement contains a magic number: DataBinding newBinding = oldBinding.ReplaceIndex(23);
Magic Number,Gallio.Tests.Framework.Data,DataBindingTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingTest.cs,ReplaceIndexCreatesANewInstanceWithTheNewIndex,The following statement contains a magic number: Assert.AreEqual(23' newBinding.Index);
Magic Number,Gallio.Tests.Framework.Data,DataBindingTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\DataBindingTest.cs,ToString,The following statement contains a magic number: Assert.AreEqual("Binding Index: 42' Path: 'foo'"'                  new DataBinding(42' "foo").ToString());
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Expect.Call(providers[0].GetItems(bindings' true)).Return(new IDataItem[] {                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(1' null' true)'                      new ScalarDataItem<int>(2' null' false)'                  });
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      badItem'                      new ScalarDataItem<int>(3' null' true)'                      new ScalarDataItem<int>(2' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      badItem'                      new ScalarDataItem<int>(3' null' true)'                      new ScalarDataItem<int>(2' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Expect.Call(providers[2].GetItems(bindings' true)).Return(new IDataItem[] {                      badItem'                      new ScalarDataItem<int>(3' null' true)'                      new ScalarDataItem<int>(2' null' true)                  });
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Assert.Count(4' items);
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Assert.AreEqual(2' items[1].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(delegate { items[2].GetValue(bindings[0]); });
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Assert.AreEqual(3' items[3].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Assert.AreEqual(3' items[3].GetValue(bindings[0]));
Magic Number,Gallio.Tests.Framework.Data,UnionMergeStrategyTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Framework\Data\UnionMergeStrategyTest.cs,EliminatesDuplicatesAndIncludesBadItems,The following statement contains a magic number: Assert.IsTrue(items[3].IsDynamic);
Magic Number,Gallio.Tests.Model,BaseTestFrameworkTest<TSampleFixture>,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\BaseTestFrameworkTest.cs,PopulateTestTree_CapturesTestStructureAndBasicMetadata,The following statement contains a magic number: Assert.Count(2' fixtureTest.Children);
Magic Number,Gallio.Tests.Host,HostProgramIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Host\HostProgramIntegrationTest.cs,HostProgramPrintsHelpUsageWhenHelpOptionSpecified,The following statement contains a magic number: task.Join(TimeSpan.FromSeconds(5));
Magic Number,Gallio.Tests.Host,HostProgramIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Host\HostProgramIntegrationTest.cs,HostProgramTerminatesAutomaticallyOnTimeoutIfNoConnection,The following statement contains a magic number: task.Join(TimeSpan.FromSeconds(10));
Magic Number,Gallio.Tests.Host,HostProgramIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Host\HostProgramIntegrationTest.cs,HostProgramTerminatesImmediatelyIfOwnerProcessDoesNotExist,The following statement contains a magic number: task.Join(TimeSpan.FromSeconds(5));
Magic Number,Gallio.Tests.Host,HostProgramIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Host\HostProgramIntegrationTest.cs,HostProgramTerminatesWhenItsOwnerProcessTerminates,The following statement contains a magic number: Assert.IsFalse(task.Join(TimeSpan.FromSeconds(2))' "The host should not have exited yet.");
Magic Number,Gallio.Tests.Host,HostProgramIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Host\HostProgramIntegrationTest.cs,HostProgramTerminatesWhenItsOwnerProcessTerminates,The following statement contains a magic number: Assert.IsTrue(task.Join(TimeSpan.FromSeconds(5))' "The host should terminate.");
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,GetNextTokenLookAheadWithOneToken,The following statement contains a magic number: Assert.IsNull(lexer.LookAhead(2));
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,GetNextTokenAndLookAheadWithTwoTokens,The following statement contains a magic number: Assert.Count(2' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,GetNextTokenAndLookAheadWithTwoTokens,The following statement contains a magic number: Assert.IsNotNull(lexer.LookAhead(2));
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,GetNextTokenAndLookAheadWithTwoTokens,The following statement contains a magic number: Assert.IsNull(lexer.LookAhead(3));
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,GetNextTokenAndLookAheadWithTwoTokens,The following statement contains a magic number: Assert.IsNull(lexer.LookAhead(2));
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,GetNextTokenAndLookAheadWithTwoTokens,The following statement contains a magic number: Assert.IsNull(lexer.LookAhead(2));
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,TwoElements,The following statement contains a magic number: Assert.Count(2' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,ThreeElements,The following statement contains a magic number: Assert.Count(3' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,ThreeElements,The following statement contains a magic number: FilterToken thirdFilterToken = lexer.Tokens[2];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,CaseInsensitiveRegex,The following statement contains a magic number: Assert.Count(2' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,CaseSensitiveRegex,The following statement contains a magic number: Assert.Count(2' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,QuotedElements,The following statement contains a magic number: Assert.Count(3' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,QuotedElements,The following statement contains a magic number: FilterToken thirdToken = lexer.Tokens[2];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithOneValue,The following statement contains a magic number: Assert.Count(3' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithOneValue,The following statement contains a magic number: Assert.AreEqual(secondToken.Position' 4);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithOneValue,The following statement contains a magic number: FilterToken thirdToken = lexer.Tokens[2];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithOneValue,The following statement contains a magic number: Assert.AreEqual(thirdToken.Position' 5);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithTwovalues,The following statement contains a magic number: Assert.Count(5' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithTwovalues,The following statement contains a magic number: Assert.AreEqual(secondToken.Position' 4);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithTwovalues,The following statement contains a magic number: FilterToken thirdToken = lexer.Tokens[2];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithTwovalues,The following statement contains a magic number: Assert.AreEqual(thirdToken.Position' 5);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithTwovalues,The following statement contains a magic number: FilterToken fourthToken = lexer.Tokens[3];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,FilterWithTwovalues,The following statement contains a magic number: FilterToken fifthToken = lexer.Tokens[4];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,QuotedElementsAndMultipleValues,The following statement contains a magic number: Assert.Count(5' lexer.Tokens);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,QuotedElementsAndMultipleValues,The following statement contains a magic number: FilterToken thirdToken = lexer.Tokens[2];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,QuotedElementsAndMultipleValues,The following statement contains a magic number: FilterToken fourthToken = lexer.Tokens[3];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,QuotedElementsAndMultipleValues,The following statement contains a magic number: FilterToken fifthToken = lexer.Tokens[4];
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,QuotedElementsAndMultipleValues,The following statement contains a magic number: Assert.AreEqual(fifthToken.Position' key.Length + value1.Length + 2);
Magic Number,Gallio.Tests.Model.Filters,FilterLexerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterLexerTest.cs,GetUnquotedString,The following statement contains a magic number: string unquotedString = quotedString.Substring(1' quotedString.Length - 2);
Magic Number,Gallio.Tests.Model.Filters,FilterParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterParserTest.cs,FilterWithQuotedValue,The following statement contains a magic number: Assert.AreEqual(parsedFilter.ToString()' "Type(Equality('"                  + type.Substring(1' type.Length - 2)                  + "')' True)");
Magic Number,Gallio.Tests.Model.Filters,FilterParserTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Filters\FilterParserTest.cs,FilterWithRegexValue,The following statement contains a magic number: Assert.AreEqual(parsedFilter.ToString()' "Type(Regex('"                  + type.Substring(1' type.Length - 2)                  + "'' "                  + (caseInsensitive ? "IgnoreCase' " : "")                  + "CultureInvariant)' True)");
Magic Number,Gallio.Tests.Reports.Vtl,FormatHtmlHelperTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\FormatHtmlHelperTest.cs,GenerateUniqueIds,The following statement contains a magic number: i < 1000
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunTreeStatisticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunTreeStatisticsTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(10' rootStatistics.RunCount);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunTreeStatisticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunTreeStatisticsTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(4' rootStatistics.PassedCount);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunTreeStatisticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunTreeStatisticsTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(2' rootStatistics.FailedCount);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunTreeStatisticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunTreeStatisticsTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(3' rootStatistics.SkippedCount);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunTreeStatisticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunTreeStatisticsTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(4' rootStatistics.SkippedOrInconclusiveCount);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunTreeStatisticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunTreeStatisticsTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(3' child33Statistics.RunCount);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunTreeStatisticsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunTreeStatisticsTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(2' child33Statistics.PassedCount);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunNodeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunNodeTest.cs,Count,The following statement contains a magic number: Assert.AreEqual(14' tree.Count);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunNodeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunNodeTest.cs,GetDetailsChildren_not_condensed,The following statement contains a magic number: nodes = nodes.ElementAt(2).GetDetailsChildren(false);
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunNodeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunNodeTest.cs,GetSelfAndAncestorIds,The following statement contains a magic number: var child321 = tree.Children[2].Children[1].Children[0];
Magic Number,Gallio.Tests.Reports.Vtl,TestStepRunNodeTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\Vtl\TestStepRunNodeTest.cs,IsVisibleInPage,The following statement contains a magic number: bool actualVisible = node.IsVisibleInPage(pageIndex' 1000);
Magic Number,Gallio.Tests.Runner.Reports,HtmlReportSplitSettingsTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Preferences\HtmlReportSplitSettingsTest.cs,Defaults,The following statement contains a magic number: Assert.AreEqual(2000' settings.PageSize);
Magic Number,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Format,The following statement contains a magic number: mockPreferenceSet.Stub(x => x.Read<int>(null)).IgnoreArguments().Return(2000);
Magic Number,Gallio.Tests.Reports,VtlReportFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\VtlReportFormatterTest.cs,Format,The following statement contains a magic number: fakeReport.TestPackageRun.Statistics.RunCount = 123;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: const int width = 640;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: const int height = 480;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: const int frames = 30;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(width' height' 5)              {                  BlockWidth = 256'                  BlockHeight = 256              };
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(width' height' 5)              {                  BlockWidth = 256'                  BlockHeight = 256              };
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: var parameters = new FlashScreenVideoParameters(width' height' 5)              {                  BlockWidth = 256'                  BlockHeight = 256              };
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: int color = (x * 255 / width) << 16 | (y * 255 / height) << 8 | frame * 255 / frames;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: int color = (x * 255 / width) << 16 | (y * 255 / height) << 8 | frame * 255 / frames;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: int color = (x * 255 / width) << 16 | (y * 255 / height) << 8 | frame * 255 / frames;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: int color = (x * 255 / width) << 16 | (y * 255 / height) << 8 | frame * 255 / frames;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: int color = (x * 255 / width) << 16 | (y * 255 / height) << 8 | frame * 255 / frames;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,CreateVideo,The following statement contains a magic number: scanOffset += 4;
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The following statement contains a magic number: TestLog.Embed(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The following statement contains a magic number: TestLog.Embed(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The following statement contains a magic number: TestLog.Embed(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The following statement contains a magic number: TestLog.Embed(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The following statement contains a magic number: TestLog.Embed(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The following statement contains a magic number: TestLog.Embed(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,EmbeddedResources,The following statement contains a magic number: TestLog.Embed(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,AttachedResources,The following statement contains a magic number: TestLog.Attach(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,AttachedResources,The following statement contains a magic number: TestLog.Attach(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,AttachedResources,The following statement contains a magic number: TestLog.Attach(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,AttachedResources,The following statement contains a magic number: TestLog.Attach(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,AttachedResources,The following statement contains a magic number: TestLog.Attach(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,AttachedResources,The following statement contains a magic number: TestLog.Attach(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Reports,ManualTestLogFeatureTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Reports\ManualTestLogFeatureTest.cs,AttachedResources,The following statement contains a magic number: TestLog.Attach(new BinaryAttachment("Binary"' "application/octet-stream"' new byte[] { 67' 65' 66' 66' 65' 71' 69 }));
Magic Number,Gallio.Tests.Runtime.ConsoleSupport,CommandLineOutputTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\ConsoleSupport\CommandLineOutputTests.cs,TestStart,The following statement contains a magic number: _output = new CommandLineOutput(_writer' 80);
Magic Number,Gallio.Tests.Runtime.ConsoleSupport,CommandLineOutputTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\ConsoleSupport\CommandLineOutputTests.cs,PrintArgumentHelpWidth40Chars,The following statement contains a magic number: _output.LineLength = 40;
Magic Number,Gallio.Tests.Runtime.ConsoleSupport,CommandLineOutputTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\ConsoleSupport\CommandLineOutputTests.cs,PrintTextTest,The following statement contains a magic number: _output.PrintText("Some Text"' 3);
Magic Number,Gallio.Tests.Runtime.Conversions,ArrayToArrayConversionRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\ArrayToArrayConversionRuleTest.cs,TransitiveConversion,The following statement contains a magic number: int[] sourceValue = new int[] { 1' 2' 3 };
Magic Number,Gallio.Tests.Runtime.Conversions,ArrayToArrayConversionRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\ArrayToArrayConversionRuleTest.cs,TransitiveConversion,The following statement contains a magic number: int[] sourceValue = new int[] { 1' 2' 3 };
Magic Number,Gallio.Tests.Runtime.Conversions,BaseConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\BaseConverterTest.cs,ConvertThrowsIfTargetTypeIsNull,The following statement contains a magic number: new NullConverter().Convert(42' null);
Magic Number,Gallio.Tests.Runtime.Conversions,ConversionCostTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\ConversionCostTest.cs,StandardCosts,The following statement contains a magic number: Assert.AreEqual(1000' ConversionCost.Typical.Value);
Magic Number,Gallio.Tests.Runtime.Conversions,ConversionCostTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\ConversionCostTest.cs,StandardCosts,The following statement contains a magic number: Assert.AreEqual(1000000' ConversionCost.Default.Value);
Magic Number,Gallio.Tests.Runtime.Conversions,ConversionCostTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\ConversionCostTest.cs,StandardCosts,The following statement contains a magic number: Assert.AreEqual(1000000000' ConversionCost.Maximum.Value);
Magic Number,Gallio.Tests.Runtime.Conversions,ConversionCostTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\ConversionCostTest.cs,AddingNonInvalidCostsSumsTheirValue,The following statement contains a magic number: Assert.AreEqual(1001' ConversionCost.Best.Add(ConversionCost.Typical).Value);
Magic Number,Gallio.Tests.Runtime.Conversions,ConvertibleToConvertibleConversionRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\ConvertibleToConvertibleConversionRuleTest.cs,TransitiveConversion,The following statement contains a magic number: string targetValue = (string)Converter.Convert(42' typeof(string));
Magic Number,Gallio.Tests.Runtime.Conversions,CustomConvertersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\CustomConvertersTest.cs,Converts,The following statement contains a magic number: Assert.AreEqual(123' actualFoo.Value);
Magic Number,Gallio.Tests.Runtime.Conversions,NullConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\NullConverterTest.cs,ConvertReturnsSourceValueIsNoConversionRequired,The following statement contains a magic number: Assert.AreEqual(42' new NullConverter().Convert(42' typeof(int)));
Magic Number,Gallio.Tests.Runtime.Conversions,NullConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\NullConverterTest.cs,ConvertReturnsSourceValueIsNoConversionRequired,The following statement contains a magic number: Assert.AreEqual(42' new NullConverter().Convert(42' typeof(int)));
Magic Number,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Convert_caches_the_conversion_so_GetConversionCost_is_only_called_once_for_a_pair_of_types,The following statement contains a magic number: mockRule1.Expect(x => x.Convert(42' typeof(string)' converter' true)).Return("42");
Magic Number,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Convert_caches_the_conversion_so_GetConversionCost_is_only_called_once_for_a_pair_of_types,The following statement contains a magic number: mockRule1.Expect(x => x.Convert(53' typeof(string)' converter' true)).Return("53");
Magic Number,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Convert_caches_the_conversion_so_GetConversionCost_is_only_called_once_for_a_pair_of_types,The following statement contains a magic number: Assert.AreEqual("42"' converter.Convert(42' typeof(string)));
Magic Number,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Convert_caches_the_conversion_so_GetConversionCost_is_only_called_once_for_a_pair_of_types,The following statement contains a magic number: Assert.AreEqual("53"' converter.Convert(53' typeof(string)));
Magic Number,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Convert_returns_same_value_if_types_are_same,The following statement contains a magic number: Assert.AreEqual(42' converter.Convert(42' typeof(int)));
Magic Number,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Convert_returns_same_value_if_types_are_same,The following statement contains a magic number: Assert.AreEqual(42' converter.Convert(42' typeof(int)));
Magic Number,Gallio.Tests.Runtime.Conversions,RuleBasedConverterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\RuleBasedConverterTest.cs,Custom_conversion,The following statement contains a magic number: Assert.AreEqual(123' actual.Value);
Magic Number,Gallio.Tests.Runtime.Conversions,XPathNavigatorToXmlSerializableTypeConversionRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Conversions\XPathNavigatorToXmlSerializableTypeConversionRuleTest.cs,DirectConversion,The following statement contains a magic number: Assert.AreEqual(42' targetValue.Value);
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolveByServiceLocation,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenArgumentIsNullAndTypeIsArray_ResolvesDependencyWithServiceLocatorByTypeAndReturnsAllMatches,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.IsTrue(result.IsSatisfied);                      Assert.IsInstanceOfType<IService[]>(result.Value);                        IService[] resultValue = (IService[])result.Value;                      Assert.Count(2' resultValue);                      Assert.AreSame(service1' resultValue[0]);                      Assert.AreSame(service2' resultValue[1]);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolveByServiceLocation,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenArgumentIsNullAndTypeIsArrayOfGenericComponentHandle_ResolvesDependencyWithServiceLocatorByTypeAndReturnsAllMatches,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.IsTrue(result.IsSatisfied);                        var resultValue = (ComponentHandle<IService' Traits>[])result.Value;                      Assert.Count(2' resultValue);                      Assert.AreSame(componentHandle1' resultValue[0]);                      Assert.AreSame(componentHandle2' resultValue[1]);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolveByConfiguration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenDependencyIsOfTypeVersion_ConvertsPropertyStringToVersion,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.IsTrue(result.IsSatisfied);                      Assert.IsInstanceOfType<Version>(result.Value);                      Assert.AreEqual(new Version(1' 2' 3' 4)' result.Value);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolveByConfiguration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenDependencyIsOfTypeVersion_ConvertsPropertyStringToVersion,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.IsTrue(result.IsSatisfied);                      Assert.IsInstanceOfType<Version>(result.Value);                      Assert.AreEqual(new Version(1' 2' 3' 4)' result.Value);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolveByConfiguration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenDependencyIsOfTypeVersion_ConvertsPropertyStringToVersion,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.IsTrue(result.IsSatisfied);                      Assert.IsInstanceOfType<Version>(result.Value);                      Assert.AreEqual(new Version(1' 2' 3' 4)' result.Value);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolveByConfiguration,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\DefaultObjectDependencyResolverTest.cs,ResolveDependency_WhenDependencyIsOfTypeInt_ConvertsPropertyStringToInt,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.IsTrue(result.IsSatisfied);                      Assert.IsInstanceOfType<int>(result.Value);                      Assert.AreEqual(42' result.Value);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenWellFormed_RegistersAllPluginsThenAllServicesThenAllComponents,The following statement contains a magic number: registry.Expect(x => x.RegisterService(null)).Callback(Enlist(serviceRegistrations))                      .Return(MockRepository.GenerateStub<IServiceDescriptor>())                      .Repeat.Times(3);
Magic Number,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenWellFormed_RegistersAllPluginsThenAllServicesThenAllComponents,The following statement contains a magic number: registry.Expect(x => x.RegisterComponent(null)).Callback(Enlist(componentRegistrations))                      .Return(MockRepository.GenerateStub<IComponentDescriptor>())                      .Repeat.Times(4);
Magic Number,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenWellFormed_RegistersAllPluginsThenAllServicesThenAllComponents,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.AreEqual("plugin1Id"' pluginRegistrations[0].PluginId);                      Assert.AreEqual("plugin2Id"' pluginRegistrations[1].PluginId);                        Assert.AreEqual("service1Id"' serviceRegistrations[0].ServiceId);                      Assert.AreEqual("service2Id"' serviceRegistrations[1].ServiceId);                      Assert.AreEqual("service3Id"' serviceRegistrations[2].ServiceId);                        Assert.AreEqual("component1Id"' componentRegistrations[0].ComponentId);                      Assert.AreEqual("component2Id"' componentRegistrations[1].ComponentId);                      Assert.AreEqual("component3Id"' componentRegistrations[2].ComponentId);                      Assert.AreEqual("component4Id"' componentRegistrations[3].ComponentId);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenWellFormed_RegistersAllPluginsThenAllServicesThenAllComponents,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.AreEqual("plugin1Id"' pluginRegistrations[0].PluginId);                      Assert.AreEqual("plugin2Id"' pluginRegistrations[1].PluginId);                        Assert.AreEqual("service1Id"' serviceRegistrations[0].ServiceId);                      Assert.AreEqual("service2Id"' serviceRegistrations[1].ServiceId);                      Assert.AreEqual("service3Id"' serviceRegistrations[2].ServiceId);                        Assert.AreEqual("component1Id"' componentRegistrations[0].ComponentId);                      Assert.AreEqual("component2Id"' componentRegistrations[1].ComponentId);                      Assert.AreEqual("component3Id"' componentRegistrations[2].ComponentId);                      Assert.AreEqual("component4Id"' componentRegistrations[3].ComponentId);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ApplyingConfigurationToRegistry,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenWellFormed_RegistersAllPluginsThenAllServicesThenAllComponents,The following statement contains a magic number: Assert.Multiple(() =>                  {                      Assert.AreEqual("plugin1Id"' pluginRegistrations[0].PluginId);                      Assert.AreEqual("plugin2Id"' pluginRegistrations[1].PluginId);                        Assert.AreEqual("service1Id"' serviceRegistrations[0].ServiceId);                      Assert.AreEqual("service2Id"' serviceRegistrations[1].ServiceId);                      Assert.AreEqual("service3Id"' serviceRegistrations[2].ServiceId);                        Assert.AreEqual("component1Id"' componentRegistrations[0].ComponentId);                      Assert.AreEqual("component2Id"' componentRegistrations[1].ComponentId);                      Assert.AreEqual("component3Id"' componentRegistrations[2].ComponentId);                      Assert.AreEqual("component4Id"' componentRegistrations[3].ComponentId);                  });
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolvingPluginDependencies,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\PluginCatalogTest.cs,ApplyTo_WhenPluginDependenciesPresent_RegistersPluginsInTopologicallySortedOrder,The following statement contains a magic number: registry.Expect(x => x.RegisterPlugin(null)).Callback(Enlist(pluginRegistrations)).Return(MockRepository.GenerateStub<IPluginDescriptor>()).Repeat.Times(4);
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveAll_WhenServiceTypeRegisteredAndAtLeastOneComponent_ReturnsAllResolvedComponents,The following statement contains a magic number: Assert.Count(2' result);
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolvingInstances,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveAllGeneric_WhenServiceTypeRegisteredAndAtLeastOneComponent_ReturnsAllResolvedComponents,The following statement contains a magic number: Assert.Count(2' result);
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveAllHandles_WhenServiceTypeRegisteredAndAtLeastOneComponent_ReturnsAllComponentHandles,The following statement contains a magic number: Assert.Count(2' result);
Magic Number,Gallio.Tests.Runtime.Extensibility,ResolvingHandles,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Extensibility\RegistryServiceLocatorTest.cs,ResolveAllHandlesGeneric_WhenServiceTypeRegisteredAndAtLeastOneComponent_ReturnsAllComponentHandles,The following statement contains a magic number: Assert.Count(2' result);
Magic Number,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,GetFileTypes_ReturnsListOfAllFileTypesIncludingUnknown,The following statement contains a magic number: var expectedFileTypes = new FileType[5];
Magic Number,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,GetFileTypes_ReturnsListOfAllFileTypesIncludingUnknown,The following statement contains a magic number: expectedFileTypes[3] = new FileType("TypeD"' "D"' null);
Magic Number,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,GetFileTypes_ReturnsListOfAllFileTypesIncludingUnknown,The following statement contains a magic number: expectedFileTypes[2] = new FileType("TypeC"' "C"' expectedFileTypes[3]);
Magic Number,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,GetFileTypes_ReturnsListOfAllFileTypesIncludingUnknown,The following statement contains a magic number: expectedFileTypes[2] = new FileType("TypeC"' "C"' expectedFileTypes[3]);
Magic Number,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,GetFileTypes_ReturnsListOfAllFileTypesIncludingUnknown,The following statement contains a magic number: expectedFileTypes[1] = new FileType("TypeB"' "B"' expectedFileTypes[2]);
Magic Number,Gallio.Tests.Runtime.FileTypes,FileTypeManagerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\FileTypeManagerTest.cs,GetFileTypes_ReturnsListOfAllFileTypesIncludingUnknown,The following statement contains a magic number: expectedFileTypes[4] = fileTypeManager.UnknownFileType;
Magic Number,Gallio.Tests.Runtime.FileTypes,LazyFileInspectorTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\FileTypes\LazyFileInspectorTest.cs,TryGetStream_WhenPreviouslyReturnedStreamStillOpen_ReturnsSameStreamAtPositionZero,The following statement contains a magic number: returnedStream.Position = 2;
Magic Number,Gallio.Tests.Runtime.Formatting,MemberInfoFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\MemberInfoFormattingRuleTest.cs,GetMemberInfoData,The following statement contains a magic number: yield return new object[] { 123' null' null };
Magic Number,Gallio.Tests.Runtime.Formatting,CustomFormattersTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\CustomFormattersTest.cs,Formats,The following statement contains a magic number: string output = func(new Foo(123));
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,SimpleExpressions,The following statement contains a magic number: Assert.Multiple(() =>              {                  int x = 5' y = 2;                  int[] arr = new int[1];                  UnaryPlusType z = new UnaryPlusType();                    // binary operators                  AssertFormat(() => x + y' "() => x + y");                  AssertFormat(() => checked(x + y)' "() => checked(x + y)");                  AssertFormat(() => x & y' "() => x & y");                  AssertFormat(() => true && x == 5' "() => {True} && x == {5}");                  AssertFormat(() => arr[0]' "() => arr[{0}]");                  AssertFormat(() => arr ?? arr' "() => arr ?? arr");                  AssertFormat(() => x / y' "() => x / y");                  AssertFormat(() => x == y' "() => x == y");                  AssertFormat(() => x ^ y' "() => x ^ y");                  AssertFormat(() => x > y' "() => x > y");                  AssertFormat(() => x >= y' "() => x >= y");                  AssertFormat(() => ((Func<int>) (() => 5))()' "() => (({System.Func`1[System.Int32]}) (() => {5}))()");                  AssertFormat(() => x << y' "() => x << y");                  AssertFormat(() => x < y' "() => x < y");                  AssertFormat(() => x <= y' "() => x <= y");                  AssertFormat(() => x % y' "() => x % y");                  AssertFormat(() => x * y' "() => x * y");                  AssertFormat(() => checked(x * y)' "() => checked(x * y)");                  AssertFormat(() => x != y' "() => x != y");                  AssertFormat(() => x | y' "() => x | y");                  AssertFormat(() => false || x == 5' "() => {False} || x == {5}");                  AssertFormat(Expression.Lambda<Func<double>>(Expression.Power(Expression.Constant(3.0)'                          Expression.Constant(4.0)))' "() => {3} ** {4}");                  AssertFormat(() => x >> y' "() => x >> y");                  AssertFormat(() => x - y' "() => x - y");                  AssertFormat(() => checked(x - y)' "() => checked(x - y)");                    // call                  AssertFormat(() => arr.ToString()' "() => arr.ToString()");                    // conditional                  AssertFormat(() => x == 3 ? 1 : 2' "() => x == {3} ? {1} : {2}");                    // lambda (done elsewhere)                    // list init                  AssertFormat(() => new List<int> {1' 2' 3}' "() => new List`1() { {1}' {2}' {3} }");                    // member init                  AssertFormat(() => new MemberInitType {Bar = 42' List = {1' 2' 3}' Aggregate = {Foo = 42}}'                      "() => new MemberInitType() { Bar = {42}' List = { {1}' {2}' {3} }' Aggregate = { Foo = {42} } }");                    // member access (done elsewhere)                    // new                  AssertFormat(() => new MemberInitType()' "() => new MemberInitType()");                    // new array bounds                  AssertFormat(() => new int[3]' "() => new {System.Int32}[{3}]");                    // new array init                  AssertFormat(() => new int[] {1' 2' 3}' "() => new {System.Int32}[] { {1}' {2}' {3} }");                    // parameter                  AssertFormat((int i) => i == 2' "i => i == {2}");                    // quote                  AssertFormat(() => AssertFormat(() => x == 5' "() => x == {5}")'                      "() => {Gallio.Tests.Runtime.Formatting.ExpressionFormattingRuleTest}.AssertFormat((() => x == {5})' {() => x == {5}})");                    // type binary                  AssertFormat(() => (object) x is int' "() => ({System.Object}) x is {System.Int32}");                    // unary                  AssertFormat(() => arr.Length' "() => arr.Length");                  AssertFormat(() => (double) x' "() => ({System.Double}) x");                  AssertFormat(() => checked((double)x)' "() => checked(({System.Double}) x)");                  AssertFormat(() => -x' "() => - x");                  AssertFormat(() => checked(-x)' "() => checked(- x)");                  AssertFormat(() => ~x' "() => ~ x");                  AssertFormat(() => x as object' "() => x as {System.Object}");                  AssertFormat(() => +z' "() => + z");              });
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,Precedence,The following statement contains a magic number: int x = 5' y = 2;
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,Precedence,The following statement contains a magic number: int x = 5' y = 2;
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,CheckedAndUnchecked,The following statement contains a magic number: int x = 5' y = 2;
Magic Number,Gallio.Tests.Runtime.Formatting,ExpressionFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\ExpressionFormattingRuleTest.cs,CheckedAndUnchecked,The following statement contains a magic number: int x = 5' y = 2;
Magic Number,Gallio.Tests.Runtime.Formatting,RuleBasedFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\RuleBasedFormatterTest.cs,FormatterSubstitutesNameOfTypeIfRuleReturnsNullOrEmpty,The following statement contains a magic number: Assert.AreEqual("{System.Int32}"' formatter.Format(42));
Magic Number,Gallio.Tests.Runtime.Formatting,RuleBasedFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\RuleBasedFormatterTest.cs,FormatterSubstitutesNameOfTypeIfRuleThrows,The following statement contains a magic number: Assert.AreEqual("{System.Int32}"' formatter.Format(42));
Magic Number,Gallio.Tests.Runtime.Formatting,RuleBasedFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\RuleBasedFormatterTest.cs,FormatterChoosesTheBestRuleAndCachesLookups,The following statement contains a magic number: Assert.AreEqual("42"' formatter.Format(42));
Magic Number,Gallio.Tests.Runtime.Formatting,RuleBasedFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\RuleBasedFormatterTest.cs,FormatterChoosesTheBestRuleAndCachesLookups,The following statement contains a magic number: Assert.AreEqual("53"' formatter.Format(53));
Magic Number,Gallio.Tests.Runtime.Formatting,RuleBasedFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\RuleBasedFormatterTest.cs,Custom_formatting,The following statement contains a magic number: string output = formatter.Format(new Foo(123));
Magic Number,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format,The following statement contains a magic number: SampleObject value = new SampleObject              {                  Field = 42'                  Property = 101'                  Left = null              };
Magic Number,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format,The following statement contains a magic number: SampleObject value = new SampleObject              {                  Field = 42'                  Property = 101'                  Left = null              };
Magic Number,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format_DeepGraphShouldStopAfterTwoLevels,The following statement contains a magic number: SampleObject value = new SampleObject              {                  Left = new SampleObject                  {                      Left = new SampleObject                      {                          Field = 3                      }'                      Field = 2                  }'                  Field = 1              };
Magic Number,Gallio.Tests.Runtime.Formatting,StructuralFormattingRuleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StructuralFormattingRuleTest.cs,Format_DeepGraphShouldStopAfterTwoLevels,The following statement contains a magic number: SampleObject value = new SampleObject              {                  Left = new SampleObject                  {                      Left = new SampleObject                      {                          Field = 3                      }'                      Field = 2                  }'                  Field = 1              };
Magic Number,Gallio.Tests.Runtime.Formatting,StubFormatterTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Formatting\StubFormatterTest.cs,StubFormatterCanUseBuiltInRules,The following statement contains a magic number: Assert.AreEqual("1.2m"' formatter.Format(1.2m));
Magic Number,Gallio.Tests.Runtime.Hosting,AbstractHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\AbstractHostFactoryTest.cs,CreateInstanceFromCreatesAValidObjectHandle,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Runtime.Hosting,AbstractHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\AbstractHostFactoryTest.cs,CreateInstanceFromCreatesAValidObjectHandle,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Runtime.Hosting,AbstractHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\AbstractHostFactoryTest.cs,CreateInstanceFromCreatesAValidObjectHandle,The following statement contains a magic number: Assert.AreEqual(42' serviceProxy.Add(23' 19));
Magic Number,Gallio.Tests.Runtime.Hosting,RemoteHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\RemoteHostFactoryTest.cs,DoCallbackHasRemoteSideEffects,The following statement contains a magic number: Assert.AreEqual(5' host.GetHostService().Do<int' int>(DoCallbackHasRemoteSideEffectsCallback' 3));
Magic Number,Gallio.Tests.Runtime.Hosting,RemoteHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\RemoteHostFactoryTest.cs,DoCallbackHasRemoteSideEffects,The following statement contains a magic number: Assert.AreEqual(5' host.GetHostService().Do<int' int>(DoCallbackHasRemoteSideEffectsCallback' 3));
Magic Number,Gallio.Tests.Runtime.Hosting,RemoteHostFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\RemoteHostFactoryTest.cs,DoCallbackHasRemoteSideEffectsCallback,The following statement contains a magic number: callbackCounter == 2
Magic Number,Gallio.Tests.Runtime.Hosting,IsolatedProcessHostTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\IsolatedProcessHostTest.cs,HostDoesNotTerminateAbruptlyIfUnhandledExceptionThrowsWithTheLegacyUnhandledExceptionPolicyEnabled,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Gallio.Tests.Runtime.Hosting,IsolatedProcessHostTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Hosting\IsolatedProcessHostTest.cs,HostDoesNotTerminateAbruptlyIfUnhandledExceptionThrowsWithTheLegacyUnhandledExceptionPolicyEnabled,The following statement contains a magic number: i < 3
Magic Number,Gallio.Tests.Model.Commands,DefaultTestContextTrackerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Contexts\DefaultTestContextTrackerTest.cs,TheEnteredContextPropagatesAcrossThreadsWithIndependentStacks,The following statement contains a magic number: Tasks.JoinAndVerify(new TimeSpan(0' 0' 5));
Magic Number,Gallio.Tests.Model.Commands,DefaultTestContextTrackerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Contexts\DefaultTestContextTrackerTest.cs,AContextCannotBeExitedOnADifferentThreadFromTheOneThatEnteredIt,The following statement contains a magic number: Tasks.JoinAndVerify(new TimeSpan(0' 0' 5));
Magic Number,Gallio.Tests.Model.Commands,DefaultTestCommandFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Commands\DefaultTestCommandFactoryTest.cs,IndependentTestsAreSortedByOrder,The following statement contains a magic number: model.RootTest.Children[0].AddChild(CreateTest("A1"' 2));
Magic Number,Gallio.Tests.Model.Commands,DefaultTestCommandFactoryTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Model\Commands\DefaultTestCommandFactoryTest.cs,DependentTestsAreSortedByOrder,The following statement contains a magic number: model.RootTest.Children[0].AddChild(CreateTest("A1"' 2));
Magic Number,Gallio.Tests.Runtime.Preferences,TopLevelOperations,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceSetTest.cs,Read_WithFunc_ReturnsFuncResult,The following statement contains a magic number: int result = preferenceSet.Read(reader => 42);
Magic Number,Gallio.Tests.Runtime.Preferences,TopLevelOperations,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceSetTest.cs,Read_WithFunc_ReturnsFuncResult,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Gallio.Tests.Runtime.Preferences,TopLevelOperations,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceSetTest.cs,Write_WithFunc_ReturnsFuncResult,The following statement contains a magic number: int result = preferenceSet.Write(writer => 42);
Magic Number,Gallio.Tests.Runtime.Preferences,TopLevelOperations,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceSetTest.cs,Write_WithFunc_ReturnsFuncResult,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Gallio.Tests.Runtime.Preferences,WriterOperations,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceSetTest.cs,SetSetting_WhenDataTypeIsInt_ConvertsItForRoundTrip,The following statement contains a magic number: preferenceSet.Write(writer => writer.SetSetting(new Key<int>("name")' 42));
Magic Number,Gallio.Tests.Runtime.Preferences,WriterOperations,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runtime\Preferences\FilePreferenceSetTest.cs,SetSetting_WhenDataTypeIsInt_ConvertsItForRoundTrip,The following statement contains a magic number: Assert.AreEqual(42' result);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,MergeStepStatistics,The following statement contains a magic number: testStepRun.Result.AssertCount = 3;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,MergeStepStatistics,The following statement contains a magic number: Assert.AreEqual(3' stats.AssertCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(2' stats.TestCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(3' stats.RunCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(4' stats.StepCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(1.3' stats.Duration);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(33' stats.SkippedCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(10' stats.GetOutcomeCount(TestOutcome.Skipped));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(11' stats.GetOutcomeCount(TestOutcome.Ignored));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(12' stats.GetOutcomeCount(TestOutcome.Pending));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(20' stats.PassedCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(20' stats.GetOutcomeCount(TestOutcome.Passed));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(61' stats.InconclusiveCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(30' stats.GetOutcomeCount(TestOutcome.Inconclusive));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(31' stats.GetOutcomeCount(TestOutcome.Canceled));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(123' stats.FailedCount);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(40' stats.GetOutcomeCount(TestOutcome.Failed));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(41' stats.GetOutcomeCount(TestOutcome.Error));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetAndGetProperties,The following statement contains a magic number: Assert.AreEqual(42' stats.GetOutcomeCount(TestOutcome.Timeout));
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.TestCount = 2;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.RunCount = 3;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.StepCount = 4;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.Duration = 1.3;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SkippedCount = 33;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Skipped' 10);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Ignored' 11);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Pending' 12);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.PassedCount = 20;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Passed' 20);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.InconclusiveCount = 61;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Inconclusive' 30);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Canceled' 31);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.FailedCount = 123;
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Failed' 40);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Error' 41);
Magic Number,Gallio.Tests.Runner.Reports.Schema,PackageRunStatisticsTests,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Gallio\Gallio.Tests\Runner\Reports\Schema\PackageRunStatisticsTests.cs,SetPackageRunStatisticsProperties,The following statement contains a magic number: stats.SetOutcomeCount(TestOutcome.Timeout' 42);
