Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,Run,Cyclomatic complexity of the method is 8
Long Parameter List,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,InstallRegistryKeysForFramework,The method has 6 parameters. Parameters: frameworkName' frameworkAssembly' priority' progressMonitor' hiveKey' rootKeyPath
Long Parameter List,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,RunMember,The method has 5 parameters. Parameters: testListener' assemblyPath' typeName' memberName' facadeOptions
Long Identifier,Gallio.Loader,LoaderImpl,C:\repos\Gallio_mbunit-v3\src\SDK\Loader\Gallio.Loader.cs,,The length of the parameter BootstrapInstallAssemblyLoaderMethodName is 40.
Long Identifier,Gallio.Loader,LoaderImpl,C:\repos\Gallio_mbunit-v3\src\SDK\Loader\Gallio.Loader.cs,,The length of the parameter BootstrapSetupRuntimeMethodName is 31.
Long Identifier,Gallio.Loader,LoaderImpl,C:\repos\Gallio_mbunit-v3\src\SDK\Loader\Gallio.Loader.cs,,The length of the parameter BootstrapAddHintDirectoryMethodName is 35.
Long Identifier,Gallio.TDNetRunner,BaseTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\BaseTestRunner.cs,,The length of the parameter loaderAssemblyResolverInstalled is 31.
Long Statement,Gallio.Loader,VersionPolicy,C:\repos\Gallio_mbunit-v3\src\SDK\Loader\Gallio.Loader.VersionPolicy.cs,GetVersionNumber,The length of the statement  "            var attribs = (AssemblyFileVersionAttribute[]) assembly.GetCustomAttributes(typeof(AssemblyFileVersionAttribute)' false); " is 121.
Long Statement,Gallio.TDNetRunner.Core,LocalProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\LocalProxyTestRunner.cs,RunImpl,The length of the statement  "                    testListener.WriteLine(String.Format("Included categories: {0}\n"' CombineCategoryNameList(facadeOptions.FilterCategoryNames))' FacadeCategory.Info); " is 149.
Long Statement,Gallio.TDNetRunner.Core,LocalProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\LocalProxyTestRunner.cs,RunImpl,The length of the statement  "                    testListener.WriteLine(String.Format("Excluded categories: {0}\n"' CombineCategoryNameList(facadeOptions.FilterCategoryNames))' FacadeCategory.Info); " is 149.
Long Statement,Gallio.TDNetRunner.Core,ReportSettings,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\ReportSettings.cs,ReadFrom,The length of the statement  "                preferenceSet.Read(reader => reader.GetSetting(new Key<int>("ReportSettingsAutoCondenseThreadhold")' Default.AutoCondenseThreshold))); " is 134.
Long Statement,Gallio.TDNetRunner.Core,ReportSettings,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\ReportSettings.cs,WriteTo,The length of the statement  "            preferenceSet.Write(writer => writer.SetSetting(new Key<int>("ReportSettingsAutoCondenseThreadhold")' autoCondenseThreshold)); " is 126.
Long Statement,Gallio.TDNetRunner.Core,ReportSettings,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\ReportSettings.cs,DetermineReportFormat,The length of the statement  "            return (report.TestPackageRun != null && AutoCondenseEnabled && report.TestPackageRun.Statistics.RunCount >= AutoCondenseThreshold) " is 131.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,Install,The length of the statement  "            using (progressMonitor.BeginTask("Installing TestDriven.Net Runner"' testFrameworkManager.TestFrameworkHandles.Count + 2)) " is 122.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,Install,The length of the statement  "                foreach (ComponentHandle<ITestFramework' TestFrameworkTraits> testFrameworkHandle in testFrameworkManager.TestFrameworkHandles) " is 127.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,Install,The length of the statement  "                    TDNetRunnerInstallationMode installationMode = preferenceManager.GetInstallationModeForFramework(testFrameworkHandle.Id); " is 121.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,InstallRegistryKeysForIcarus,The length of the statement  "            string subKeyName = string.Concat(rootKeyPath' @"\"' RunnerRegKeyPrefix + "_Icarus"); // Note: 'Gallio_Icarus' is hardcoded in TDNet's config file. " is 147.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,InstallRegistryKeysForFramework,The length of the statement  "            InstallRegistryKeysForFramework(frameworkName' frameworkAssembly' priority' progressMonitor' Registry.LocalMachine' LocalMachineRegKey); " is 136.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,InstallRegistryKeysForFramework,The length of the statement  "                InstallRegistryKeysForFramework(frameworkName' frameworkAssembly' priority' progressMonitor' Registry.LocalMachine' LocalMachineRegKeyWow3264Node); " is 147.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,InstallRegistryKeysForFramework,The length of the statement  "            string subKeyName = string.Concat(rootKeyPath' @"\"' RunnerRegKeyPrefix' " - "' frameworkName' " ("' frameworkAssembly' ")"); " is 125.
Long Statement,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,InstallRegistryKeysForFramework,The length of the statement  "                subKey.SetValue("TargetFrameworkAssemblyName"' frameworkAssembly.ToString()); // n.b. TDNet supports version ranges in the same format we use " is 141.
Long Statement,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,ToCategoryFilter,The length of the statement  "            return new MetadataFilter<ITestDescriptor>(MetadataKeys.Category' new OrFilter<string>(GenericCollectionUtils.ConvertAllToArray(categoryNames' " is 142.
Long Statement,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,Run,The length of the statement  "                        filterRules.Add(new FilterRule<ITestDescriptor>(FilterRuleType.Exclusion' ToCategoryFilter(facadeOptions.FilterCategoryNames))); " is 128.
Long Statement,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,Run,The length of the statement  "                launcher.TestProject.AddTestRunnerExtension(new TDNetExtension(testListener)); // This monitor will inform the user in real-time what's going on " is 144.
Long Statement,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,Run,The length of the statement  "                    var preferenceManager = (TDNetPreferenceManager)RuntimeAccessor.ServiceLocator.ResolveByComponentId("TDNetRunner.PreferenceManager"); " is 133.
Magic Number,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,Install,The following statement contains a magic number: using (progressMonitor.BeginTask("Installing TestDriven.Net Runner"' testFrameworkManager.TestFrameworkHandles.Count + 2))              {                  // Remove old registrations.                  RemoveExistingRegistryKeys(progressMonitor);                  progressMonitor.Worked(1);                    // Register Icarus                  string icarusPath = FindIcarusPath();                  if (icarusPath != null)                      InstallRegistryKeysForIcarus(icarusPath' progressMonitor);                  progressMonitor.Worked(1);                    // Register frameworks                  foreach (ComponentHandle<ITestFramework' TestFrameworkTraits> testFrameworkHandle in testFrameworkManager.TestFrameworkHandles)                  {                      TestFrameworkTraits testFrameworkTraits = testFrameworkHandle.GetTraits();                      TDNetRunnerInstallationMode installationMode = preferenceManager.GetInstallationModeForFramework(testFrameworkHandle.Id);                        if (installationMode != TDNetRunnerInstallationMode.Disabled)                      {                          int priority = installationMode == TDNetRunnerInstallationMode.Default ? 25 : 5;                          foreach (AssemblySignature frameworkAssembly in testFrameworkTraits.FrameworkAssemblies)                          {                              InstallRegistryKeysForFramework(testFrameworkTraits.Name' frameworkAssembly' priority'                                  progressMonitor);                          }                      }                        progressMonitor.Worked(1);                  }              }
Magic Number,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,Install,The following statement contains a magic number: using (progressMonitor.BeginTask("Installing TestDriven.Net Runner"' testFrameworkManager.TestFrameworkHandles.Count + 2))              {                  // Remove old registrations.                  RemoveExistingRegistryKeys(progressMonitor);                  progressMonitor.Worked(1);                    // Register Icarus                  string icarusPath = FindIcarusPath();                  if (icarusPath != null)                      InstallRegistryKeysForIcarus(icarusPath' progressMonitor);                  progressMonitor.Worked(1);                    // Register frameworks                  foreach (ComponentHandle<ITestFramework' TestFrameworkTraits> testFrameworkHandle in testFrameworkManager.TestFrameworkHandles)                  {                      TestFrameworkTraits testFrameworkTraits = testFrameworkHandle.GetTraits();                      TDNetRunnerInstallationMode installationMode = preferenceManager.GetInstallationModeForFramework(testFrameworkHandle.Id);                        if (installationMode != TDNetRunnerInstallationMode.Disabled)                      {                          int priority = installationMode == TDNetRunnerInstallationMode.Default ? 25 : 5;                          foreach (AssemblySignature frameworkAssembly in testFrameworkTraits.FrameworkAssemblies)                          {                              InstallRegistryKeysForFramework(testFrameworkTraits.Name' frameworkAssembly' priority'                                  progressMonitor);                          }                      }                        progressMonitor.Worked(1);                  }              }
Magic Number,Gallio.TDNetRunner.Core,TDNetRunnerInstaller,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetRunnerInstaller.cs,Install,The following statement contains a magic number: using (progressMonitor.BeginTask("Installing TestDriven.Net Runner"' testFrameworkManager.TestFrameworkHandles.Count + 2))              {                  // Remove old registrations.                  RemoveExistingRegistryKeys(progressMonitor);                  progressMonitor.Worked(1);                    // Register Icarus                  string icarusPath = FindIcarusPath();                  if (icarusPath != null)                      InstallRegistryKeysForIcarus(icarusPath' progressMonitor);                  progressMonitor.Worked(1);                    // Register frameworks                  foreach (ComponentHandle<ITestFramework' TestFrameworkTraits> testFrameworkHandle in testFrameworkManager.TestFrameworkHandles)                  {                      TestFrameworkTraits testFrameworkTraits = testFrameworkHandle.GetTraits();                      TDNetRunnerInstallationMode installationMode = preferenceManager.GetInstallationModeForFramework(testFrameworkHandle.Id);                        if (installationMode != TDNetRunnerInstallationMode.Disabled)                      {                          int priority = installationMode == TDNetRunnerInstallationMode.Default ? 25 : 5;                          foreach (AssemblySignature frameworkAssembly in testFrameworkTraits.FrameworkAssemblies)                          {                              InstallRegistryKeysForFramework(testFrameworkTraits.Name' frameworkAssembly' priority'                                  progressMonitor);                          }                      }                        progressMonitor.Worked(1);                  }              }
Magic Number,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,RunImpl,The following statement contains a magic number: if (cref.Length >= 2)              {                  char descriptor = cref[0];                    switch (descriptor)                  {                      case 'T':                          return RunType(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'N':                          return RunNamespace(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'M':                      case 'F':                      case 'P':                      case 'E':                          int paramsPos = cref.IndexOf('(');                          if (paramsPos < 0)                              paramsPos = cref.Length;                            string memberNameWithType = cref.Substring(2' paramsPos - 2);                          int memberPos = memberNameWithType.LastIndexOf('.');                          if (memberPos < 0)                              break;                            string typeName = memberNameWithType.Substring(0' memberPos);                          string memberName = memberNameWithType.Substring(memberPos + 1);                          return RunMember(testListener' assemblyPath' typeName' memberName' facadeOptions);                  }              }
Magic Number,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,RunImpl,The following statement contains a magic number: if (cref.Length >= 2)              {                  char descriptor = cref[0];                    switch (descriptor)                  {                      case 'T':                          return RunType(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'N':                          return RunNamespace(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'M':                      case 'F':                      case 'P':                      case 'E':                          int paramsPos = cref.IndexOf('(');                          if (paramsPos < 0)                              paramsPos = cref.Length;                            string memberNameWithType = cref.Substring(2' paramsPos - 2);                          int memberPos = memberNameWithType.LastIndexOf('.');                          if (memberPos < 0)                              break;                            string typeName = memberNameWithType.Substring(0' memberPos);                          string memberName = memberNameWithType.Substring(memberPos + 1);                          return RunMember(testListener' assemblyPath' typeName' memberName' facadeOptions);                  }              }
Magic Number,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,RunImpl,The following statement contains a magic number: if (cref.Length >= 2)              {                  char descriptor = cref[0];                    switch (descriptor)                  {                      case 'T':                          return RunType(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'N':                          return RunNamespace(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'M':                      case 'F':                      case 'P':                      case 'E':                          int paramsPos = cref.IndexOf('(');                          if (paramsPos < 0)                              paramsPos = cref.Length;                            string memberNameWithType = cref.Substring(2' paramsPos - 2);                          int memberPos = memberNameWithType.LastIndexOf('.');                          if (memberPos < 0)                              break;                            string typeName = memberNameWithType.Substring(0' memberPos);                          string memberName = memberNameWithType.Substring(memberPos + 1);                          return RunMember(testListener' assemblyPath' typeName' memberName' facadeOptions);                  }              }
Magic Number,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,RunImpl,The following statement contains a magic number: if (cref.Length >= 2)              {                  char descriptor = cref[0];                    switch (descriptor)                  {                      case 'T':                          return RunType(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'N':                          return RunNamespace(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'M':                      case 'F':                      case 'P':                      case 'E':                          int paramsPos = cref.IndexOf('(');                          if (paramsPos < 0)                              paramsPos = cref.Length;                            string memberNameWithType = cref.Substring(2' paramsPos - 2);                          int memberPos = memberNameWithType.LastIndexOf('.');                          if (memberPos < 0)                              break;                            string typeName = memberNameWithType.Substring(0' memberPos);                          string memberName = memberNameWithType.Substring(memberPos + 1);                          return RunMember(testListener' assemblyPath' typeName' memberName' facadeOptions);                  }              }
Magic Number,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,RunImpl,The following statement contains a magic number: if (cref.Length >= 2)              {                  char descriptor = cref[0];                    switch (descriptor)                  {                      case 'T':                          return RunType(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'N':                          return RunNamespace(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'M':                      case 'F':                      case 'P':                      case 'E':                          int paramsPos = cref.IndexOf('(');                          if (paramsPos < 0)                              paramsPos = cref.Length;                            string memberNameWithType = cref.Substring(2' paramsPos - 2);                          int memberPos = memberNameWithType.LastIndexOf('.');                          if (memberPos < 0)                              break;                            string typeName = memberNameWithType.Substring(0' memberPos);                          string memberName = memberNameWithType.Substring(memberPos + 1);                          return RunMember(testListener' assemblyPath' typeName' memberName' facadeOptions);                  }              }
Missing Default,Gallio.TDNetRunner.Core,LocalProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\LocalProxyTestRunner.cs,RunImpl,The following switch statement is missing a default case: switch (facadeOptions.FilterCategoryMode)              {                  case FacadeFilterCategoryMode.Include:                      testListener.WriteLine(String.Format("Included categories: {0}\n"' CombineCategoryNameList(facadeOptions.FilterCategoryNames))' FacadeCategory.Info);                      break;                    case FacadeFilterCategoryMode.Exclude:                      testListener.WriteLine(String.Format("Excluded categories: {0}\n"' CombineCategoryNameList(facadeOptions.FilterCategoryNames))' FacadeCategory.Info);                      break;              }
Missing Default,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,RunImpl,The following switch statement is missing a default case: switch (descriptor)                  {                      case 'T':                          return RunType(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'N':                          return RunNamespace(testListener' assemblyPath' cref.Substring(2)' facadeOptions);                        case 'M':                      case 'F':                      case 'P':                      case 'E':                          int paramsPos = cref.IndexOf('(');                          if (paramsPos < 0)                              paramsPos = cref.Length;                            string memberNameWithType = cref.Substring(2' paramsPos - 2);                          int memberPos = memberNameWithType.LastIndexOf('.');                          if (memberPos < 0)                              break;                            string typeName = memberNameWithType.Substring(0' memberPos);                          string memberName = memberNameWithType.Substring(memberPos + 1);                          return RunMember(testListener' assemblyPath' typeName' memberName' facadeOptions);                  }
Missing Default,Gallio.TDNetRunner.Core,RemoteProxyTestRunner,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\RemoteProxyTestRunner.cs,Run,The following switch statement is missing a default case: switch (facadeOptions.FilterCategoryMode)                  {                      case FacadeFilterCategoryMode.Disabled:                          filterRules.Add(new FilterRule<ITestDescriptor>(FilterRuleType.Inclusion' filter));                          break;                        case FacadeFilterCategoryMode.Include:                          filterRules.Add(new FilterRule<ITestDescriptor>(FilterRuleType.Inclusion'                              new AndFilter<ITestDescriptor>(new[] { filter' ToCategoryFilter(facadeOptions.FilterCategoryNames) })));                          break;                        case FacadeFilterCategoryMode.Exclude:                          filterRules.Add(new FilterRule<ITestDescriptor>(FilterRuleType.Exclusion' ToCategoryFilter(facadeOptions.FilterCategoryNames)));                          filterRules.Add(new FilterRule<ITestDescriptor>(FilterRuleType.Inclusion' filter));                          break;                  }
Missing Default,Gallio.TDNetRunner.Core,TDNetLogger,C:\repos\Gallio_mbunit-v3\src\Extensions\TDNet\Gallio.TDNetRunner\Core\TDNetLogger.cs,LogImpl,The following switch statement is missing a default case: switch (severity)              {                  case LogSeverity.Error:                      testListener.WriteLine(message' FacadeCategory.Error);                      break;                    case LogSeverity.Warning:                      testListener.WriteLine(message' FacadeCategory.Warning);                      break;                    case LogSeverity.Important:                  case LogSeverity.Info:                      testListener.WriteLine(message' FacadeCategory.Info);                      break;                    case LogSeverity.Debug:                      testListener.WriteLine(message' FacadeCategory.Debug);                      break;              }
