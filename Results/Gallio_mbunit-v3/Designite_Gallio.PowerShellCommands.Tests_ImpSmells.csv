Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandIntegrationTest.cs,CmdletDoesNotCausePowerShellToTerminateAbruptlyOnUnhandledExceptions,The length of the statement  "            Assert.IsFalse(task.ConsoleOutput.Contains("An error has occurred that was not properly handled. Additional information is shown below. The Windows PowerShell process will exit.")' " is 180.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandIntegrationTest.cs,CmdletSupportsCustomExtensions,The length of the statement  "            ProcessTask task = RunPowerShell("-filter Type:PassingTests -ignore-annotations -runner-extension 'DebugExtension'Gallio'"); " is 124.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesDefaultArgumentsToLauncher,The length of the statement  "                Assert.AreEqual(Path.GetDirectoryName(AssemblyUtils.GetAssemblyLocalPath(typeof(RunGallioCommand).Assembly))' launcher.RuntimeSetup.RuntimePath); " is 145.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesDefaultArgumentsToLauncher,The length of the statement  "                Assert.AreElementsEqual(new string[] { }' from x in launcher.TestProject.TestPackage.HintDirectories select x.ToString()); " is 122.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The length of the statement  "            task.RunnerProperties = new[] { "RunnerOption1=RunnerValue1"' "  RunnerOption2  "' "RunnerOption3 = 'RunnerValue3'"' "RunnerOption4=\"'RunnerValue4'\"" }; " is 154.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The length of the statement  "            task.ReportFormatterProperties = new[] { "FormatterOption1=FormatterValue1"' "  FormatterOption2  "' "FormatterOption3 = 'FormatterValue3'"' "FormatterOption4=\"'FormatterValue4'\"" }; " is 184.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The length of the statement  "                Assert.AreElementsEqual(new string[] { "DebugExtension'Gallio" }' launcher.TestProject.TestRunnerExtensionSpecifications); " is 122.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The length of the statement  "                Assert.AreEqual(Path.GetDirectoryName(AssemblyUtils.GetAssemblyLocalPath(typeof(RunGallioCommand).Assembly))' launcher.RuntimeSetup.RuntimePath); " is 145.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The length of the statement  "                Assert.AreElementsEqual(new string[] { "assembly1"' "assembly2" }' from x in launcher.FilePatterns select x.ToString()); " is 120.
Long Statement,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The length of the statement  "                Assert.AreElementsEqual(new string[] { "hint1"' "hint2" }' from x in launcher.TestProject.TestPackage.HintDirectories select x.ToString()); " is 139.
Magic Number,Gallio.PowerShellCommands.Tests,RunGallioCommandIntegrationTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandIntegrationTest.cs,RunPowerShell,The following statement contains a magic number: Assert.IsTrue(task.Run(TimeSpan.FromSeconds(60))' "A timeout occurred.");
Magic Number,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The following statement contains a magic number: task.RunTimeLimit = 7200;
Magic Number,Gallio.PowerShellCommands.Tests,RunGallioCommandUnitTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\RunGallioCommandUnitTest.cs,TaskPassesSpecifiedArgumentsToLauncher,The following statement contains a magic number: task.SetRunLauncherAction(delegate(TestLauncher launcher)              {                  Assert.IsTrue(launcher.DoNotRun);                  Assert.IsFalse(launcher.EchoResults);                  Assert.AreEqual("Type: SimpleTest"' launcher.TestExecutionOptions.FilterSet.ToFilterSetExpr());                  Assert.IsInstanceOfType(typeof(CommandLogger)' launcher.Logger);                  Assert.IsInstanceOfType(typeof(CommandProgressMonitorProvider)' launcher.ProgressMonitorProvider);                  Assert.AreEqual("dir"' launcher.TestProject.ReportDirectory);                  Assert.IsTrue(launcher.TestProject.IsReportDirectorySpecified);                  Assert.AreElementsEqual(new string[] { "XML"' "Html" }' launcher.ReportFormats);                  Assert.AreEqual("report"' launcher.TestProject.ReportNameFormat);                  Assert.IsTrue(launcher.TestProject.IsReportNameFormatSpecified);                  Assert.IsTrue(launcher.ShowReports);                  Assert.AreEqual(ReportArchive.Normal' launcher.TestProject.ReportArchive);                  Assert.AreEqual(TimeSpan.FromMinutes(120)' launcher.RunTimeLimit);                    Assert.AreEqual(StandardTestRunnerFactoryNames.Local' launcher.TestProject.TestRunnerFactoryName);                  Assert.IsTrue(launcher.TestProject.IsTestRunnerFactoryNameSpecified);                  Assert.Count(0' launcher.TestProject.TestRunnerExtensions);                  Assert.AreElementsEqual(new string[] { "DebugExtension'Gallio" }' launcher.TestProject.TestRunnerExtensionSpecifications);                    Assert.IsNull(launcher.RuntimeSetup.ConfigurationFilePath);                  Assert.AreEqual(Path.GetDirectoryName(AssemblyUtils.GetAssemblyLocalPath(typeof(RunGallioCommand).Assembly))' launcher.RuntimeSetup.RuntimePath);                  Assert.AreElementsEqual(new string[] { "plugin" }' launcher.RuntimeSetup.PluginDirectories);                    Assert.AreElementsEqual(new string[] { "assembly1"' "assembly2" }' from x in launcher.FilePatterns select x.ToString());                  Assert.AreElementsEqual(new string[] { "hint1"' "hint2" }' from x in launcher.TestProject.TestPackage.HintDirectories select x.ToString());                    Assert.AreEqual("baseDir"' launcher.TestProject.TestPackage.ApplicationBaseDirectory.ToString());                  Assert.IsTrue(launcher.TestProject.TestPackage.IsApplicationBaseDirectorySpecified);                  Assert.AreEqual("workingDir"' launcher.TestProject.TestPackage.WorkingDirectory.ToString());                  Assert.IsTrue(launcher.TestProject.TestPackage.IsWorkingDirectorySpecified);                  Assert.IsTrue(launcher.TestProject.TestPackage.ShadowCopy);                  Assert.IsTrue(launcher.TestProject.TestPackage.IsShadowCopySpecified);                  Assert.IsNotNull(launcher.TestProject.TestPackage.DebuggerSetup);                  Assert.IsTrue(launcher.TestProject.TestPackage.IsDebuggerSetupSpecified);                  Assert.AreEqual("v4.0.30319"' launcher.TestProject.TestPackage.RuntimeVersion);                  Assert.IsTrue(launcher.TestProject.TestPackage.IsRuntimeVersionSpecified);                    Assert.AreEqual(new PropertySet()                  {                      { "RunnerOption1"' "RunnerValue1" }'                      { "RunnerOption2"' "" }'                      { "RunnerOption3"' "RunnerValue3" }'                      { "RunnerOption4"' "'RunnerValue4'" }                  }' launcher.TestRunnerOptions.Properties);                    Assert.AreEqual(new PropertySet()                  {                      { "FormatterOption1"' "FormatterValue1" }'                      { "FormatterOption2"' "" }'                      { "FormatterOption3"' "FormatterValue3" }'                      { "FormatterOption4"' "'FormatterValue4'" }                  }' launcher.ReportFormatterOptions.Properties);                    return new TestLauncherResult(new Report());              });
