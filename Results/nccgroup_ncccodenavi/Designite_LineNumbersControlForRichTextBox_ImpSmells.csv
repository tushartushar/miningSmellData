Implementation smell,Namespace,Class,File,Method,Description
Long Method,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The method has 207 lines of code.
Long Method,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,UpdateVisibleLineNumberItems,The method has 108 lines of code.
Complex Method,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,Cyclomatic complexity of the method is 20
Complex Method,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,Cyclomatic complexity of the method is 10
Complex Method,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,UpdateSizeAndPosition,Cyclomatic complexity of the method is 20
Complex Method,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,UpdateVisibleLineNumberItems,Cyclomatic complexity of the method is 10
Long Identifier,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,,The length of the parameter pLineNumbersClipByItemRectangle is 31.
Long Statement,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The length of the statement  "							// The GraphicsPath for the LineNumber is just a rectangle behind the text' to keep the paintingspeed high and avoid ugly artifacts." is 132.
Long Statement,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The length of the statement  "					// Grid lines thickness and linestyle in SeeThroughMode. All GraphicsPath lines are drawn as solid to keep the paintingspeed high." is 130.
Long Statement,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,UpdateVisibleLineNumberItems,The length of the statement  "					startIndex = Math.Max(0' Math.Min(RTParent.Text.Length - 1' RTParent.Text.Substring(0' startIndex).LastIndexOf('\n') + 1));" is 123.
Long Statement,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,UpdateVisibleLineNumberItems,The length of the statement  "						pLineNumberItems[a].Rectangle.Height = Math.Max(1' pLineNumberItems[a + 1].Rectangle.Y - pLineNumberItems[a].Rectangle.Y);" is 122.
Long Statement,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,UpdateVisibleLineNumberItems,The length of the statement  "					pLineNumbersFormat = string.Empty.PadRight(pLineNumbersShowAsHexadecimal ? split.Length.ToString("X").Length : split.Length.ToString().Length' '0');" is 148.
Long Statement,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,CalculateAutoSizing,The length of the statement  "				// To measure the LineNumber's width' its Format 0 is replaced by w as that is likely to be one of the widest characters in non-monospace fonts." is 144.
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,LineNumbersForRichText,The following statement contains a magic number: Padding = new Padding(0' 0' 2' 0);
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,LineNumbersForRichText,The following statement contains a magic number: Timer = new Timer { Enabled = false' Interval = 200 };
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,FindStartIndex,The following statement contains a magic number: int pos = RTParent.GetPositionFromCharIndex((max + min) / 2).Y;
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,FindStartIndex,The following statement contains a magic number: min = (max + min) / 2;
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,FindStartIndex,The following statement contains a magic number: max != (min + 1) && min != (max + min) / 2
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform(Width / 2f' Height / 2f);
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: e.Graphics.TranslateTransform(Width / 2f' Height / 2f);
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: e.Graphics.RotateTransform(-90f);
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Rectangle reminderRectangle = new Rectangle((int)Math.Round((Width / 2.0) - (textSize.Height / 2.0))' 																 (int)Math.Round((Height / 2.0) - (textSize.Width / 2.0))' 																 (int)Math.Round(textSize.Height)' (int)Math.Round(textSize.Width));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Rectangle reminderRectangle = new Rectangle((int)Math.Round((Width / 2.0) - (textSize.Height / 2.0))' 																 (int)Math.Round((Height / 2.0) - (textSize.Width / 2.0))' 																 (int)Math.Round(textSize.Height)' (int)Math.Round(textSize.Width));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Rectangle reminderRectangle = new Rectangle((int)Math.Round((Width / 2.0) - (textSize.Height / 2.0))' 																 (int)Math.Round((Height / 2.0) - (textSize.Width / 2.0))' 																 (int)Math.Round(textSize.Height)' (int)Math.Round(textSize.Width));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Rectangle reminderRectangle = new Rectangle((int)Math.Round((Width / 2.0) - (textSize.Height / 2.0))' 																 (int)Math.Round((Height / 2.0) - (textSize.Width / 2.0))' 																 (int)Math.Round(textSize.Height)' (int)Math.Round(textSize.Width));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: reminderRectangle.Inflate((int)Math.Round(textSize.Height * 0.2)' (int)Math.Round(textSize.Width * 0.1));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: reminderRectangle.Inflate((int)Math.Round(textSize.Height * 0.2)' (int)Math.Round(textSize.Width * 0.1));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Rectangle rect = new Rectangle((int)Math.Round(-pGridLinesThickness)' pLineNumberItems[i].Rectangle.Y' 								(int)Math.Round(Width + (pGridLinesThickness * 2.0))' 								(int)Math.Round((Height - pLineNumberItems[0].Rectangle.Y) + pGridLinesThickness));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Point left = new Point((int)Math.Round(Math.Floor(pBorderLinesThickness / 2.0))' 									 (int)Math.Round(Math.Floor(pBorderLinesThickness / 2.0)));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Point left = new Point((int)Math.Round(Math.Floor(pBorderLinesThickness / 2.0))' 									 (int)Math.Round(Math.Floor(pBorderLinesThickness / 2.0)));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Point right = new Point((int)Math.Round(Width - Math.Ceiling(pBorderLinesThickness / 2.0))' 									  (int)Math.Round(Height - Math.Ceiling(pBorderLinesThickness / 2.0)));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Point right = new Point((int)Math.Round(Width - Math.Ceiling(pBorderLinesThickness / 2.0))' 									  (int)Math.Round(Height - Math.Ceiling(pBorderLinesThickness / 2.0)));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: Point[] borderLinesPoints = new Point[5];
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: borderLinesPoints[2] = new Point(right.X' right.Y);
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: borderLinesPoints[3] = new Point(left.X' right.Y);
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: borderLinesPoints[4] = new Point(left.X' left.Y);
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(pen' new Point((int)Math.Round(Math.Floor(pMarginLinesThickness / 2.0))' 0)' 											new Point((int)Math.Round(Math.Floor(pMarginLinesThickness / 2.0))' Height - 1));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(pen' new Point((int)Math.Round(Math.Floor(pMarginLinesThickness / 2.0))' 0)' 											new Point((int)Math.Round(Math.Floor(pMarginLinesThickness / 2.0))' Height - 1));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: left = new Point((int)Math.Round(Math.Ceiling(pMarginLinesThickness / 2.0))' 										   (int)Math.Round(-pMarginLinesThickness));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(pen' new Point((int)Math.Round(Width - Math.Ceiling(pMarginLinesThickness / 2.0))' 0)' 											new Point((int)Math.Round(Width - Math.Ceiling(pMarginLinesThickness / 2.0))' Height - 1));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(pen' new Point((int)Math.Round(Width - Math.Ceiling(pMarginLinesThickness / 2.0))' 0)' 											new Point((int)Math.Round(Width - Math.Ceiling(pMarginLinesThickness / 2.0))' Height - 1));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,OnPaint,The following statement contains a magic number: right = new Point((int)Math.Round(Width - Math.Ceiling(pMarginLinesThickness / 2.0))' 											(int)Math.Round(Height + pMarginLinesThickness));
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,GetAlignmentPoint,The following statement contains a magic number: switch(pLineNumbersAlignment) 			{ 				case ContentAlignment.TopLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 									  (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round(((item.Rectangle.Top + 											   (item.Rectangle.Height / 2.0)) + pLineNumbersOffset.Height) - 											 (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomLeft: 				point = new Point((item.Rectangle.Left + Padding.Left) + pLineNumbersOffset.Width' 								  (int) 								  Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + 											  pLineNumbersOffset.Height) - textSize.Height)); 				break;  				case ContentAlignment.TopCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomCenter: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Width / 2.0) + pLineNumbersOffset.Width) - (textSize.Width / 2.0))' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break;  				case ContentAlignment.TopRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' (item.Rectangle.Top + Padding.Top) + pLineNumbersOffset.Height); 				break;  				case ContentAlignment.MiddleRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round(((item.Rectangle.Top + (item.Rectangle.Height / 2.0)) + 									pLineNumbersOffset.Height) - (textSize.Height / 2.0))); 				break;  				case ContentAlignment.BottomRight: 				point = 					new Point( 						(int) 						Math.Round(((item.Rectangle.Right - Padding.Right) + pLineNumbersOffset.Width) - 								   textSize.Width)' 						(int) 						Math.Round((((item.Rectangle.Bottom - Padding.Bottom) + 1) + pLineNumbersOffset.Height) - 								   textSize.Height)); 				break; 				default: 				point = new Point(0' 0); 				break; 			}
Magic Number,LineNumbersControlForRichTextBox,LineNumbersForRichText,C:\research\architectureSmells\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\LineNumbers\Src\LineNumbersControlForRichTextBox\LineNumbersForRichText.cs,UpdateVisibleLineNumberItems,The following statement contains a magic number: split.Length < 2
