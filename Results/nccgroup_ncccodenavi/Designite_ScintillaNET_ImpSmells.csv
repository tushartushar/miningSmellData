Implementation smell,Namespace,Class,File,Method,Description
Long Method,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The method has 128 lines of code.
Long Method,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The method has 785 lines of code.
Long Method,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The method has 134 lines of code.
Long Method,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The method has 117 lines of code.
Long Method,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,ExportHtml,The method has 116 lines of code.
Long Method,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The method has 150 lines of code.
Long Method,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The method has 220 lines of code.
Long Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has 452 lines of code.
Long Method,ScintillaNET.Configuration,ConfigurationManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\ConfigurationManager.cs,Configure,The method has 134 lines of code.
Long Method,ScintillaNET.Configuration,ConfigurationManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\ConfigurationManager.cs,Configure,The method has 1131 lines of code.
Complex Method,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,GetRegexOptions,Cyclomatic complexity of the method is 11
Complex Method,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,ExportHtml,Cyclomatic complexity of the method is 15
Complex Method,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,AcceptActiveSnippets,Cyclomatic complexity of the method is 8
Complex Method,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,Cyclomatic complexity of the method is 19
Complex Method,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,Scintilla_BeforeTextDelete,Cyclomatic complexity of the method is 14
Complex Method,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,Scintilla_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,Cyclomatic complexity of the method is 47
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadAutoComplete,Cyclomatic complexity of the method is 10
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadCommands,Cyclomatic complexity of the method is 10
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadIndicators,Cyclomatic complexity of the method is 10
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLexer,Cyclomatic complexity of the method is 8
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLexerProperties,Cyclomatic complexity of the method is 10
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadMargins,Cyclomatic complexity of the method is 10
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadMarkers,Cyclomatic complexity of the method is 10
Complex Method,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSnippets,Cyclomatic complexity of the method is 11
Complex Method,ScintillaNET.Configuration,ConfigurationManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\ConfigurationManager.cs,Configure,Cyclomatic complexity of the method is 18
Complex Method,ScintillaNET.Configuration,ConfigurationManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\ConfigurationManager.cs,Configure,Cyclomatic complexity of the method is 350
Long Parameter List,ScintillaNET,CallTip,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\CallTip.cs,ShowOverload,The method has 5 parameters. Parameters: overloadList' position' startIndex' highlightStart' highlightEnd
Long Parameter List,ScintillaNET,CallTipClickEventArgs,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\CallTipClickEventArgs.cs,CallTipClickEventArgs,The method has 6 parameters. Parameters: callTipArrow' currentIndex' newIndex' overloadList' highlightStart' highlightEnd
Long Parameter List,ScintillaNET,FindReplace,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplace.cs,ReplaceAll,The method has 5 parameters. Parameters: startPos' endPos' searchString' replaceString' flags
Long Parameter List,ScintillaNET,MarginClickEventArgs,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\MarginClickEventArgs.cs,MarginClickEventArgs,The method has 6 parameters. Parameters: modifiers' position' line' margin' toggleMarkerNumber' toggleFold
Long Parameter List,ScintillaNET,FooterInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\FooterInformation.cs,FooterInformation,The method has 6 parameters. Parameters: iMargin' oFont' eBorder' eLeft' eCenter' eRight
Long Parameter List,ScintillaNET,HeaderInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\HeaderInformation.cs,HeaderInformation,The method has 6 parameters. Parameters: iMargin' oFont' eBorder' eLeft' eCenter' eRight
Long Parameter List,ScintillaNET,PageInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageInformation.cs,PageInformation,The method has 6 parameters. Parameters: iMargin' oFont' eBorder' eLeft' eCenter' eRight
Long Parameter List,ScintillaNET,TextModifiedEventArgs,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\TextModifiedEventArgs.cs,TextModifiedEventArgs,The method has 7 parameters. Parameters: modificationType' isUserChange' markerChangedLine' position' length' linesAddedCount' text
Long Identifier,ScintillaNET,NativeMethods,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\NativeMethods.cs,,The length of the parameter SC_WRAPVISUALFLAGLOC_END_BY_TEXT is 32.
Long Identifier,ScintillaNET,NativeMethods,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\NativeMethods.cs,,The length of the parameter SC_WRAPVISUALFLAGLOC_START_BY_TEXT is 34.
Long Identifier,ScintillaNET,NativeMethods,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\NativeMethods.cs,,The length of the parameter SCI_SETWRAPVISUALFLAGSLOCATION is 30.
Long Identifier,ScintillaNET,NativeMethods,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\NativeMethods.cs,,The length of the parameter SCI_GETWRAPVISUALFLAGSLOCATION is 30.
Long Identifier,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,,The length of the parameter _savePointReachedEventKeyNative is 31.
Long Identifier,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,,The length of the parameter _userListSelectionEventKeyNative is 32.
Long Identifier,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,,The length of the parameter _readOnlyModifyAttemptEventKey is 30.
Long Identifier,ScintillaNET,Constants,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Constants.cs,,The length of the parameter SC_PRINT_COLOURONWHITEDEFAULTBG is 31.
Long Identifier,ScintillaNET,Constants,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Constants.cs,,The length of the parameter SC_FOLDFLAG_LINEBEFORE_EXPANDED is 31.
Long Identifier,ScintillaNET,Constants,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Constants.cs,,The length of the parameter SC_FOLDFLAG_LINEBEFORE_CONTRACTED is 33.
Long Identifier,ScintillaNET,Constants,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Constants.cs,,The length of the parameter SC_FOLDFLAG_LINEAFTER_EXPANDED is 30.
Long Identifier,ScintillaNET,Constants,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Constants.cs,,The length of the parameter SC_FOLDFLAG_LINEAFTER_CONTRACTED is 32.
Long Identifier,ScintillaNET,Constants,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Constants.cs,,The length of the parameter SCI_ENSUREVISIBLEENFORCEPOLICY is 30.
Long Identifier,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,,The length of the parameter _inactiveSnippetIndicatorStyle is 30.
Long Identifier,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,,The length of the parameter _isOneKeySelectionEmbedEnabled is 30.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _autoComplete_AutomaticLengthEntered is 36.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _autoComplete_fillUpCharacters is 30.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _autoComplete_singleLineAccept is 30.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _caret_CurrentLineBackgroundAlpha is 33.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _caret_CurrentLineBackgroundColor is 33.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _clipboard_ConvertLineBreaksOnPaste is 35.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _indentation_BackspaceUnindents is 31.
Long Identifier,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,,The length of the parameter _lineWrapping_VisualFlagsLocations is 34.
Long Identifier,ScintillaNET.Configuration,SnippetsConfigList,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\SnippetsConfigList.cs,,The length of the parameter _inactiveSnippetIndicatorStyle is 30.
Long Identifier,ScintillaNET.Configuration,SnippetsConfigList,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\SnippetsConfigList.cs,,The length of the parameter _isOneKeySelectionEmbedEnabled is 30.
Long Statement,ScintillaNET,Annotation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Annotation.cs,GetStyles,The length of the statement  "            int length = _scintilla.DirectMessage(NativeMethods.SCI_ANNOTATIONGETTEXT' new IntPtr(_lineIndex)' IntPtr.Zero).ToInt32(); " is 122.
Long Statement,ScintillaNET,Annotation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Annotation.cs,SetStyles,The length of the statement  "            int length = _scintilla.DirectMessage(NativeMethods.SCI_ANNOTATIONGETTEXT' new IntPtr(_lineIndex)' IntPtr.Zero).ToInt32(); " is 122.
Long Statement,ScintillaNET,CallTip,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\CallTip.cs,ShowOverloadInternal,The length of the statement  "            string prefix = string.Format(CultureInfo.CurrentUICulture' "\u0001 {0} of {1} \u0002 "' _overloadList.CurrentIndex + 1' _overloadList.Count); " is 142.
Long Statement,ScintillaNET,CallTip,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\CallTip.cs,ShowOverloadInternal,The length of the statement  "            NativeScintilla.CallTipSetHlt(_highlightStart + prefix.Length' _highlightEnd + prefix.Length); // Adjust the highlight offsets " is 126.
Long Statement,ScintillaNET,DocumentNavigation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DocumentNavigation.cs,t_Tick,The length of the statement  "            if ((_forewardStack.Count == 0 || _forewardStack.Current.Start != pos) && (_backwardStack.Count == 0 || _backwardStack.Current.Start != pos)) " is 141.
Long Statement,ScintillaNET,FindReplace,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplace.cs,ShouldSerializeMarker,The length of the statement  "            return _marker.Number != 10 || _marker.ForeColor != Color.White || _marker.BackColor != Color.Black || _marker.Symbol != MarkerSymbol.Arrows; " is 141.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,OnKeyDown,The length of the statement  "            if (findNextBinding.Contains(kb) || findPrevBinding.Contains(kb) || showFindBinding.Contains(kb) || showReplaceBinding.Contains(kb)) " is 132.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.btnFindPrevious.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.btnFindNext.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.cboFindF.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.grpOptionsF.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.cboReplace.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 143.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.btnReplacePrevious.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 154.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.btnReplaceNext.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.cboFindR.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.grdOptionsR.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 135.
Long Statement,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,txtFind_TextChanged,The length of the statement  "            Range r = Scintilla.FindReplace.Find(pos' Scintilla.TextLength' txtFind.Text' Scintilla.FindReplace.Window.GetSearchFlags()); " is 125.
Long Statement,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The length of the statement  "            this.btnHighlightAll.Font = new System.Drawing.Font("Microsoft Sans Serif"' 1.5F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The length of the statement  "            this.btnClearHighlights.Font = new System.Drawing.Font("Microsoft Sans Serif"' 1.5F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 135.
Long Statement,ScintillaNET,Lexing,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Lexing.cs,loadStyleMap,The length of the statement  "            using (Stream s = GetType().Assembly.GetManifestResourceStream("ScintillaNET.Configuration.Builtin.LexerStyleNames." + lexname + ".txt")) " is 137.
Long Statement,ScintillaNET,LineWrapping,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\LineWrapping.cs,GetWrapCount,The length of the statement  "            //    string message = string.Format(CultureInfo.InvariantCulture' Resources.Exception_MustBeNonNegativeAndLessThan' paramName' "the line count"); " is 146.
Long Statement,ScintillaNET,LineWrapping,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\LineWrapping.cs,WrapLines,The length of the statement  "            int startPos = _scintilla.DirectMessage(NativeMethods.SCI_POSITIONFROMLINE' new IntPtr(startLine)' IntPtr.Zero).ToInt32(); " is 122.
Long Statement,ScintillaNET,LineWrapping,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\LineWrapping.cs,WrapLines,The length of the statement  "            //    throw new ArgumentOutOfRangeException("startLine"' string.Format(CultureInfo.InvariantCulture' Resources.Exception_InvalidLine' "start")); " is 144.
Long Statement,ScintillaNET,LineWrapping,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\LineWrapping.cs,WrapLines,The length of the statement  "            //    throw new ArgumentOutOfRangeException("endLine"' string.Format(CultureInfo.InvariantCulture' Resources.Exception_InvalidLine' "end")); " is 140.
Long Statement,ScintillaNET,PageInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageInformation.cs,Draw,The length of the statement  "                    oBounds = new Rectangle(oBounds.Left + _iBorderSpace' oBounds.Top' oBounds.Width - (2 * _iBorderSpace)' oBounds.Height); " is 120.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,FireModified,The length of the statement  "                FoldChangedEventArgs fea = new FoldChangedEventArgs(scn.line' scn.foldLevelNow' scn.foldLevelPrev' scn.modificationType); " is 121.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,ExportHtml,The length of the statement  "            writer.WriteLine(@"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">"); " is 128.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,FireMarginClick,The length of the statement  "            OnMarginClick(new MarginClickEventArgs(k' n.position' Lines.FromPosition(n.position)' m' m.AutoToggleMarkerNumber' m.IsFoldMargin)); " is 132.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnAnnotationChanged,The length of the statement  "            EventHandler<AnnotationChangedEventArgs> handler = Events[_annotationChangedEventKey] as EventHandler<AnnotationChangedEventArgs>; " is 130.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnAutoCompleteAccepted,The length of the statement  "            EventHandler<AutoCompleteAcceptedEventArgs> handler = Events[_autoCompleteAcceptedEventKey] as EventHandler<AutoCompleteAcceptedEventArgs>; " is 139.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnDocumentChange,The length of the statement  "            EventHandler<NativeScintillaEventArgs> handler = Events[_documentChangeEventKey] as EventHandler<NativeScintillaEventArgs>; " is 123.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnDropMarkerCollect,The length of the statement  "            EventHandler<DropMarkerCollectEventArgs> handler = Events[_dropMarkerCollectEventKey] as EventHandler<DropMarkerCollectEventArgs>; " is 130.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnHotspotDoubleClick,The length of the statement  "            EventHandler<HotspotClickEventArgs> handler = Events[_hotspotDoubleClickEventKey] as EventHandler<HotspotClickEventArgs>; " is 121.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnHotspotReleaseClick,The length of the statement  "            EventHandler<HotspotClickEventArgs> handler = Events[_hotspotReleaseClickEventKey] as EventHandler<HotspotClickEventArgs>; " is 122.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnIndicatorClick,The length of the statement  "            EventHandler<ScintillaMouseEventArgs> handler = Events[_indicatorClickEventKey] as EventHandler<ScintillaMouseEventArgs>; " is 121.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnLinesNeedShown,The length of the statement  "            EventHandler<LinesNeedShownEventArgs> handler = Events[_linesNeedShownEventKey] as EventHandler<LinesNeedShownEventArgs>; " is 121.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The length of the statement  "            else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1) " is 545.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The length of the statement  "                return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties " is 181.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The length of the statement  "            else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol) " is 239.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,SetModuleName,The length of the statement  "                throw new ArgumentException(string.Format(Resources.Culture' Resources.Exception_EmptyStringArgument' paramName)' paramName); " is 125.
Long Statement,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,WmReflectNotify,The length of the statement  "            NativeMethods.SCNotification scn = (NativeMethods.SCNotification)Marshal.PtrToStructure(m.LParam' typeof(NativeMethods.SCNotification)); " is 136.
Long Statement,ScintillaNET,Line,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Line.cs,AddMarker,The length of the statement  "            return new MarkerInstance(Scintilla' new Marker(Scintilla' markerNumber)' NativeScintilla.MarkerAdd(_number' markerNumber)); " is 124.
Long Statement,ScintillaNET,LineCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\LinesCollection.cs,CopyTo,The length of the statement  "                throw new ArgumentException("The number of elements in the source ICollection is greater than the available space from number to the _end of the destination array."); " is 166.
Long Statement,ScintillaNET,Range,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Range.cs,IntersectsWith,The length of the statement  "            return otherRange.PositionInRange(_start) | otherRange.PositionInRange(_end) | PositionInRange(otherRange.Start) | PositionInRange(otherRange.End); " is 147.
Long Statement,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The length of the statement  "            this.lblSnippet.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The length of the statement  "            this.txtSnippet.Font = new System.Drawing.Font("Tahoma"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 146.
Long Statement,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The length of the statement  "            this.txtSnippet.AutoCompleteAccepted += new System.EventHandler<ScintillaNET.AutoCompleteAcceptedEventArgs>(this.txtSnippet_AutoCompleteAccepted); " is 146.
Long Statement,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The length of the statement  "            this.txtSnippet.DocumentChange += new System.EventHandler<ScintillaNET.NativeScintillaEventArgs>(this.txtSnippet_DocumentChange); " is 129.
Long Statement,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,DoSnippetCheck,The length of the statement  "            if (pos <= 0 || Scintilla.NativeInterface.GetCharAt(pos - 1).ToString().IndexOfAny(Scintilla.Lexing.WhitespaceCharsArr) >= 0) " is 125.
Long Statement,ScintillaNET,TextModifiedEventArgs,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\TextModifiedEventArgs.cs,ToString,The length of the statement  "            return string.Format(STRING_FORMAT' ModificationType' _position' _length' _linesAddedCount' _text' _isUserChange' _markerChangedLine) + Environment.NewLine + UndoRedoFlags.ToString(); " is 183.
Long Statement,ScintillaNET,WhitespaceConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Whitespace.cs,ConvertTo,The length of the statement  "                    foreach (PropertyInfo pi in context.PropertyDescriptor.PropertyType.GetProperties(BindingFlags.Instance | BindingFlags.Public)) " is 127.
Long Statement,ScintillaNET,XpmConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\XpmAdapter.cs,ConvertToXPM,The length of the statement  "            string finalColor = result.Substring(0' p) + colors.Count + result.Substring(p + 1).Replace(transparentColor.ToUpper()' "None"); " is 128.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                        if (reader.Name.Equals("name"' StringComparison.OrdinalIgnoreCase) && reader.Value.Equals(_language' StringComparison.OrdinalIgnoreCase)) " is 137.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "            XmlElement langNode = configDocument.DocumentElement.SelectSingleNode("./Language[@Name='" + _language + "']") as XmlElement; " is 125.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                    _folding_MarkerScheme = (FoldMarkerScheme)Enum.Parse(typeof(FoldMarkerScheme)' foldingNode.GetAttribute("MarkerScheme")' true); " is 127.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                    _indentation_SmartIndentType = (SmartIndent)Enum.Parse(typeof(SmartIndent)' indentationNode.GetAttribute("SmartIndentType")' true); " is 131.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                    _lexing_Keywords.Add(new KeyWordConfig(getInt(el.GetAttribute("List")).Value' el.InnerText.Trim()' getBool(el.GetAttribute("Inherit")))); " is 137.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                    _lineWrapping_IndentMode = (LineWrappingIndentMode)Enum.Parse(typeof(LineWrappingIndentMode)' lineWrapNode.GetAttribute("IndentMode")' true); " is 141.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                    _lineWrapping_VisualFlagsLocations = (LineWrappingVisualFlagsLocations)Enum.Parse(typeof(LineWrappingVisualFlagsLocations)' lineWrapNode.GetAttribute("VisualFlagsLocations")' true); " is 181.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                    _snippetsConfigList.ActiveSnippetIndicatorStyle = (IndicatorStyle)Enum.Parse(typeof(IndicatorStyle)' snippetsNode.GetAttribute("ActiveSnippetIndicatorStyle")' true); " is 165.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                    _snippetsConfigList.InactiveSnippetIndicatorStyle = (IndicatorStyle)Enum.Parse(typeof(IndicatorStyle)' snippetsNode.GetAttribute("InactiveSnippetIndicatorStyle")' true); " is 169.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The length of the statement  "                _snippetsConfigList.IsOneKeySelectionEmbedEnabled = getBool(snippetsNode.GetAttribute("IsOneKeySelectionEmbedEnabled")); " is 120.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadAutoComplete,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("autocomplete"' StringComparison.OrdinalIgnoreCase))) " is 126.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadCommands,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("commands"' StringComparison.OrdinalIgnoreCase))) " is 122.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadIndicators,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("indicators"' StringComparison.OrdinalIgnoreCase))) " is 124.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLexerProperties,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("properties"' StringComparison.OrdinalIgnoreCase))) " is 124.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLineWrapping,The length of the statement  "                            _lineWrapping_VisualFlagsLocations = (LineWrappingVisualFlagsLocations)Enum.Parse(typeof(LineWrappingVisualFlagsLocations)' reader.Value' true); " is 144.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadMargins,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("margins"' StringComparison.OrdinalIgnoreCase))) " is 121.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadMarkers,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("markers"' StringComparison.OrdinalIgnoreCase))) " is 121.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSnippets,The length of the statement  "                            _snippetsConfigList.ActiveSnippetIndicatorStyle = (IndicatorStyle)Enum.Parse(typeof(IndicatorStyle)' reader.Value' true); " is 121.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSnippets,The length of the statement  "                            _snippetsConfigList.InactiveSnippetIndicatorStyle = (IndicatorStyle)Enum.Parse(typeof(IndicatorStyle)' reader.Value' true); " is 123.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSnippets,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("snippets"' StringComparison.OrdinalIgnoreCase))) " is 122.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadStyles,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("styles"' StringComparison.OrdinalIgnoreCase))) " is 120.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadStyles,The length of the statement  "                    else if (reader.NodeType == XmlNodeType.Element && reader.Name.Equals("sublanguage"' StringComparison.OrdinalIgnoreCase)) " is 121.
Long Statement,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSubLanguage,The length of the statement  "                while (!(reader.NodeType == XmlNodeType.EndElement && reader.Name.Equals("sublanguage"' StringComparison.OrdinalIgnoreCase))) " is 125.
Long Statement,ScintillaNET.Configuration,ConfigurationManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\ConfigurationManager.cs,Configure,The length of the statement  "                    using (Stream s = GetType().Assembly.GetManifestResourceStream("ScintillaNET.Configuration.Builtin." + _language + ".xml")) " is 123.
Long Statement,ScintillaNET.Design,ScintillaDesigner,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Design\ScintillaDesigner.cs,InitializeNewComponent,The length of the statement  "            if (descriptor != null && descriptor.PropertyType == typeof(String) && !descriptor.IsReadOnly && descriptor.IsBrowsable) " is 120.
Complex Conditional,ScintillaNET,DocumentNavigation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DocumentNavigation.cs,t_Tick,The conditional expression  "(_forewardStack.Count == 0 || _forewardStack.Current.Start != pos) && (_backwardStack.Count == 0 || _backwardStack.Current.Start != pos)"  is complex.
Complex Conditional,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,OnKeyDown,The conditional expression  "findNextBinding.Contains(kb) || findPrevBinding.Contains(kb) || showFindBinding.Contains(kb) || showReplaceBinding.Contains(kb)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16)"  is complex.
Complex Conditional,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The conditional expression  "(lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6)"  is complex.
Complex Conditional,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,DoSnippetCheck,The conditional expression  "!_isEnabled || _snippetLinks.IsActive || Scintilla.AutoComplete.IsActive || Scintilla.Selection.Length > 0"  is complex.
Complex Conditional,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,Scintilla_BeforeTextDelete,The conditional expression  "_snippetLinks.IsActive && !_pendingUndo && !(e.UndoRedoFlags.IsUndo || e.UndoRedoFlags.IsRedo)"  is complex.
Complex Conditional,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,Scintilla_BeforeTextInsert,The conditional expression  "_snippetLinks.IsActive && !_pendingUndo && !(e.UndoRedoFlags.IsUndo || e.UndoRedoFlags.IsRedo)"  is complex.
Complex Conditional,ScintillaNET.Design,ScintillaDesigner,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Design\ScintillaDesigner.cs,InitializeNewComponent,The conditional expression  "descriptor != null && descriptor.PropertyType == typeof(String) && !descriptor.IsReadOnly && descriptor.IsBrowsable"  is complex.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,ScintillaNET.Configuration,ConfigurationManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\ConfigurationManager.cs,Configure,The method has an empty catch block.
Magic Number,ScintillaNET,AutoComplete,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\AutoComplete.cs,ResetMaxHeight,The following statement contains a magic number: MaxHeight = 5;
Magic Number,ScintillaNET,AutoComplete,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\AutoComplete.cs,ShouldSerializeMaxHeight,The following statement contains a magic number: return MaxHeight != 5;
Magic Number,ScintillaNET,CallTip,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\CallTip.cs,CallTip,The following statement contains a magic number: NativeScintilla.CallTipUseStyle(10);
Magic Number,ScintillaNET,CaretInfo,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\CaretInfo.cs,ResetCurrentLineBackgroundAlpha,The following statement contains a magic number: CurrentLineBackgroundAlpha = 256;
Magic Number,ScintillaNET,CaretInfo,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\CaretInfo.cs,ShouldSerializeCurrentLineBackgroundAlpha,The following statement contains a magic number: return CurrentLineBackgroundAlpha != 256;
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Execute,The following statement contains a magic number: if ((int)command < 10000)              {                  NativeScintilla.SendMessageDirect((uint)command' IntPtr.Zero' IntPtr.Zero);                  return true;              }
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.AutoCShow' 100);
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.AutoCComplete' 100);
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.AutoCCancel' 100);
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.DoSnippetCheck' 200);
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.AcceptActiveSnippets' 200);
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.CancelActiveSnippets' 200);
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.NextSnippetRange' 200);
Magic Number,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Commands,The following statement contains a magic number: _commandComparer.CommandOrder.Add(BindableCommand.PreviousSnippetRange' 200);
Magic Number,ScintillaNET,DocumentNavigation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DocumentNavigation.cs,ResetMaxHistorySize,The following statement contains a magic number: _maxHistorySize = 50;
Magic Number,ScintillaNET,DocumentNavigation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DocumentNavigation.cs,ResetNavigationPointTimeout,The following statement contains a magic number: _navigationPointTimeout = 200;
Magic Number,ScintillaNET,DocumentNavigation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DocumentNavigation.cs,ShouldSerializeMaxHistorySize,The following statement contains a magic number: return _maxHistorySize != 50;
Magic Number,ScintillaNET,DocumentNavigation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DocumentNavigation.cs,ShouldSerializeNavigationPointTimeout,The following statement contains a magic number: return _navigationPointTimeout != 200;
Magic Number,ScintillaNET,FindReplace,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplace.cs,ResetMarker,The following statement contains a magic number: _marker.Number = 10;
Magic Number,ScintillaNET,FindReplace,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplace.cs,ShouldSerializeIndicator,The following statement contains a magic number: return _indicator.Number != 16 || _indicator.Color != Color.Purple || _indicator.IsDrawnUnder;
Magic Number,ScintillaNET,FindReplace,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplace.cs,ShouldSerializeMarker,The following statement contains a magic number: return _marker.Number != 10 || _marker.ForeColor != Color.White || _marker.BackColor != Color.Black || _marker.Symbol != MarkerSymbol.Arrows;
Magic Number,ScintillaNET,FindReplace,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplace.cs,FindReplace,The following statement contains a magic number: _marker = scintilla.Markers[10];
Magic Number,ScintillaNET,FindReplace,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplace.cs,FindReplace,The following statement contains a magic number: _indicator = scintilla.Indicators[16];
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,MoveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2)                          );                  }                  else                  {                      // Bottom half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2))                          );                  }                  newLocation = Scintilla.PointToScreen(newLocation);                  Location = newLocation;              }
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,MoveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2)                          );                  }                  else                  {                      // Bottom half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2))                          );                  }                  newLocation = Scintilla.PointToScreen(newLocation);                  Location = newLocation;              }
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,MoveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2)                          );                  }                  else                  {                      // Bottom half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2))                          );                  }                  newLocation = Scintilla.PointToScreen(newLocation);                  Location = newLocation;              }
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tabAll.Size = new System.Drawing.Size(499' 291);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tabAll.Size = new System.Drawing.Size(499' 291);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgFind.Location = new System.Drawing.Point(4' 22);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgFind.Location = new System.Drawing.Point(4' 22);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgFind.Padding = new System.Windows.Forms.Padding(3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgFind.Size = new System.Drawing.Size(491' 265);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgFind.Size = new System.Drawing.Size(491' 265);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpFindAll.Location = new System.Drawing.Point(5' 176);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpFindAll.Location = new System.Drawing.Point(5' 176);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpFindAll.Size = new System.Drawing.Size(209' 65);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpFindAll.Size = new System.Drawing.Size(209' 65);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpFindAll.TabIndex = 8;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Location = new System.Drawing.Point(116' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Location = new System.Drawing.Point(116' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Size = new System.Drawing.Size(88' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Size = new System.Drawing.Size(88' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.TabIndex = 3;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindAll.Location = new System.Drawing.Point(116' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindAll.Location = new System.Drawing.Point(116' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindAll.Size = new System.Drawing.Size(88' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindAll.Size = new System.Drawing.Size(88' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindAll.TabIndex = 2;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkHighlightMatches.Location = new System.Drawing.Point(6' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkHighlightMatches.Location = new System.Drawing.Point(6' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkHighlightMatches.Size = new System.Drawing.Size(111' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkHighlightMatches.Size = new System.Drawing.Size(111' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkLine.Location = new System.Drawing.Point(6' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkLine.Location = new System.Drawing.Point(6' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkLine.Size = new System.Drawing.Size(73' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkLine.Size = new System.Drawing.Size(73' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionF.Location = new System.Drawing.Point(251' 72);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionF.Location = new System.Drawing.Point(251' 72);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionF.Size = new System.Drawing.Size(105' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionF.Size = new System.Drawing.Size(105' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionF.TabIndex = 6;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapF.Location = new System.Drawing.Point(251' 55);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapF.Location = new System.Drawing.Point(251' 55);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapF.Size = new System.Drawing.Size(52' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapF.Size = new System.Drawing.Size(52' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapF.TabIndex = 5;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindPrevious.Location = new System.Drawing.Point(375' 188);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindPrevious.Location = new System.Drawing.Point(375' 188);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindPrevious.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindPrevious.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindPrevious.TabIndex = 9;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindNext.Location = new System.Drawing.Point(375' 212);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindNext.Location = new System.Drawing.Point(375' 212);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindNext.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindNext.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnFindNext.TabIndex = 10;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindF.Location = new System.Drawing.Point(59' 6);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindF.Location = new System.Drawing.Point(59' 6);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindF.Size = new System.Drawing.Size(424' 21);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindF.Size = new System.Drawing.Size(424' 21);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpOptionsF.Location = new System.Drawing.Point(4' 94);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpOptionsF.Location = new System.Drawing.Point(4' 94);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpOptionsF.Size = new System.Drawing.Size(481' 77);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpOptionsF.Size = new System.Drawing.Size(481' 77);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grpOptionsF.TabIndex = 7;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsF.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsF.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsF.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsF.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartF.Location = new System.Drawing.Point(10' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartF.Location = new System.Drawing.Point(10' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartF.Size = new System.Drawing.Size(79' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartF.Size = new System.Drawing.Size(79' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartF.TabIndex = 2;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordF.Location = new System.Drawing.Point(10' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordF.Location = new System.Drawing.Point(10' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordF.Size = new System.Drawing.Size(85' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordF.Size = new System.Drawing.Size(85' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseF.Location = new System.Drawing.Point(10' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseF.Location = new System.Drawing.Point(10' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseF.Size = new System.Drawing.Size(82' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseF.Size = new System.Drawing.Size(82' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsF.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsF.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsF.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsF.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineF.Location = new System.Drawing.Point(279' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineF.Location = new System.Drawing.Point(279' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineF.Size = new System.Drawing.Size(70' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineF.Size = new System.Drawing.Size(70' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineF.TabIndex = 8;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftF.Location = new System.Drawing.Point(279' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftF.Location = new System.Drawing.Point(279' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftF.Size = new System.Drawing.Size(88' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftF.Size = new System.Drawing.Size(88' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftF.TabIndex = 5;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineF.Location = new System.Drawing.Point(279' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineF.Location = new System.Drawing.Point(279' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineF.Size = new System.Drawing.Size(64' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineF.Size = new System.Drawing.Size(64' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineF.TabIndex = 2;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceF.Location = new System.Drawing.Point(113' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceF.Location = new System.Drawing.Point(113' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceF.Size = new System.Drawing.Size(156' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceF.Size = new System.Drawing.Size(156' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceF.TabIndex = 7;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseF.Location = new System.Drawing.Point(113' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseF.Location = new System.Drawing.Point(113' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseF.Size = new System.Drawing.Size(85' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseF.Size = new System.Drawing.Size(85' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseF.TabIndex = 4;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureF.Location = new System.Drawing.Point(113' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureF.Location = new System.Drawing.Point(113' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureF.Size = new System.Drawing.Size(101' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureF.Size = new System.Drawing.Size(101' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptF.Location = new System.Drawing.Point(3' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptF.Location = new System.Drawing.Point(3' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptF.Size = new System.Drawing.Size(84' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptF.Size = new System.Drawing.Size(84' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptF.TabIndex = 6;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantF.Location = new System.Drawing.Point(3' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantF.Location = new System.Drawing.Point(3' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantF.Size = new System.Drawing.Size(108' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantF.Size = new System.Drawing.Size(108' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantF.TabIndex = 3;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledF.Location = new System.Drawing.Point(3' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledF.Location = new System.Drawing.Point(3' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledF.Size = new System.Drawing.Size(69' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledF.Size = new System.Drawing.Size(69' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeF.Location = new System.Drawing.Point(8' 52);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeF.Location = new System.Drawing.Point(8' 52);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeF.Size = new System.Drawing.Size(67' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeF.Size = new System.Drawing.Size(67' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeF.TabIndex = 2;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexF.Location = new System.Drawing.Point(102' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexF.Location = new System.Drawing.Point(102' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexF.Size = new System.Drawing.Size(117' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexF.Size = new System.Drawing.Size(117' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexF.TabIndex = 4;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardF.Location = new System.Drawing.Point(27' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardF.Location = new System.Drawing.Point(27' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardF.Size = new System.Drawing.Size(69' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardF.Size = new System.Drawing.Size(69' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardF.TabIndex = 3;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindF.Location = new System.Drawing.Point(8' 10);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindF.Location = new System.Drawing.Point(8' 10);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindF.Size = new System.Drawing.Size(27' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindF.Size = new System.Drawing.Size(27' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgReplace.Location = new System.Drawing.Point(4' 22);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgReplace.Location = new System.Drawing.Point(4' 22);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgReplace.Padding = new System.Windows.Forms.Padding(3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgReplace.Size = new System.Drawing.Size(491' 265);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.tpgReplace.Size = new System.Drawing.Size(491' 265);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Location = new System.Drawing.Point(7' 212);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Location = new System.Drawing.Point(7' 212);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.TabIndex = 10;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Location = new System.Drawing.Point(59' 28);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Location = new System.Drawing.Point(59' 28);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Size = new System.Drawing.Size(424' 21);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Size = new System.Drawing.Size(424' 21);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.TabIndex = 3;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblReplace.Location = new System.Drawing.Point(8' 32);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblReplace.Location = new System.Drawing.Point(8' 32);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblReplace.Size = new System.Drawing.Size(45' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblReplace.Size = new System.Drawing.Size(45' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblReplace.TabIndex = 2;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionR.Location = new System.Drawing.Point(251' 72);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionR.Location = new System.Drawing.Point(251' 72);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionR.Size = new System.Drawing.Size(107' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionR.Size = new System.Drawing.Size(107' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSearchSelectionR.TabIndex = 8;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapR.Location = new System.Drawing.Point(251' 55);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapR.Location = new System.Drawing.Point(251' 55);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapR.Size = new System.Drawing.Size(52' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapR.Size = new System.Drawing.Size(52' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWrapR.TabIndex = 7;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplacePrevious.Location = new System.Drawing.Point(375' 188);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplacePrevious.Location = new System.Drawing.Point(375' 188);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplacePrevious.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplacePrevious.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplacePrevious.TabIndex = 11;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceNext.Location = new System.Drawing.Point(375' 212);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceNext.Location = new System.Drawing.Point(375' 212);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceNext.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceNext.Size = new System.Drawing.Size(107' 23);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceNext.TabIndex = 12;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindR.Location = new System.Drawing.Point(59' 6);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindR.Location = new System.Drawing.Point(59' 6);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindR.Size = new System.Drawing.Size(424' 21);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.cboFindR.Size = new System.Drawing.Size(424' 21);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grdOptionsR.Location = new System.Drawing.Point(4' 94);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grdOptionsR.Location = new System.Drawing.Point(4' 94);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grdOptionsR.Size = new System.Drawing.Size(481' 77);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grdOptionsR.Size = new System.Drawing.Size(481' 77);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grdOptionsR.TabIndex = 9;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsR.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsR.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsR.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlStandardOptionsR.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartR.Location = new System.Drawing.Point(10' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartR.Location = new System.Drawing.Point(10' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartR.Size = new System.Drawing.Size(77' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartR.Size = new System.Drawing.Size(77' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWordStartR.TabIndex = 2;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordR.Location = new System.Drawing.Point(10' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordR.Location = new System.Drawing.Point(10' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordR.Size = new System.Drawing.Size(86' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWordR.Size = new System.Drawing.Size(86' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseR.Location = new System.Drawing.Point(10' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseR.Location = new System.Drawing.Point(10' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseR.Size = new System.Drawing.Size(83' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCaseR.Size = new System.Drawing.Size(83' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsR.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsR.Location = new System.Drawing.Point(3' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsR.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.pnlRegexpOptionsR.Size = new System.Drawing.Size(475' 57);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineR.Location = new System.Drawing.Point(279' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineR.Location = new System.Drawing.Point(279' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineR.Size = new System.Drawing.Size(71' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineR.Size = new System.Drawing.Size(71' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSinglelineR.TabIndex = 8;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftR.Location = new System.Drawing.Point(279' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftR.Location = new System.Drawing.Point(279' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftR.Size = new System.Drawing.Size(88' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftR.Size = new System.Drawing.Size(88' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkRightToLeftR.TabIndex = 7;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineR.Location = new System.Drawing.Point(279' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineR.Location = new System.Drawing.Point(279' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineR.Size = new System.Drawing.Size(64' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineR.Size = new System.Drawing.Size(64' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMultilineR.TabIndex = 6;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceR.Location = new System.Drawing.Point(113' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceR.Location = new System.Drawing.Point(113' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceR.Size = new System.Drawing.Size(153' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceR.Size = new System.Drawing.Size(153' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnorePatternWhitespaceR.TabIndex = 5;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseR.Location = new System.Drawing.Point(113' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseR.Location = new System.Drawing.Point(113' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseR.Size = new System.Drawing.Size(83' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseR.Size = new System.Drawing.Size(83' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreCaseR.TabIndex = 4;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureR.Location = new System.Drawing.Point(113' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureR.Location = new System.Drawing.Point(113' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureR.Size = new System.Drawing.Size(99' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureR.Size = new System.Drawing.Size(99' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkExplicitCaptureR.TabIndex = 3;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptR.Location = new System.Drawing.Point(3' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptR.Location = new System.Drawing.Point(3' 37);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptR.Size = new System.Drawing.Size(86' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptR.Size = new System.Drawing.Size(86' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEcmaScriptR.TabIndex = 2;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantR.Location = new System.Drawing.Point(3' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantR.Location = new System.Drawing.Point(3' 20);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantR.Size = new System.Drawing.Size(103' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCultureInvariantR.Size = new System.Drawing.Size(103' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledR.Location = new System.Drawing.Point(3' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledR.Location = new System.Drawing.Point(3' 3);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledR.Size = new System.Drawing.Size(69' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkCompiledR.Size = new System.Drawing.Size(69' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeR.Location = new System.Drawing.Point(8' 52);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeR.Location = new System.Drawing.Point(8' 52);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeR.Size = new System.Drawing.Size(67' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeR.Size = new System.Drawing.Size(67' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSearchTypeR.TabIndex = 4;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexR.Location = new System.Drawing.Point(102' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexR.Location = new System.Drawing.Point(102' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexR.Size = new System.Drawing.Size(116' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexR.Size = new System.Drawing.Size(116' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoRegexR.TabIndex = 6;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardR.Location = new System.Drawing.Point(27' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardR.Location = new System.Drawing.Point(27' 71);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardR.Size = new System.Drawing.Size(68' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardR.Size = new System.Drawing.Size(68' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.rdoStandardR.TabIndex = 5;
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindR.Location = new System.Drawing.Point(8' 10);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindR.Location = new System.Drawing.Point(8' 10);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindR.Size = new System.Drawing.Size(27' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblFindR.Size = new System.Drawing.Size(27' 13);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Location = new System.Drawing.Point(0' 269);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Size = new System.Drawing.Size(499' 22);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Size = new System.Drawing.Size(499' 22);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Size = new System.Drawing.Size(0' 17);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(499' 291);
Magic Number,ScintillaNET,FindReplaceDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\FindReplaceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(499' 291);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,moveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2);                                            }                  else                  {                      // Bottom half of the screen                      newLocation = new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2));                  }                                    Location = newLocation;              }
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,moveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2);                                            }                  else                  {                      // Bottom half of the screen                      newLocation = new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2));                  }                                    Location = newLocation;              }
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,moveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2);                                            }                  else                  {                      // Bottom half of the screen                      newLocation = new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2));                  }                                    Location = newLocation;              }
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.lblFind.Margin = new System.Windows.Forms.Padding(0' 0' 3' 0);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.lblFind.Size = new System.Drawing.Size(27' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.lblFind.Size = new System.Drawing.Size(27' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.txtFind.Location = new System.Drawing.Point(33' 1);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.txtFind.Margin = new System.Windows.Forms.Padding(3' 1' 0' 0);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.txtFind.Size = new System.Drawing.Size(135' 20);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.txtFind.Size = new System.Drawing.Size(135' 20);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(259' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(259' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.TabIndex = 4;
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point(171' 0);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Margin = new System.Windows.Forms.Padding(3' 0' 0' 0);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.TabIndex = 2;
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.brnPrevious.Location = new System.Drawing.Point(193' 0);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.brnPrevious.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.brnPrevious.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.brnPrevious.TabIndex = 3;
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnHighlightAll.Location = new System.Drawing.Point(215' 0);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnHighlightAll.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnHighlightAll.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnHighlightAll.TabIndex = 4;
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnClearHighlights.Location = new System.Drawing.Point(237' 0);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnClearHighlights.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnClearHighlights.Size = new System.Drawing.Size(22' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.btnClearHighlights.TabIndex = 5;
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(259' 22);
Magic Number,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(259' 22);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,MoveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2)                          );                  }                  else                  {                      // Bottom half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2))                          );                  }                  newLocation = Scintilla.PointToScreen(newLocation);                  Location = newLocation;              }
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,MoveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2)                          );                  }                  else                  {                      // Bottom half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2))                          );                  }                  newLocation = Scintilla.PointToScreen(newLocation);                  Location = newLocation;              }
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,MoveFormAwayFromSelection,The following statement contains a magic number: if (r.Contains(cursorPoint))              {                  Point newLocation;                  if (cursorPoint.Y < (Screen.PrimaryScreen.Bounds.Height / 2))                  {                      // Top half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y + Scintilla.Lines.Current.Height * 2)                          );                  }                  else                  {                      // Bottom half of the screen                      newLocation = Scintilla.PointToClient(                          new Point(Location.X' cursorPoint.Y - Height - (Scintilla.Lines.Current.Height * 2))                          );                  }                  newLocation = Scintilla.PointToScreen(newLocation);                  Location = newLocation;              }
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentLine.Location = new System.Drawing.Point(9' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentLine.Location = new System.Drawing.Point(9' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentLine.Size = new System.Drawing.Size(102' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblCurrentLine.Size = new System.Drawing.Size(102' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtCurrentLine.Location = new System.Drawing.Point(132' 8);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtCurrentLine.Location = new System.Drawing.Point(132' 8);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtCurrentLine.Size = new System.Drawing.Size(63' 21);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtCurrentLine.Size = new System.Drawing.Size(63' 21);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtMaxLine.Location = new System.Drawing.Point(132' 33);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtMaxLine.Location = new System.Drawing.Point(132' 33);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtMaxLine.Size = new System.Drawing.Size(63' 21);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtMaxLine.Size = new System.Drawing.Size(63' 21);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtMaxLine.TabIndex = 3;
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblMaxLine.Location = new System.Drawing.Point(9' 37);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblMaxLine.Location = new System.Drawing.Point(9' 37);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblMaxLine.Size = new System.Drawing.Size(117' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblMaxLine.Size = new System.Drawing.Size(117' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblMaxLine.TabIndex = 2;
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoLine.Location = new System.Drawing.Point(132' 58);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoLine.Location = new System.Drawing.Point(132' 58);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoLine.Size = new System.Drawing.Size(63' 21);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoLine.Size = new System.Drawing.Size(63' 21);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoLine.TabIndex = 5;
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGotoLine.Location = new System.Drawing.Point(9' 61);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGotoLine.Location = new System.Drawing.Point(9' 61);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGotoLine.Size = new System.Drawing.Size(91' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGotoLine.Size = new System.Drawing.Size(91' 13);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGotoLine.TabIndex = 4;
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(39' 85);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(39' 85);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 6;
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(120' 85);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(120' 85);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 7;
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(204' 113);
Magic Number,ScintillaNET,GoToDialog,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\GoToDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(204' 113);
Magic Number,ScintillaNET,Indentation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indentation.cs,CheckSmartIndent,The following statement contains a magic number: switch (SmartIndentType)              {                  case SmartIndent.None:                      return;                  case SmartIndent.Simple:                      if (ch == newline)                      {                          Line curLine = Scintilla.Lines.Current;                          curLine.Indentation = curLine.Previous.Indentation;                          Scintilla.CurrentPos = curLine.IndentPosition;                      }                      break;                  case SmartIndent.CPP:                  case SmartIndent.CPP2:                      if (ch == newline)                      {                          Line curLine = Scintilla.Lines.Current;                          Line tempLine = curLine;                          int previousIndent;                          string tempText;                            do                          {                              tempLine = tempLine.Previous;                              previousIndent = tempLine.Indentation;                              tempText = tempLine.Text.Trim();                              if (tempText.Length == 0) previousIndent = -1;                          }                          while ((tempLine.Number > 1) && (previousIndent < 0));                            if (tempText.EndsWith("{"))                          {                              int bracePos = Scintilla.CurrentPos - 1;                              while (bracePos > 0 && Scintilla.CharAt(bracePos) != '{') bracePos--;                              if (bracePos > 0 && Scintilla.Styles.GetStyleAt(bracePos) == 10)                                  previousIndent += TabWidth;                          }                          curLine.Indentation = previousIndent;                          Scintilla.CurrentPos =  curLine.IndentPosition;                      }                      else if (ch == '}')                      {                          int position = Scintilla.CurrentPos;                          Line curLine = Scintilla.Lines.Current;                          int previousIndent = curLine.Previous.Indentation;                          int match = Scintilla.SafeBraceMatch(position - 1);                          if (match != -1)                          {                              previousIndent = Scintilla.Lines.FromPosition(match).Indentation;                              curLine.Indentation =  previousIndent;                          }                      }                      break;              }
Magic Number,ScintillaNET,Indentation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indentation.cs,ResetTabWidth,The following statement contains a magic number: TabWidth = 8;
Magic Number,ScintillaNET,Indentation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indentation.cs,ShouldSerializeTabWidth,The following statement contains a magic number: return TabWidth != 8;
Magic Number,ScintillaNET,IndicatorCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\IndicatorCollection.cs,Reset,The following statement contains a magic number: for (int i = 0; i < 32; i++)                  this[i].Reset();
Magic Number,ScintillaNET,Lexing,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Lexing.cs,loadStyleMap,The following statement contains a magic number: using (Stream s = GetType().Assembly.GetManifestResourceStream("ScintillaNET.Configuration.Builtin.LexerStyleNames." + lexname + ".txt"))              {                  if (s == null)                      return;                    using (StreamReader sr = new StreamReader(s))                  {                      while (!sr.EndOfStream)                      {                          string[] arr = sr.ReadLine().Split('=');                          if (arr.Length != 2)                              continue;                            string key = arr[0].Trim();                          int value = int.Parse(arr[1].Trim());                                                    _styleNameMap.Remove(key);                          _styleNameMap.Add(key' value);                      }                  }              }
Magic Number,ScintillaNET,MarginCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\MarginCollection.cs,CopyTo,The following statement contains a magic number: Array.Copy(ToArray()' 0' array' arrayIndex' 5);
Magic Number,ScintillaNET,MarginCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\MarginCollection.cs,MarginCollection,The following statement contains a magic number: _margin2 = new Margin(scintilla' 2);
Magic Number,ScintillaNET,MarginCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\MarginCollection.cs,MarginCollection,The following statement contains a magic number: _margin3 = new Margin(scintilla' 3);
Magic Number,ScintillaNET,MarginCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\MarginCollection.cs,MarginCollection,The following statement contains a magic number: _margin4 = new Margin(scintilla' 4);
Magic Number,ScintillaNET,Margin,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Margin.cs,ResetIsClickable,The following statement contains a magic number: if (_number == 2)                  IsClickable = true;              else                  IsClickable = false;
Magic Number,ScintillaNET,Margin,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Margin.cs,ResetIsFoldMargin,The following statement contains a magic number: if (_number == 2)                  IsFoldMargin = true;              else                  IsFoldMargin = false;
Magic Number,ScintillaNET,Margin,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Margin.cs,ResetWidth,The following statement contains a magic number: if (_number == 1)                  Width = 16;              else                  Width = 0;
Magic Number,ScintillaNET,Margin,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Margin.cs,ShouldSerializeIsClickable,The following statement contains a magic number: if (_number == 2)                  return !IsClickable;
Magic Number,ScintillaNET,Margin,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Margin.cs,ShouldSerializeIsFoldMargin,The following statement contains a magic number: if (_number == 2)                  return !IsFoldMargin;
Magic Number,ScintillaNET,Margin,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Margin.cs,ShouldSerializeWidth,The following statement contains a magic number: if (_number == 1)                  return Width != 16;
Magic Number,ScintillaNET,Margin,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Margin.cs,ToString,The following statement contains a magic number: if (_number == 0)                  return "(Default Line Numbers)";              else if (_number == 1)                  return "(Default Markers)";              else if (_number == 2)                  return "(Default Folds)";
Magic Number,ScintillaNET,MarkerCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\MarkerCollection.cs,GetMarkers,The following statement contains a magic number: for (int i = 0; i < 32; i++)                  if ((mask & i) == i)                      ret.Add(new Marker(Scintilla' i));
Magic Number,ScintillaNET,MarkerCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\MarkerCollection.cs,Reset,The following statement contains a magic number: for (int i = 0; i < 32; i++)                  this[i].Reset();
Magic Number,ScintillaNET,RECT,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\NativeMethods.cs,GetHashCode,The following statement contains a magic number: return Left ^ ((Top << 13) | (Top >> 0x13))                ^ ((Width << 0x1a) | (Width >> 6))                ^ ((Height << 7) | (Height >> 0x19));
Magic Number,ScintillaNET,RECT,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\NativeMethods.cs,GetHashCode,The following statement contains a magic number: return Left ^ ((Top << 13) | (Top >> 0x13))                ^ ((Width << 0x1a) | (Width >> 6))                ^ ((Height << 7) | (Height >> 0x19));
Magic Number,ScintillaNET,RECT,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\NativeMethods.cs,GetHashCode,The following statement contains a magic number: return Left ^ ((Top << 13) | (Top >> 0x13))                ^ ((Width << 0x1a) | (Width >> 6))                ^ ((Height << 7) | (Height >> 0x19));
Magic Number,ScintillaNET,FooterInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\FooterInformation.cs,ResetMargin,The following statement contains a magic number: Margin = 3;
Magic Number,ScintillaNET,FooterInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\FooterInformation.cs,ShouldSerializeMargin,The following statement contains a magic number: return Margin != 3;
Magic Number,ScintillaNET,HeaderInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\HeaderInformation.cs,ResetMargin,The following statement contains a magic number: Margin = 3;
Magic Number,ScintillaNET,HeaderInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\HeaderInformation.cs,ShouldSerializeMargin,The following statement contains a magic number: return Margin != 3;
Magic Number,ScintillaNET,PageInformation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageInformation.cs,Draw,The following statement contains a magic number: switch (_eBorder)              {                  case PageInformationBorder.Top:                      oGraphics.DrawLine(oPen' oBounds.Left' oBounds.Top' oBounds.Right' oBounds.Top);                      break;                  case PageInformationBorder.Bottom:                      oGraphics.DrawLine(oPen' oBounds.Left' oBounds.Bottom' oBounds.Right' oBounds.Bottom);                      break;                  case PageInformationBorder.Box:                      oGraphics.DrawRectangle(oPen' oBounds);                      oBounds = new Rectangle(oBounds.Left + _iBorderSpace' oBounds.Top' oBounds.Width - (2 * _iBorderSpace)' oBounds.Height);                      break;                  case PageInformationBorder.None:                  default:                      break;              }
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ResetMargins,The following statement contains a magic number: Margins = new Margins(50'50'50'50);
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ResetMargins,The following statement contains a magic number: Margins = new Margins(50'50'50'50);
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ResetMargins,The following statement contains a magic number: Margins = new Margins(50'50'50'50);
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ResetMargins,The following statement contains a magic number: Margins = new Margins(50'50'50'50);
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ShouldSerializeMargins,The following statement contains a magic number: return Margins.Bottom != 50 ||Margins.Left != 50 || Margins.Right != 50 || Margins.Bottom != 50;
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ShouldSerializeMargins,The following statement contains a magic number: return Margins.Bottom != 50 ||Margins.Left != 50 || Margins.Right != 50 || Margins.Bottom != 50;
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ShouldSerializeMargins,The following statement contains a magic number: return Margins.Bottom != 50 ||Margins.Left != 50 || Margins.Right != 50 || Margins.Bottom != 50;
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,ShouldSerializeMargins,The following statement contains a magic number: return Margins.Bottom != 50 ||Margins.Left != 50 || Margins.Right != 50 || Margins.Bottom != 50;
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,PageSettings,The following statement contains a magic number: base.Margins.Top = 50;
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,PageSettings,The following statement contains a magic number: base.Margins.Left = 50;
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,PageSettings,The following statement contains a magic number: base.Margins.Right = 50;
Magic Number,ScintillaNET,PageSettings,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Printing\PageSettings.cs,PageSettings,The following statement contains a magic number: base.Margins.Bottom = 50;
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,DocumentEndExtend,The following statement contains a magic number: _ns.SendMessageDirect(2319' 0' 0);
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnKeyPress,The following statement contains a magic number: if (_supressControlCharacters && (int)e.KeyChar < 32)                  e.Handled = true;
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnMarginClick,The following statement contains a magic number: if (e.ToggleMarkerNumber >= 0)              {                  int mask = (int)Math.Pow(2' e.ToggleMarkerNumber);                  if ((e.Line.GetMarkerMask() & mask) == mask)                      e.Line.DeleteMarker(e.ToggleMarkerNumber);                  else                      e.Line.AddMarker(e.ToggleMarkerNumber);              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,PositionIsOnComment,The following statement contains a magic number: if ((lexer == Lexer.Python || lexer == Lexer.Lisp)                  && (style == 1                  || style == 12))              {                  return true; // python or lisp              }              else if ((lexer == Lexer.Cpp || lexer == Lexer.Pascal || lexer == Lexer.Tcl || lexer == Lexer.Bullant)                  && (style == 1                  || style == 2                  || style == 3                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // cpp' tcl' bullant or pascal              }              else if ((lexer == Lexer.Hypertext || lexer == Lexer.Xml)                  && (style == 9                  || style == 20                  || style == 29                  || style == 30                  || style == 42                  || style == 43                  || style == 44                  || style == 57                  || style == 58                  || style == 59                  || style == 72                  || style == 82                  || style == 92                  || style == 107                  || style == 124                  || style == 125))              {                  return true; // html or xml              }              else if ((lexer == Lexer.Perl || lexer == Lexer.Ruby || lexer == Lexer.Clw || lexer == Lexer.Bash)                  && style == 2)              {                  return true; // perl' bash' clarion/clw or ruby              }              else if ((lexer == Lexer.Sql)                  && (style == 1                  || style == 2                  || style == 3                  || style == 13                  || style == 15                  || style == 17                  || style == 18))              {                  return true; // sql              }              else if ((lexer == Lexer.VB || lexer == Lexer.Properties || lexer == Lexer.MakeFile || lexer == Lexer.Batch || lexer == Lexer.Diff || lexer == Lexer.Conf || lexer == Lexer.Ave || lexer == Lexer.Eiffel || lexer == Lexer.EiffelKw || lexer == Lexer.Tcl || lexer == Lexer.VBScript || lexer == Lexer.MatLab || lexer == Lexer.Fortran || lexer == Lexer.F77 || lexer == Lexer.Lout || lexer == Lexer.Mmixal || lexer == Lexer.Yaml || lexer == Lexer.PowerBasic || lexer == Lexer.ErLang || lexer == Lexer.Octave || lexer == Lexer.Kix || lexer == Lexer.Asn1)                  && style == 1)              {                  return true; // asn1' vb' diff' batch' makefile' avenue' eiffel' eiffelkw' vbscript' matlab' crontab' fortran' f77' lout' mmixal' yaml' powerbasic' erlang' octave' kix or properties              }              else if ((lexer == Lexer.Latex)                  && style == 4)              {                  return true; // latex              }              else if ((lexer == Lexer.Lua || lexer == Lexer.EScript || lexer == Lexer.Verilog)                  && (style == 1                  || style == 2                  || style == 3))              {                  return true; // lua' verilog or escript              }              else if ((lexer == Lexer.Ada)                  && style == 10)              {                  return true; // ada              }              else if ((lexer == Lexer.Baan || lexer == Lexer.Pov || lexer == Lexer.Ps || lexer == Lexer.Forth || lexer == Lexer.MsSql || lexer == Lexer.Gui4Cli || lexer == Lexer.Au3 || lexer == Lexer.Apdl || lexer == Lexer.Vhdl || lexer == Lexer.Rebol)                  && (style == 1                  || style == 2))              {                  return true; // au3' apdl' baan' ps' mssql' rebol' forth' gui4cli' vhdl or pov              }              else if ((lexer == Lexer.Asm)                  && (style == 1                  || style == 11))              {                  return true; // asm              }              else if ((lexer == Lexer.Nsis)                  && (style == 1                  || style == 18))              {                  return true; // nsis              }              else if ((lexer == Lexer.Specman)                  && (style == 2                  || style == 3))              {                  return true; // specman              }              else if ((lexer == Lexer.Tads3)                  && (style == 3                  || style == 4))              {                  return true; // tads3              }              else if ((lexer == Lexer.CSound)                  && (style == 1                  || style == 9))              {                  return true; // csound              }              else if ((lexer == Lexer.Caml)                  && (style == 12                  || style == 13                  || style == 14                  || style == 15))              {                  return true; // caml              }              else if ((lexer == Lexer.Haskell)                  && (style == 13                  || style == 14                  || style == 15                  || style == 16))              {                  return true; // haskell              }              else if ((lexer == Lexer.Flagship)                  && (style == 1                  || style == 2                  || style == 3                  || style == 4                  || style == 5                  || style == 6))              {                  return true; // flagship              }              else if ((lexer == Lexer.Smalltalk)                  && style == 3)              {                  return true; // smalltalk              }              else if ((lexer == Lexer.Css)                  && style == 9)              {                  return true; // css              }
Magic Number,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case NativeMethods.WM_DESTROY:                      // wi11811 2008-07-28 Chris Rickard                      // If we get a destroy message we make this window a message-only window so that it doesn't actually                      // get destroyed' causing Scintilla to wipe out all its settings associated with this window handle.                      // We do send a WM_DESTROY message to Scintilla in the Dispose() method so that it does clean up its                      // resources when this control is actually done with. Credit (blame :) goes to tom103 for figuring                      // this one out.                        if (this.IsHandleCreated)                      {                          NativeMethods.SetParent(this.Handle' NativeMethods.HWND_MESSAGE);                          return;                      }                        base.WndProc(ref m);                      break;                    case NativeMethods.WM_NCPAINT:                      WmNcPaint(ref m);                      break;                    case NativeMethods.WM_PAINT:                      // I tried toggling the ControlStyles.UserPaint flag and sending the message                      // to both base.WndProc and DefWndProc in order to get the best of both worlds'                      // Scintilla Paints as normal and .NET fires the Paint Event with the proper                      // clipping regions and such. This didn't work too well' I kept getting weird                      // phantom paints' or sometimes the .NET paint events would seem to get painted                      // over by Scintilla. This technique I use below seems to work perfectly.                        base.WndProc(ref m);                      if (_isCustomPaintingEnabled)                      {                          ScintillaNET.RECT r;                          if (!NativeMethods.GetUpdateRect(Handle' out r' false))                              r = ClientRectangle;                            using (Graphics g = CreateGraphics())                          {                              g.SetClip(r);                              OnPaint(new PaintEventArgs(g' r));                          }                      }                      break;                    case NativeMethods.WM_SETCURSOR:                      base.DefWndProc(ref m);                      break;                    case NativeMethods.WM_GETTEXT:                      m.WParam = (IntPtr)(Caption.Length + 1);                      Marshal.Copy(Caption.ToCharArray()' 0' m.LParam' Caption.Length);                      m.Result = (IntPtr)Caption.Length;                      break;                    case NativeMethods.WM_GETTEXTLENGTH:                      m.Result = (IntPtr)Caption.Length;                      break;                    case NativeMethods.WM_REFLECT + NativeMethods.WM_NOTIFY:                      WmReflectNotify(ref m);                      break;                    case NativeMethods.WM_REFLECT + NativeMethods.WM_COMMAND:                      WmReflectCommand(ref m);                      break;                    case NativeMethods.WM_HSCROLL:                  case NativeMethods.WM_VSCROLL:                      WmScroll(ref m);                      break;                    default:                      if ((int)m.Msg >= 10000) // TODO Remove "magic number"                      {                          _commands.Execute((BindableCommand)m.Msg);                          return;                      }                        base.WndProc(ref m);                      break;              }
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,GetClientRectangle,The following statement contains a magic number: int y = NativeScintilla.PointYFromPosition(Start) + NativeScintilla.TextHeight(0) - 2;
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,GetClientRectangle,The following statement contains a magic number: return new Rectangle(x - 2' y' 5' 5);
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,GetClientRectangle,The following statement contains a magic number: return new Rectangle(x - 2' y' 5' 5);
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,GetClientRectangle,The following statement contains a magic number: return new Rectangle(x - 2' y' 5' 5);
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: int y = NativeScintilla.PointYFromPosition(Start) + NativeScintilla.TextHeight(0) - 2;
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Red' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Red' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Red' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Red' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.DarkRed' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.DarkRed' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.DarkRed' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,DropMarker,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\DropMarker.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.DarkRed' new Point[] { new Point(x - 2' y + 4)' new Point(x' y)' new Point(x + 2' y + 4) });
Magic Number,ScintillaNET,Indicator,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indicator.cs,GetDefaultColor,The following statement contains a magic number: if (_number == 0)                  return Color.FromArgb(0' 127' 0);              else if (_number == 1)                  return Color.FromArgb(0' 0' 255);              else if (_number == 2)                  return Color.FromArgb(255' 0' 0);              else                  return Color.FromArgb(0' 0' 0);
Magic Number,ScintillaNET,Indicator,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indicator.cs,GetDefaultColor,The following statement contains a magic number: if (_number == 0)                  return Color.FromArgb(0' 127' 0);              else if (_number == 1)                  return Color.FromArgb(0' 0' 255);              else if (_number == 2)                  return Color.FromArgb(255' 0' 0);              else                  return Color.FromArgb(0' 0' 0);
Magic Number,ScintillaNET,Indicator,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indicator.cs,GetDefaultColor,The following statement contains a magic number: if (_number == 0)                  return Color.FromArgb(0' 127' 0);              else if (_number == 1)                  return Color.FromArgb(0' 0' 255);              else if (_number == 2)                  return Color.FromArgb(255' 0' 0);              else                  return Color.FromArgb(0' 0' 0);
Magic Number,ScintillaNET,Indicator,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indicator.cs,GetDefaultColor,The following statement contains a magic number: if (_number == 0)                  return Color.FromArgb(0' 127' 0);              else if (_number == 1)                  return Color.FromArgb(0' 0' 255);              else if (_number == 2)                  return Color.FromArgb(255' 0' 0);              else                  return Color.FromArgb(0' 0' 0);
Magic Number,ScintillaNET,Line,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Line.cs,GetMarkers,The following statement contains a magic number: for (int i = 0; i < 32; ++i)              {                  if ((mask & bit) != 0)                      ret.Add(new Marker(Scintilla' i));                  bit = bit + bit;              }
Magic Number,ScintillaNET,Scrolling,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scrolling.cs,ResetHorizontalWidth,The following statement contains a magic number: HorizontalWidth = 2000;
Magic Number,ScintillaNET,Scrolling,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scrolling.cs,ShouldSerializeHorizontalWidth,The following statement contains a magic number: return HorizontalWidth != 2000;
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.lblSnippet.Size = new System.Drawing.Size(94' 13);
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.lblSnippet.Size = new System.Drawing.Size(94' 13);
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.lblSnippet.TabIndex = 6;
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.txtSnippet.Location = new System.Drawing.Point(95' 1);
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.txtSnippet.Size = new System.Drawing.Size(177' 196);
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.txtSnippet.Size = new System.Drawing.Size(177' 196);
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(285' 17);
Magic Number,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(285' 17);
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Invalidate,The following statement contains a magic number: if(Scintilla != null && Start > 0)              {                  INativeScintilla _ns = Scintilla as INativeScintilla;                  int x = _ns.PointXFromPosition(Start);                  int y = _ns.PointYFromPosition(Start) + _ns.TextHeight(0) - 2;                    //	Invalidate the old Marker Location so that we don't get "Ghosts"                  Scintilla.Invalidate(new Rectangle(x-2' y' 5' 5));              }
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Invalidate,The following statement contains a magic number: if(Scintilla != null && Start > 0)              {                  INativeScintilla _ns = Scintilla as INativeScintilla;                  int x = _ns.PointXFromPosition(Start);                  int y = _ns.PointYFromPosition(Start) + _ns.TextHeight(0) - 2;                    //	Invalidate the old Marker Location so that we don't get "Ghosts"                  Scintilla.Invalidate(new Rectangle(x-2' y' 5' 5));              }
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Invalidate,The following statement contains a magic number: if(Scintilla != null && Start > 0)              {                  INativeScintilla _ns = Scintilla as INativeScintilla;                  int x = _ns.PointXFromPosition(Start);                  int y = _ns.PointYFromPosition(Start) + _ns.TextHeight(0) - 2;                    //	Invalidate the old Marker Location so that we don't get "Ghosts"                  Scintilla.Invalidate(new Rectangle(x-2' y' 5' 5));              }
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Invalidate,The following statement contains a magic number: if(Scintilla != null && Start > 0)              {                  INativeScintilla _ns = Scintilla as INativeScintilla;                  int x = _ns.PointXFromPosition(Start);                  int y = _ns.PointYFromPosition(Start) + _ns.TextHeight(0) - 2;                    //	Invalidate the old Marker Location so that we don't get "Ghosts"                  Scintilla.Invalidate(new Rectangle(x-2' y' 5' 5));              }
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: int y = _ns.PointYFromPosition(Start) + _ns.TextHeight(0) - 2;
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Lime' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Lime' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Lime' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.FillPolygon(Brushes.Lime' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.Green' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.Green' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.Green' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetLinkEnd,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetLinkEnd.cs,Paint,The following statement contains a magic number: g.DrawPolygon(Pens.Green' new Point[] { new Point(x-2' y+4)' new Point(x' y)' new Point(x+2' y+4) });
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,DoSnippetCheck,The following statement contains a magic number: if (currentStyle == 1 || currentStyle == 2 || currentStyle == 4)                  return false;
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,DoSnippetCheck,The following statement contains a magic number: if (currentStyle == 1 || currentStyle == 2 || currentStyle == 4)                  return false;
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: while (m.Success)              {                  //	Did it match a $DropMarker$ token?                  if (m.Groups["dm"].Success)                  {                      //	Yep' was it an indexed or unindexed DropMarker                      if (m.Groups["dmi"].Success)                      {                          //	Indexed' set the indexed drop marker's character offset                          //	if it is specified more than once the last one wins.                          dropMarkers[int.Parse(m.Groups["dmi"].Value)] = m.Groups["dm"].Index;                      }                      else                      {                          //	Unindexed' just tack it on at the _end                          dropMarkers[dropMarkers.Count] = m.Groups["dm"].Index;                      }                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["dm"].Index' m.Groups["dm"].Length);                  }                  else if (m.Groups["c"].Success)                  {                      //	We matched the $Caret$ Token. Since there can be                       //	only 1 we set the caretPos. If this is specified                      //	more than once the last one wins                      caretPos = m.Groups["c"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["c"].Index' m.Groups["c"].Length);                  }                  else if (m.Groups["a"].Success)                  {                      //	We matched the $Anchor$ Token. Since there can be                       //	only 1 we set the anchorPos. If this is specified                      //	more than once the last one wins                      anchorPos = m.Groups["a"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["a"].Index' m.Groups["a"].Length);                  }                  else if (m.Groups["e"].Success)                  {                      //	We matched the $End$ Token. Since there can be                       //	only 1 we set the endPos. If this is specified                      //	more than once the last one wins                      endPos = m.Groups["e"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["e"].Index' m.Groups["e"].Length);                  }                  else if (m.Groups["s"].Success)                  {                      //	We matched the $Selection$ Token. Simply insert the                      //	selected text at this position                      selPos = m.Groups["s"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["s"].Index' m.Groups["s"].Length);                      snippet = snippet.Insert(m.Groups["s"].Index' selText);                  }                  else if (m.Groups["l"].Success)                  {                      //	Finally match for Snippet Link Ranges. This is at the bottom of the if/else                      //	because we want the more specific regex groups to match first so that this                      //	generic expression group doesn't create a SnippetLinkRange for say the                       //	$Caret$ Token.                      Group g = m.Groups["l"];                        int rangeIndex;                      string groupKey;                        if (m.Groups["li"].Success)                      {                          //	We have a subindexed SnippetLinkRange along the lines of $sometoken[1]$                          Group sg = m.Groups["li"];                            //	At this point g.Value = $sometoken[1]$                          //	and sg.Value = [1].                          //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - sg.Length - 2);                            //	Now we need the range's Index which would be 1 in our fictitional case                          rangeIndex = int.Parse(sg.Value.Substring(1' sg.Value.Length - 2));                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $ and the subindex string (eg [1])                          int start = startPos + g.Index;                          int end = start + g.Length - sg.Length - 2;                            //	And now we add (or replace) the snippet link range at the index                          //	keep in mind duplicates will stomp all over each other' the last                          //	one wins. Replaced tokens won't get a range                          indexedRangesToActivate[rangeIndex] = new SnippetLinkRange(start' end' Scintilla' groupKey); ;                            //	And remove all the token info including the subindex from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index - 2 + g.Length - sg.Length' sg.Length + 1);                      }                      else                      {                          //	We have a regular old SnippetLinkRange along the lines of $sometoken$                            //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - 2);                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $                          int start = startPos + g.Index;                          int end = start + g.Length - 2;                            //	Now create the range object                          unindexedRangesToActivate.Add(new SnippetLinkRange(start' end' Scintilla' groupKey));                            //	And remove all the token info from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index + g.Length - 2' 1);                      }                  }                  //	Any more matches? Note that I'm rerunning the regexp query                  //	on the snippet string becuase it's contents have been modified                  //	and we need to get the updated index values.                  m = snippetRegex1.Match(snippet);              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: while (m.Success)              {                  //	Did it match a $DropMarker$ token?                  if (m.Groups["dm"].Success)                  {                      //	Yep' was it an indexed or unindexed DropMarker                      if (m.Groups["dmi"].Success)                      {                          //	Indexed' set the indexed drop marker's character offset                          //	if it is specified more than once the last one wins.                          dropMarkers[int.Parse(m.Groups["dmi"].Value)] = m.Groups["dm"].Index;                      }                      else                      {                          //	Unindexed' just tack it on at the _end                          dropMarkers[dropMarkers.Count] = m.Groups["dm"].Index;                      }                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["dm"].Index' m.Groups["dm"].Length);                  }                  else if (m.Groups["c"].Success)                  {                      //	We matched the $Caret$ Token. Since there can be                       //	only 1 we set the caretPos. If this is specified                      //	more than once the last one wins                      caretPos = m.Groups["c"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["c"].Index' m.Groups["c"].Length);                  }                  else if (m.Groups["a"].Success)                  {                      //	We matched the $Anchor$ Token. Since there can be                       //	only 1 we set the anchorPos. If this is specified                      //	more than once the last one wins                      anchorPos = m.Groups["a"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["a"].Index' m.Groups["a"].Length);                  }                  else if (m.Groups["e"].Success)                  {                      //	We matched the $End$ Token. Since there can be                       //	only 1 we set the endPos. If this is specified                      //	more than once the last one wins                      endPos = m.Groups["e"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["e"].Index' m.Groups["e"].Length);                  }                  else if (m.Groups["s"].Success)                  {                      //	We matched the $Selection$ Token. Simply insert the                      //	selected text at this position                      selPos = m.Groups["s"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["s"].Index' m.Groups["s"].Length);                      snippet = snippet.Insert(m.Groups["s"].Index' selText);                  }                  else if (m.Groups["l"].Success)                  {                      //	Finally match for Snippet Link Ranges. This is at the bottom of the if/else                      //	because we want the more specific regex groups to match first so that this                      //	generic expression group doesn't create a SnippetLinkRange for say the                       //	$Caret$ Token.                      Group g = m.Groups["l"];                        int rangeIndex;                      string groupKey;                        if (m.Groups["li"].Success)                      {                          //	We have a subindexed SnippetLinkRange along the lines of $sometoken[1]$                          Group sg = m.Groups["li"];                            //	At this point g.Value = $sometoken[1]$                          //	and sg.Value = [1].                          //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - sg.Length - 2);                            //	Now we need the range's Index which would be 1 in our fictitional case                          rangeIndex = int.Parse(sg.Value.Substring(1' sg.Value.Length - 2));                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $ and the subindex string (eg [1])                          int start = startPos + g.Index;                          int end = start + g.Length - sg.Length - 2;                            //	And now we add (or replace) the snippet link range at the index                          //	keep in mind duplicates will stomp all over each other' the last                          //	one wins. Replaced tokens won't get a range                          indexedRangesToActivate[rangeIndex] = new SnippetLinkRange(start' end' Scintilla' groupKey); ;                            //	And remove all the token info including the subindex from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index - 2 + g.Length - sg.Length' sg.Length + 1);                      }                      else                      {                          //	We have a regular old SnippetLinkRange along the lines of $sometoken$                            //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - 2);                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $                          int start = startPos + g.Index;                          int end = start + g.Length - 2;                            //	Now create the range object                          unindexedRangesToActivate.Add(new SnippetLinkRange(start' end' Scintilla' groupKey));                            //	And remove all the token info from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index + g.Length - 2' 1);                      }                  }                  //	Any more matches? Note that I'm rerunning the regexp query                  //	on the snippet string becuase it's contents have been modified                  //	and we need to get the updated index values.                  m = snippetRegex1.Match(snippet);              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: while (m.Success)              {                  //	Did it match a $DropMarker$ token?                  if (m.Groups["dm"].Success)                  {                      //	Yep' was it an indexed or unindexed DropMarker                      if (m.Groups["dmi"].Success)                      {                          //	Indexed' set the indexed drop marker's character offset                          //	if it is specified more than once the last one wins.                          dropMarkers[int.Parse(m.Groups["dmi"].Value)] = m.Groups["dm"].Index;                      }                      else                      {                          //	Unindexed' just tack it on at the _end                          dropMarkers[dropMarkers.Count] = m.Groups["dm"].Index;                      }                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["dm"].Index' m.Groups["dm"].Length);                  }                  else if (m.Groups["c"].Success)                  {                      //	We matched the $Caret$ Token. Since there can be                       //	only 1 we set the caretPos. If this is specified                      //	more than once the last one wins                      caretPos = m.Groups["c"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["c"].Index' m.Groups["c"].Length);                  }                  else if (m.Groups["a"].Success)                  {                      //	We matched the $Anchor$ Token. Since there can be                       //	only 1 we set the anchorPos. If this is specified                      //	more than once the last one wins                      anchorPos = m.Groups["a"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["a"].Index' m.Groups["a"].Length);                  }                  else if (m.Groups["e"].Success)                  {                      //	We matched the $End$ Token. Since there can be                       //	only 1 we set the endPos. If this is specified                      //	more than once the last one wins                      endPos = m.Groups["e"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["e"].Index' m.Groups["e"].Length);                  }                  else if (m.Groups["s"].Success)                  {                      //	We matched the $Selection$ Token. Simply insert the                      //	selected text at this position                      selPos = m.Groups["s"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["s"].Index' m.Groups["s"].Length);                      snippet = snippet.Insert(m.Groups["s"].Index' selText);                  }                  else if (m.Groups["l"].Success)                  {                      //	Finally match for Snippet Link Ranges. This is at the bottom of the if/else                      //	because we want the more specific regex groups to match first so that this                      //	generic expression group doesn't create a SnippetLinkRange for say the                       //	$Caret$ Token.                      Group g = m.Groups["l"];                        int rangeIndex;                      string groupKey;                        if (m.Groups["li"].Success)                      {                          //	We have a subindexed SnippetLinkRange along the lines of $sometoken[1]$                          Group sg = m.Groups["li"];                            //	At this point g.Value = $sometoken[1]$                          //	and sg.Value = [1].                          //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - sg.Length - 2);                            //	Now we need the range's Index which would be 1 in our fictitional case                          rangeIndex = int.Parse(sg.Value.Substring(1' sg.Value.Length - 2));                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $ and the subindex string (eg [1])                          int start = startPos + g.Index;                          int end = start + g.Length - sg.Length - 2;                            //	And now we add (or replace) the snippet link range at the index                          //	keep in mind duplicates will stomp all over each other' the last                          //	one wins. Replaced tokens won't get a range                          indexedRangesToActivate[rangeIndex] = new SnippetLinkRange(start' end' Scintilla' groupKey); ;                            //	And remove all the token info including the subindex from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index - 2 + g.Length - sg.Length' sg.Length + 1);                      }                      else                      {                          //	We have a regular old SnippetLinkRange along the lines of $sometoken$                            //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - 2);                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $                          int start = startPos + g.Index;                          int end = start + g.Length - 2;                            //	Now create the range object                          unindexedRangesToActivate.Add(new SnippetLinkRange(start' end' Scintilla' groupKey));                            //	And remove all the token info from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index + g.Length - 2' 1);                      }                  }                  //	Any more matches? Note that I'm rerunning the regexp query                  //	on the snippet string becuase it's contents have been modified                  //	and we need to get the updated index values.                  m = snippetRegex1.Match(snippet);              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: while (m.Success)              {                  //	Did it match a $DropMarker$ token?                  if (m.Groups["dm"].Success)                  {                      //	Yep' was it an indexed or unindexed DropMarker                      if (m.Groups["dmi"].Success)                      {                          //	Indexed' set the indexed drop marker's character offset                          //	if it is specified more than once the last one wins.                          dropMarkers[int.Parse(m.Groups["dmi"].Value)] = m.Groups["dm"].Index;                      }                      else                      {                          //	Unindexed' just tack it on at the _end                          dropMarkers[dropMarkers.Count] = m.Groups["dm"].Index;                      }                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["dm"].Index' m.Groups["dm"].Length);                  }                  else if (m.Groups["c"].Success)                  {                      //	We matched the $Caret$ Token. Since there can be                       //	only 1 we set the caretPos. If this is specified                      //	more than once the last one wins                      caretPos = m.Groups["c"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["c"].Index' m.Groups["c"].Length);                  }                  else if (m.Groups["a"].Success)                  {                      //	We matched the $Anchor$ Token. Since there can be                       //	only 1 we set the anchorPos. If this is specified                      //	more than once the last one wins                      anchorPos = m.Groups["a"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["a"].Index' m.Groups["a"].Length);                  }                  else if (m.Groups["e"].Success)                  {                      //	We matched the $End$ Token. Since there can be                       //	only 1 we set the endPos. If this is specified                      //	more than once the last one wins                      endPos = m.Groups["e"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["e"].Index' m.Groups["e"].Length);                  }                  else if (m.Groups["s"].Success)                  {                      //	We matched the $Selection$ Token. Simply insert the                      //	selected text at this position                      selPos = m.Groups["s"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["s"].Index' m.Groups["s"].Length);                      snippet = snippet.Insert(m.Groups["s"].Index' selText);                  }                  else if (m.Groups["l"].Success)                  {                      //	Finally match for Snippet Link Ranges. This is at the bottom of the if/else                      //	because we want the more specific regex groups to match first so that this                      //	generic expression group doesn't create a SnippetLinkRange for say the                       //	$Caret$ Token.                      Group g = m.Groups["l"];                        int rangeIndex;                      string groupKey;                        if (m.Groups["li"].Success)                      {                          //	We have a subindexed SnippetLinkRange along the lines of $sometoken[1]$                          Group sg = m.Groups["li"];                            //	At this point g.Value = $sometoken[1]$                          //	and sg.Value = [1].                          //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - sg.Length - 2);                            //	Now we need the range's Index which would be 1 in our fictitional case                          rangeIndex = int.Parse(sg.Value.Substring(1' sg.Value.Length - 2));                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $ and the subindex string (eg [1])                          int start = startPos + g.Index;                          int end = start + g.Length - sg.Length - 2;                            //	And now we add (or replace) the snippet link range at the index                          //	keep in mind duplicates will stomp all over each other' the last                          //	one wins. Replaced tokens won't get a range                          indexedRangesToActivate[rangeIndex] = new SnippetLinkRange(start' end' Scintilla' groupKey); ;                            //	And remove all the token info including the subindex from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index - 2 + g.Length - sg.Length' sg.Length + 1);                      }                      else                      {                          //	We have a regular old SnippetLinkRange along the lines of $sometoken$                            //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - 2);                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $                          int start = startPos + g.Index;                          int end = start + g.Length - 2;                            //	Now create the range object                          unindexedRangesToActivate.Add(new SnippetLinkRange(start' end' Scintilla' groupKey));                            //	And remove all the token info from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index + g.Length - 2' 1);                      }                  }                  //	Any more matches? Note that I'm rerunning the regexp query                  //	on the snippet string becuase it's contents have been modified                  //	and we need to get the updated index values.                  m = snippetRegex1.Match(snippet);              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: while (m.Success)              {                  //	Did it match a $DropMarker$ token?                  if (m.Groups["dm"].Success)                  {                      //	Yep' was it an indexed or unindexed DropMarker                      if (m.Groups["dmi"].Success)                      {                          //	Indexed' set the indexed drop marker's character offset                          //	if it is specified more than once the last one wins.                          dropMarkers[int.Parse(m.Groups["dmi"].Value)] = m.Groups["dm"].Index;                      }                      else                      {                          //	Unindexed' just tack it on at the _end                          dropMarkers[dropMarkers.Count] = m.Groups["dm"].Index;                      }                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["dm"].Index' m.Groups["dm"].Length);                  }                  else if (m.Groups["c"].Success)                  {                      //	We matched the $Caret$ Token. Since there can be                       //	only 1 we set the caretPos. If this is specified                      //	more than once the last one wins                      caretPos = m.Groups["c"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["c"].Index' m.Groups["c"].Length);                  }                  else if (m.Groups["a"].Success)                  {                      //	We matched the $Anchor$ Token. Since there can be                       //	only 1 we set the anchorPos. If this is specified                      //	more than once the last one wins                      anchorPos = m.Groups["a"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["a"].Index' m.Groups["a"].Length);                  }                  else if (m.Groups["e"].Success)                  {                      //	We matched the $End$ Token. Since there can be                       //	only 1 we set the endPos. If this is specified                      //	more than once the last one wins                      endPos = m.Groups["e"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["e"].Index' m.Groups["e"].Length);                  }                  else if (m.Groups["s"].Success)                  {                      //	We matched the $Selection$ Token. Simply insert the                      //	selected text at this position                      selPos = m.Groups["s"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["s"].Index' m.Groups["s"].Length);                      snippet = snippet.Insert(m.Groups["s"].Index' selText);                  }                  else if (m.Groups["l"].Success)                  {                      //	Finally match for Snippet Link Ranges. This is at the bottom of the if/else                      //	because we want the more specific regex groups to match first so that this                      //	generic expression group doesn't create a SnippetLinkRange for say the                       //	$Caret$ Token.                      Group g = m.Groups["l"];                        int rangeIndex;                      string groupKey;                        if (m.Groups["li"].Success)                      {                          //	We have a subindexed SnippetLinkRange along the lines of $sometoken[1]$                          Group sg = m.Groups["li"];                            //	At this point g.Value = $sometoken[1]$                          //	and sg.Value = [1].                          //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - sg.Length - 2);                            //	Now we need the range's Index which would be 1 in our fictitional case                          rangeIndex = int.Parse(sg.Value.Substring(1' sg.Value.Length - 2));                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $ and the subindex string (eg [1])                          int start = startPos + g.Index;                          int end = start + g.Length - sg.Length - 2;                            //	And now we add (or replace) the snippet link range at the index                          //	keep in mind duplicates will stomp all over each other' the last                          //	one wins. Replaced tokens won't get a range                          indexedRangesToActivate[rangeIndex] = new SnippetLinkRange(start' end' Scintilla' groupKey); ;                            //	And remove all the token info including the subindex from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index - 2 + g.Length - sg.Length' sg.Length + 1);                      }                      else                      {                          //	We have a regular old SnippetLinkRange along the lines of $sometoken$                            //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - 2);                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $                          int start = startPos + g.Index;                          int end = start + g.Length - 2;                            //	Now create the range object                          unindexedRangesToActivate.Add(new SnippetLinkRange(start' end' Scintilla' groupKey));                            //	And remove all the token info from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index + g.Length - 2' 1);                      }                  }                  //	Any more matches? Note that I'm rerunning the regexp query                  //	on the snippet string becuase it's contents have been modified                  //	and we need to get the updated index values.                  m = snippetRegex1.Match(snippet);              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: while (m.Success)              {                  //	Did it match a $DropMarker$ token?                  if (m.Groups["dm"].Success)                  {                      //	Yep' was it an indexed or unindexed DropMarker                      if (m.Groups["dmi"].Success)                      {                          //	Indexed' set the indexed drop marker's character offset                          //	if it is specified more than once the last one wins.                          dropMarkers[int.Parse(m.Groups["dmi"].Value)] = m.Groups["dm"].Index;                      }                      else                      {                          //	Unindexed' just tack it on at the _end                          dropMarkers[dropMarkers.Count] = m.Groups["dm"].Index;                      }                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["dm"].Index' m.Groups["dm"].Length);                  }                  else if (m.Groups["c"].Success)                  {                      //	We matched the $Caret$ Token. Since there can be                       //	only 1 we set the caretPos. If this is specified                      //	more than once the last one wins                      caretPos = m.Groups["c"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["c"].Index' m.Groups["c"].Length);                  }                  else if (m.Groups["a"].Success)                  {                      //	We matched the $Anchor$ Token. Since there can be                       //	only 1 we set the anchorPos. If this is specified                      //	more than once the last one wins                      anchorPos = m.Groups["a"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["a"].Index' m.Groups["a"].Length);                  }                  else if (m.Groups["e"].Success)                  {                      //	We matched the $End$ Token. Since there can be                       //	only 1 we set the endPos. If this is specified                      //	more than once the last one wins                      endPos = m.Groups["e"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["e"].Index' m.Groups["e"].Length);                  }                  else if (m.Groups["s"].Success)                  {                      //	We matched the $Selection$ Token. Simply insert the                      //	selected text at this position                      selPos = m.Groups["s"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["s"].Index' m.Groups["s"].Length);                      snippet = snippet.Insert(m.Groups["s"].Index' selText);                  }                  else if (m.Groups["l"].Success)                  {                      //	Finally match for Snippet Link Ranges. This is at the bottom of the if/else                      //	because we want the more specific regex groups to match first so that this                      //	generic expression group doesn't create a SnippetLinkRange for say the                       //	$Caret$ Token.                      Group g = m.Groups["l"];                        int rangeIndex;                      string groupKey;                        if (m.Groups["li"].Success)                      {                          //	We have a subindexed SnippetLinkRange along the lines of $sometoken[1]$                          Group sg = m.Groups["li"];                            //	At this point g.Value = $sometoken[1]$                          //	and sg.Value = [1].                          //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - sg.Length - 2);                            //	Now we need the range's Index which would be 1 in our fictitional case                          rangeIndex = int.Parse(sg.Value.Substring(1' sg.Value.Length - 2));                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $ and the subindex string (eg [1])                          int start = startPos + g.Index;                          int end = start + g.Length - sg.Length - 2;                            //	And now we add (or replace) the snippet link range at the index                          //	keep in mind duplicates will stomp all over each other' the last                          //	one wins. Replaced tokens won't get a range                          indexedRangesToActivate[rangeIndex] = new SnippetLinkRange(start' end' Scintilla' groupKey); ;                            //	And remove all the token info including the subindex from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index - 2 + g.Length - sg.Length' sg.Length + 1);                      }                      else                      {                          //	We have a regular old SnippetLinkRange along the lines of $sometoken$                            //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - 2);                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $                          int start = startPos + g.Index;                          int end = start + g.Length - 2;                            //	Now create the range object                          unindexedRangesToActivate.Add(new SnippetLinkRange(start' end' Scintilla' groupKey));                            //	And remove all the token info from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index + g.Length - 2' 1);                      }                  }                  //	Any more matches? Note that I'm rerunning the regexp query                  //	on the snippet string becuase it's contents have been modified                  //	and we need to get the updated index values.                  m = snippetRegex1.Match(snippet);              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: while (m.Success)              {                  //	Did it match a $DropMarker$ token?                  if (m.Groups["dm"].Success)                  {                      //	Yep' was it an indexed or unindexed DropMarker                      if (m.Groups["dmi"].Success)                      {                          //	Indexed' set the indexed drop marker's character offset                          //	if it is specified more than once the last one wins.                          dropMarkers[int.Parse(m.Groups["dmi"].Value)] = m.Groups["dm"].Index;                      }                      else                      {                          //	Unindexed' just tack it on at the _end                          dropMarkers[dropMarkers.Count] = m.Groups["dm"].Index;                      }                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["dm"].Index' m.Groups["dm"].Length);                  }                  else if (m.Groups["c"].Success)                  {                      //	We matched the $Caret$ Token. Since there can be                       //	only 1 we set the caretPos. If this is specified                      //	more than once the last one wins                      caretPos = m.Groups["c"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["c"].Index' m.Groups["c"].Length);                  }                  else if (m.Groups["a"].Success)                  {                      //	We matched the $Anchor$ Token. Since there can be                       //	only 1 we set the anchorPos. If this is specified                      //	more than once the last one wins                      anchorPos = m.Groups["a"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["a"].Index' m.Groups["a"].Length);                  }                  else if (m.Groups["e"].Success)                  {                      //	We matched the $End$ Token. Since there can be                       //	only 1 we set the endPos. If this is specified                      //	more than once the last one wins                      endPos = m.Groups["e"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["e"].Index' m.Groups["e"].Length);                  }                  else if (m.Groups["s"].Success)                  {                      //	We matched the $Selection$ Token. Simply insert the                      //	selected text at this position                      selPos = m.Groups["s"].Index;                        //	Take the token out of the string                      snippet = snippet.Remove(m.Groups["s"].Index' m.Groups["s"].Length);                      snippet = snippet.Insert(m.Groups["s"].Index' selText);                  }                  else if (m.Groups["l"].Success)                  {                      //	Finally match for Snippet Link Ranges. This is at the bottom of the if/else                      //	because we want the more specific regex groups to match first so that this                      //	generic expression group doesn't create a SnippetLinkRange for say the                       //	$Caret$ Token.                      Group g = m.Groups["l"];                        int rangeIndex;                      string groupKey;                        if (m.Groups["li"].Success)                      {                          //	We have a subindexed SnippetLinkRange along the lines of $sometoken[1]$                          Group sg = m.Groups["li"];                            //	At this point g.Value = $sometoken[1]$                          //	and sg.Value = [1].                          //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - sg.Length - 2);                            //	Now we need the range's Index which would be 1 in our fictitional case                          rangeIndex = int.Parse(sg.Value.Substring(1' sg.Value.Length - 2));                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $ and the subindex string (eg [1])                          int start = startPos + g.Index;                          int end = start + g.Length - sg.Length - 2;                            //	And now we add (or replace) the snippet link range at the index                          //	keep in mind duplicates will stomp all over each other' the last                          //	one wins. Replaced tokens won't get a range                          indexedRangesToActivate[rangeIndex] = new SnippetLinkRange(start' end' Scintilla' groupKey); ;                            //	And remove all the token info including the subindex from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index - 2 + g.Length - sg.Length' sg.Length + 1);                      }                      else                      {                          //	We have a regular old SnippetLinkRange along the lines of $sometoken$                            //	We want the range's Key' which would be sometoken                          groupKey = g.Value.Substring(1' g.Value.Length - 2);                            //	Now we need to determine the actual _start and _end positions of the range.                          //	Keep in mind we'll be stripping out the 2 $                          int start = startPos + g.Index;                          int end = start + g.Length - 2;                            //	Now create the range object                          unindexedRangesToActivate.Add(new SnippetLinkRange(start' end' Scintilla' groupKey));                            //	And remove all the token info from the snippet text                           //	leaving only the key                          snippet = snippet.Remove(g.Index' 1).Remove(g.Index + g.Length - 2' 1);                      }                  }                  //	Any more matches? Note that I'm rerunning the regexp query                  //	on the snippet string becuase it's contents have been modified                  //	and we need to get the updated index values.                  m = snippetRegex1.Match(snippet);              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,InsertSnippet,The following statement contains a magic number: if (_snippetLinks.Count > 0)              {                  Timer t = new Timer();                  t.Interval = 10;                    //	Oh how I love anonymous delegates' this is starting to remind                  //	me of JavaScript and SetTimeout...                  t.Tick += new EventHandler(delegate(object sender' EventArgs te)                  {                      t.Dispose();                      IsActive = true;                  });                  t.Start();              }
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,ResetActiveSnippetIndicator,The following statement contains a magic number: _activeSnippetIndicator = 15;
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,ResetInactiveSnippetIndicator,The following statement contains a magic number: _inactiveSnippetIndicator = 16;
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,ShouldSerializeActiveSnippetIndicator,The following statement contains a magic number: return _activeSnippetIndicator != 15;
Magic Number,ScintillaNET,SnippetManager,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetManager.cs,ShouldSerializeInactiveSnippetIndicator,The following statement contains a magic number: return _inactiveSnippetIndicator != 16;
Magic Number,ScintillaNET,StyleCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\StyleCollection.cs,Reset,The following statement contains a magic number: for (int i = 0; i < 32; i++)                  this[i].Reset();
Magic Number,ScintillaNET,StyleCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\StyleCollection.cs,ResetBits,The following statement contains a magic number: Bits = 7;
Magic Number,ScintillaNET,StyleCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\StyleCollection.cs,ShouldSerializeBits,The following statement contains a magic number: return Bits != 7;
Magic Number,ScintillaNET,StyleCollection,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\StyleCollection.cs,StyleCollection,The following statement contains a magic number: Bits = 7;
Magic Number,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,ColorToRgb,The following statement contains a magic number: return c.R + (c.G << 8) + (c.B << 16);
Magic Number,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,ColorToRgb,The following statement contains a magic number: return c.R + (c.G << 8) + (c.B << 16);
Magic Number,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,GetKeys,The following statement contains a magic number: switch (c)              {                  case '/':                      return Keys.Oem2;                  case '`':                      return Keys.Oem3;                  case '[':                      return Keys.Oem4;                  case '\\':                      return Keys.Oem5;                  case ']':                      return Keys.Oem6;                  case '-':                      return (Keys)189;                }
Magic Number,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,GetKeys,The following statement contains a magic number: switch (s)              {                  case "/":                      return Keys.Oem2;                  case "`":                      return Keys.Oem3;                  case "[":                      return Keys.Oem4;                  case "\\":                      return Keys.Oem5;                  case "]":                      return Keys.Oem6;                  case "-":                      return (Keys)189;              }
Magic Number,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,RgbToColor,The following statement contains a magic number: return Color.FromArgb(color & 0x0000ff' (color & 0x00ff00) >> 8' (color & 0xff0000) >> 16);
Magic Number,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,RgbToColor,The following statement contains a magic number: return Color.FromArgb(color & 0x0000ff' (color & 0x00ff00) >> 8' (color & 0xff0000) >> 16);
Magic Number,ScintillaNET,WhitespaceStringConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\WhitespaceStringConverter.cs,ConvertFrom,The following statement contains a magic number: while (m.Success)              {                  int val = int.Parse(m.Value.Substring(3' m.Length - 4)' NumberStyles.AllowHexSpecifier);                  value = value.Replace(m.Value' ((char)val).ToString());                  m = rr.Match(value);              }
Magic Number,ScintillaNET,WhitespaceStringConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\WhitespaceStringConverter.cs,ConvertFrom,The following statement contains a magic number: while (m.Success)              {                  int val = int.Parse(m.Value.Substring(3' m.Length - 4)' NumberStyles.AllowHexSpecifier);                  value = value.Replace(m.Value' ((char)val).ToString());                  m = rr.Match(value);              }
Magic Number,ScintillaNET,WhitespaceStringConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\WhitespaceStringConverter.cs,ConvertTo,The following statement contains a magic number: foreach (char c in nativeString)              {                  if ((int)c > 32)                  {                      sb.Append(c);                      continue;                  }                    switch ((int)c)                  {                      case 9:                          sb.Append("{TAB}");                          break;                      case 10:                          sb.Append("{LF}");                          break;                      case 13:                          sb.Append("{CR}");                          break;                      case 32:                          sb.Append("{SPACE}");                          break;                      default:                          sb.Append("{0x" + ((int)c).ToString("x4") + "}");                          break;                  }              }
Magic Number,ScintillaNET,WhitespaceStringConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\WhitespaceStringConverter.cs,ConvertTo,The following statement contains a magic number: foreach (char c in nativeString)              {                  if ((int)c > 32)                  {                      sb.Append(c);                      continue;                  }                    switch ((int)c)                  {                      case 9:                          sb.Append("{TAB}");                          break;                      case 10:                          sb.Append("{LF}");                          break;                      case 13:                          sb.Append("{CR}");                          break;                      case 32:                          sb.Append("{SPACE}");                          break;                      default:                          sb.Append("{0x" + ((int)c).ToString("x4") + "}");                          break;                  }              }
Magic Number,ScintillaNET,WhitespaceStringConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\WhitespaceStringConverter.cs,ConvertTo,The following statement contains a magic number: foreach (char c in nativeString)              {                  if ((int)c > 32)                  {                      sb.Append(c);                      continue;                  }                    switch ((int)c)                  {                      case 9:                          sb.Append("{TAB}");                          break;                      case 10:                          sb.Append("{LF}");                          break;                      case 13:                          sb.Append("{CR}");                          break;                      case 32:                          sb.Append("{SPACE}");                          break;                      default:                          sb.Append("{0x" + ((int)c).ToString("x4") + "}");                          break;                  }              }
Magic Number,ScintillaNET,WhitespaceStringConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\WhitespaceStringConverter.cs,ConvertTo,The following statement contains a magic number: foreach (char c in nativeString)              {                  if ((int)c > 32)                  {                      sb.Append(c);                      continue;                  }                    switch ((int)c)                  {                      case 9:                          sb.Append("{TAB}");                          break;                      case 10:                          sb.Append("{LF}");                          break;                      case 13:                          sb.Append("{CR}");                          break;                      case 32:                          sb.Append("{SPACE}");                          break;                      default:                          sb.Append("{0x" + ((int)c).ToString("x4") + "}");                          break;                  }              }
Magic Number,ScintillaNET,WhitespaceStringConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\WhitespaceStringConverter.cs,ConvertTo,The following statement contains a magic number: foreach (char c in nativeString)              {                  if ((int)c > 32)                  {                      sb.Append(c);                      continue;                  }                    switch ((int)c)                  {                      case 9:                          sb.Append("{TAB}");                          break;                      case 10:                          sb.Append("{LF}");                          break;                      case 13:                          sb.Append("{CR}");                          break;                      case 32:                          sb.Append("{SPACE}");                          break;                      default:                          sb.Append("{0x" + ((int)c).ToString("x4") + "}");                          break;                  }              }
Magic Number,ScintillaNET,XpmConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\XpmAdapter.cs,ConvertToXPM,The following statement contains a magic number: for (int y = 0; y < height; y++)              {                  sb.Append("'\"");                  for (int x = 0; x < width; x++)                  {                      col = ColorTranslator.ToHtml(bmp.GetPixel(x' y));                      index = colors.IndexOf(col);                      if (index < 0)                      {                          index = colors.Count + 65;                          colors.Add(col);                          if (index > 90) index += 6;                          c = Encoding.ASCII.GetChars(new byte[] { (byte)(index & 0xff) })[0];                          chars.Add(c);                          sb.Insert(colorsIndex' "'\"" + c + " c " + col + "\"");                          colorsIndex += 14;                      }                      else c = (char)chars[index];                      sb.Append(c);                  }                  sb.Append("\"");              }
Magic Number,ScintillaNET,XpmConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\XpmAdapter.cs,ConvertToXPM,The following statement contains a magic number: for (int y = 0; y < height; y++)              {                  sb.Append("'\"");                  for (int x = 0; x < width; x++)                  {                      col = ColorTranslator.ToHtml(bmp.GetPixel(x' y));                      index = colors.IndexOf(col);                      if (index < 0)                      {                          index = colors.Count + 65;                          colors.Add(col);                          if (index > 90) index += 6;                          c = Encoding.ASCII.GetChars(new byte[] { (byte)(index & 0xff) })[0];                          chars.Add(c);                          sb.Insert(colorsIndex' "'\"" + c + " c " + col + "\"");                          colorsIndex += 14;                      }                      else c = (char)chars[index];                      sb.Append(c);                  }                  sb.Append("\"");              }
Magic Number,ScintillaNET,XpmConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\XpmAdapter.cs,ConvertToXPM,The following statement contains a magic number: for (int y = 0; y < height; y++)              {                  sb.Append("'\"");                  for (int x = 0; x < width; x++)                  {                      col = ColorTranslator.ToHtml(bmp.GetPixel(x' y));                      index = colors.IndexOf(col);                      if (index < 0)                      {                          index = colors.Count + 65;                          colors.Add(col);                          if (index > 90) index += 6;                          c = Encoding.ASCII.GetChars(new byte[] { (byte)(index & 0xff) })[0];                          chars.Add(c);                          sb.Insert(colorsIndex' "'\"" + c + " c " + col + "\"");                          colorsIndex += 14;                      }                      else c = (char)chars[index];                      sb.Append(c);                  }                  sb.Append("\"");              }
Magic Number,ScintillaNET,XpmConverter,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\XpmAdapter.cs,ConvertToXPM,The following statement contains a magic number: for (int y = 0; y < height; y++)              {                  sb.Append("'\"");                  for (int x = 0; x < width; x++)                  {                      col = ColorTranslator.ToHtml(bmp.GetPixel(x' y));                      index = colors.IndexOf(col);                      if (index < 0)                      {                          index = colors.Count + 65;                          colors.Add(col);                          if (index > 90) index += 6;                          c = Encoding.ASCII.GetChars(new byte[] { (byte)(index & 0xff) })[0];                          chars.Add(c);                          sb.Insert(colorsIndex' "'\"" + c + " c " + col + "\"");                          colorsIndex += 14;                      }                      else c = (char)chars[index];                      sb.Append(c);                  }                  sb.Append("\"");              }
Duplicate Code,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,Load,The method contains a code clone-set at the following line numbers (starting from the method definition): ((405' 432)' (463' 490))
Missing Default,ScintillaNET,Commands,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Commands.cs,Execute,The following switch statement is missing a default case: switch (command)              {                  case BindableCommand.AutoCShow:                      Scintilla.AutoComplete.Show();                      return true;                    case BindableCommand.AcceptActiveSnippets:                      return Scintilla.Snippets.AcceptActiveSnippets();                    case BindableCommand.CancelActiveSnippets:                      return Scintilla.Snippets.CancelActiveSnippets();                    case BindableCommand.DoSnippetCheck:                      return Scintilla.Snippets.DoSnippetCheck();                    case BindableCommand.NextSnippetRange:                      return Scintilla.Snippets.NextSnippetRange();                    case BindableCommand.PreviousSnippetRange:                      return Scintilla.Snippets.PreviousSnippetRange();                    case BindableCommand.DropMarkerCollect:                      Scintilla.DropMarkers.Collect();                      return false;                    case BindableCommand.DropMarkerDrop:                      Scintilla.DropMarkers.Drop();                      return true;                    case BindableCommand.Print:                      Scintilla.Printing.Print();                      return true;                    case BindableCommand.PrintPreview:                      Scintilla.Printing.PrintPreview();                      return true;                    case BindableCommand.ShowFind:                      Scintilla.FindReplace.ShowFind();                      return true;                    case BindableCommand.ShowReplace:                      Scintilla.FindReplace.ShowReplace();                      return true;                    case BindableCommand.FindNext:                      Scintilla.FindReplace.Window.FindNext();                      return true;                    case BindableCommand.FindPrevious:                      Scintilla.FindReplace.Window.FindPrevious();                      return true;                    case BindableCommand.IncrementalSearch:                      Scintilla.FindReplace.IncrementalSearch();                      return true;                    case BindableCommand.LineComment:                      Scintilla.Lexing.LineComment();                      return true;                    case BindableCommand.LineUncomment:                      Scintilla.Lexing.LineUncomment();                      return true;                    case BindableCommand.DocumentNavigateForward:                      Scintilla.DocumentNavigation.NavigateForward();                      return true;                    case BindableCommand.DocumentNavigateBackward:                      Scintilla.DocumentNavigation.NavigateBackward();                      return true;                    case BindableCommand.ToggleLineComment:                      Scintilla.Lexing.ToggleLineComment();                      return true;                    case BindableCommand.StreamComment:                      Scintilla.Lexing.StreamComment();                      return true;                    case BindableCommand.ShowSnippetList:                      Scintilla.Snippets.ShowSnippetList();                      return true;                    case BindableCommand.ShowSurroundWithList:                      Scintilla.Snippets.ShowSurroundWithList();                      return true;                    case BindableCommand.ShowGoTo:                      Scintilla.GoTo.ShowGoToDialog();                      break;              }
Missing Default,ScintillaNET,IncrementalSearcher,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\FindReplace\IncrementalSearcher.cs,txtFind_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Enter:                  case Keys.Down:                      findNext();                      e.Handled = true;                      break;                  case Keys.Up:                      findPrevious();                      e.Handled = true;                      break;                  case Keys.Escape:                      if(!_toolItem)                      Hide();                      break;              }
Missing Default,ScintillaNET,Indentation,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Indentation.cs,CheckSmartIndent,The following switch statement is missing a default case: switch (SmartIndentType)              {                  case SmartIndent.None:                      return;                  case SmartIndent.Simple:                      if (ch == newline)                      {                          Line curLine = Scintilla.Lines.Current;                          curLine.Indentation = curLine.Previous.Indentation;                          Scintilla.CurrentPos = curLine.IndentPosition;                      }                      break;                  case SmartIndent.CPP:                  case SmartIndent.CPP2:                      if (ch == newline)                      {                          Line curLine = Scintilla.Lines.Current;                          Line tempLine = curLine;                          int previousIndent;                          string tempText;                            do                          {                              tempLine = tempLine.Previous;                              previousIndent = tempLine.Indentation;                              tempText = tempLine.Text.Trim();                              if (tempText.Length == 0) previousIndent = -1;                          }                          while ((tempLine.Number > 1) && (previousIndent < 0));                            if (tempText.EndsWith("{"))                          {                              int bracePos = Scintilla.CurrentPos - 1;                              while (bracePos > 0 && Scintilla.CharAt(bracePos) != '{') bracePos--;                              if (bracePos > 0 && Scintilla.Styles.GetStyleAt(bracePos) == 10)                                  previousIndent += TabWidth;                          }                          curLine.Indentation = previousIndent;                          Scintilla.CurrentPos =  curLine.IndentPosition;                      }                      else if (ch == '}')                      {                          int position = Scintilla.CurrentPos;                          Line curLine = Scintilla.Lines.Current;                          int previousIndent = curLine.Previous.Indentation;                          int match = Scintilla.SafeBraceMatch(position - 1);                          if (match != -1)                          {                              previousIndent = Scintilla.Lines.FromPosition(match).Indentation;                              curLine.Indentation =  previousIndent;                          }                      }                      break;              }
Missing Default,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,IsInputKey,The following switch statement is missing a default case: switch (keyData)              {                  case Keys.Tab:                      return _state[_acceptsTabState];                  case Keys.Enter:                      return _state[_acceptsReturnState];                  case Keys.Up:                  case Keys.Down:                  case Keys.Left:                  case Keys.Right:                  case Keys.F:                        return true;              }
Missing Default,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,OnDoubleClick,The following switch statement is missing a default case: switch (character)                  {                      case '{':                      case '(':                      case '[':                          if (!this.PositionIsOnComment(position))                          {                              bracePosStart = position;                              bracePosEnd = _ns.BraceMatch(position' 0) + 1;                              _selection.Start = bracePosStart;                              _selection.End = bracePosEnd;                          }                          break;                  }
Missing Default,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,SafeBraceMatch,The following switch statement is missing a default case: switch (match)              {                  case '{':                      toMatch = '}';                      goto down;                  case '(':                      toMatch = ')';                      goto down;                  case '[':                      toMatch = ']';                      goto down;                  case '}':                      toMatch = '{';                      goto up;                  case ')':                      toMatch = '(';                      goto up;                  case ']':                      toMatch = '[';                      goto up;              }
Missing Default,ScintillaNET,Scintilla,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Scintilla.INativeScintilla.cs,WmReflectNotify,The following switch statement is missing a default case: switch (scnOld.nmhdr.code)              {                  case Constants.SCN_AUTOCSELECTION:                      FireAutoCSelection(nsea);                      break;                    case Constants.SCN_CALLTIPCLICK:                      FireCallTipClick(nsea);                      break;                    case Constants.SCN_CHARADDED:                      FireCharAdded(nsea);                      break;                    case Constants.SCN_DOUBLECLICK:                      FireDoubleClick(nsea);                      break;                    case Constants.SCN_DWELLEND:                      FireDwellEnd(nsea);                      break;                    case Constants.SCN_DWELLSTART:                      FireDwellStart(nsea);                      break;                    case NativeMethods.SCN_HOTSPOTCLICK:                      OnHotspotClick(new HotspotClickEventArgs(scn.position));                      break;                    case NativeMethods.SCN_HOTSPOTDOUBLECLICK:                      OnHotspotDoubleClick(new HotspotClickEventArgs(scn.position));                      break;                    case NativeMethods.SCN_HOTSPOTRELEASECLICK:                      OnHotspotReleaseClick(new HotspotClickEventArgs(scn.position));                      break;                    case Constants.SCN_INDICATORCLICK:                      FireIndicatorClick(nsea);                      break;                    case Constants.SCN_INDICATORRELEASE:                      FireIndicatorRelease(nsea);                      break;                    case Constants.SCN_KEY:                      FireKey(nsea);                      break;                    case Constants.SCN_MACRORECORD:                      FireMacroRecord(nsea);                      break;                    case Constants.SCN_MARGINCLICK:                      FireMarginClick(nsea);                      break;                    case Constants.SCN_MODIFIED:                      ScnModified(ref scn);                      FireModified(nsea);                      break;                    case Constants.SCN_MODIFYATTEMPTRO:                      FireModifyAttemptRO(nsea);                      break;                    case Constants.SCN_NEEDSHOWN:                      FireNeedShown(nsea);                      break;                    case Constants.SCN_PAINTED:                      FirePainted(nsea);                      break;                    case Constants.SCN_SAVEPOINTLEFT:                      FireSavePointLeft(nsea);                      break;                    case Constants.SCN_SAVEPOINTREACHED:                      FireSavePointReached(nsea);                      break;                    case Constants.SCN_STYLENEEDED:                      FireStyleNeeded(nsea);                      break;                    case Constants.SCN_UPDATEUI:                      FireUpdateUI(nsea);                      break;                    case Constants.SCN_URIDROPPED:                      FireUriDropped(nsea);                      break;                    case Constants.SCN_USERLISTSELECTION:                      FireUserListSelection(nsea);                      break;                    case Constants.SCN_ZOOM:                      FireZoom(nsea);                      break;              }
Missing Default,ScintillaNET,SnippetChooser,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Snippets\SnippetChooser.cs,txtSnippet_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Right:                      txtSnippet.Caret.Goto(txtSnippet.Caret.Position + 1);                      break;                  case Keys.Left:                      txtSnippet.Caret.Goto(txtSnippet.Caret.Position - 1);                      break;                  case Keys.Enter:                  case Keys.Tab:                      if (txtSnippet.AutoComplete.SelectedIndex >= 0)                          txtSnippet.AutoComplete.Accept();                      break;                  case Keys.Escape:                      Hide();                      break;              }
Missing Default,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,GetKeys,The following switch statement is missing a default case: switch (c)              {                  case '/':                      return Keys.Oem2;                  case '`':                      return Keys.Oem3;                  case '[':                      return Keys.Oem4;                  case '\\':                      return Keys.Oem5;                  case ']':                      return Keys.Oem6;                  case '-':                      return (Keys)189;                }
Missing Default,ScintillaNET,Utilities,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Utilities.cs,GetKeys,The following switch statement is missing a default case: switch (s)              {                  case "/":                      return Keys.Oem2;                  case "`":                      return Keys.Oem3;                  case "[":                      return Keys.Oem4;                  case "\\":                      return Keys.Oem5;                  case "]":                      return Keys.Oem6;                  case "-":                      return (Keys)189;              }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,getBool,The following switch statement is missing a default case: switch (s)              {                  case "true":                  case "t":                  case "1":                  case "y":                  case "yes":                      return true;                  case "false":                  case "f":                  case "0":                  case "n":                  case "no":                      return false;              }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,getStyleConfigFromElement,The following switch statement is missing a default case: switch (attrName)                      {                          case "name":                              sc.Name = reader.Value;                              break;                          case "number":                              sc.Number = getInt(reader.Value);                              break;                          case "backcolor":                              sc.BackColor = getColor(reader.Value);                              break;                          case "bold":                              sc.Bold = getBool(reader.Value);                              break;                          case "case":                              sc.Case = (StyleCase)Enum.Parse(typeof(StyleCase)' reader.Value' true);                              break;                          case "characterset":                              sc.CharacterSet = (CharacterSet)Enum.Parse(typeof(CharacterSet)' reader.Value' true);                              break;                          case "fontname":                              sc.FontName = reader.Value;                              break;                          case "forecolor":                              sc.ForeColor = getColor(reader.Value);                              break;                          case "ischangeable":                              sc.IsChangeable = getBool(reader.Value);                              break;                          case "ishotspot":                              sc.IsHotspot = getBool(reader.Value);                              break;                          case "isselectioneolfilled":                              sc.IsSelectionEolFilled = getBool(reader.Value);                              break;                          case "isvisible":                              sc.IsVisible = getBool(reader.Value);                              break;                          case "italic":                              sc.Italic = getBool(reader.Value);                              break;                          case "size":                              sc.Size = getInt(reader.Value);                              break;                          case "underline":                              sc.Underline = getBool(reader.Value);                              break;                          case "inherit":                              sc.Inherit = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadAutoComplete,The following switch statement is missing a default case: switch (attrName)                      {                          case "autohide":                              _autoComplete_AutoHide = getBool(reader.Value);                              break;                          case "automaticlengthentered":                              _autoComplete_AutomaticLengthEntered = getBool(reader.Value);                              break;                          case "cancelatstart":                              _autoComplete_cancelAtStart = getBool(reader.Value);                              break;                          case "droprestofword":                              _autoComplete_DropRestOfWord = getBool(reader.Value);                              break;                          case "fillupcharacters":                              _autoComplete_fillUpCharacters = reader.Value;                              break;                          case "imageseperator":                              _autoComplete_ImageSeperator = getChar(reader.Value);                              break;                          case "iscasesensitive":                              _autoComplete_IsCaseSensitive= getBool(reader.Value);                              break;                          case "listseperator":                              _autoComplete_ListSeperator = getChar(reader.Value);                              break;                          case "maxheight":                              _autoComplete_MaxHeight = getInt(reader.Value);                              break;                          case "maxwidth":                              _autoComplete_MaxWidth = getInt(reader.Value);                              break;                          case "singlelineaccept":                              _autoComplete_singleLineAccept = getBool(reader.Value);                              break;                          case "stopcharacters":                              _autoComplete_StopCharacters = reader.Value;                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadCallTip,The following switch statement is missing a default case: switch (attrName)                      {                          case "backcolor":                              _callTip_BackColor = getColor(reader.Value);                              break;                          case "forecolor":                              _callTip_ForeColor = getColor(reader.Value);                              break;                          case "highlighttextcolor":                              _callTip_HighlightTextColor = getColor(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadCaret,The following switch statement is missing a default case: switch (attrName)                      {                          case "blinkrate":                              //	This guy is a bit of an oddball becuase null means "I don't Care"                              //	and we need some way of using the OS value.                              string blinkRate = reader.Value;                              if (blinkRate.ToLower() == "system")                                  _caret_BlinkRate = SystemInformation.CaretBlinkTime;                              else                                  _caret_BlinkRate = getInt(blinkRate);                              break;                          case "color":                              _caret_Color = getColor(reader.Value);                              break;                          case "currentlinebackgroundalpha":                              _caret_CurrentLineBackgroundAlpha = getInt(reader.Value);                              break;                          case "currentlinebackgroundcolor":                              _caret_CurrentLineBackgroundColor = getColor(reader.Value);                              break;                          case "highlightcurrentline":                              _caret_HighlightCurrentLine = getBool(reader.Value);                              break;                          case "issticky":                              _caret_IsSticky = getBool(reader.Value);                              break;                          case "style":                              _caret_Style = (CaretStyle)Enum.Parse(typeof(CaretStyle)' reader.Value' true);                              break;                          case "width":                              _caret_Width = getInt(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadClipboard,The following switch statement is missing a default case: switch (attrName)                      {                          case "convertlinebreaksonpaste":                              _clipboard_ConvertLineBreaksOnPaste = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadCommands,The following switch statement is missing a default case: switch (attrName)                      {                          case "Inherit":                              _commands_KeyBindingList.Inherit = getBool(reader.Value);                              break;                          case "AllowDuplicateBindings":                              _commands_KeyBindingList.AllowDuplicateBindings = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadCommands,The following switch statement is missing a default case: switch (attrName)                                  {                                      case "key":                                          kb.KeyCode = Utilities.GetKeys(reader.Value);                                          break;                                      case "modifier":                                          if (reader.Value != string.Empty)                                          {                                              foreach (string modifier in reader.Value.Split(' '))                                                  kb.Modifiers |= (Keys)Enum.Parse(typeof(Keys)' modifier.Trim()' true);                                          }                                          break;                                      case "command":                                          cmd = (BindableCommand)Enum.Parse(typeof(BindableCommand)' reader.Value' true);                                          break;                                      case "replacecurrent":                                          replaceCurrent = getBool(reader.Value);                                          break;                                  }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadEndOfLine,The following switch statement is missing a default case: switch (attrName)                      {                          case "isvisible":                              _endOfLine_IsVisisble = getBool(reader.Value);                              break;                          case "mode":                              _endOfLine_Mode = (EndOfLineMode)Enum.Parse(typeof(EndOfLineMode)' reader.Value' true);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadFolding,The following switch statement is missing a default case: switch (attrName)                      {                          case "flags":                              string flags = reader.Value.Trim();                              if (flags != string.Empty)                              {                                  FoldFlag? ff = null;                                  foreach (string flag in flags.Split(' '))                                      ff |= (FoldFlag)Enum.Parse(typeof(FoldFlag)' flag.Trim()' true);                                    if (ff.HasValue)                                      _folding_Flags = ff;                              }                              break;                          case "IsEnabled":                              _folding_MarkerScheme = (FoldMarkerScheme)Enum.Parse(typeof(FoldMarkerScheme)' reader.Value' true);                              break;                          case "usecompactfolding":                              _folding_UseCompactFolding = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadHotspot,The following switch statement is missing a default case: switch (attrName)                      {                          case "activebackcolor":                              _hotspot_ActiveBackColor = getColor(reader.Value);                              break;                          case "activeforecolor":                              _hotspot_ActiveForeColor = getColor(reader.Value);                              break;                          case "activeunderline":                              _hotspot_ActiveUnderline = getBool(reader.Value);                              break;                          case "singleline":                              _hotspot_SingleLine = getBool(reader.Value);                              break;                          case "useactivebackcolor":                              _hotspot_UseActiveBackColor = getBool(reader.Value);                              break;                          case "useactiveforecolor":                              _hotspot_UseActiveForeColor = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadIndentation,The following switch statement is missing a default case: switch (attrName)                      {                          case "backspaceunindents":                              _indentation_BackspaceUnindents = getBool(reader.Value);                              break;                          case "indentwidth":                              _indentation_IndentWidth = getInt(reader.Value);                              break;                          case "showguides":                              _indentation_ShowGuides = getBool(reader.Value);                              break;                          case "tabindents":                              _indentation_TabIndents = getBool(reader.Value);                              break;                          case "tabwidth":                              _indentation_TabWidth = getInt(reader.Value);                              break;                          case "usetabs":                              _indentation_UseTabs = getBool(reader.Value);                              break;                          case "smartindenttype":                              _indentation_SmartIndentType = (SmartIndent)Enum.Parse(typeof(SmartIndent)' reader.Value' true);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadIndicators,The following switch statement is missing a default case: switch (attrName)                      {                          case "inherit":                              _indicator_List.Inherit = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadIndicators,The following switch statement is missing a default case: switch (attrName)                                  {                                      case "number":                                          ic.Number = int.Parse(reader.Value);                                          break;                                      case "color":                                          ic.Color = getColor(reader.Value);                                          break;                                      case "inherit":                                          ic.Inherit = getBool(reader.Value);                                          break;                                      case "isdrawnunder":                                          ic.IsDrawnUnder = getBool(reader.Value);                                          break;                                      case "style":                                          ic.Style = (IndicatorStyle)Enum.Parse(typeof(IndicatorStyle)' reader.Value' true);                                          break;                                  }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLexer,The following switch statement is missing a default case: switch (attrName)                      {                          case "whitespacechars":                              _lexing_WhitespaceChars = reader.Value;                              break;                          case "wordchars":                              _lexing_WordChars = reader.Value;                              break;                          case "lexername":                              _lexing_Language = reader.Value;                              break;                          case "linecommentprefix":                              _lexing_LineCommentPrefix = reader.Value;                              break;                          case "streamcommentprefix":                              _lexing_StreamCommentPrefix = reader.Value;                              break;                          case "streamcommentsuffix":                              _lexing_StreamCommentSuffix = reader.Value;                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLexerKeywords,The following switch statement is missing a default case: switch (attrName)                      {                          case "inherit":                              inherit = getBool(reader.Value);                              break;                          case "list":                              list = getInt(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLexerProperties,The following switch statement is missing a default case: switch (attrName)                                  {                                      case "name":                                          name = reader.Value;                                          break;                                      case "value":                                          value = reader.Value;                                          break;                                  }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLineWrapping,The following switch statement is missing a default case: switch (attrName)                      {                          case "mode":                              _lineWrapping_Mode = (LineWrappingMode)Enum.Parse(typeof(LineWrappingMode)' reader.Value' true);                              break;                          case "indentsize":                              _lineWrapping_IndentSize = getInt(reader.Value);                              break;                          case "indentmode":                              _lineWrapping_IndentMode = (LineWrappingIndentMode)Enum.Parse(typeof(LineWrappingIndentMode)' reader.Value' true);                              break;                          case "visualflags":                              string flags = reader.Value.Trim();                              if (flags != string.Empty)                              {                                  LineWrappingVisualFlags? wvf = null;                                  foreach (string flag in flags.Split(' '))                                      wvf |= (LineWrappingVisualFlags)Enum.Parse(typeof(LineWrappingVisualFlags)' flag.Trim()' true);                                    if (wvf.HasValue)                                      _lineWrapping_VisualFlags = wvf;                              }                              break;                          case "visualflagslocations":                              _lineWrapping_VisualFlagsLocations = (LineWrappingVisualFlagsLocations)Enum.Parse(typeof(LineWrappingVisualFlagsLocations)' reader.Value' true);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadLongLines,The following switch statement is missing a default case: switch (attrName)                      {                          case "edgecolor":                              _longLines_EdgeColor = getColor(reader.Value);                              break;                          case "edgecolumn":                              _longLines_EdgeColumn = getInt(reader.Value);                              break;                          case "edgemode":                              _longLines_EdgeMode = (EdgeMode)Enum.Parse(typeof(EdgeMode)' reader.Value' true);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadMargins,The following switch statement is missing a default case: switch (attrName)                      {                          case "foldmargincolor":                              _margin_List.FoldMarginColor = getColor(reader.Value);                              break;                          case "foldmarginhighlightcolor":                              _margin_List.FoldMarginHighlightColor = getColor(reader.Value);                              break;                          case "left":                              _margin_List.Left = getInt(reader.Value);                              break;                          case "right":                              _margin_List.Right = getInt(reader.Value);                              break;                          case "inherit":                              _margin_List.Inherit = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadMargins,The following switch statement is missing a default case: switch (attrName)                                  {                                      case "number":                                          mc.Number = int.Parse(reader.Value);                                          break;                                      case "inherit":                                          mc.Inherit = getBool(reader.Value);                                          break;                                      case "autotogglemarkernumber":                                          mc.AutoToggleMarkerNumber = getInt(reader.Value);                                          break;                                      case "isclickable":                                          mc.IsClickable = getBool(reader.Value);                                          break;                                      case "isfoldmargin":                                          mc.IsFoldMargin = getBool(reader.Value);                                          break;                                      case "ismarkermargin":                                          mc.IsMarkerMargin = getBool(reader.Value);                                          break;                                      case "type":                                          mc.Type = (MarginType)Enum.Parse(typeof(MarginType)' reader.Value' true);                                          break;                                      case "width":                                          mc.Width = getInt(reader.Value);                                          break;                                  }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadMarkers,The following switch statement is missing a default case: switch (attrName)                                  {                                      case "alpha":                                          mc.Alpha = getInt(reader.Value);                                          break;                                      case "backcolor":                                          mc.BackColor = getColor(reader.Value);                                          break;                                      case "forecolor":                                          mc.ForeColor = getColor(reader.Value);                                          break;                                      case "name":                                          mc.Name = reader.Value;                                          break;                                      case "number":                                          mc.Number = getInt(reader.Value);                                          break;                                      case "inherit":                                          mc.Inherit = getBool(reader.Value);                                          break;                                      case "symbol":                                          mc.Symbol = (MarkerSymbol)Enum.Parse(typeof(MarkerSymbol)' reader.Value' true);                                          break;                                  }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadScrolling,The following switch statement is missing a default case: switch (attrName)                      {                          case "endatlastline":                              _scrolling_EndAtLastLine = getBool(reader.Value);                              break;                          case "horizontalwidth":                              _scrolling_HorizontalWidth = getInt(reader.Value);                              break;                          case "scrollbars":                              string flags = reader.Value.Trim();                              if (flags != string.Empty)                              {                                  ScrollBars? sb = null;                                  foreach (string flag in flags.Split(' '))                                      sb |= (ScrollBars)Enum.Parse(typeof(ScrollBars)' flag.Trim()' true);                                    if (sb.HasValue)                                      _scrolling_ScrollBars = sb;                              }                              break;                          case "xoffset":                              _scrolling_XOffset = getInt(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSelection,The following switch statement is missing a default case: switch (attrName)                      {                          case "backcolor":                              _selection_BackColor = getColor(reader.Value);                              break;                          case "backcolorunfocused":                              _selection_BackColorUnfocused = getColor(reader.Value);                              break;                          case "forecolor":                              _selection_ForeColor = getColor(reader.Value);                              break;                          case "forecolorunfocused":                              _selection_ForeColorUnfocused = getColor(reader.Value);                              break;                          case "hidden":                              _selection_Hidden = getBool(reader.Value);                              break;                          case "hideselection":                              _selection_HideSelection = getBool(reader.Value);                              break;                          case "mode":                              _selection_Mode = (SelectionMode)Enum.Parse(typeof(SelectionMode)' reader.Value' true);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSnippets,The following switch statement is missing a default case: switch (attrName)                      {                          case "activesnippetcolor":                              _snippetsConfigList.ActiveSnippetColor = getColor(reader.Value);                              break;                          case "activesnippetindicator":                              _snippetsConfigList.ActiveSnippetIndicator = getInt(reader.Value);                              break;                          case "inactivesnippetcolor":                              _snippetsConfigList.InactiveSnippetColor = getColor(reader.Value);                              break;                          case "inactivesnippetindicator":                              _snippetsConfigList.InactiveSnippetIndicator = getInt(reader.Value);                              break;                          case "activesnippetindicatorstyle":                              _snippetsConfigList.ActiveSnippetIndicatorStyle = (IndicatorStyle)Enum.Parse(typeof(IndicatorStyle)' reader.Value' true);                              break;                          case "inactivesnippetindicatorstyle":                              _snippetsConfigList.InactiveSnippetIndicatorStyle = (IndicatorStyle)Enum.Parse(typeof(IndicatorStyle)' reader.Value' true);                              break;                          case "defaultdelimeter":                              _snippetsConfigList.DefaultDelimeter = getChar(reader.Value);                              break;                          case "isenabled":                              _snippetsConfigList.IsEnabled = getBool(reader.Value);                              break;                          case "isonekeyselectionembedenabled":                              _snippetsConfigList.IsOneKeySelectionEmbedEnabled = getBool(reader.Value);                              break;                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadSnippets,The following switch statement is missing a default case: switch (attrName)                                      {                                            case "shortcut":                                              sc.Shortcut = reader.Value;                                              break;                                          case "delimeter":                                              sc.Delimeter = getChar(reader.Value);                                              break;                                          case "issurroundswith":                                              sc.IsSurroundsWith = getBool(reader.Value);                                              break;                                      }
Missing Default,ScintillaNET.Configuration,Configuration,C:\repos\nccgroup_ncccodenavi\Win.CodeNavi\3rd-Party\ScintillaNET v2.5.2 Source\ScintillaNET\Configuration\Configuration.cs,ReadWhitespace,The following switch statement is missing a default case: switch (attrName)                      {                          case "backcolor":                              _whitespace_BackColor = getColor(reader.Value);                              break;                          case "forecolor":                              _whitespace_ForeColor = getColor(reader.Value);                              break;                          case "mode":                              _whitespace_Mode = (WhitespaceMode)Enum.Parse(typeof(WhitespaceMode)' reader.Value' true);                              break;                      }
