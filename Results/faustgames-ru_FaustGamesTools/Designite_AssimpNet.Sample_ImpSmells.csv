Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,Cyclomatic complexity of the method is 22
Complex Method,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,ApplyMaterial,Cyclomatic complexity of the method is 9
Long Statement,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,LoadTexture,The length of the statement  "	BitmapData TextureData = textureBitmap.LockBits (new System.Drawing.Rectangle (0' 0' textureBitmap.Width' textureBitmap.Height)' System.Drawing.Imaging.ImageLockMode.ReadOnly' System.Drawing.Imaging.PixelFormat.Format24bppRgb); " is 227.
Long Statement,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,LoadTexture,The length of the statement  "	GL.TexImage2D (TextureTarget.Texture2D' 0' PixelInternalFormat.Rgb' textureBitmap.Width' textureBitmap.Height' 0' OpenTK.Graphics.OpenGL.PixelFormat.Bgr' PixelType.UnsignedByte' TextureData.Scan0); " is 197.
Magic Number,Assimp.Sample,Program,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\Program.cs,Main,The following statement contains a magic number: sample.Run (30.0' 0.0);  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,OnUpdateFrame,The following statement contains a magic number: if (m_angle > 360) {  	m_angle = 0.0f;  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,OnRenderFrame,The following statement contains a magic number: GL.Scale (tmp * 2' tmp * 2' tmp * 2);  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,OnRenderFrame,The following statement contains a magic number: GL.Scale (tmp * 2' tmp * 2' tmp * 2);  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,OnRenderFrame,The following statement contains a magic number: GL.Scale (tmp * 2' tmp * 2' tmp * 2);  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: if (node.HasMeshes) {  	foreach (int index in node.MeshIndices) {  		Mesh mesh = scene.Meshes [index];  		ApplyMaterial (scene.Materials [mesh.MaterialIndex]);  		if (mesh.HasNormals) {  			GL.Enable (EnableCap.Lighting);  		}  		else {  			GL.Disable (EnableCap.Lighting);  		}  		bool hasColors = mesh.HasVertexColors (0);  		if (hasColors) {  			GL.Enable (EnableCap.ColorMaterial);  		}  		else {  			GL.Disable (EnableCap.ColorMaterial);  		}  		bool hasTexCoords = mesh.HasTextureCoords (0);  		foreach (Face face in mesh.Faces) {  			BeginMode faceMode;  			switch (face.IndexCount) {  			case 1:  				faceMode = BeginMode.Points;  				break;  			case 2:  				faceMode = BeginMode.Lines;  				break;  			case 3:  				faceMode = BeginMode.Triangles;  				break;  			default:  				faceMode = BeginMode.Polygon;  				break;  			}  			GL.Begin (faceMode);  			for (int i = 0; i < face.IndexCount; i++) {  				int indice = face.Indices [i];  				if (hasColors) {  					Color4 vertColor = FromColor (mesh.VertexColorChannels [0] [indice]);  				}  				if (mesh.HasNormals) {  					Vector3 normal = FromVector (mesh.Normals [indice]);  					GL.Normal3 (normal);  				}  				if (hasTexCoords) {  					Vector3 uvw = FromVector (mesh.TextureCoordinateChannels [0] [indice]);  					GL.TexCoord2 (uvw.X' 1 - uvw.Y);  				}  				var color = FromColor (mesh.VertexColorChannels [0] [indice]);  				Vector3 pos = FromVector (mesh.Vertices [indice]);  				GL.Color4 (color);  				GL.Vertex3 (pos);  			}  			GL.End ();  		}  	}  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: if (node.HasMeshes) {  	foreach (int index in node.MeshIndices) {  		Mesh mesh = scene.Meshes [index];  		ApplyMaterial (scene.Materials [mesh.MaterialIndex]);  		if (mesh.HasNormals) {  			GL.Enable (EnableCap.Lighting);  		}  		else {  			GL.Disable (EnableCap.Lighting);  		}  		bool hasColors = mesh.HasVertexColors (0);  		if (hasColors) {  			GL.Enable (EnableCap.ColorMaterial);  		}  		else {  			GL.Disable (EnableCap.ColorMaterial);  		}  		bool hasTexCoords = mesh.HasTextureCoords (0);  		foreach (Face face in mesh.Faces) {  			BeginMode faceMode;  			switch (face.IndexCount) {  			case 1:  				faceMode = BeginMode.Points;  				break;  			case 2:  				faceMode = BeginMode.Lines;  				break;  			case 3:  				faceMode = BeginMode.Triangles;  				break;  			default:  				faceMode = BeginMode.Polygon;  				break;  			}  			GL.Begin (faceMode);  			for (int i = 0; i < face.IndexCount; i++) {  				int indice = face.Indices [i];  				if (hasColors) {  					Color4 vertColor = FromColor (mesh.VertexColorChannels [0] [indice]);  				}  				if (mesh.HasNormals) {  					Vector3 normal = FromVector (mesh.Normals [indice]);  					GL.Normal3 (normal);  				}  				if (hasTexCoords) {  					Vector3 uvw = FromVector (mesh.TextureCoordinateChannels [0] [indice]);  					GL.TexCoord2 (uvw.X' 1 - uvw.Y);  				}  				var color = FromColor (mesh.VertexColorChannels [0] [indice]);  				Vector3 pos = FromVector (mesh.Vertices [indice]);  				GL.Color4 (color);  				GL.Vertex3 (pos);  			}  			GL.End ();  		}  	}  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: foreach (int index in node.MeshIndices) {  	Mesh mesh = scene.Meshes [index];  	ApplyMaterial (scene.Materials [mesh.MaterialIndex]);  	if (mesh.HasNormals) {  		GL.Enable (EnableCap.Lighting);  	}  	else {  		GL.Disable (EnableCap.Lighting);  	}  	bool hasColors = mesh.HasVertexColors (0);  	if (hasColors) {  		GL.Enable (EnableCap.ColorMaterial);  	}  	else {  		GL.Disable (EnableCap.ColorMaterial);  	}  	bool hasTexCoords = mesh.HasTextureCoords (0);  	foreach (Face face in mesh.Faces) {  		BeginMode faceMode;  		switch (face.IndexCount) {  		case 1:  			faceMode = BeginMode.Points;  			break;  		case 2:  			faceMode = BeginMode.Lines;  			break;  		case 3:  			faceMode = BeginMode.Triangles;  			break;  		default:  			faceMode = BeginMode.Polygon;  			break;  		}  		GL.Begin (faceMode);  		for (int i = 0; i < face.IndexCount; i++) {  			int indice = face.Indices [i];  			if (hasColors) {  				Color4 vertColor = FromColor (mesh.VertexColorChannels [0] [indice]);  			}  			if (mesh.HasNormals) {  				Vector3 normal = FromVector (mesh.Normals [indice]);  				GL.Normal3 (normal);  			}  			if (hasTexCoords) {  				Vector3 uvw = FromVector (mesh.TextureCoordinateChannels [0] [indice]);  				GL.TexCoord2 (uvw.X' 1 - uvw.Y);  			}  			var color = FromColor (mesh.VertexColorChannels [0] [indice]);  			Vector3 pos = FromVector (mesh.Vertices [indice]);  			GL.Color4 (color);  			GL.Vertex3 (pos);  		}  		GL.End ();  	}  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: foreach (int index in node.MeshIndices) {  	Mesh mesh = scene.Meshes [index];  	ApplyMaterial (scene.Materials [mesh.MaterialIndex]);  	if (mesh.HasNormals) {  		GL.Enable (EnableCap.Lighting);  	}  	else {  		GL.Disable (EnableCap.Lighting);  	}  	bool hasColors = mesh.HasVertexColors (0);  	if (hasColors) {  		GL.Enable (EnableCap.ColorMaterial);  	}  	else {  		GL.Disable (EnableCap.ColorMaterial);  	}  	bool hasTexCoords = mesh.HasTextureCoords (0);  	foreach (Face face in mesh.Faces) {  		BeginMode faceMode;  		switch (face.IndexCount) {  		case 1:  			faceMode = BeginMode.Points;  			break;  		case 2:  			faceMode = BeginMode.Lines;  			break;  		case 3:  			faceMode = BeginMode.Triangles;  			break;  		default:  			faceMode = BeginMode.Polygon;  			break;  		}  		GL.Begin (faceMode);  		for (int i = 0; i < face.IndexCount; i++) {  			int indice = face.Indices [i];  			if (hasColors) {  				Color4 vertColor = FromColor (mesh.VertexColorChannels [0] [indice]);  			}  			if (mesh.HasNormals) {  				Vector3 normal = FromVector (mesh.Normals [indice]);  				GL.Normal3 (normal);  			}  			if (hasTexCoords) {  				Vector3 uvw = FromVector (mesh.TextureCoordinateChannels [0] [indice]);  				GL.TexCoord2 (uvw.X' 1 - uvw.Y);  			}  			var color = FromColor (mesh.VertexColorChannels [0] [indice]);  			Vector3 pos = FromVector (mesh.Vertices [indice]);  			GL.Color4 (color);  			GL.Vertex3 (pos);  		}  		GL.End ();  	}  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: foreach (Face face in mesh.Faces) {  	BeginMode faceMode;  	switch (face.IndexCount) {  	case 1:  		faceMode = BeginMode.Points;  		break;  	case 2:  		faceMode = BeginMode.Lines;  		break;  	case 3:  		faceMode = BeginMode.Triangles;  		break;  	default:  		faceMode = BeginMode.Polygon;  		break;  	}  	GL.Begin (faceMode);  	for (int i = 0; i < face.IndexCount; i++) {  		int indice = face.Indices [i];  		if (hasColors) {  			Color4 vertColor = FromColor (mesh.VertexColorChannels [0] [indice]);  		}  		if (mesh.HasNormals) {  			Vector3 normal = FromVector (mesh.Normals [indice]);  			GL.Normal3 (normal);  		}  		if (hasTexCoords) {  			Vector3 uvw = FromVector (mesh.TextureCoordinateChannels [0] [indice]);  			GL.TexCoord2 (uvw.X' 1 - uvw.Y);  		}  		var color = FromColor (mesh.VertexColorChannels [0] [indice]);  		Vector3 pos = FromVector (mesh.Vertices [indice]);  		GL.Color4 (color);  		GL.Vertex3 (pos);  	}  	GL.End ();  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: foreach (Face face in mesh.Faces) {  	BeginMode faceMode;  	switch (face.IndexCount) {  	case 1:  		faceMode = BeginMode.Points;  		break;  	case 2:  		faceMode = BeginMode.Lines;  		break;  	case 3:  		faceMode = BeginMode.Triangles;  		break;  	default:  		faceMode = BeginMode.Polygon;  		break;  	}  	GL.Begin (faceMode);  	for (int i = 0; i < face.IndexCount; i++) {  		int indice = face.Indices [i];  		if (hasColors) {  			Color4 vertColor = FromColor (mesh.VertexColorChannels [0] [indice]);  		}  		if (mesh.HasNormals) {  			Vector3 normal = FromVector (mesh.Normals [indice]);  			GL.Normal3 (normal);  		}  		if (hasTexCoords) {  			Vector3 uvw = FromVector (mesh.TextureCoordinateChannels [0] [indice]);  			GL.TexCoord2 (uvw.X' 1 - uvw.Y);  		}  		var color = FromColor (mesh.VertexColorChannels [0] [indice]);  		Vector3 pos = FromVector (mesh.Vertices [indice]);  		GL.Color4 (color);  		GL.Vertex3 (pos);  	}  	GL.End ();  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: switch (face.IndexCount) {  case 1:  	faceMode = BeginMode.Points;  	break;  case 2:  	faceMode = BeginMode.Lines;  	break;  case 3:  	faceMode = BeginMode.Triangles;  	break;  default:  	faceMode = BeginMode.Polygon;  	break;  }  
Magic Number,Assimp.Sample,SimpleOpenGLSample,C:\repos\faustgames-ru_FaustGamesTools\ThirdParty\assimp-net\AssimpNet.Sample\SimpleOpenGLSample.cs,RecursiveRender,The following statement contains a magic number: switch (face.IndexCount) {  case 1:  	faceMode = BeginMode.Points;  	break;  case 2:  	faceMode = BeginMode.Lines;  	break;  case 3:  	faceMode = BeginMode.Triangles;  	break;  default:  	faceMode = BeginMode.Polygon;  	break;  }  
