Implementation smell,Namespace,Class,File,Method,Description
Long Method,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The method has 119 lines of code.
Complex Method,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,Cyclomatic complexity of the method is 8
Complex Method,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,Cyclomatic complexity of the method is 18
Complex Method,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,Generate,Cyclomatic complexity of the method is 36
Long Statement,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The length of the statement  "		var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 171.
Long Statement,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The length of the statement  "		var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 183.
Long Statement,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The length of the statement  "		var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 171.
Long Statement,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The length of the statement  "		var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 183.
Long Statement,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The length of the statement  "	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 171.
Long Statement,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The length of the statement  "	var targetBits = heightMap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 174.
Long Statement,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ExecuteCommand,The length of the statement  "		System.Diagnostics.ProcessStartInfo procStartInfo = new System.Diagnostics.ProcessStartInfo ("cmd"' "/c " + fileCmd + " " + parameters); " is 136.
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	if (width < sizeLimit) {  		var saveScan = (Color*)sourceBits.Scan0;  		for (y = 0; y < height; y++) {  			sourceRow = saveScan;  			for (x = 0; x < width; x++) {  				uint rgba = *((uint*)sourceRow);  				writer.Write (rgba);  				sourceRow++;  			}  			saveScan += height;  		}  	}  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveUncompressedRaw (mipmap' writer' sizeLimit);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	if (width < sizeLimit) {  		var saveScan = (Color*)sourceBits.Scan0;  		for (y = 0; y < height; y++) {  			sourceRow = saveScan;  			for (x = 0; x < width; x++) {  				uint rgba = *((uint*)sourceRow);  				writer.Write (rgba);  				sourceRow++;  			}  			saveScan += height;  		}  	}  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveUncompressedRaw (mipmap' writer' sizeLimit);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	if (width < sizeLimit) {  		var saveScan = (Color*)sourceBits.Scan0;  		for (y = 0; y < height; y++) {  			sourceRow = saveScan;  			for (x = 0; x < width; x++) {  				uint rgba = *((uint*)sourceRow);  				writer.Write (rgba);  				sourceRow++;  			}  			saveScan += height;  		}  	}  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveUncompressedRaw (mipmap' writer' sizeLimit);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	if (width < sizeLimit) {  		var saveScan = (Color*)sourceBits.Scan0;  		for (y = 0; y < height; y++) {  			sourceRow = saveScan;  			for (x = 0; x < width; x++) {  				uint rgba = *((uint*)sourceRow);  				writer.Write (rgba);  				sourceRow++;  			}  			saveScan += height;  		}  	}  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveUncompressedRaw (mipmap' writer' sizeLimit);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveUncompressedRaw,The following statement contains a magic number: result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveMipmap (mipmap' targetPath' fileName);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveMipmap (mipmap' targetPath' fileName);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveMipmap (mipmap' targetPath' fileName);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: using (var mipmap = new Bitmap (mipmapWidth' mipmapHeight' System.Drawing.Imaging.PixelFormat.Format32bppArgb)) {  	var sourceBits = bitmap.LockBits (new Rectangle (0' 0' width' height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var targetBits = mipmap.LockBits (new Rectangle (0' 0' mipmapWidth' mipmapHeight)' System.Drawing.Imaging.ImageLockMode.ReadWrite' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  	var sourceScan = (Color*)sourceBits.Scan0;  	var targetScan = (Color*)targetBits.Scan0;  	int x' y;  	Color* sourceRow;  	Color* sourceRow1;  	Color result;  	Color source1;  	Color source2;  	Color source3;  	Color source4;  	for (y = 0; y < mipmapHeight; y++) {  		sourceRow = sourceScan;  		sourceRow1 = sourceRow + width;  		for (x = 0; x < mipmapWidth; x++) {  			source1 = (*sourceRow);  			source2 = (*sourceRow1);  			sourceRow++;  			sourceRow1++;  			source3 = (*sourceRow);  			source4 = (*sourceRow);  			sourceRow++;  			sourceRow1++;  			result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  			result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  			result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  			result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  			(*targetScan) = result;  			targetScan++;  		}  		sourceScan = sourceRow1;  	}  	bitmap.UnlockBits (sourceBits);  	mipmap.UnlockBits (targetBits);  	SaveMipmap (mipmap' targetPath' fileName);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (y = 0; y < mipmapHeight; y++) {  	sourceRow = sourceScan;  	sourceRow1 = sourceRow + width;  	for (x = 0; x < mipmapWidth; x++) {  		source1 = (*sourceRow);  		source2 = (*sourceRow1);  		sourceRow++;  		sourceRow1++;  		source3 = (*sourceRow);  		source4 = (*sourceRow);  		sourceRow++;  		sourceRow1++;  		result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  		result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  		result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  		result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  		(*targetScan) = result;  		targetScan++;  	}  	sourceScan = sourceRow1;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: for (x = 0; x < mipmapWidth; x++) {  	source1 = (*sourceRow);  	source2 = (*sourceRow1);  	sourceRow++;  	sourceRow1++;  	source3 = (*sourceRow);  	source4 = (*sourceRow);  	sourceRow++;  	sourceRow1++;  	result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  	result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  	result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  	result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  	(*targetScan) = result;  	targetScan++;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: result.r = (byte)(((int)source1.r + (int)source2.r + (int)source3.r + (int)source4.r) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: result.g = (byte)(((int)source1.g + (int)source2.g + (int)source3.g + (int)source4.g) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: result.b = (byte)(((int)source1.b + (int)source2.b + (int)source3.b + (int)source4.b) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,SaveMipmap,The following statement contains a magic number: result.a = (byte)(((int)source1.a + (int)source2.a + (int)source3.a + (int)source4.a) >> 2);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (y = 0; y < height; y++) {  	for (x = 0; x < width; x++) {  		h = (*(sourceScan + y * width + x)).GetIntense ();  		if (x == 0) {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  		}  		else if (x == (width - 1)) {  			hxp = (*(sourceScan + y * width + 0)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		else {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		if (y == 0) {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  		}  		else if (y == (height - 1)) {  			hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		else {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		var resultX = (hxm - h) + (h - hxp);  		var resultY = (hym - h) + (h - hyp);  		var resultZ = 1.0;  		var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  		resultX /= l;  		resultY /= l;  		resultZ /= l;  		result.r = (byte)((resultX + 1) * 0.5 * 255);  		result.g = (byte)((resultY + 1) * 0.5 * 255);  		result.b = (byte)((resultZ + 1) * 0.5 * 255);  		result.a = 255;  		(*(targetScan + y * width + x)) = result;  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (y = 0; y < height; y++) {  	for (x = 0; x < width; x++) {  		h = (*(sourceScan + y * width + x)).GetIntense ();  		if (x == 0) {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  		}  		else if (x == (width - 1)) {  			hxp = (*(sourceScan + y * width + 0)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		else {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		if (y == 0) {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  		}  		else if (y == (height - 1)) {  			hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		else {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		var resultX = (hxm - h) + (h - hxp);  		var resultY = (hym - h) + (h - hyp);  		var resultZ = 1.0;  		var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  		resultX /= l;  		resultY /= l;  		resultZ /= l;  		result.r = (byte)((resultX + 1) * 0.5 * 255);  		result.g = (byte)((resultY + 1) * 0.5 * 255);  		result.b = (byte)((resultZ + 1) * 0.5 * 255);  		result.a = 255;  		(*(targetScan + y * width + x)) = result;  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (y = 0; y < height; y++) {  	for (x = 0; x < width; x++) {  		h = (*(sourceScan + y * width + x)).GetIntense ();  		if (x == 0) {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  		}  		else if (x == (width - 1)) {  			hxp = (*(sourceScan + y * width + 0)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		else {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		if (y == 0) {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  		}  		else if (y == (height - 1)) {  			hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		else {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		var resultX = (hxm - h) + (h - hxp);  		var resultY = (hym - h) + (h - hyp);  		var resultZ = 1.0;  		var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  		resultX /= l;  		resultY /= l;  		resultZ /= l;  		result.r = (byte)((resultX + 1) * 0.5 * 255);  		result.g = (byte)((resultY + 1) * 0.5 * 255);  		result.b = (byte)((resultZ + 1) * 0.5 * 255);  		result.a = 255;  		(*(targetScan + y * width + x)) = result;  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (y = 0; y < height; y++) {  	for (x = 0; x < width; x++) {  		h = (*(sourceScan + y * width + x)).GetIntense ();  		if (x == 0) {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  		}  		else if (x == (width - 1)) {  			hxp = (*(sourceScan + y * width + 0)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		else {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		if (y == 0) {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  		}  		else if (y == (height - 1)) {  			hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		else {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		var resultX = (hxm - h) + (h - hxp);  		var resultY = (hym - h) + (h - hyp);  		var resultZ = 1.0;  		var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  		resultX /= l;  		resultY /= l;  		resultZ /= l;  		result.r = (byte)((resultX + 1) * 0.5 * 255);  		result.g = (byte)((resultY + 1) * 0.5 * 255);  		result.b = (byte)((resultZ + 1) * 0.5 * 255);  		result.a = 255;  		(*(targetScan + y * width + x)) = result;  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (y = 0; y < height; y++) {  	for (x = 0; x < width; x++) {  		h = (*(sourceScan + y * width + x)).GetIntense ();  		if (x == 0) {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  		}  		else if (x == (width - 1)) {  			hxp = (*(sourceScan + y * width + 0)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		else {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		if (y == 0) {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  		}  		else if (y == (height - 1)) {  			hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		else {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		var resultX = (hxm - h) + (h - hxp);  		var resultY = (hym - h) + (h - hyp);  		var resultZ = 1.0;  		var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  		resultX /= l;  		resultY /= l;  		resultZ /= l;  		result.r = (byte)((resultX + 1) * 0.5 * 255);  		result.g = (byte)((resultY + 1) * 0.5 * 255);  		result.b = (byte)((resultZ + 1) * 0.5 * 255);  		result.a = 255;  		(*(targetScan + y * width + x)) = result;  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (y = 0; y < height; y++) {  	for (x = 0; x < width; x++) {  		h = (*(sourceScan + y * width + x)).GetIntense ();  		if (x == 0) {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  		}  		else if (x == (width - 1)) {  			hxp = (*(sourceScan + y * width + 0)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		else {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		if (y == 0) {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  		}  		else if (y == (height - 1)) {  			hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		else {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		var resultX = (hxm - h) + (h - hxp);  		var resultY = (hym - h) + (h - hyp);  		var resultZ = 1.0;  		var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  		resultX /= l;  		resultY /= l;  		resultZ /= l;  		result.r = (byte)((resultX + 1) * 0.5 * 255);  		result.g = (byte)((resultY + 1) * 0.5 * 255);  		result.b = (byte)((resultZ + 1) * 0.5 * 255);  		result.a = 255;  		(*(targetScan + y * width + x)) = result;  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (y = 0; y < height; y++) {  	for (x = 0; x < width; x++) {  		h = (*(sourceScan + y * width + x)).GetIntense ();  		if (x == 0) {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  		}  		else if (x == (width - 1)) {  			hxp = (*(sourceScan + y * width + 0)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		else {  			hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  			hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  		}  		if (y == 0) {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  		}  		else if (y == (height - 1)) {  			hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		else {  			hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  			hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  		}  		var resultX = (hxm - h) + (h - hxp);  		var resultY = (hym - h) + (h - hyp);  		var resultZ = 1.0;  		var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  		resultX /= l;  		resultY /= l;  		resultZ /= l;  		result.r = (byte)((resultX + 1) * 0.5 * 255);  		result.g = (byte)((resultY + 1) * 0.5 * 255);  		result.b = (byte)((resultZ + 1) * 0.5 * 255);  		result.a = 255;  		(*(targetScan + y * width + x)) = result;  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (x = 0; x < width; x++) {  	h = (*(sourceScan + y * width + x)).GetIntense ();  	if (x == 0) {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  	}  	else if (x == (width - 1)) {  		hxp = (*(sourceScan + y * width + 0)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	else {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	if (y == 0) {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  	}  	else if (y == (height - 1)) {  		hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	else {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	var resultX = (hxm - h) + (h - hxp);  	var resultY = (hym - h) + (h - hyp);  	var resultZ = 1.0;  	var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  	resultX /= l;  	resultY /= l;  	resultZ /= l;  	result.r = (byte)((resultX + 1) * 0.5 * 255);  	result.g = (byte)((resultY + 1) * 0.5 * 255);  	result.b = (byte)((resultZ + 1) * 0.5 * 255);  	result.a = 255;  	(*(targetScan + y * width + x)) = result;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (x = 0; x < width; x++) {  	h = (*(sourceScan + y * width + x)).GetIntense ();  	if (x == 0) {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  	}  	else if (x == (width - 1)) {  		hxp = (*(sourceScan + y * width + 0)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	else {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	if (y == 0) {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  	}  	else if (y == (height - 1)) {  		hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	else {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	var resultX = (hxm - h) + (h - hxp);  	var resultY = (hym - h) + (h - hyp);  	var resultZ = 1.0;  	var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  	resultX /= l;  	resultY /= l;  	resultZ /= l;  	result.r = (byte)((resultX + 1) * 0.5 * 255);  	result.g = (byte)((resultY + 1) * 0.5 * 255);  	result.b = (byte)((resultZ + 1) * 0.5 * 255);  	result.a = 255;  	(*(targetScan + y * width + x)) = result;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (x = 0; x < width; x++) {  	h = (*(sourceScan + y * width + x)).GetIntense ();  	if (x == 0) {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  	}  	else if (x == (width - 1)) {  		hxp = (*(sourceScan + y * width + 0)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	else {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	if (y == 0) {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  	}  	else if (y == (height - 1)) {  		hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	else {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	var resultX = (hxm - h) + (h - hxp);  	var resultY = (hym - h) + (h - hyp);  	var resultZ = 1.0;  	var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  	resultX /= l;  	resultY /= l;  	resultZ /= l;  	result.r = (byte)((resultX + 1) * 0.5 * 255);  	result.g = (byte)((resultY + 1) * 0.5 * 255);  	result.b = (byte)((resultZ + 1) * 0.5 * 255);  	result.a = 255;  	(*(targetScan + y * width + x)) = result;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (x = 0; x < width; x++) {  	h = (*(sourceScan + y * width + x)).GetIntense ();  	if (x == 0) {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  	}  	else if (x == (width - 1)) {  		hxp = (*(sourceScan + y * width + 0)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	else {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	if (y == 0) {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  	}  	else if (y == (height - 1)) {  		hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	else {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	var resultX = (hxm - h) + (h - hxp);  	var resultY = (hym - h) + (h - hyp);  	var resultZ = 1.0;  	var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  	resultX /= l;  	resultY /= l;  	resultZ /= l;  	result.r = (byte)((resultX + 1) * 0.5 * 255);  	result.g = (byte)((resultY + 1) * 0.5 * 255);  	result.b = (byte)((resultZ + 1) * 0.5 * 255);  	result.a = 255;  	(*(targetScan + y * width + x)) = result;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (x = 0; x < width; x++) {  	h = (*(sourceScan + y * width + x)).GetIntense ();  	if (x == 0) {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  	}  	else if (x == (width - 1)) {  		hxp = (*(sourceScan + y * width + 0)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	else {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	if (y == 0) {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  	}  	else if (y == (height - 1)) {  		hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	else {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	var resultX = (hxm - h) + (h - hxp);  	var resultY = (hym - h) + (h - hyp);  	var resultZ = 1.0;  	var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  	resultX /= l;  	resultY /= l;  	resultZ /= l;  	result.r = (byte)((resultX + 1) * 0.5 * 255);  	result.g = (byte)((resultY + 1) * 0.5 * 255);  	result.b = (byte)((resultZ + 1) * 0.5 * 255);  	result.a = 255;  	(*(targetScan + y * width + x)) = result;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (x = 0; x < width; x++) {  	h = (*(sourceScan + y * width + x)).GetIntense ();  	if (x == 0) {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  	}  	else if (x == (width - 1)) {  		hxp = (*(sourceScan + y * width + 0)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	else {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	if (y == 0) {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  	}  	else if (y == (height - 1)) {  		hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	else {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	var resultX = (hxm - h) + (h - hxp);  	var resultY = (hym - h) + (h - hyp);  	var resultZ = 1.0;  	var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  	resultX /= l;  	resultY /= l;  	resultZ /= l;  	result.r = (byte)((resultX + 1) * 0.5 * 255);  	result.g = (byte)((resultY + 1) * 0.5 * 255);  	result.b = (byte)((resultZ + 1) * 0.5 * 255);  	result.a = 255;  	(*(targetScan + y * width + x)) = result;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: for (x = 0; x < width; x++) {  	h = (*(sourceScan + y * width + x)).GetIntense ();  	if (x == 0) {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + width - 1)).GetIntense ();  	}  	else if (x == (width - 1)) {  		hxp = (*(sourceScan + y * width + 0)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	else {  		hxp = (*(sourceScan + y * width + x + 1)).GetIntense ();  		hxm = (*(sourceScan + y * width + x - 1)).GetIntense ();  	}  	if (y == 0) {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (height - 1) * width + x)).GetIntense ();  	}  	else if (y == (height - 1)) {  		hyp = (*(sourceScan + (0) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	else {  		hyp = (*(sourceScan + (y + 1) * width + x)).GetIntense ();  		hym = (*(sourceScan + (y - 1) * width + x)).GetIntense ();  	}  	var resultX = (hxm - h) + (h - hxp);  	var resultY = (hym - h) + (h - hyp);  	var resultZ = 1.0;  	var l = Math.Sqrt (resultX * resultX + resultY * resultY + resultZ * resultZ);  	resultX /= l;  	resultY /= l;  	resultZ /= l;  	result.r = (byte)((resultX + 1) * 0.5 * 255);  	result.g = (byte)((resultY + 1) * 0.5 * 255);  	result.b = (byte)((resultZ + 1) * 0.5 * 255);  	result.a = 255;  	(*(targetScan + y * width + x)) = result;  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: result.r = (byte)((resultX + 1) * 0.5 * 255);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: result.r = (byte)((resultX + 1) * 0.5 * 255);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: result.g = (byte)((resultY + 1) * 0.5 * 255);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: result.g = (byte)((resultY + 1) * 0.5 * 255);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: result.b = (byte)((resultZ + 1) * 0.5 * 255);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: result.b = (byte)((resultZ + 1) * 0.5 * 255);  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,CreateNormalMap,The following statement contains a magic number: result.a = 255;  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: while (!stringReader.EndOfStream) {  	var line = stringReader.ReadLine ();  	if (line.StartsWith ("# object")) {  		context = new ConvertContext ();  		contexts.Add (context);  	}  	else if (line.StartsWith ("vt")) {  		/// read vertex texture position  		line = line.Remove (0' 2).Trim ();  		var v = Vertex.FromString (line);  		context.textures.Add (v);  	}  	else if (line.StartsWith ("vn")) {  		/// read vertex normal direction  		line = line.Remove (0' 2).Trim ();  		var v = Vertex.FromString (line);  		context.normals.Add (v);  	}  	else if (line.StartsWith ("v")) {  		/// read vertex position  		line = line.Remove (0' 1).Trim ();  		var v = Vertex.FromString (line);  		context.vertices.Add (v);  	}  	else if (line.StartsWith ("f")) {  		/// read triangle  		line = line.Remove (0' 1).Trim ();  		var triangle = Triangle.FromString (line' context.compounds);  		context.triangles.Add (triangle);  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: while (!stringReader.EndOfStream) {  	var line = stringReader.ReadLine ();  	if (line.StartsWith ("# object")) {  		context = new ConvertContext ();  		contexts.Add (context);  	}  	else if (line.StartsWith ("vt")) {  		/// read vertex texture position  		line = line.Remove (0' 2).Trim ();  		var v = Vertex.FromString (line);  		context.textures.Add (v);  	}  	else if (line.StartsWith ("vn")) {  		/// read vertex normal direction  		line = line.Remove (0' 2).Trim ();  		var v = Vertex.FromString (line);  		context.normals.Add (v);  	}  	else if (line.StartsWith ("v")) {  		/// read vertex position  		line = line.Remove (0' 1).Trim ();  		var v = Vertex.FromString (line);  		context.vertices.Add (v);  	}  	else if (line.StartsWith ("f")) {  		/// read triangle  		line = line.Remove (0' 1).Trim ();  		var triangle = Triangle.FromString (line' context.compounds);  		context.triangles.Add (triangle);  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: if (line.StartsWith ("# object")) {  	context = new ConvertContext ();  	contexts.Add (context);  }  else if (line.StartsWith ("vt")) {  	/// read vertex texture position  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.textures.Add (v);  }  else if (line.StartsWith ("vn")) {  	/// read vertex normal direction  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.normals.Add (v);  }  else if (line.StartsWith ("v")) {  	/// read vertex position  	line = line.Remove (0' 1).Trim ();  	var v = Vertex.FromString (line);  	context.vertices.Add (v);  }  else if (line.StartsWith ("f")) {  	/// read triangle  	line = line.Remove (0' 1).Trim ();  	var triangle = Triangle.FromString (line' context.compounds);  	context.triangles.Add (triangle);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: if (line.StartsWith ("# object")) {  	context = new ConvertContext ();  	contexts.Add (context);  }  else if (line.StartsWith ("vt")) {  	/// read vertex texture position  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.textures.Add (v);  }  else if (line.StartsWith ("vn")) {  	/// read vertex normal direction  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.normals.Add (v);  }  else if (line.StartsWith ("v")) {  	/// read vertex position  	line = line.Remove (0' 1).Trim ();  	var v = Vertex.FromString (line);  	context.vertices.Add (v);  }  else if (line.StartsWith ("f")) {  	/// read triangle  	line = line.Remove (0' 1).Trim ();  	var triangle = Triangle.FromString (line' context.compounds);  	context.triangles.Add (triangle);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: if (line.StartsWith ("vt")) {  	/// read vertex texture position  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.textures.Add (v);  }  else if (line.StartsWith ("vn")) {  	/// read vertex normal direction  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.normals.Add (v);  }  else if (line.StartsWith ("v")) {  	/// read vertex position  	line = line.Remove (0' 1).Trim ();  	var v = Vertex.FromString (line);  	context.vertices.Add (v);  }  else if (line.StartsWith ("f")) {  	/// read triangle  	line = line.Remove (0' 1).Trim ();  	var triangle = Triangle.FromString (line' context.compounds);  	context.triangles.Add (triangle);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: if (line.StartsWith ("vt")) {  	/// read vertex texture position  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.textures.Add (v);  }  else if (line.StartsWith ("vn")) {  	/// read vertex normal direction  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.normals.Add (v);  }  else if (line.StartsWith ("v")) {  	/// read vertex position  	line = line.Remove (0' 1).Trim ();  	var v = Vertex.FromString (line);  	context.vertices.Add (v);  }  else if (line.StartsWith ("f")) {  	/// read triangle  	line = line.Remove (0' 1).Trim ();  	var triangle = Triangle.FromString (line' context.compounds);  	context.triangles.Add (triangle);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: line = line.Remove (0' 2).Trim ();  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: if (line.StartsWith ("vn")) {  	/// read vertex normal direction  	line = line.Remove (0' 2).Trim ();  	var v = Vertex.FromString (line);  	context.normals.Add (v);  }  else if (line.StartsWith ("v")) {  	/// read vertex position  	line = line.Remove (0' 1).Trim ();  	var v = Vertex.FromString (line);  	context.vertices.Add (v);  }  else if (line.StartsWith ("f")) {  	/// read triangle  	line = line.Remove (0' 1).Trim ();  	var triangle = Triangle.FromString (line' context.compounds);  	context.triangles.Add (triangle);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,ConvertObjToBinary,The following statement contains a magic number: line = line.Remove (0' 2).Trim ();  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,Generate,The following statement contains a magic number: foreach (var file in files) {  	//var copy = Path.Combine(tempPath' Path.GetFileName(file));  	var name = Path.GetFileNameWithoutExtension (file);  	if (name.EndsWith ("bump")) {  		using (var source = new Bitmap (file))  			using (var bitmap = CreateNormalMap (source))  				SaveMipmap (bitmap' tempPath' name);  	}  	else {  		using (var bitmap = new Bitmap (file)) {  			using (var targetStream = File.Create (Path.Combine (tempPath' Path.GetFileNameWithoutExtension (file) + ".raw")))  				using (var writer = new BinaryWriter (targetStream)) {  					SaveUncompressedRaw (bitmap' writer' 2048);  				}  			//SaveMipmap(bitmap' tempPath' name);  		}  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,Generate,The following statement contains a magic number: if (name.EndsWith ("bump")) {  	using (var source = new Bitmap (file))  		using (var bitmap = CreateNormalMap (source))  			SaveMipmap (bitmap' tempPath' name);  }  else {  	using (var bitmap = new Bitmap (file)) {  		using (var targetStream = File.Create (Path.Combine (tempPath' Path.GetFileNameWithoutExtension (file) + ".raw")))  			using (var writer = new BinaryWriter (targetStream)) {  				SaveUncompressedRaw (bitmap' writer' 2048);  			}  		//SaveMipmap(bitmap' tempPath' name);  	}  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,Generate,The following statement contains a magic number: using (var bitmap = new Bitmap (file)) {  	using (var targetStream = File.Create (Path.Combine (tempPath' Path.GetFileNameWithoutExtension (file) + ".raw")))  		using (var writer = new BinaryWriter (targetStream)) {  			SaveUncompressedRaw (bitmap' writer' 2048);  		}  	//SaveMipmap(bitmap' tempPath' name);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,Generate,The following statement contains a magic number: using (var targetStream = File.Create (Path.Combine (tempPath' Path.GetFileNameWithoutExtension (file) + ".raw")))  	using (var writer = new BinaryWriter (targetStream)) {  		SaveUncompressedRaw (bitmap' writer' 2048);  	}  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,Generate,The following statement contains a magic number: using (var writer = new BinaryWriter (targetStream)) {  	SaveUncompressedRaw (bitmap' writer' 2048);  }  
Magic Number,TexturesMipMapsGenerator,MainWindow,C:\repos\faustgames-ru_FaustGamesTools\TexturesMipMapsGenerator\TexturesMipMapsGenerator\MainWindow.cs,Generate,The following statement contains a magic number: SaveUncompressedRaw (bitmap' writer' 2048);  
