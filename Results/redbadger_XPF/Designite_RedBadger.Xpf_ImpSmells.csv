Implementation smell,Namespace,Class,File,Method,Description
Long Method,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,SetFinalLength,The method has 70 lines of code.
Complex Method,RedBadger.Xpf.Controls.Primitives,ButtonBase,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Primitives\ButtonBase.cs,OnNextGesture,Cyclomatic complexity of the method is 17
Complex Method,RedBadger.Xpf.Internal.Controls,Viewbox,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\Controls\Viewbox.cs,ComputeScaleFactor,Cyclomatic complexity of the method is 20
Complex Method,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ArrangeCore,Cyclomatic complexity of the method is 7
Complex Method,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ComputeAlignmentOffset,Cyclomatic complexity of the method is 19
Complex Method,RedBadger.Xpf.Controls,ItemsControl,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ItemsControl.cs,OnNextItemChange,Cyclomatic complexity of the method is 16
Complex Method,RedBadger.Xpf.Controls,ScrollViewer,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ScrollViewer.cs,OnNextGesture,Cyclomatic complexity of the method is 11
Complex Method,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,AllocateProportionalSpace,Cyclomatic complexity of the method is 17
Complex Method,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,SetFinalLength,Cyclomatic complexity of the method is 26
Complex Method,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,InitializeMeasureData,Cyclomatic complexity of the method is 16
Complex Method,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,MeasureCells,Cyclomatic complexity of the method is 11
Long Parameter List,RedBadger.Xpf.Graphics,ISpriteBatch,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Graphics\ISpriteBatch.cs,DrawString,The method has 4 parameters.
Long Parameter List,RedBadger.Xpf.Graphics,IDrawingContext,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Graphics\IDrawingContext.cs,DrawText,The method has 4 parameters.
Long Parameter List,RedBadger.Xpf.Internal.Controls,Viewbox,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\Controls\Viewbox.cs,ComputeScaleFactor,The method has 4 parameters.
Long Parameter List,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,Rect,The method has 4 parameters.
Long Parameter List,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,Thickness,The method has 4 parameters.
Long Parameter List,RedBadger.Xpf,ReactiveProperty,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\ReactiveProperty.cs,ReactiveProperty,The method has 4 parameters.
Long Parameter List,RedBadger.Xpf,ReactiveProperty,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\ReactiveProperty.cs,Register,The method has 4 parameters.
Long Parameter List,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,Color,The method has 4 parameters.
Long Identifier,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,GetClippingRect,The length of the parameter isClippingRequiredDueToMaxSize is 30.
Long Identifier,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,GetClippingRect,The length of the parameter isClippingRequiredDueToClientSize is 33.
Long Identifier,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,MeasureCell,The length of the parameter shouldChildBeMeasuredWithInfiniteHeight is 39.
Long Identifier,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,MeasureCells,The length of the parameter shouldChildBeMeasuredWithInfiniteHeight is 39.
Long Statement,RedBadger.Xpf.Data,OneWayBinding,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Data\OneWayBinding.cs,GetObservable,The length of the statement  "	return Observable.FromEventPattern<PropertyChangedEventArgs> (handler => source.PropertyChanged += handler' handler => source.PropertyChanged -= handler).Where (data => data.EventArgs.PropertyName == propertyInfo.Name).Select (e => GetValue (source' propertyInfo)); " is 265.
Long Statement,RedBadger.Xpf.Internal,RectExtensions,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\RectExtensions.cs,IsDifferentFrom,The length of the statement  "	return rect2.IsEmpty || rect1.X.IsDifferentFrom (rect2.X) || rect1.Y.IsDifferentFrom (rect2.Y) || rect1.Width.IsDifferentFrom (rect2.Width) || rect1.Height.IsDifferentFrom (rect2.Height); " is 187.
Long Statement,RedBadger.Xpf.Internal,SizeExtensions,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\SizeExtensions.cs,Deflate,The length of the statement  "	return new Size ((size.Width - (thickness.Left + thickness.Right)).EnsurePositive ()' (size.Height - (thickness.Top + thickness.Bottom)).EnsurePositive ()); " is 156.
Long Statement,RedBadger.Xpf.Internal,SizeExtensions,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\SizeExtensions.cs,Inflate,The length of the statement  "	return new Size ((size.Width + (thickness.Left + thickness.Right)).EnsurePositive ()' (size.Height + (thickness.Top + thickness.Bottom)).EnsurePositive ()); " is 156.
Long Statement,RedBadger.Xpf.Internal,ThicknessExtensions,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\ThicknessExtensions.cs,IsDifferentFrom,The length of the statement  "	return thickness1.Left.IsDifferentFrom (thickness2.Left) || thickness1.Right.IsDifferentFrom (thickness2.Right) || thickness1.Top.IsDifferentFrom (thickness2.Top) || thickness1.Bottom.IsDifferentFrom (thickness2.Bottom); " is 220.
Long Statement,RedBadger.Xpf,License,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\License.cs,Validate,The length of the statement  "	var buildTime = new TimeSpan ((TimeSpan.TicksPerDay * version.Build) + (TimeSpan.TicksPerSecond * 2 * version.Revision)); " is 121.
Long Statement,RedBadger.Xpf,License,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\License.cs,Validate,The length of the statement  "		throw new InvalidOperationException ("Your trial license of XPF has expired.  Please visit http://red-badger.com to obtain a license or download the latest nightly build."); " is 173.
Long Statement,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,IntersectsWith,The length of the statement  "	return (((rect.X <= (this.X + this.Width)) && ((rect.X + rect.Width) >= this.X)) && (rect.Y <= (this.Y + this.Height))) && ((rect.Y + rect.Height) >= this.Y); " is 158.
Long Statement,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,Union,The length of the statement  "		this.Width = rect.Width == double.PositiveInfinity || this.Width == double.PositiveInfinity ? double.PositiveInfinity : (Math.Max (this.Right' rect.Right) - x).EnsurePositive (); " is 178.
Long Statement,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,Union,The length of the statement  "		this.Height = rect.Height == double.PositiveInfinity || this.Height == double.PositiveInfinity ? double.PositiveInfinity : (Math.Max (this.Bottom' rect.Bottom) - y).EnsurePositive (); " is 183.
Long Statement,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,Equals,The length of the statement  "	return other.Height.IsCloseTo (this.Height) && other.Width.IsCloseTo (this.Width) && other.X.IsCloseTo (this.X) && other.Y.IsCloseTo (this.Y); " is 142.
Long Statement,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,Equals,The length of the statement  "	return other.Bottom.IsCloseTo (this.Bottom) && other.Left.IsCloseTo (this.Left) && other.Right.IsCloseTo (this.Right) && other.Top.IsCloseTo (this.Top); " is 152.
Long Statement,RedBadger.Xpf,ReactiveObject,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\ReactiveObject.cs,Bind,The length of the statement  "	IDisposable disposable = binding != null ? binding.Initialize (this.GetSubject (property)) : this.GetSubject (property).Subscribe (toSource); " is 141.
Long Statement,RedBadger.Xpf,ReactiveObject,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\ReactiveObject.cs,ResolveDeferredBindings,The length of the statement  "	this.propertryBindings.Values.OfType<IBinding> ().Where (binding => binding.ResolutionMode == BindingResolutionMode.Deferred).ForEach (deferredBinding => deferredBinding.Resolve (dataContext)); " is 193.
Long Statement,RedBadger.Xpf,ReactiveObject,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\ReactiveObject.cs,GetSubject,The length of the statement  "	leftSource.Zip (rightSource' (oldValue' newValue) => new ReactivePropertyChangeEventArgs<T> (property' oldValue' newValue)).Where (propertyChange => !object.Equals (propertyChange.OldValue' propertyChange.NewValue)).Subscribe (this.RaiseChanged); " is 246.
Long Statement,RedBadger.Xpf,ReactiveObject,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\ReactiveObject.cs,RaiseChanged,The length of the statement  "	Action<IReactiveObject' ReactivePropertyChangeEventArgs<T>> changedCallback = reactivePropertyChange.Property.ChangedCallback; " is 126.
Long Statement,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,GetClippingRect,The length of the statement  "	bool isClippingRequiredDueToMaxSize = maxWidth.IsLessThan (renderSize.Width) || maxHeight.IsLessThan (renderSize.Height); " is 121.
Long Statement,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,GetClippingRect,The length of the statement  "	var clientSize = new Size ((finalSize.Width - horizontalMargins).EnsurePositive ()' (finalSize.Height - verticalMargins).EnsurePositive ()); " is 140.
Long Statement,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,GetClippingRect,The length of the statement  "	bool isClippingRequiredDueToClientSize = clientSize.Width.IsLessThan (renderSize.Width) || clientSize.Height.IsLessThan (renderSize.Height); " is 140.
Long Statement,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ArrangeCore,The length of the statement  "	this.isClippingRequired |= inkSize.Width.IsLessThan (renderSize.Width) || inkSize.Height.IsLessThan (renderSize.Height); " is 120.
Long Statement,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ArrangeCore,The length of the statement  "	this.isClippingRequired |= clientSize.Width.IsLessThan (inkSize.Width) || clientSize.Height.IsLessThan (inkSize.Height); " is 120.
Long Statement,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,InvalidateMeasureOnDataContextInheritors,The length of the statement  "		IEnumerable<UIElement> childrenInheritingDataContext = children.OfType<UIElement> ().Where (element => element.DataContext == null); " is 132.
Long Statement,RedBadger.Xpf.Controls,ItemsControl,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ItemsControl.cs,ItemsPanelChanged,The length of the statement  "			throw new NotSupportedException ("ItemsControl requires a panel whose Children collection implements ITemplatedList<IElement>"); " is 128.
Long Statement,RedBadger.Xpf.Controls,ItemsControl,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ItemsControl.cs,ItemsSourceChanged,The length of the statement  "		itemsControl.changingItems = Observable.FromEventPattern<NotifyCollectionChangedEventHandler' NotifyCollectionChangedEventArgs> (handler => new NotifyCollectionChangedEventHandler (handler)' handler => observableCollection.CollectionChanged += handler' handler => observableCollection.CollectionChanged -= handler).Subscribe (itemsControl.OnNextItemChange); " is 357.
Long Statement,RedBadger.Xpf.Controls,ScrollContentPresenter,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ScrollContentPresenter.cs,ArrangeOverride,The length of the statement  "		var finalRect = new Rect (-this.scrollData.Offset.X' -this.scrollData.Offset.Y' content.DesiredSize.Width' content.DesiredSize.Height); " is 135.
Long Statement,RedBadger.Xpf.Controls,ScrollContentPresenter,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ScrollContentPresenter.cs,ArrangeOverride,The length of the statement  "		this.isClippingRequired = finalSize.Width.IsLessThan (finalRect.Width) || finalSize.Height.IsLessThan (finalRect.Height); " is 121.
Long Statement,RedBadger.Xpf.Controls,Border,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Border.cs,OnRender,The length of the statement  "		drawingContext.DrawRectangle (new Rect (0' 0' this.ActualWidth' this.ActualHeight).Deflate (this.BorderThickness)' this.Background); " is 132.
Long Statement,RedBadger.Xpf.Controls,Border,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Border.cs,GenerateBorders,The length of the statement  "		this.borders.Add (new Rect (this.BorderThickness.Left' 0' this.ActualWidth - this.BorderThickness.Left' this.BorderThickness.Top)); " is 131.
Long Statement,RedBadger.Xpf.Controls,Border,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Border.cs,GenerateBorders,The length of the statement  "		this.borders.Add (new Rect (this.ActualWidth - this.BorderThickness.Right' this.BorderThickness.Top' this.BorderThickness.Right' this.ActualHeight - this.BorderThickness.Top)); " is 176.
Long Statement,RedBadger.Xpf.Controls,Border,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Border.cs,GenerateBorders,The length of the statement  "		this.borders.Add (new Rect (this.BorderThickness.Left' this.ActualHeight - this.BorderThickness.Bottom' this.ActualWidth - (this.BorderThickness.Left + this.BorderThickness.Right)' this.BorderThickness.Bottom)); " is 211.
Long Statement,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,ArrangeOverride,The length of the statement  "			var finalRect = new Rect (this.columns [columnIndex].FinalOffset' this.rows [rowIndex].FinalOffset' this.columns [columnIndex].FinalLength' this.rows [rowIndex].FinalLength); " is 174.
Long Statement,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,MeasureOverride,The length of the statement  "	return new Size (this.columns.Sum (definition => definition.MinLength)' this.rows.Sum (definition => definition.MinLength)); " is 124.
Long Statement,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,SetFinalLength,The length of the statement  "		IOrderedEnumerable<DefinitionBase> sortedDefinitions = stars.Concat (nonStarDefinitions).OrderBy (o => o.FinalLength - o.MinLength); " is 132.
Long Statement,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,MeasureCell,The length of the statement  "		double x = cell.WidthType == GridUnitType.Auto ? double.PositiveInfinity : this.columns [cell.ColumnIndex].AvailableLength; " is 123.
Long Statement,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,MeasureCell,The length of the statement  "		double y = cell.HeightType == GridUnitType.Auto || shouldChildBeMeasuredWithInfiniteHeight ? double.PositiveInfinity : this.rows [cell.RowIndex].AvailableLength; " is 161.
Long Statement,RedBadger.Xpf.Controls,RootElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\RootElement.cs,OnNextGestureFindChild,The length of the statement  "	return element.GetVisualChildren ().Reverse ().Where (child => !OnNextGestureFindChild (child' gesture)).Any (child => OnNextGestureFindElement (child' gesture)); " is 162.
Long Statement,RedBadger.Xpf.Controls,TextBlock,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\TextBlock.cs,MeasureOverride,The length of the statement  "	return new Size (measureString.Width + this.Padding.Left + this.Padding.Right' measureString.Height + this.Padding.Top + this.Padding.Bottom); " is 142.
Long Statement,RedBadger.Xpf.Controls,TextBlock,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\TextBlock.cs,OnRender,The length of the statement  "	drawingContext.DrawText (this.spriteFont' this.formattedText' new Point (this.Padding.Left' this.Padding.Top)' this.Foreground ?? new SolidColorBrush (Colors.Black)); " is 166.
Magic Number,RedBadger.Xpf,Point,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Point.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (this.X.GetHashCode () * 397) ^ this.Y.GetHashCode ();  }  
Magic Number,RedBadger.Xpf,Point,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Point.cs,GetHashCode,The following statement contains a magic number: return (this.X.GetHashCode () * 397) ^ this.Y.GetHashCode ();  
Magic Number,RedBadger.Xpf,Size,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Size.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (this.Width.GetHashCode () * 397) ^ this.Height.GetHashCode ();  }  
Magic Number,RedBadger.Xpf,Size,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Size.cs,GetHashCode,The following statement contains a magic number: return (this.Width.GetHashCode () * 397) ^ this.Height.GetHashCode ();  
Magic Number,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.Height.GetHashCode ();  	result = (result * 397) ^ this.Width.GetHashCode ();  	result = (result * 397) ^ this.X.GetHashCode ();  	result = (result * 397) ^ this.Y.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.Height.GetHashCode ();  	result = (result * 397) ^ this.Width.GetHashCode ();  	result = (result * 397) ^ this.X.GetHashCode ();  	result = (result * 397) ^ this.Y.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.Height.GetHashCode ();  	result = (result * 397) ^ this.Width.GetHashCode ();  	result = (result * 397) ^ this.X.GetHashCode ();  	result = (result * 397) ^ this.Y.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.Width.GetHashCode ();  
Magic Number,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.X.GetHashCode ();  
Magic Number,RedBadger.Xpf,Rect,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Rect.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.Y.GetHashCode ();  
Magic Number,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.Bottom.GetHashCode ();  	result = (result * 397) ^ this.Left.GetHashCode ();  	result = (result * 397) ^ this.Right.GetHashCode ();  	result = (result * 397) ^ this.Top.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.Bottom.GetHashCode ();  	result = (result * 397) ^ this.Left.GetHashCode ();  	result = (result * 397) ^ this.Right.GetHashCode ();  	result = (result * 397) ^ this.Top.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.Bottom.GetHashCode ();  	result = (result * 397) ^ this.Left.GetHashCode ();  	result = (result * 397) ^ this.Right.GetHashCode ();  	result = (result * 397) ^ this.Top.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.Left.GetHashCode ();  
Magic Number,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.Right.GetHashCode ();  
Magic Number,RedBadger.Xpf,Thickness,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Thickness.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.Top.GetHashCode ();  
Magic Number,RedBadger.Xpf,Vector,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Vector.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (this.X.GetHashCode () * 397) ^ this.Y.GetHashCode ();  }  
Magic Number,RedBadger.Xpf,Vector,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Vector.cs,GetHashCode,The following statement contains a magic number: return (this.X.GetHashCode () * 397) ^ this.Y.GetHashCode ();  
Magic Number,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ComputeAlignmentOffset,The following statement contains a magic number: switch (horizontalAlignment) {  case HorizontalAlignment.Center:  case HorizontalAlignment.Stretch:  	vector.X = (clientSize.Width - inkSize.Width) * 0.5;  	break;  case HorizontalAlignment.Left:  	vector.X = 0;  	break;  case HorizontalAlignment.Right:  	vector.X = clientSize.Width - inkSize.Width;  	break;  }  
Magic Number,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ComputeAlignmentOffset,The following statement contains a magic number: vector.X = (clientSize.Width - inkSize.Width) * 0.5;  
Magic Number,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ComputeAlignmentOffset,The following statement contains a magic number: switch (verticalAlignment) {  case VerticalAlignment.Center:  case VerticalAlignment.Stretch:  	vector.Y = (clientSize.Height - inkSize.Height) * 0.5;  	return vector;  case VerticalAlignment.Bottom:  	vector.Y = clientSize.Height - inkSize.Height;  	return vector;  case VerticalAlignment.Top:  	vector.Y = 0;  	break;  }  
Magic Number,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ComputeAlignmentOffset,The following statement contains a magic number: vector.Y = (clientSize.Height - inkSize.Height) * 0.5;  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,FromUInt32,The following statement contains a magic number: return new Color {  	A = (byte)((value & -16777216) >> 0x18)'  	R = (byte)((value & 0xff0000) >> 0x10)'  	G = (byte)((value & 0xff00) >> 8)'  	B = (byte)(value & 0xff)  };  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,FromUInt32,The following statement contains a magic number: return new Color {  	A = (byte)((value & -16777216) >> 0x18)'  	R = (byte)((value & 0xff0000) >> 0x10)'  	G = (byte)((value & 0xff00) >> 8)'  	B = (byte)(value & 0xff)  };  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.A.GetHashCode ();  	result = (result * 397) ^ this.B.GetHashCode ();  	result = (result * 397) ^ this.G.GetHashCode ();  	result = (result * 397) ^ this.R.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.A.GetHashCode ();  	result = (result * 397) ^ this.B.GetHashCode ();  	result = (result * 397) ^ this.G.GetHashCode ();  	result = (result * 397) ^ this.R.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = this.A.GetHashCode ();  	result = (result * 397) ^ this.B.GetHashCode ();  	result = (result * 397) ^ this.G.GetHashCode ();  	result = (result * 397) ^ this.R.GetHashCode ();  	return result;  }  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.B.GetHashCode ();  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.G.GetHashCode ();  
Magic Number,RedBadger.Xpf.Media,Color,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Media\Color.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ this.R.GetHashCode ();  
Missing Default,RedBadger.Xpf.Controls.Primitives,ButtonBase,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Primitives\ButtonBase.cs,OnNextGesture,The following switch statement is missing a default case: switch (gesture.Type) {  case GestureType.LeftButtonDown:  	this.isLeftButtonDown = true;  	if (this.CaptureMouse ()) {  		this.IsPressed = true;  	}  	break;  case GestureType.LeftButtonUp:  	this.isLeftButtonDown = false;  	if (this.IsPressed) {  		this.OnClick ();  	}  	this.ReleaseMouseCapture ();  	this.IsPressed = false;  	break;  case GestureType.Move:  	if (this.isLeftButtonDown && this.IsMouseCaptured) {  		this.IsPressed = this.HitTest (gesture.Point);  	}  	break;  }  
Missing Default,RedBadger.Xpf.Internal.Controls,Viewbox,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\Controls\Viewbox.cs,ComputeScaleFactor,The following switch statement is missing a default case: switch (stretch) {  case Stretch.Uniform:  	scaleX = scaleY = (scaleX < scaleY) ? scaleX : scaleY;  	break;  case Stretch.UniformToFill:  	scaleX = scaleY = (scaleX > scaleY) ? scaleX : scaleY;  	break;  }  
Missing Default,RedBadger.Xpf.Internal.Controls,Viewbox,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Internal\Controls\Viewbox.cs,ComputeScaleFactor,The following switch statement is missing a default case: switch (stretchDirection) {  case StretchDirection.UpOnly:  	if (scaleX < 1.0) {  		scaleX = 1.0;  	}  	if (scaleY < 1.0) {  		scaleY = 1.0;  	}  	break;  case StretchDirection.DownOnly:  	if (scaleX > 1.0) {  		scaleX = 1.0;  	}  	if (scaleY > 1.0) {  		scaleY = 1.0;  	}  	break;  }  
Missing Default,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ComputeAlignmentOffset,The following switch statement is missing a default case: switch (horizontalAlignment) {  case HorizontalAlignment.Center:  case HorizontalAlignment.Stretch:  	vector.X = (clientSize.Width - inkSize.Width) * 0.5;  	break;  case HorizontalAlignment.Left:  	vector.X = 0;  	break;  case HorizontalAlignment.Right:  	vector.X = clientSize.Width - inkSize.Width;  	break;  }  
Missing Default,RedBadger.Xpf,UIElement,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\UIElement.cs,ComputeAlignmentOffset,The following switch statement is missing a default case: switch (verticalAlignment) {  case VerticalAlignment.Center:  case VerticalAlignment.Stretch:  	vector.Y = (clientSize.Height - inkSize.Height) * 0.5;  	return vector;  case VerticalAlignment.Bottom:  	vector.Y = clientSize.Height - inkSize.Height;  	return vector;  case VerticalAlignment.Top:  	vector.Y = 0;  	break;  }  
Missing Default,RedBadger.Xpf.Controls,ItemsControl,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ItemsControl.cs,OnNextItemChange,The following switch statement is missing a default case: switch (eventData.EventArgs.Action) {  case NotifyCollectionChangedAction.Add:  	foreach (object newItem in eventData.EventArgs.NewItems) {  		children.Add (newItem' this.ItemTemplate);  	}  	break;  case NotifyCollectionChangedAction.Remove: {  	int startingIndex = eventData.EventArgs.OldStartingIndex;  	for (int index = startingIndex; index < startingIndex + eventData.EventArgs.OldItems.Count; index++) {  		children.RemoveAt (index);  	}  	break;  }  case NotifyCollectionChangedAction.Replace: {  	int startingIndex = eventData.EventArgs.NewStartingIndex;  	foreach (object newItem in eventData.EventArgs.NewItems) {  		this.ItemsPanel.Children.RemoveAt (startingIndex);  		children.Insert (startingIndex' newItem' this.ItemTemplate);  		startingIndex++;  	}  	break;  }  #if !WINDOWS_PHONE  case NotifyCollectionChangedAction.Move:  	children.Move (eventData.EventArgs.OldStartingIndex' eventData.EventArgs.NewStartingIndex);  	break;  #endif  case NotifyCollectionChangedAction.Reset:  	this.PopulatePanelFromItemsSource ();  	break;  }  
Missing Default,RedBadger.Xpf.Controls,ScrollViewer,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\ScrollViewer.cs,OnNextGesture,The following switch statement is missing a default case: switch (gesture.Type) {  case GestureType.LeftButtonDown:  	this.CaptureMouse ();  	break;  case GestureType.FreeDrag:  	if (this.scrollInfo != null && this.IsMouseCaptured) {  		this.scrollInfo.SetHorizontalOffset (this.scrollInfo.Offset.X - gesture.Delta.X);  		this.scrollInfo.SetVerticalOffset (this.scrollInfo.Offset.Y - gesture.Delta.Y);  	}  	break;  case GestureType.LeftButtonUp:  	if (this.IsMouseCaptured) {  		this.ReleaseMouseCapture ();  	}  	break;  }  
Missing Default,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,AllocateProportionalSpace,The following switch statement is missing a default case: switch (definition.LengthType) {  case GridUnitType.Auto:  	occupiedLength += definition.MinLength;  	break;  case GridUnitType.Pixel:  	occupiedLength += definition.AvailableLength;  	break;  case GridUnitType.Star:  	double numerator = definition.UserLength.Value;  	if (numerator.IsCloseTo (0d)) {  		definition.Numerator = 0d;  		definition.StarAllocationOrder = 0d;  	} else {  		definition.Numerator = numerator;  		definition.StarAllocationOrder = Math.Max (definition.MinLength' definition.UserMaxLength) / numerator;  	}  	stars.AddLast (definition);  	break;  }  
Missing Default,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,SetFinalLength,The following switch statement is missing a default case: switch (definition.UserLength.GridUnitType) {  case GridUnitType.Auto:  	minLength = definition.MinLength;  	definition.FinalLength = minLength.Coerce (definition.MinLength' definition.UserMaxLength);  	occupiedLength += definition.FinalLength;  	nonStarDefinitions.AddFirst (definition);  	break;  case GridUnitType.Pixel:  	minLength = definition.UserLength.Value;  	definition.FinalLength = minLength.Coerce (definition.MinLength' definition.UserMaxLength);  	occupiedLength += definition.FinalLength;  	nonStarDefinitions.AddFirst (definition);  	break;  case GridUnitType.Star:  	double numerator = definition.UserLength.Value;  	if (numerator.IsCloseTo (0d)) {  		definition.Numerator = 0d;  		definition.StarAllocationOrder = 0d;  	} else {  		definition.Numerator = numerator;  		definition.StarAllocationOrder = Math.Max (definition.MinLength' definition.UserMaxLength) / numerator;  	}  	stars.AddLast (definition);  	break;  }  
Missing Default,RedBadger.Xpf.Controls,Grid,D:\newReposJune17\redbadger_XPF\XPF\RedBadger.Xpf\Controls\Grid.cs,InitializeMeasureData,The following switch statement is missing a default case: switch (definition.UserLength.GridUnitType) {  case GridUnitType.Auto:  	definition.LengthType = GridUnitType.Auto;  	availableLength = double.PositiveInfinity;  	this.hasAuto [(int)dimension] = true;  	break;  case GridUnitType.Pixel:  	definition.LengthType = GridUnitType.Pixel;  	availableLength = definition.UserLength.Value;  	userMinLength = availableLength.Coerce (userMinLength' userMaxLength);  	break;  case GridUnitType.Star:  	definition.LengthType = treatStarAsAuto ? GridUnitType.Auto : GridUnitType.Star;  	availableLength = double.PositiveInfinity;  	this.hasStar [(int)dimension] = true;  	break;  }  
