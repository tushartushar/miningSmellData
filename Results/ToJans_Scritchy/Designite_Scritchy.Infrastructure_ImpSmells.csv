Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,Cyclomatic complexity of the method is 13
Long Statement,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The length of the statement  "                    .Where(x => !x.IsAbstract && x.IsClass && !x.IsGenericType && x.IsPublic && !x.Namespace.StartsWith("System") && !x.Namespace.StartsWith("Microsoft"))); " is 152.
Long Statement,Scritchy.Infrastructure.Implementations,ParameterResolver,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\ParameterResolver.cs,ResolveParameters,The length of the statement  "                        var s = string.Format("Missing a public property \"string {0}\" in the message of type {1}"'propname'message.GetType().Name); " is 125.
Long Statement,Scritchy.Infrastructure.Implementations,HandlerRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\HandlerRegistry.cs,RegisterHandlers,The length of the statement  "                    Action<object'object[]> invoke = (instance'parameters) => localinstancetype.GetMethod(localmn).Invoke(instance'parameters); " is 123.
Long Statement,Scritchy.Infrastructure.Implementations.EventStorage.Adapters,IDBConnectionExtensions,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\EventStorage\Adapters\IDBConnectionExtensions.cs,AllBlobsWithHeaderNameAndValue,The length of the statement  "            return conn.GetReader("Select [Id]'[SerializedData]'[SerializationProtocol]'[TypeName]'[TypeFullName] from [EventBlobs] "+ " is 122.
Long Statement,Scritchy.Infrastructure.Implementations.EventStorage.Adapters,IDBConnectionExtensions,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\EventStorage\Adapters\IDBConnectionExtensions.cs,Insert,The length of the statement  "                input.SerializedData' input.SerializationProtocol' input.TypeName' input.TypeFullName).Select(x => x.ToEventBlob()).First(); " is 124.
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Configuration,ConventionBasedRegistry,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Configuration\ConventionBasedRegistry.cs,ScanAssembliesAndRegisterAll,The following statement contains a magic number: foreach (var t in srctypes)              {                  if (typeof(AR).IsAssignableFrom(t))                      ARTypes.Add(t);                  foreach (var methodname in t.GetMethods().Where(x => x.ReturnType == typeof(void)).Select(x => x.Name))                  {                      if (methodname.StartsWith("On") && methodname.Length > 2 && methodname[2] == methodname.ToUpper()[2])                      {                          PossibleEventNames.Add(methodname.Substring(2));                          if (!EventHandlers.Contains(t))                              EventHandlers.Add(t);                      }                      if (methodname.StartsWith("Can") && methodname.Length > 3 && methodname[3] == methodname.ToUpper()[3])                      {                          PossibleCommandNames.Add(methodname.Substring(3));                          if (!Validators.Contains(t))                              Validators.Add(t);                      }                      PossibleCommandNames.Add(methodname);                  }              }
Magic Number,Scritchy.Infrastructure.Implementations.EventStorage.Adapters,IDBConnectionExtensions,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\EventStorage\Adapters\IDBConnectionExtensions.cs,ToEventBlob,The following statement contains a magic number: bl.SerializationProtocol = dr.GetString(2);
Magic Number,Scritchy.Infrastructure.Implementations.EventStorage.Adapters,IDBConnectionExtensions,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\EventStorage\Adapters\IDBConnectionExtensions.cs,ToEventBlob,The following statement contains a magic number: bl.TypeName = dr.GetString(3);
Magic Number,Scritchy.Infrastructure.Implementations.EventStorage.Adapters,IDBConnectionExtensions,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\EventStorage\Adapters\IDBConnectionExtensions.cs,ToEventBlob,The following statement contains a magic number: bl.TypeFullName = dr.GetString(4);
Magic Number,Scritchy.Infrastructure.Implementations.EventStorage.Adapters,IDBConnectionExtensions,C:\repos\ToJans_Scritchy\Scritchy.Infrastructure\Implementations\EventStorage\Adapters\IDBConnectionExtensions.cs,ToEventHeader,The following statement contains a magic number: bl.Value = dr.GetString(2);
