Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsFunction,Cyclomatic complexity of the method is 16
Long Parameter List,CCMEngine,FileAnalyzer,C:\repos\jonasblunck_ccm\source\CCMEngine\FileAnalyzer.cs,FileAnalyzer,The method has 6 parameters. Parameters: filestream' callback' context' suppressMethodSignatures' filename' switchBehavior
Long Statement,CCMEngine,BlockAnalyzer,C:\repos\jonasblunck_ccm\source\CCMEngine\BlockAnalyzer.cs,ConsumeBlockCalculateAdditionalComplexity,The length of the statement  "          else if (this.functionStream != null && null != this.onLocalFunctionDelegate && this.functionStream.NextIsLocalFunction()) " is 122.
Long Statement,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsFunction,The length of the statement  "          if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("(") && this.parser.PeekNextKeyword(lookAHeadOffset + 2).Equals(")")) " is 129.
Long Statement,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,AdvanceToNextFunction,The length of the statement  "          throw new CCCParserSuccessException(GetFullyQualifiedFunctionName(this.parser.NextKeyword())' this.parser.StreamOffset); " is 120.
Long Statement,CCMEngine,ConfigurationFile,C:\repos\jonasblunck_ccm\source\CCMEngine\ConfigurationFile.cs,Parse,The length of the statement  "                throw new InvalidOperationException("Configuration element 'outputXML' is invalid. You should now use '<outputter>Xml</outputter>' instead."); " is 142.
Long Statement,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsMemberFunction,The length of the statement  "      if (this.parser.PeekNextKeyword(1).Equals(":") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(2)) " is 127.
Long Statement,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsFunctionAssignment,The length of the statement  "      if (this.parser.PeekNextKeyword(1).Equals("=") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(2)) " is 127.
Long Statement,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsDualNamedFunction,The length of the statement  "      if (this.parser.PeekNextKeyword(1).Equals(":") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(3)) " is 127.
Long Statement,CCMEngine,LookAheadLangParser,C:\repos\jonasblunck_ccm\source\CCMEngine\LookAheadLangParser.cs,CreateCppParser,The length of the statement  "        new string[] { "{"' "}"' ";"' "("' ")"' "//"' "/*"' "::"' "&&"' "||"' "\""' "'"' "["' "]"' "#"' " "' "\r"' "\n"' ">"' "<"' "->"' "*"' "\t"' "'"}); " is 146.
Complex Conditional,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsCStyleParameterDeclaration,The conditional expression  "tokens.Contains("*") || tokens.Contains(";") || tokens.Contains("'") ||                  tokens.Contains("[") || tokens.Contains("]")"  is complex.
Complex Conditional,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,AdvanceToNextFunction,The conditional expression  "this.parser.PeekNextKeyword(1).Equals("{") &&                  (this.parser.PeekNextKeyword(2).Equals("get") || this.parser.PeekNextKeyword(2).Equals("set")) &&                  (this.parser.PeekNextKeyword(3).Equals("{"))"  is complex.
Empty Catch Block,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsCStyleParameterDeclaration,The method has an empty catch block.
Empty Catch Block,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsFunction,The method has an empty catch block.
Empty Catch Block,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,Filter,The method has an empty catch block.
Empty Catch Block,CCMEngine,FileAnalyzer,C:\repos\jonasblunck_ccm\source\CCMEngine\FileAnalyzer.cs,Analyze,The method has an empty catch block.
Empty Catch Block,CCMEngine,LookAheadTokenParser,C:\repos\jonasblunck_ccm\source\CCMEngine\LookAheadTokenParser.cs,NextIsToken,The method has an empty catch block.
Empty Catch Block,CCMEngine,LookAheadTokenParser,C:\repos\jonasblunck_ccm\source\CCMEngine\LookAheadTokenParser.cs,MoveToNextLine,The method has an empty catch block.
Empty Catch Block,CCMEngine,Preprocessor,C:\repos\jonasblunck_ccm\source\CCMEngine\Preprocessor.cs,Process,The method has an empty catch block.
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsClass,The following statement contains a magic number: if (this.parser.PeekNextKeyword().Equals("class"))        {          // is next class keyword a "{" or a ";"?          int maxLookAHead = 20;            for (int i = 0; i < maxLookAHead; ++i)          {            if (this.parser.PeekNextKeyword(i).Equals(";"))              return false;            else if (this.parser.PeekNextKeyword(i).Equals("{"))              return true;          }        }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsCStyleParameterDeclaration,The following statement contains a magic number: try        {          if (this.parser.PeekNextKeyword(lookAheadOffset).Equals(")"))          {            int offset = lookAheadOffset + 1; // consume right paranthesis              while (!this.parser.PeekNextKeyword(offset).Equals("{"))            {              List<string> tokens = new List<string>();              tokens.Add(this.parser.PeekNextKeyword(offset));              tokens.Add(this.parser.PeekNextKeyword(offset + 1));              tokens.Add(this.parser.PeekNextKeyword(offset + 2));                if (tokens.Contains("*") || tokens.Contains(";") || tokens.Contains("'") ||                  tokens.Contains("[") || tokens.Contains("]"))              {                offset++;                continue;              }                return false;            }              return true;          }        }        catch (EndOfStreamException)        {        }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsFunction,The following statement contains a magic number: try        {          // MACRO(X) Foo(x) {          // MACRO(X) Foo(x) throws(...) {            // operator == (GUID& r1' GUID& r2) {}          // operator >> (const C&) {}          // operator -> () {}          // Foo() {          // Foo() const {          // Foo() throws(X) {          // A::A() : Base()' m_x(i) {          // template <typename X' typename Y> int FOO(X x' Y y) {          // Foo<Z>(string s) {}          // Class::Function() {}            // check for possible cpp-style (class::function)           if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("::"))            return NextIsFunction(lookAHeadOffset + 2);            // operator = (xx)          if (this.parser.PeekNextKeyword(lookAHeadOffset).Equals("operator"))          {            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("(") && this.parser.PeekNextKeyword(lookAHeadOffset + 2).Equals(")"))              lookAHeadOffset += 2; // this is the void operator              // skip forward to left parenthesis            while (!this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))              ++lookAHeadOffset;              return NextIsFunction(lookAHeadOffset);          }            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("<"))          {            while (!this.parser.PeekNextKeyword(lookAHeadOffset).Equals(">"))              lookAHeadOffset++;          }                      if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))          {            int offset = lookAHeadOffset + 2;               while (!this.parser.PeekNextKeyword(offset).Equals(")"))            {              while (this.parser.PeekNextKeyword(offset).Equals("("))                while (!this.parser.PeekNextKeyword(offset).Equals(")")) // local ( ) pair inside arguments                  ++offset;                  ++offset;            }              if (NextIsCStyleParameterDeclaration(offset))              return true;              if (this.parser.PeekNextKeyword(offset + 1).Equals("const"))                offset++;              if (this.parser.PeekNextKeyword(offset + 1).StartsWith("throw") ||                this.parser.PeekNextKeyword(offset + 1).Equals(":"))                            {              while (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                offset++;            }              if (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                return false;              return true;          }        }        catch (EndOfStreamException)        {        }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsFunction,The following statement contains a magic number: try        {          // MACRO(X) Foo(x) {          // MACRO(X) Foo(x) throws(...) {            // operator == (GUID& r1' GUID& r2) {}          // operator >> (const C&) {}          // operator -> () {}          // Foo() {          // Foo() const {          // Foo() throws(X) {          // A::A() : Base()' m_x(i) {          // template <typename X' typename Y> int FOO(X x' Y y) {          // Foo<Z>(string s) {}          // Class::Function() {}            // check for possible cpp-style (class::function)           if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("::"))            return NextIsFunction(lookAHeadOffset + 2);            // operator = (xx)          if (this.parser.PeekNextKeyword(lookAHeadOffset).Equals("operator"))          {            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("(") && this.parser.PeekNextKeyword(lookAHeadOffset + 2).Equals(")"))              lookAHeadOffset += 2; // this is the void operator              // skip forward to left parenthesis            while (!this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))              ++lookAHeadOffset;              return NextIsFunction(lookAHeadOffset);          }            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("<"))          {            while (!this.parser.PeekNextKeyword(lookAHeadOffset).Equals(">"))              lookAHeadOffset++;          }                      if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))          {            int offset = lookAHeadOffset + 2;               while (!this.parser.PeekNextKeyword(offset).Equals(")"))            {              while (this.parser.PeekNextKeyword(offset).Equals("("))                while (!this.parser.PeekNextKeyword(offset).Equals(")")) // local ( ) pair inside arguments                  ++offset;                  ++offset;            }              if (NextIsCStyleParameterDeclaration(offset))              return true;              if (this.parser.PeekNextKeyword(offset + 1).Equals("const"))                offset++;              if (this.parser.PeekNextKeyword(offset + 1).StartsWith("throw") ||                this.parser.PeekNextKeyword(offset + 1).Equals(":"))                            {              while (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                offset++;            }              if (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                return false;              return true;          }        }        catch (EndOfStreamException)        {        }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsFunction,The following statement contains a magic number: try        {          // MACRO(X) Foo(x) {          // MACRO(X) Foo(x) throws(...) {            // operator == (GUID& r1' GUID& r2) {}          // operator >> (const C&) {}          // operator -> () {}          // Foo() {          // Foo() const {          // Foo() throws(X) {          // A::A() : Base()' m_x(i) {          // template <typename X' typename Y> int FOO(X x' Y y) {          // Foo<Z>(string s) {}          // Class::Function() {}            // check for possible cpp-style (class::function)           if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("::"))            return NextIsFunction(lookAHeadOffset + 2);            // operator = (xx)          if (this.parser.PeekNextKeyword(lookAHeadOffset).Equals("operator"))          {            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("(") && this.parser.PeekNextKeyword(lookAHeadOffset + 2).Equals(")"))              lookAHeadOffset += 2; // this is the void operator              // skip forward to left parenthesis            while (!this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))              ++lookAHeadOffset;              return NextIsFunction(lookAHeadOffset);          }            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("<"))          {            while (!this.parser.PeekNextKeyword(lookAHeadOffset).Equals(">"))              lookAHeadOffset++;          }                      if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))          {            int offset = lookAHeadOffset + 2;               while (!this.parser.PeekNextKeyword(offset).Equals(")"))            {              while (this.parser.PeekNextKeyword(offset).Equals("("))                while (!this.parser.PeekNextKeyword(offset).Equals(")")) // local ( ) pair inside arguments                  ++offset;                  ++offset;            }              if (NextIsCStyleParameterDeclaration(offset))              return true;              if (this.parser.PeekNextKeyword(offset + 1).Equals("const"))                offset++;              if (this.parser.PeekNextKeyword(offset + 1).StartsWith("throw") ||                this.parser.PeekNextKeyword(offset + 1).Equals(":"))                            {              while (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                offset++;            }              if (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                return false;              return true;          }        }        catch (EndOfStreamException)        {        }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,NextIsFunction,The following statement contains a magic number: try        {          // MACRO(X) Foo(x) {          // MACRO(X) Foo(x) throws(...) {            // operator == (GUID& r1' GUID& r2) {}          // operator >> (const C&) {}          // operator -> () {}          // Foo() {          // Foo() const {          // Foo() throws(X) {          // A::A() : Base()' m_x(i) {          // template <typename X' typename Y> int FOO(X x' Y y) {          // Foo<Z>(string s) {}          // Class::Function() {}            // check for possible cpp-style (class::function)           if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("::"))            return NextIsFunction(lookAHeadOffset + 2);            // operator = (xx)          if (this.parser.PeekNextKeyword(lookAHeadOffset).Equals("operator"))          {            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("(") && this.parser.PeekNextKeyword(lookAHeadOffset + 2).Equals(")"))              lookAHeadOffset += 2; // this is the void operator              // skip forward to left parenthesis            while (!this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))              ++lookAHeadOffset;              return NextIsFunction(lookAHeadOffset);          }            if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("<"))          {            while (!this.parser.PeekNextKeyword(lookAHeadOffset).Equals(">"))              lookAHeadOffset++;          }                      if (this.parser.PeekNextKeyword(lookAHeadOffset + 1).Equals("("))          {            int offset = lookAHeadOffset + 2;               while (!this.parser.PeekNextKeyword(offset).Equals(")"))            {              while (this.parser.PeekNextKeyword(offset).Equals("("))                while (!this.parser.PeekNextKeyword(offset).Equals(")")) // local ( ) pair inside arguments                  ++offset;                  ++offset;            }              if (NextIsCStyleParameterDeclaration(offset))              return true;              if (this.parser.PeekNextKeyword(offset + 1).Equals("const"))                offset++;              if (this.parser.PeekNextKeyword(offset + 1).StartsWith("throw") ||                this.parser.PeekNextKeyword(offset + 1).Equals(":"))                            {              while (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                offset++;            }              if (!this.parser.PeekNextKeyword(offset + 1).Equals("{"))                return false;              return true;          }        }        catch (EndOfStreamException)        {        }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,AdvanceToNextFunction,The following statement contains a magic number: while (true)        {          Filter(0);            if (this.parser.PeekNextKeyword().Equals("template"))          {            ConsumeTemplate();          }          else if (NextIsFunction())          {            OnFunction();          }          else if (NextIsClass())          {            this.parser.NextKeyword(); // consume "class"            StringBuilder sb = new StringBuilder();            sb.Append(this.parser.NextKeyword());              while (!this.parser.PeekNextKeyword().Equals("{") &&                   !this.parser.PeekNextKeyword().EndsWith(":") &&                   !this.parser.PeekNextKeyword().Equals("where"))              sb.Append(this.parser.NextKeyword());              while (!this.parser.PeekNextKeyword().Equals("{"))              this.parser.NextKeyword();              this.contexts.Add(sb.ToString());          }          else if (this.parser.PeekNextKeyword(1).Equals("{") &&                  (this.parser.PeekNextKeyword(2).Equals("get") || this.parser.PeekNextKeyword(2).Equals("set")) &&                  (this.parser.PeekNextKeyword(3).Equals("{"))            )          {            this.contexts.Add(this.parser.NextKeyword());            this.parser.NextKeyword(); // consume "{"          }          else if ((this.parser.PeekNextKeyword().Equals("get") ||                    this.parser.PeekNextKeyword().Equals("set")) &&                   (this.parser.PeekNextKeyword(1).Equals("{")))          {            throw new CCCParserSuccessException(GetFullyQualifiedFunctionName(this.parser.NextKeyword())' this.parser.StreamOffset);          }          else if (this.parser.PeekNextKeyword().Equals("}"))          {            this.parser.NextKeyword();              // remove last context' we have reached end of scope            if (this.contexts.Count > 0)              this.contexts.RemoveAt(this.contexts.Count - 1);          }          else if (this.parser.PeekNextKeyword().Equals("["))          {            while (!this.parser.PeekNextKeyword().Equals("]"))              this.parser.NextKeyword();              this.parser.NextKeyword();          }          else          {            this.parser.NextKeyword();          }          }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,AdvanceToNextFunction,The following statement contains a magic number: while (true)        {          Filter(0);            if (this.parser.PeekNextKeyword().Equals("template"))          {            ConsumeTemplate();          }          else if (NextIsFunction())          {            OnFunction();          }          else if (NextIsClass())          {            this.parser.NextKeyword(); // consume "class"            StringBuilder sb = new StringBuilder();            sb.Append(this.parser.NextKeyword());              while (!this.parser.PeekNextKeyword().Equals("{") &&                   !this.parser.PeekNextKeyword().EndsWith(":") &&                   !this.parser.PeekNextKeyword().Equals("where"))              sb.Append(this.parser.NextKeyword());              while (!this.parser.PeekNextKeyword().Equals("{"))              this.parser.NextKeyword();              this.contexts.Add(sb.ToString());          }          else if (this.parser.PeekNextKeyword(1).Equals("{") &&                  (this.parser.PeekNextKeyword(2).Equals("get") || this.parser.PeekNextKeyword(2).Equals("set")) &&                  (this.parser.PeekNextKeyword(3).Equals("{"))            )          {            this.contexts.Add(this.parser.NextKeyword());            this.parser.NextKeyword(); // consume "{"          }          else if ((this.parser.PeekNextKeyword().Equals("get") ||                    this.parser.PeekNextKeyword().Equals("set")) &&                   (this.parser.PeekNextKeyword(1).Equals("{")))          {            throw new CCCParserSuccessException(GetFullyQualifiedFunctionName(this.parser.NextKeyword())' this.parser.StreamOffset);          }          else if (this.parser.PeekNextKeyword().Equals("}"))          {            this.parser.NextKeyword();              // remove last context' we have reached end of scope            if (this.contexts.Count > 0)              this.contexts.RemoveAt(this.contexts.Count - 1);          }          else if (this.parser.PeekNextKeyword().Equals("["))          {            while (!this.parser.PeekNextKeyword().Equals("]"))              this.parser.NextKeyword();              this.parser.NextKeyword();          }          else          {            this.parser.NextKeyword();          }          }
Magic Number,CCMEngine,CCCParser,C:\repos\jonasblunck_ccm\source\CCMEngine\CCCParser.cs,AdvanceToNextFunction,The following statement contains a magic number: while (true)        {          Filter(0);            if (this.parser.PeekNextKeyword().Equals("template"))          {            ConsumeTemplate();          }          else if (NextIsFunction())          {            OnFunction();          }          else if (NextIsClass())          {            this.parser.NextKeyword(); // consume "class"            StringBuilder sb = new StringBuilder();            sb.Append(this.parser.NextKeyword());              while (!this.parser.PeekNextKeyword().Equals("{") &&                   !this.parser.PeekNextKeyword().EndsWith(":") &&                   !this.parser.PeekNextKeyword().Equals("where"))              sb.Append(this.parser.NextKeyword());              while (!this.parser.PeekNextKeyword().Equals("{"))              this.parser.NextKeyword();              this.contexts.Add(sb.ToString());          }          else if (this.parser.PeekNextKeyword(1).Equals("{") &&                  (this.parser.PeekNextKeyword(2).Equals("get") || this.parser.PeekNextKeyword(2).Equals("set")) &&                  (this.parser.PeekNextKeyword(3).Equals("{"))            )          {            this.contexts.Add(this.parser.NextKeyword());            this.parser.NextKeyword(); // consume "{"          }          else if ((this.parser.PeekNextKeyword().Equals("get") ||                    this.parser.PeekNextKeyword().Equals("set")) &&                   (this.parser.PeekNextKeyword(1).Equals("{")))          {            throw new CCCParserSuccessException(GetFullyQualifiedFunctionName(this.parser.NextKeyword())' this.parser.StreamOffset);          }          else if (this.parser.PeekNextKeyword().Equals("}"))          {            this.parser.NextKeyword();              // remove last context' we have reached end of scope            if (this.contexts.Count > 0)              this.contexts.RemoveAt(this.contexts.Count - 1);          }          else if (this.parser.PeekNextKeyword().Equals("["))          {            while (!this.parser.PeekNextKeyword().Equals("]"))              this.parser.NextKeyword();              this.parser.NextKeyword();          }          else          {            this.parser.NextKeyword();          }          }
Magic Number,CCMEngine,ccMetric,C:\repos\jonasblunck_ccm\source\CCMEngine\ccMetric.cs,GetClassification,The following statement contains a magic number: if (ccm >= 51)          return "untestable' very high risk";
Magic Number,CCMEngine,ccMetric,C:\repos\jonasblunck_ccm\source\CCMEngine\ccMetric.cs,GetClassification,The following statement contains a magic number: if (ccm >= 21)           return "complex' high risk";        else if (ccm >= 11)          return "more complex' moderate risk";        else          return "simple' without much risk";
Magic Number,CCMEngine,ccMetric,C:\repos\jonasblunck_ccm\source\CCMEngine\ccMetric.cs,GetClassification,The following statement contains a magic number: if (ccm >= 21)           return "complex' high risk";        else if (ccm >= 11)          return "more complex' moderate risk";        else          return "simple' without much risk";
Magic Number,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,IsFunctionDefinition,The following statement contains a magic number: if (this.parser.PeekNextKeyword(nameOffset + 1).Equals("("))        {          int offset = nameOffset;          while (!this.parser.PeekNextKeyword(offset++).Equals(")"))            ;            // check for TypeScript return type          if (this.parser.PeekNextKeyword(offset).Equals(":"))          {            offset += 2;          }            if (this.parser.PeekNextKeyword(offset).Equals("{"))            return true;          }
Magic Number,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsMemberFunction,The following statement contains a magic number: if (this.parser.PeekNextKeyword(1).Equals(":") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(2))          return true;
Magic Number,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsMemberFunction,The following statement contains a magic number: if (this.parser.PeekNextKeyword(1).Equals(":") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(2))          return true;
Magic Number,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsFunctionAssignment,The following statement contains a magic number: if (this.parser.PeekNextKeyword(1).Equals("=") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(2))          return true;
Magic Number,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsFunctionAssignment,The following statement contains a magic number: if (this.parser.PeekNextKeyword(1).Equals("=") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(2))          return true;
Magic Number,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsDualNamedFunction,The following statement contains a magic number: if (this.parser.PeekNextKeyword(1).Equals(":") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(3))          return true;
Magic Number,CCMEngine,JSParser,C:\repos\jonasblunck_ccm\source\CCMEngine\JSParser.cs,NextIsDualNamedFunction,The following statement contains a magic number: if (this.parser.PeekNextKeyword(1).Equals(":") && this.parser.PeekNextKeyword(2).Equals("function") && IsFunctionDefinition(3))          return true;
