Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetString,Cyclomatic complexity of the method is 11
Complex Method,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetString,Cyclomatic complexity of the method is 10
Complex Method,Mina.Filter.Codec,CumulativeProtocolDecoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\CumulativeProtocolDecoder.cs,Decode,Cyclomatic complexity of the method is 11
Complex Method,Mina.Filter.Codec.Demux,DemuxingProtocolEncoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\Demux\DemuxingProtocolEncoder.cs,FindEncoder,Cyclomatic complexity of the method is 10
Complex Method,Mina.Filter.Codec.StateMachine,ConsumeToCrLfDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\ConsumeToCrLfDecodingState.cs,Decode,Cyclomatic complexity of the method is 8
Complex Method,Mina.Filter.ErrorGenerating,ErrorGeneratingFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\ErrorGenerating\ErrorGeneratingFilter.cs,ManipulateIoBuffer,Cyclomatic complexity of the method is 11
Complex Method,Mina.Handler.Demux,DemuxingIoHandler,C:\repos\longshine_Mina.NET\Mina.NET\Handler\Demux\DemuxingIoHandler.cs,FindHandler,Cyclomatic complexity of the method is 10
Complex Method,Mina.Transport.Socket,AbstractDatagramSessionConfig,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AbstractDatagramSessionConfig.cs,DoSetAll,Cyclomatic complexity of the method is 8
Complex Method,Mina.Transport.Socket,SocketContext,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncDatagramAcceptor.cs,BeginSend,Cyclomatic complexity of the method is 8
Complex Method,Mina.Transport.Socket,AbstractSocketSessionConfig,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AbstractSocketSessionConfig.cs,DoSetAll,Cyclomatic complexity of the method is 11
Long Parameter List,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,AbstractIoBuffer,The method has 5 parameters. Parameters: allocator' mark' pos' lim' cap
Long Parameter List,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,AbstractIoBuffer,The method has 5 parameters. Parameters: parent' mark' pos' lim' cap
Long Parameter List,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The method has 8 parameters. Parameters: b7' b6' b5' b4' b3' b2' b1' b0
Long Parameter List,Mina.Core.Buffer,ByteBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\ByteBuffer.cs,ByteBuffer,The method has 7 parameters. Parameters: allocator' mark' pos' lim' cap' hb' offset
Long Parameter List,Mina.Core.Buffer,ByteBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\ByteBuffer.cs,ByteBuffer,The method has 7 parameters. Parameters: parent' mark' pos' lim' cap' hb' offset
Long Parameter List,Mina.Core.Buffer,ByteBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\ByteBuffer.cs,ByteBuffer,The method has 7 parameters. Parameters: parent' buf' mark' pos' lim' cap' off
Long Parameter List,Mina.Core.Buffer,ByteBufferR,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\ByteBufferR.cs,ByteBufferR,The method has 7 parameters. Parameters: parent' buf' mark' pos' lim' cap' off
Long Parameter List,Mina.Core.Filterchain,Entry,C:\repos\longshine_Mina.NET\Mina.NET\Core\Filterchain\Chain.cs,Entry,The method has 6 parameters. Parameters: chain' prevEntry' nextEntry' name' filter' nextFilterFactory
Long Parameter List,Mina.Core.Service,DefaultTransportMetadata,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\DefaultTransportMetadata.cs,DefaultTransportMetadata,The method has 5 parameters. Parameters: providerName' name' connectionless' fragmentation' endpointType
Long Parameter List,Mina.Filter.KeepAlive,KeepAliveFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\KeepAlive\KeepAliveFilter.cs,KeepAliveFilter,The method has 5 parameters. Parameters: messageFactory' interestedIdleStatus' strategy' keepAliveRequestInterval' keepAliveRequestTimeout
Long Parameter List,Mina.Transport.Serial,SerialEndPoint,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Serial\SerialEndPoint.cs,SerialEndPoint,The method has 5 parameters. Parameters: portName' baudRate' parity' dataBits' stopBits
Long Parameter List,Mina.Transport.Socket,AsyncDatagramSession,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncDatagramSession.cs,AsyncDatagramSession,The method has 5 parameters. Parameters: service' processor' ctx' remoteEP' reuseBuffer
Long Parameter List,Mina.Transport.Socket,AsyncDatagramSession,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncDatagramSession.cs,AsyncDatagramSession,The method has 7 parameters. Parameters: service' processor' socket' remoteEP' readBuffer' writeBuffer' reuseBuffer
Long Parameter List,Mina.Transport.Socket,AsyncSocketSession,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncSocketSession.cs,AsyncSocketSession,The method has 6 parameters. Parameters: service' processor' socket' readBuffer' writeBuffer' reuseBuffer
Long Parameter List,Mina.Transport.Socket,SocketSession,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\SocketSession.cs,SocketSession,The method has 7 parameters. Parameters: service' processor' config' socket' localEP' remoteEP' reuseBuffer
Long Identifier,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,,The length of the parameter _largestWrittenBytesThroughput is 30.
Long Identifier,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,,The length of the parameter _largestReadMessagesThroughput is 30.
Long Identifier,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,,The length of the parameter _largestWrittenMessagesThroughput is 33.
Long Identifier,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,,The length of the parameter _lastThroughputCalculationTime is 30.
Long Identifier,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,,The length of the parameter _throughputCalculationInterval is 30.
Long Identifier,Mina.Core.Session,AbstractIoSession,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AbstractIoSession.cs,,The length of the parameter _lastThroughputCalculationTime is 30.
Long Identifier,Mina.Core.Session,AbstractIoSessionConfig,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AbstractIoSessionConfig.cs,,The length of the parameter _throughputCalculationInterval is 30.
Long Identifier,Mina.Filter.Codec,CumulativeProtocolDecoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\CumulativeProtocolDecoder.cs,,The length of the parameter _transportMetadataFragmentation is 31.
Long Identifier,Mina.Transport.Serial,SessionConfigImpl,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Serial\SerialSession.cs,,The length of the parameter _throughputCalculationInterval is 30.
Long Statement,Mina.Filter.Codec,ProtocolCodecFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\ProtocolCodecFilter.cs,OnPreAdd,The length of the statement  "                throw new ArgumentException("You can't add the same filter instance more than once.  Create another instance and add it."); " is 123.
Long Statement,Mina.Filter.Executor,ExecutorFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\ExecutorFilter.cs,OnPreAdd,The length of the statement  "                throw new ArgumentException("You can't add the same filter instance more than once. Create another instance and add it."); " is 122.
Long Statement,Mina.Filter.Executor,DefaultIoEventSizeEstimator,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventSizeEstimator.cs,EstimateSize,The length of the statement  "                FieldInfo[] fields = t.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly); " is 131.
Long Statement,Mina.Transport.Socket,AsyncDatagramAcceptor,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncDatagramAcceptor.cs,BindInternal,The length of the statement  "                    System.Net.Sockets.Socket listenSocket = new System.Net.Sockets.Socket(ep.AddressFamily' SocketType.Dgram' ProtocolType.Udp); " is 125.
Long Statement,Mina.Transport.Socket,AbstractSocketAcceptor,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AbstractSocketAcceptor.cs,BindInternal,The length of the statement  "                    System.Net.Sockets.Socket listenSocket = new System.Net.Sockets.Socket(ep.AddressFamily' SocketType.Stream' ProtocolType.Tcp); " is 126.
Long Statement,Mina.Util,Pool<T>,C:\repos\longshine_Mina.NET\Mina.NET\Util\Pool.cs,Push,The length of the statement  "            if (item == null) { throw new ArgumentNullException("item"' "Items added to a SocketAsyncEventArgsPool cannot be null"); } " is 122.
Empty Catch Block,Mina.Filter.Codec,CumulativeProtocolDecoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\CumulativeProtocolDecoder.cs,Decode,The method has an empty catch block.
Empty Catch Block,Mina.Filter.Codec,CumulativeProtocolDecoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\CumulativeProtocolDecoder.cs,Decode,The method has an empty catch block.
Empty Catch Block,Mina.Filter.Executor,IoEventQueueThrottle,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventQueueThrottle.cs,Block,The method has an empty catch block.
Empty Catch Block,Mina.Transport.Serial,SerialSession,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Serial\SerialSession.cs,BeginSend,The method has an empty catch block.
Empty Catch Block,Mina.Transport.Socket,AsyncSocketProcessor,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncSocketProcessor.cs,Remove,The method has an empty catch block.
Empty Catch Block,Mina.Util,ExpiringMap<TKey;TValue>,C:\repos\longshine_Mina.NET\Mina.NET\Util\ExpiringMap.cs,Expiring,The method has an empty catch block.
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: Int32 q = size >> 3;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: Int32 r = size & 7;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: q = r >> 2;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: r = r & 3;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: Int32 q = size >> 3;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: Int32 r = size & 7;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int32 intValue = value | value << 8 | value << 16 | value << 24;                  Int64 longValue = intValue;                  longValue <<= 32;                  longValue |= (UInt32)intValue;                    for (Int32 i = q; i > 0; i--)                  {                      PutInt64(longValue);                  }              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int32 intValue = value | value << 8 | value << 16 | value << 24;                  Int64 longValue = intValue;                  longValue <<= 32;                  longValue |= (UInt32)intValue;                    for (Int32 i = q; i > 0; i--)                  {                      PutInt64(longValue);                  }              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int32 intValue = value | value << 8 | value << 16 | value << 24;                  Int64 longValue = intValue;                  longValue <<= 32;                  longValue |= (UInt32)intValue;                    for (Int32 i = q; i > 0; i--)                  {                      PutInt64(longValue);                  }              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int32 intValue = value | value << 8 | value << 16 | value << 24;                  Int64 longValue = intValue;                  longValue <<= 32;                  longValue |= (UInt32)intValue;                    for (Int32 i = q; i > 0; i--)                  {                      PutInt64(longValue);                  }              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: q = r >> 2;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: r = r & 3;
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int32 intValue = value | value << 8 | value << 16 | value << 24;                  PutInt32(intValue);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int32 intValue = value | value << 8 | value << 16 | value << 24;                  PutInt32(intValue);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int32 intValue = value | value << 8 | value << 16 | value << 24;                  PutInt32(intValue);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Fill,The following statement contains a magic number: if (q > 0)              {                  Int16 shortValue = (Int16)(value | value << 8);                  PutInt16(shortValue);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PrefixedDataAvailable,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      dataLength = Get(Position) & 0xff;                      break;                  case 2:                      dataLength = GetInt16(Position) & 0xffff;                      break;                  case 4:                      dataLength = GetInt32(Position);                      break;                  default:                      throw new ArgumentException("Expect prefixLength (1'2'4) but " + prefixLength);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PrefixedDataAvailable,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      dataLength = Get(Position) & 0xff;                      break;                  case 2:                      dataLength = GetInt16(Position) & 0xffff;                      break;                  case 4:                      dataLength = GetInt32(Position);                      break;                  default:                      throw new ArgumentException("Expect prefixLength (1'2'4) but " + prefixLength);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetPrefixedString,The following statement contains a magic number: return GetPrefixedString(2' encoding);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      dataLength = Get() & 0xff;                      break;                  case 2:                      dataLength = GetInt16() & 0xffff;                      break;                  case 4:                      dataLength = GetInt32();                      break;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      dataLength = Get() & 0xff;                      break;                  case 2:                      dataLength = GetInt16() & 0xffff;                      break;                  case 4:                      dataLength = GetInt32();                      break;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: return PutPrefixedString(value' 2' encoding);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      maxLength = 255;                      break;                  case 2:                      maxLength = 65535;                      break;                  case 4:                      maxLength = Int32.MaxValue;                      break;                  default:                      throw new ArgumentException("prefixLength: " + prefixLength);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      maxLength = 255;                      break;                  case 2:                      maxLength = 65535;                      break;                  case 4:                      maxLength = Int32.MaxValue;                      break;                  default:                      throw new ArgumentException("prefixLength: " + prefixLength);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      maxLength = 255;                      break;                  case 2:                      maxLength = 65535;                      break;                  case 4:                      maxLength = Int32.MaxValue;                      break;                  default:                      throw new ArgumentException("prefixLength: " + prefixLength);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      maxLength = 255;                      break;                  case 2:                      maxLength = 65535;                      break;                  case 4:                      maxLength = Int32.MaxValue;                      break;                  default:                      throw new ArgumentException("prefixLength: " + prefixLength);              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: if (value.Length == 0)              {                  switch (prefixLength)                  {                      case 1:                          Put((Byte)0);                          break;                      case 2:                          PutInt16((Int16)0);                          break;                      case 4:                          PutInt32(0);                          break;                  }                  return this;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: if (value.Length == 0)              {                  switch (prefixLength)                  {                      case 1:                          Put((Byte)0);                          break;                      case 2:                          PutInt16((Int16)0);                          break;                      case 4:                          PutInt32(0);                          break;                  }                  return this;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      Put((Byte)bytes.Length);                      break;                  case 2:                      PutInt16((Int16)bytes.Length);                      break;                  case 4:                      PutInt32(bytes.Length);                      break;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following statement contains a magic number: switch (prefixLength)              {                  case 1:                      Put((Byte)bytes.Length);                      break;                  case 2:                      PutInt16((Int16)bytes.Length);                      break;                  case 4:                      PutInt32(bytes.Length);                      break;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetString,The following statement contains a magic number: if (utf16)              {                  Int32 i = oldPos;                  while (true)                  {                      Boolean wasZero = Get(i) == 0;                      i++;                        if (i >= oldLimit)                          break;                        if (Get(i) != 0)                      {                          i++;                          if (i >= oldLimit)                              break;                          continue;                      }                        if (wasZero)                      {                          end = i - 1;                          break;                      }                  }                    if (end < 0)                      newPos = end = oldPos + (Int32)(oldLimit - oldPos & 0xFFFFFFFE);                  else if (end + 2 <= oldLimit)                      newPos = end + 2;                  else                      newPos = end;              }              else              {                  end = IndexOf(0x00);                  if (end < 0)                      newPos = end = oldLimit;                  else                      newPos = end + 1;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetString,The following statement contains a magic number: if (utf16)              {                  Int32 i = oldPos;                  while (true)                  {                      Boolean wasZero = Get(i) == 0;                      i++;                        if (i >= oldLimit)                          break;                        if (Get(i) != 0)                      {                          i++;                          if (i >= oldLimit)                              break;                          continue;                      }                        if (wasZero)                      {                          end = i - 1;                          break;                      }                  }                    if (end < 0)                      newPos = end = oldPos + (Int32)(oldLimit - oldPos & 0xFFFFFFFE);                  else if (end + 2 <= oldLimit)                      newPos = end + 2;                  else                      newPos = end;              }              else              {                  end = IndexOf(0x00);                  if (end < 0)                      newPos = end = oldLimit;                  else                      newPos = end + 1;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetString,The following statement contains a magic number: if (utf16)              {                  for (i = oldPos; i < end; i += 2)                  {                      if (Get(i) == 0 && Get(i + 1) == 0)                          break;                  }                    Limit = i;              }              else              {                  for (i = oldPos; i < end; i++)                  {                      if (Get(i) == 0)                          break;                  }                    Limit = i;              }
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetChar,The following statement contains a magic number: return Bits.GetChar(this' Offset(NextGetIndex(2))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetChar,The following statement contains a magic number: return Bits.GetChar(this' Offset(CheckIndex(index' 2))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutChar,The following statement contains a magic number: AutoExpand0(2);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutChar,The following statement contains a magic number: Bits.PutChar(this' Offset(NextPutIndex(2))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutChar,The following statement contains a magic number: AutoExpand0(index' 2);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutChar,The following statement contains a magic number: Bits.PutChar(this' Offset(CheckIndex(index' 2))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetInt16,The following statement contains a magic number: return Bits.GetShort(this' Offset(NextGetIndex(2))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetInt16,The following statement contains a magic number: return Bits.GetShort(this' Offset(CheckIndex(index' 2))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt16,The following statement contains a magic number: AutoExpand0(2);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt16,The following statement contains a magic number: Bits.PutShort(this' Offset(NextPutIndex(2))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt16,The following statement contains a magic number: AutoExpand0(index' 2);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt16,The following statement contains a magic number: Bits.PutShort(this' Offset(CheckIndex(index' 2))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetInt32,The following statement contains a magic number: return Bits.GetInt(this' Offset(NextGetIndex(4))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetInt32,The following statement contains a magic number: return Bits.GetInt(this' Offset(CheckIndex(index' 4))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt32,The following statement contains a magic number: AutoExpand0(4);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt32,The following statement contains a magic number: Bits.PutInt(this' Offset(NextPutIndex(4))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt32,The following statement contains a magic number: AutoExpand0(index' 4);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt32,The following statement contains a magic number: Bits.PutInt(this' Offset(CheckIndex(index' 4))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetInt64,The following statement contains a magic number: return Bits.GetLong(this' Offset(NextGetIndex(8))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetInt64,The following statement contains a magic number: return Bits.GetLong(this' Offset(CheckIndex(index' 8))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt64,The following statement contains a magic number: AutoExpand0(8);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt64,The following statement contains a magic number: Bits.PutLong(this' Offset(NextPutIndex(8))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt64,The following statement contains a magic number: AutoExpand0(index' 8);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutInt64,The following statement contains a magic number: Bits.PutLong(this' Offset(CheckIndex(index' 8))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetSingle,The following statement contains a magic number: return Bits.GetFloat(this' Offset(NextGetIndex(4))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetSingle,The following statement contains a magic number: return Bits.GetFloat(this' Offset(CheckIndex(index' 4))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutSingle,The following statement contains a magic number: AutoExpand0(4);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutSingle,The following statement contains a magic number: Bits.PutFloat(this' Offset(NextPutIndex(4))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutSingle,The following statement contains a magic number: AutoExpand0(index' 4);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutSingle,The following statement contains a magic number: Bits.PutFloat(this' Offset(CheckIndex(index' 4))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetDouble,The following statement contains a magic number: return Bits.GetDouble(this' Offset(NextGetIndex(8))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetDouble,The following statement contains a magic number: return Bits.GetDouble(this' Offset(CheckIndex(index' 8))' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutDouble,The following statement contains a magic number: AutoExpand0(8);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutDouble,The following statement contains a magic number: Bits.PutDouble(this' Offset(NextPutIndex(8))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutDouble,The following statement contains a magic number: AutoExpand0(index' 8);
Magic Number,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutDouble,The following statement contains a magic number: Bits.PutDouble(this' Offset(CheckIndex(index' 8))' value' Order == ByteOrder.BigEndian);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (short)((x << 8) |                             ((x >> 8) & 0xff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (short)((x << 8) |                             ((x >> 8) & 0xff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (char)((x << 8) |                            ((x >> 8) & 0xff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (char)((x << 8) |                            ((x >> 8) & 0xff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (int)((Swap((short)x) << 16) |                           (Swap((short)(x >> 16)) & 0xffff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (int)((Swap((short)x) << 16) |                           (Swap((short)(x >> 16)) & 0xffff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (long)(((long)Swap((int)(x)) << 32) |                            ((long)Swap((int)(x >> 32)) & 0xffffffffL));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Swap,The following statement contains a magic number: return (long)(((long)Swap((int)(x)) << 32) |                            ((long)Swap((int)(x >> 32)) & 0xffffffffL));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeChar,The following statement contains a magic number: return (char)((b1 << 8) | (b0 & 0xff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Char1,The following statement contains a magic number: return (byte)(x >> 8);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeShort,The following statement contains a magic number: return (short)((b1 << 8) | (b0 & 0xff));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Short1,The following statement contains a magic number: return (byte)(x >> 8);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeInt,The following statement contains a magic number: return (int)((((b3 & 0xff) << 24) |                            ((b2 & 0xff) << 16) |                            ((b1 & 0xff) << 8) |                            ((b0 & 0xff) << 0)));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeInt,The following statement contains a magic number: return (int)((((b3 & 0xff) << 24) |                            ((b2 & 0xff) << 16) |                            ((b1 & 0xff) << 8) |                            ((b0 & 0xff) << 0)));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeInt,The following statement contains a magic number: return (int)((((b3 & 0xff) << 24) |                            ((b2 & 0xff) << 16) |                            ((b1 & 0xff) << 8) |                            ((b0 & 0xff) << 0)));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetIntL,The following statement contains a magic number: return MakeInt(bb.GetInternal(bi + 3)'                             bb.GetInternal(bi + 2)'                             bb.GetInternal(bi + 1)'                             bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetIntL,The following statement contains a magic number: return MakeInt(bb.GetInternal(bi + 3)'                             bb.GetInternal(bi + 2)'                             bb.GetInternal(bi + 1)'                             bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetIntB,The following statement contains a magic number: return MakeInt(bb.GetInternal(bi + 0)'                             bb.GetInternal(bi + 1)'                             bb.GetInternal(bi + 2)'                             bb.GetInternal(bi + 3));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetIntB,The following statement contains a magic number: return MakeInt(bb.GetInternal(bi + 0)'                             bb.GetInternal(bi + 1)'                             bb.GetInternal(bi + 2)'                             bb.GetInternal(bi + 3));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Int3,The following statement contains a magic number: return (byte)(x >> 24);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Int2,The following statement contains a magic number: return (byte)(x >> 16);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Int1,The following statement contains a magic number: return (byte)(x >> 8);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutIntL,The following statement contains a magic number: bb.PutInternal(bi + 3' Int3(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutIntL,The following statement contains a magic number: bb.PutInternal(bi + 2' Int2(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutIntB,The following statement contains a magic number: bb.PutInternal(bi + 2' Int1(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutIntB,The following statement contains a magic number: bb.PutInternal(bi + 3' Int0(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The following statement contains a magic number: return ((((long)b7 & 0xff) << 56) |                      (((long)b6 & 0xff) << 48) |                      (((long)b5 & 0xff) << 40) |                      (((long)b4 & 0xff) << 32) |                      (((long)b3 & 0xff) << 24) |                      (((long)b2 & 0xff) << 16) |                      (((long)b1 & 0xff) << 8) |                      (((long)b0 & 0xff) << 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The following statement contains a magic number: return ((((long)b7 & 0xff) << 56) |                      (((long)b6 & 0xff) << 48) |                      (((long)b5 & 0xff) << 40) |                      (((long)b4 & 0xff) << 32) |                      (((long)b3 & 0xff) << 24) |                      (((long)b2 & 0xff) << 16) |                      (((long)b1 & 0xff) << 8) |                      (((long)b0 & 0xff) << 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The following statement contains a magic number: return ((((long)b7 & 0xff) << 56) |                      (((long)b6 & 0xff) << 48) |                      (((long)b5 & 0xff) << 40) |                      (((long)b4 & 0xff) << 32) |                      (((long)b3 & 0xff) << 24) |                      (((long)b2 & 0xff) << 16) |                      (((long)b1 & 0xff) << 8) |                      (((long)b0 & 0xff) << 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The following statement contains a magic number: return ((((long)b7 & 0xff) << 56) |                      (((long)b6 & 0xff) << 48) |                      (((long)b5 & 0xff) << 40) |                      (((long)b4 & 0xff) << 32) |                      (((long)b3 & 0xff) << 24) |                      (((long)b2 & 0xff) << 16) |                      (((long)b1 & 0xff) << 8) |                      (((long)b0 & 0xff) << 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The following statement contains a magic number: return ((((long)b7 & 0xff) << 56) |                      (((long)b6 & 0xff) << 48) |                      (((long)b5 & 0xff) << 40) |                      (((long)b4 & 0xff) << 32) |                      (((long)b3 & 0xff) << 24) |                      (((long)b2 & 0xff) << 16) |                      (((long)b1 & 0xff) << 8) |                      (((long)b0 & 0xff) << 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The following statement contains a magic number: return ((((long)b7 & 0xff) << 56) |                      (((long)b6 & 0xff) << 48) |                      (((long)b5 & 0xff) << 40) |                      (((long)b4 & 0xff) << 32) |                      (((long)b3 & 0xff) << 24) |                      (((long)b2 & 0xff) << 16) |                      (((long)b1 & 0xff) << 8) |                      (((long)b0 & 0xff) << 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,MakeLong,The following statement contains a magic number: return ((((long)b7 & 0xff) << 56) |                      (((long)b6 & 0xff) << 48) |                      (((long)b5 & 0xff) << 40) |                      (((long)b4 & 0xff) << 32) |                      (((long)b3 & 0xff) << 24) |                      (((long)b2 & 0xff) << 16) |                      (((long)b1 & 0xff) << 8) |                      (((long)b0 & 0xff) << 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongL,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 7)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongL,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 7)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongL,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 7)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongL,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 7)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongL,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 7)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongL,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 7)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 0));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongB,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 0)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 7));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongB,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 0)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 7));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongB,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 0)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 7));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongB,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 0)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 7));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongB,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 0)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 7));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetLongB,The following statement contains a magic number: return MakeLong(bb.GetInternal(bi + 0)'                          bb.GetInternal(bi + 1)'                          bb.GetInternal(bi + 2)'                          bb.GetInternal(bi + 3)'                          bb.GetInternal(bi + 4)'                          bb.GetInternal(bi + 5)'                          bb.GetInternal(bi + 6)'                          bb.GetInternal(bi + 7));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Long7,The following statement contains a magic number: return (byte)(x >> 56);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Long6,The following statement contains a magic number: return (byte)(x >> 48);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Long5,The following statement contains a magic number: return (byte)(x >> 40);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Long4,The following statement contains a magic number: return (byte)(x >> 32);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Long3,The following statement contains a magic number: return (byte)(x >> 24);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Long2,The following statement contains a magic number: return (byte)(x >> 16);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,Long1,The following statement contains a magic number: return (byte)(x >> 8);
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongL,The following statement contains a magic number: bb.PutInternal(bi + 7' Long7(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongL,The following statement contains a magic number: bb.PutInternal(bi + 6' Long6(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongL,The following statement contains a magic number: bb.PutInternal(bi + 5' Long5(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongL,The following statement contains a magic number: bb.PutInternal(bi + 4' Long4(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongL,The following statement contains a magic number: bb.PutInternal(bi + 3' Long3(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongL,The following statement contains a magic number: bb.PutInternal(bi + 2' Long2(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongB,The following statement contains a magic number: bb.PutInternal(bi + 2' Long5(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongB,The following statement contains a magic number: bb.PutInternal(bi + 3' Long4(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongB,The following statement contains a magic number: bb.PutInternal(bi + 4' Long3(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongB,The following statement contains a magic number: bb.PutInternal(bi + 5' Long2(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongB,The following statement contains a magic number: bb.PutInternal(bi + 6' Long1(x));
Magic Number,Mina.Core.Buffer,Bits,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutLongB,The following statement contains a magic number: bb.PutInternal(bi + 7' Long0(x));
Magic Number,Mina.Core.Buffer,ByteBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\ByteBuffer.cs,Compact,The following statement contains a magic number: if (AutoShrink && remaining <= (capacity >> 2) && capacity > MinimumCapacity)              {                  Int32 newCapacity = capacity;                  Int32 minCapacity = Math.Max(MinimumCapacity' Remaining << 1);                  for (; ; )                  {                      if ((newCapacity >> 1) < minCapacity)                          break;                      newCapacity >>= 1;                  }                  newCapacity = Math.Max(minCapacity' newCapacity);                  if (newCapacity == capacity)                      return this;                    // Shrink and compact:                  // Sanity check.                  if (remaining > newCapacity)                      throw new InvalidOperationException("The amount of the remaining bytes is greater than the new capacity.");                    // Reallocate.                  Byte[] newHb = new Byte[newCapacity];                  System.Buffer.BlockCopy(_hb' Offset(Position)' newHb' 0' remaining);                    _hb = newHb;                  _offset = 0;                    Recapacity(newCapacity);              }              else              {                  System.Buffer.BlockCopy(_hb' Offset(Position)' _hb' Offset(0)' Remaining);              }
Magic Number,Mina.Core.Buffer,IoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBuffer.cs,HighestOneBit,The following statement contains a magic number: i |= (i >> 2);
Magic Number,Mina.Core.Buffer,IoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBuffer.cs,HighestOneBit,The following statement contains a magic number: i |= (i >> 4);
Magic Number,Mina.Core.Buffer,IoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBuffer.cs,HighestOneBit,The following statement contains a magic number: i |= (i >> 8);
Magic Number,Mina.Core.Buffer,IoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBuffer.cs,HighestOneBit,The following statement contains a magic number: i |= (i >> 16);
Magic Number,Mina.Core.Buffer,IoBufferHexDumper,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBufferHexDumper.cs,IoBufferHexDumper,The following statement contains a magic number: Char[] high = new Char[256];
Magic Number,Mina.Core.Buffer,IoBufferHexDumper,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBufferHexDumper.cs,IoBufferHexDumper,The following statement contains a magic number: Char[] low = new Char[256];
Magic Number,Mina.Core.Buffer,IoBufferHexDumper,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBufferHexDumper.cs,IoBufferHexDumper,The following statement contains a magic number: for (Int32 i = 0; i < 256; i++)              {                  high[i] = digits[i >> 4];                  low[i] = digits[i & 0x0F];              }
Magic Number,Mina.Core.Buffer,IoBufferHexDumper,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBufferHexDumper.cs,IoBufferHexDumper,The following statement contains a magic number: for (Int32 i = 0; i < 256; i++)              {                  high[i] = digits[i >> 4];                  low[i] = digits[i & 0x0F];              }
Magic Number,Mina.Core.Buffer,IoBufferHexDumper,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBufferHexDumper.cs,GetHexdump,The following statement contains a magic number: StringBuilder sb = new StringBuilder(size * 3 + 3);
Magic Number,Mina.Core.Buffer,IoBufferHexDumper,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\IoBufferHexDumper.cs,GetHexdump,The following statement contains a magic number: StringBuilder sb = new StringBuilder(size * 3 + 3);
Magic Number,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,UpdateThroughput,The following statement contains a magic number: lock (_throughputCalculationLock)              {                  Int64 interval = (Int64)(currentTime - _lastThroughputCalculationTime).TotalMilliseconds;                  Int64 minInterval = ThroughputCalculationIntervalInMillis;                  if (minInterval == 0 || interval < minInterval)                  {                      return;                  }                    Int64 readBytes = _readBytes;                  Int64 writtenBytes = _writtenBytes;                  Int64 readMessages = _readMessages;                  Int64 writtenMessages = _writtenMessages;                    _readBytesThroughput = (readBytes - _lastReadBytes) * 1000.0 / interval;                  _writtenBytesThroughput = (writtenBytes - _lastWrittenBytes) * 1000.0 / interval;                  _readMessagesThroughput = (readMessages - _lastReadMessages) * 1000.0 / interval;                  _writtenMessagesThroughput = (writtenMessages - _lastWrittenMessages) * 1000.0 / interval;                    if (_readBytesThroughput > _largestReadBytesThroughput)                  {                      _largestReadBytesThroughput = _readBytesThroughput;                  }                  if (_writtenBytesThroughput > _largestWrittenBytesThroughput)                  {                      _largestWrittenBytesThroughput = _writtenBytesThroughput;                  }                  if (_readMessagesThroughput > _largestReadMessagesThroughput)                  {                      _largestReadMessagesThroughput = _readMessagesThroughput;                  }                  if (_writtenMessagesThroughput > _largestWrittenMessagesThroughput)                  {                      _largestWrittenMessagesThroughput = _writtenMessagesThroughput;                  }                    _lastReadBytes = readBytes;                  _lastWrittenBytes = writtenBytes;                  _lastReadMessages = readMessages;                  _lastWrittenMessages = writtenMessages;                    _lastThroughputCalculationTime = currentTime;              }
Magic Number,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,UpdateThroughput,The following statement contains a magic number: lock (_throughputCalculationLock)              {                  Int64 interval = (Int64)(currentTime - _lastThroughputCalculationTime).TotalMilliseconds;                  Int64 minInterval = ThroughputCalculationIntervalInMillis;                  if (minInterval == 0 || interval < minInterval)                  {                      return;                  }                    Int64 readBytes = _readBytes;                  Int64 writtenBytes = _writtenBytes;                  Int64 readMessages = _readMessages;                  Int64 writtenMessages = _writtenMessages;                    _readBytesThroughput = (readBytes - _lastReadBytes) * 1000.0 / interval;                  _writtenBytesThroughput = (writtenBytes - _lastWrittenBytes) * 1000.0 / interval;                  _readMessagesThroughput = (readMessages - _lastReadMessages) * 1000.0 / interval;                  _writtenMessagesThroughput = (writtenMessages - _lastWrittenMessages) * 1000.0 / interval;                    if (_readBytesThroughput > _largestReadBytesThroughput)                  {                      _largestReadBytesThroughput = _readBytesThroughput;                  }                  if (_writtenBytesThroughput > _largestWrittenBytesThroughput)                  {                      _largestWrittenBytesThroughput = _writtenBytesThroughput;                  }                  if (_readMessagesThroughput > _largestReadMessagesThroughput)                  {                      _largestReadMessagesThroughput = _readMessagesThroughput;                  }                  if (_writtenMessagesThroughput > _largestWrittenMessagesThroughput)                  {                      _largestWrittenMessagesThroughput = _writtenMessagesThroughput;                  }                    _lastReadBytes = readBytes;                  _lastWrittenBytes = writtenBytes;                  _lastReadMessages = readMessages;                  _lastWrittenMessages = writtenMessages;                    _lastThroughputCalculationTime = currentTime;              }
Magic Number,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,UpdateThroughput,The following statement contains a magic number: lock (_throughputCalculationLock)              {                  Int64 interval = (Int64)(currentTime - _lastThroughputCalculationTime).TotalMilliseconds;                  Int64 minInterval = ThroughputCalculationIntervalInMillis;                  if (minInterval == 0 || interval < minInterval)                  {                      return;                  }                    Int64 readBytes = _readBytes;                  Int64 writtenBytes = _writtenBytes;                  Int64 readMessages = _readMessages;                  Int64 writtenMessages = _writtenMessages;                    _readBytesThroughput = (readBytes - _lastReadBytes) * 1000.0 / interval;                  _writtenBytesThroughput = (writtenBytes - _lastWrittenBytes) * 1000.0 / interval;                  _readMessagesThroughput = (readMessages - _lastReadMessages) * 1000.0 / interval;                  _writtenMessagesThroughput = (writtenMessages - _lastWrittenMessages) * 1000.0 / interval;                    if (_readBytesThroughput > _largestReadBytesThroughput)                  {                      _largestReadBytesThroughput = _readBytesThroughput;                  }                  if (_writtenBytesThroughput > _largestWrittenBytesThroughput)                  {                      _largestWrittenBytesThroughput = _writtenBytesThroughput;                  }                  if (_readMessagesThroughput > _largestReadMessagesThroughput)                  {                      _largestReadMessagesThroughput = _readMessagesThroughput;                  }                  if (_writtenMessagesThroughput > _largestWrittenMessagesThroughput)                  {                      _largestWrittenMessagesThroughput = _writtenMessagesThroughput;                  }                    _lastReadBytes = readBytes;                  _lastWrittenBytes = writtenBytes;                  _lastReadMessages = readMessages;                  _lastWrittenMessages = writtenMessages;                    _lastThroughputCalculationTime = currentTime;              }
Magic Number,Mina.Core.Service,IoServiceStatistics,C:\repos\longshine_Mina.NET\Mina.NET\Core\Service\IoServiceStatistics.cs,UpdateThroughput,The following statement contains a magic number: lock (_throughputCalculationLock)              {                  Int64 interval = (Int64)(currentTime - _lastThroughputCalculationTime).TotalMilliseconds;                  Int64 minInterval = ThroughputCalculationIntervalInMillis;                  if (minInterval == 0 || interval < minInterval)                  {                      return;                  }                    Int64 readBytes = _readBytes;                  Int64 writtenBytes = _writtenBytes;                  Int64 readMessages = _readMessages;                  Int64 writtenMessages = _writtenMessages;                    _readBytesThroughput = (readBytes - _lastReadBytes) * 1000.0 / interval;                  _writtenBytesThroughput = (writtenBytes - _lastWrittenBytes) * 1000.0 / interval;                  _readMessagesThroughput = (readMessages - _lastReadMessages) * 1000.0 / interval;                  _writtenMessagesThroughput = (writtenMessages - _lastWrittenMessages) * 1000.0 / interval;                    if (_readBytesThroughput > _largestReadBytesThroughput)                  {                      _largestReadBytesThroughput = _readBytesThroughput;                  }                  if (_writtenBytesThroughput > _largestWrittenBytesThroughput)                  {                      _largestWrittenBytesThroughput = _writtenBytesThroughput;                  }                  if (_readMessagesThroughput > _largestReadMessagesThroughput)                  {                      _largestReadMessagesThroughput = _readMessagesThroughput;                  }                  if (_writtenMessagesThroughput > _largestWrittenMessagesThroughput)                  {                      _largestWrittenMessagesThroughput = _writtenMessagesThroughput;                  }                    _lastReadBytes = readBytes;                  _lastWrittenBytes = writtenBytes;                  _lastReadMessages = readMessages;                  _lastWrittenMessages = writtenMessages;                    _lastThroughputCalculationTime = currentTime;              }
Magic Number,Mina.Core.Session,AttributeKey,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AttributeKey.cs,GetHashCode,The following statement contains a magic number: int h = 17 * 37 + ((_name == null) ? 0 : _name.GetHashCode());
Magic Number,Mina.Core.Session,AttributeKey,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AttributeKey.cs,GetHashCode,The following statement contains a magic number: int h = 17 * 37 + ((_name == null) ? 0 : _name.GetHashCode());
Magic Number,Mina.Core.Session,AbstractIoSession,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AbstractIoSession.cs,UpdateThroughput,The following statement contains a magic number: _readBytesThroughput = (_readBytes - _lastReadBytes) * 1000.0 / interval;
Magic Number,Mina.Core.Session,AbstractIoSession,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AbstractIoSession.cs,UpdateThroughput,The following statement contains a magic number: _writtenBytesThroughput = (_writtenBytes - _lastWrittenBytes) * 1000.0 / interval;
Magic Number,Mina.Core.Session,AbstractIoSession,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AbstractIoSession.cs,UpdateThroughput,The following statement contains a magic number: _readMessagesThroughput = (_readMessages - _lastReadMessages) * 1000.0 / interval;
Magic Number,Mina.Core.Session,AbstractIoSession,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AbstractIoSession.cs,UpdateThroughput,The following statement contains a magic number: _writtenMessagesThroughput = (_writtenMessages - _lastWrittenMessages) * 1000.0 / interval;
Magic Number,Mina.Filter.Codec,AbstractProtocolEncoderOutput,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\AbstractProtocolEncoderOutput.cs,MergeAll,The following statement contains a magic number: if (_queue.Count < 2)                  // no need to merge!                  return;
Magic Number,Mina.Filter.Codec.Serialization,ObjectSerializationDecoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\Serialization\ObjectSerializationDecoder.cs,DoDecode,The following statement contains a magic number: if (!input.PrefixedDataAvailable(4' _maxObjectSize))                  return false;
Magic Number,Mina.Filter.Codec.Serialization,ObjectSerializationEncoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\Serialization\ObjectSerializationEncoder.cs,Encode,The following statement contains a magic number: IoBuffer buf = IoBuffer.Allocate(64);
Magic Number,Mina.Filter.Codec.Serialization,ObjectSerializationEncoder,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\Serialization\ObjectSerializationEncoder.cs,Encode,The following statement contains a magic number: Int32 objectSize = buf.Position - 4;
Magic Number,Mina.Filter.Codec.StateMachine,ConsumeToEndOfSessionDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\ConsumeToEndOfSessionDecodingState.cs,Decode,The following statement contains a magic number: if (_buffer == null)              {                  _buffer = IoBuffer.Allocate(256);                  _buffer.AutoExpand = true;              }
Magic Number,Mina.Filter.Codec.StateMachine,IntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\IntegerDecodingState.cs,Decode,The following statement contains a magic number: while (input.HasRemaining)              {                  switch (_counter)                  {                      case 0:                          _firstByte = input.Get() & 0xff;                          break;                      case 1:                          _secondByte = input.Get() & 0xff;                          break;                      case 2:                          _thirdByte = input.Get() & 0xff;                          break;                      case 3:                          _counter = 0;                          return FinishDecode((_firstByte << 24) | (_secondByte << 16) | (_thirdByte << 8) | (input.Get() & 0xff)' output);                  }                    _counter++;              }
Magic Number,Mina.Filter.Codec.StateMachine,IntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\IntegerDecodingState.cs,Decode,The following statement contains a magic number: while (input.HasRemaining)              {                  switch (_counter)                  {                      case 0:                          _firstByte = input.Get() & 0xff;                          break;                      case 1:                          _secondByte = input.Get() & 0xff;                          break;                      case 2:                          _thirdByte = input.Get() & 0xff;                          break;                      case 3:                          _counter = 0;                          return FinishDecode((_firstByte << 24) | (_secondByte << 16) | (_thirdByte << 8) | (input.Get() & 0xff)' output);                  }                    _counter++;              }
Magic Number,Mina.Filter.Codec.StateMachine,IntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\IntegerDecodingState.cs,Decode,The following statement contains a magic number: while (input.HasRemaining)              {                  switch (_counter)                  {                      case 0:                          _firstByte = input.Get() & 0xff;                          break;                      case 1:                          _secondByte = input.Get() & 0xff;                          break;                      case 2:                          _thirdByte = input.Get() & 0xff;                          break;                      case 3:                          _counter = 0;                          return FinishDecode((_firstByte << 24) | (_secondByte << 16) | (_thirdByte << 8) | (input.Get() & 0xff)' output);                  }                    _counter++;              }
Magic Number,Mina.Filter.Codec.StateMachine,IntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\IntegerDecodingState.cs,Decode,The following statement contains a magic number: while (input.HasRemaining)              {                  switch (_counter)                  {                      case 0:                          _firstByte = input.Get() & 0xff;                          break;                      case 1:                          _secondByte = input.Get() & 0xff;                          break;                      case 2:                          _thirdByte = input.Get() & 0xff;                          break;                      case 3:                          _counter = 0;                          return FinishDecode((_firstByte << 24) | (_secondByte << 16) | (_thirdByte << 8) | (input.Get() & 0xff)' output);                  }                    _counter++;              }
Magic Number,Mina.Filter.Codec.StateMachine,IntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\IntegerDecodingState.cs,Decode,The following statement contains a magic number: while (input.HasRemaining)              {                  switch (_counter)                  {                      case 0:                          _firstByte = input.Get() & 0xff;                          break;                      case 1:                          _secondByte = input.Get() & 0xff;                          break;                      case 2:                          _thirdByte = input.Get() & 0xff;                          break;                      case 3:                          _counter = 0;                          return FinishDecode((_firstByte << 24) | (_secondByte << 16) | (_thirdByte << 8) | (input.Get() & 0xff)' output);                  }                    _counter++;              }
Magic Number,Mina.Filter.Codec.StateMachine,LinearWhitespaceSkippingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\LinearWhitespaceSkippingState.cs,CanSkip,The following statement contains a magic number: return b == 32 || b == 9;
Magic Number,Mina.Filter.Codec.StateMachine,LinearWhitespaceSkippingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\LinearWhitespaceSkippingState.cs,CanSkip,The following statement contains a magic number: return b == 32 || b == 9;
Magic Number,Mina.Filter.Codec.StateMachine,ShortIntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\ShortIntegerDecodingState.cs,Decode,The following statement contains a magic number: while (input.HasRemaining)              {                  switch (_counter)                  {                      case 0:                          _highByte = input.Get() & 0xff;                          break;                      case 1:                          _counter = 0;                          return FinishDecode((Int16)((_highByte << 8) | (input.Get() & 0xff))' output);                  }                    _counter++;              }
Magic Number,Mina.Filter.ErrorGenerating,ErrorGeneratingFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\ErrorGenerating\ErrorGeneratingFilter.cs,InsertBytesToNewIoBuffer,The following statement contains a magic number: if (_insertByteProbability > _rng.Next(1000))              {                  if (log.IsInfoEnabled)                      log.Info(buffer.GetHexDump());                    // where to insert bytes ?                  int pos = _rng.Next(buffer.Remaining) - 1;                    // how many byte to insert ?                  int count = _rng.Next(_maxInsertByte - 1) + 1;                    IoBuffer newBuff = IoBuffer.Allocate(buffer.Remaining + count);                  for (int i = 0; i < pos; i++)                      newBuff.Put(buffer.Get());                  for (int i = 0; i < count; i++)                  {                      newBuff.Put((byte)(_rng.Next(256)));                  }                  while (buffer.Remaining > 0)                  {                      newBuff.Put(buffer.Get());                  }                  newBuff.Flip();                    if (log.IsInfoEnabled)                  {                      log.Info("Inserted " + count + " bytes.");                      log.Info(newBuff.GetHexDump());                  }                  return newBuff;              }
Magic Number,Mina.Filter.ErrorGenerating,ErrorGeneratingFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\ErrorGenerating\ErrorGeneratingFilter.cs,InsertBytesToNewIoBuffer,The following statement contains a magic number: if (_insertByteProbability > _rng.Next(1000))              {                  if (log.IsInfoEnabled)                      log.Info(buffer.GetHexDump());                    // where to insert bytes ?                  int pos = _rng.Next(buffer.Remaining) - 1;                    // how many byte to insert ?                  int count = _rng.Next(_maxInsertByte - 1) + 1;                    IoBuffer newBuff = IoBuffer.Allocate(buffer.Remaining + count);                  for (int i = 0; i < pos; i++)                      newBuff.Put(buffer.Get());                  for (int i = 0; i < count; i++)                  {                      newBuff.Put((byte)(_rng.Next(256)));                  }                  while (buffer.Remaining > 0)                  {                      newBuff.Put(buffer.Get());                  }                  newBuff.Flip();                    if (log.IsInfoEnabled)                  {                      log.Info("Inserted " + count + " bytes.");                      log.Info(newBuff.GetHexDump());                  }                  return newBuff;              }
Magic Number,Mina.Filter.ErrorGenerating,ErrorGeneratingFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\ErrorGenerating\ErrorGeneratingFilter.cs,ManipulateIoBuffer,The following statement contains a magic number: if ((buffer.Remaining > 0) && (_removeByteProbability > _rng.Next(1000)))              {                  if (log.IsInfoEnabled)                      log.Info(buffer.GetHexDump());                    // where to remove bytes ?                  int pos = _rng.Next(buffer.Remaining);                  // how many byte to remove ?                  int count = _rng.Next(buffer.Remaining - pos) + 1;                  if (count == buffer.Remaining)                      count = buffer.Remaining - 1;                    IoBuffer newBuff = IoBuffer.Allocate(buffer.Remaining - count);                  for (int i = 0; i < pos; i++)                      newBuff.Put(buffer.Get());                    buffer.Skip(count); // hole                  while (newBuff.Remaining > 0)                      newBuff.Put(buffer.Get());                  newBuff.Flip();                  // copy the new buffer in the old one                  buffer.Rewind();                  buffer.Put(newBuff);                  buffer.Flip();                    if (log.IsInfoEnabled)                  {                      log.Info("Removed " + count + " bytes at position " + pos + ".");                      log.Info(buffer.GetHexDump());                  }              }
Magic Number,Mina.Filter.ErrorGenerating,ErrorGeneratingFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\ErrorGenerating\ErrorGeneratingFilter.cs,ManipulateIoBuffer,The following statement contains a magic number: if ((buffer.Remaining > 0) && (_changeByteProbability > _rng.Next(1000)))              {                  if (log.IsInfoEnabled)                      log.Info(buffer.GetHexDump());                    // how many byte to change ?                  int count = _rng.Next(buffer.Remaining - 1) + 1;                    byte[] values = new byte[count];                  _rng.NextBytes(values);                  for (int i = 0; i < values.Length; i++)                  {                      int pos = _rng.Next(buffer.Remaining);                      buffer.Put(pos' values[i]);                  }                    if (log.IsInfoEnabled)                  {                      log.Info("Modified " + count + " bytes.");                      log.Info(buffer.GetHexDump());                  }              }
Magic Number,Mina.Filter.Executor,DefaultIoEventSizeEstimator,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventSizeEstimator.cs,EstimateSize,The following statement contains a magic number: if (obj == null)                  return 8;
Magic Number,Mina.Filter.Executor,DefaultIoEventSizeEstimator,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventSizeEstimator.cs,EstimateSize,The following statement contains a magic number: Int32 answer = 8 + EstimateSize(obj.GetType()' null);
Magic Number,Mina.Filter.Executor,DefaultIoEventSizeEstimator,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventSizeEstimator.cs,EstimateSize,The following statement contains a magic number: answer = 8;
Magic Number,Mina.Filter.Executor,DefaultIoEventSizeEstimator,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventSizeEstimator.cs,Align,The following statement contains a magic number: if (size % 8 != 0)              {                  size /= 8;                  size++;                  size *= 8;              }
Magic Number,Mina.Filter.Executor,DefaultIoEventSizeEstimator,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventSizeEstimator.cs,Align,The following statement contains a magic number: if (size % 8 != 0)              {                  size /= 8;                  size++;                  size *= 8;              }
Magic Number,Mina.Filter.Executor,DefaultIoEventSizeEstimator,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Executor\IoEventSizeEstimator.cs,Align,The following statement contains a magic number: if (size % 8 != 0)              {                  size /= 8;                  size++;                  size *= 8;              }
Magic Number,Mina.Filter.Firewall,BlacklistFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Firewall\BlacklistFilter.cs,Block,The following statement contains a magic number: Block(new Subnet(address' 32));
Magic Number,Mina.Filter.Firewall,BlacklistFilter,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Firewall\BlacklistFilter.cs,Unblock,The following statement contains a magic number: Unblock(new Subnet(address' 32));
Magic Number,Mina.Filter.Firewall,Subnet,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Firewall\Subnet.cs,Subnet,The following statement contains a magic number: if (subnet.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)              {                  if (mask < 0 || mask > 32)                      throw new ArgumentException("Mask has to be an integer between 0 and 32 for an IPv4 address");                  this._subnet = subnet;                  this._subnetInt = ToInt(subnet);                  this._suffix = mask;                                    // binary mask for this subnet                  unchecked                  {                      this._subnetMask = (Int32)IP_MASK_V4 >> (mask - 1);                  }              }              else if (subnet.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6)              {                  if (mask < 0 || mask > 128)                      throw new ArgumentException("Mask has to be an integer between 0 and 128 for an IPv6 address");                  this._subnet = subnet;                  this._subnetLong = ToLong(subnet);                  this._suffix = mask;                    // binary mask for this subnet                  unchecked                  {                      this._subnetMask = (Int64)IP_MASK_V6 >> (mask - 1);                  }              }              else              {                  throw new ArgumentException("Unsupported address family: " + subnet.AddressFamily' "subnet");              }
Magic Number,Mina.Filter.Firewall,Subnet,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Firewall\Subnet.cs,Subnet,The following statement contains a magic number: if (subnet.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)              {                  if (mask < 0 || mask > 32)                      throw new ArgumentException("Mask has to be an integer between 0 and 32 for an IPv4 address");                  this._subnet = subnet;                  this._subnetInt = ToInt(subnet);                  this._suffix = mask;                                    // binary mask for this subnet                  unchecked                  {                      this._subnetMask = (Int32)IP_MASK_V4 >> (mask - 1);                  }              }              else if (subnet.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6)              {                  if (mask < 0 || mask > 128)                      throw new ArgumentException("Mask has to be an integer between 0 and 128 for an IPv6 address");                  this._subnet = subnet;                  this._subnetLong = ToLong(subnet);                  this._suffix = mask;                    // binary mask for this subnet                  unchecked                  {                      this._subnetMask = (Int64)IP_MASK_V6 >> (mask - 1);                  }              }              else              {                  throw new ArgumentException("Unsupported address family: " + subnet.AddressFamily' "subnet");              }
Magic Number,Mina.Filter.Firewall,Subnet,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Firewall\Subnet.cs,GetHashCode,The following statement contains a magic number: return 17 * _subnetInt + _suffix;
Magic Number,Mina.Filter.Firewall,Subnet,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Firewall\Subnet.cs,ToInt,The following statement contains a magic number: for (Int32 i = 0; i < address.Length; i++)              {                  result <<= 8;                  result |= address[i] & BYTE_MASK;              }
Magic Number,Mina.Filter.Firewall,Subnet,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Firewall\Subnet.cs,ToLong,The following statement contains a magic number: for (Int32 i = 0; i < address.Length; i++)              {                  result <<= 8;                  result |= (UInt32)(address[i] & BYTE_MASK);              }
Magic Number,Mina.Filter.Ssl,IoSessionStream,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Ssl\SslFilter.cs,IoSessionStream,The following statement contains a magic number: _buf = IoBuffer.Allocate(16);
Magic Number,Mina.Handler.Stream,IoSessionStream,C:\repos\longshine_Mina.NET\Mina.NET\Handler\Stream\IoSessionStream.cs,IoSessionStream,The following statement contains a magic number: _buf = IoBuffer.Allocate(16);
Magic Number,Mina.Transport.Loopback,LoopbackAcceptor,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Loopback\LoopbackAcceptor.cs,BindInternal,The following statement contains a magic number: lock (BoundHandlers)              {                  foreach (EndPoint ep in localEndPoints)                  {                      LoopbackEndPoint localEP = ep as LoopbackEndPoint;                      if (localEP == null || localEP.Port == 0)                      {                          localEP = null;                          for (Int32 i = 10000; i < Int32.MaxValue; i++)                          {                              LoopbackEndPoint newLocalEP = new LoopbackEndPoint(i);                              if (!BoundHandlers.ContainsKey(newLocalEP) && !newLocalEPs.Contains(newLocalEP))                              {                                  localEP = newLocalEP;                                  break;                              }                          }                            if (localEP == null)                              throw new IOException("No port available.");                      }                      else if (localEP.Port < 0)                      {                          throw new IOException("Bind port number must be 0 or above.");                      }                      else if (BoundHandlers.ContainsKey(localEP))                      {                          throw new IOException("Address already bound: " + localEP);                      }                        newLocalEPs.Add(localEP);                  }                    foreach (LoopbackEndPoint localEP in newLocalEPs)                  {                      if (BoundHandlers.ContainsKey(localEP))                      {                          foreach (LoopbackEndPoint ep in newLocalEPs)                          {                              BoundHandlers.Remove(ep);                          }                          throw new IOException("Duplicate local address: " + localEP);                      }                      else                      {                          BoundHandlers[localEP] = new LoopbackPipe(this' localEP' Handler);                      }                  }              }
Magic Number,Mina.Transport.Serial,SerialConnector,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Serial\SerialConnector.cs,Connect0,The following statement contains a magic number: if (config.ReadTimeout > 0)                  serialPort.ReadTimeout = config.ReadTimeout * 1000;
Magic Number,Mina.Transport.Serial,SerialConnector,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Serial\SerialConnector.cs,Connect0,The following statement contains a magic number: if (config.WriteTimeout > 0)                  serialPort.WriteTimeout = config.WriteTimeout * 1000;
Missing Default,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,GetPrefixedString,The following switch statement is missing a default case: switch (prefixLength)              {                  case 1:                      dataLength = Get() & 0xff;                      break;                  case 2:                      dataLength = GetInt16() & 0xffff;                      break;                  case 4:                      dataLength = GetInt32();                      break;              }
Missing Default,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following switch statement is missing a default case: switch (prefixLength)                  {                      case 1:                          Put((Byte)0);                          break;                      case 2:                          PutInt16((Int16)0);                          break;                      case 4:                          PutInt32(0);                          break;                  }
Missing Default,Mina.Core.Buffer,AbstractIoBuffer,C:\repos\longshine_Mina.NET\Mina.NET\Core\Buffer\AbstractIoBuffer.cs,PutPrefixedString,The following switch statement is missing a default case: switch (prefixLength)              {                  case 1:                      Put((Byte)bytes.Length);                      break;                  case 2:                      PutInt16((Int16)bytes.Length);                      break;                  case 4:                      PutInt32(bytes.Length);                      break;              }
Missing Default,Mina.Core.Session,AbstractIoSession,C:\repos\longshine_Mina.NET\Mina.NET\Core\Session\AbstractIoSession.cs,GetIdleCount,The following switch statement is missing a default case: switch (status)                  {                      case IdleStatus.BothIdle:                          Interlocked.Exchange(ref _idleCountForBoth' 0);                          break;                      case IdleStatus.ReaderIdle:                          Interlocked.Exchange(ref _idleCountForRead' 0);                          break;                      case IdleStatus.WriterIdle:                          Interlocked.Exchange(ref _idleCountForWrite' 0);                          break;                  }
Missing Default,Mina.Filter.Codec.StateMachine,IntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\IntegerDecodingState.cs,Decode,The following switch statement is missing a default case: switch (_counter)                  {                      case 0:                          _firstByte = input.Get() & 0xff;                          break;                      case 1:                          _secondByte = input.Get() & 0xff;                          break;                      case 2:                          _thirdByte = input.Get() & 0xff;                          break;                      case 3:                          _counter = 0;                          return FinishDecode((_firstByte << 24) | (_secondByte << 16) | (_thirdByte << 8) | (input.Get() & 0xff)' output);                  }
Missing Default,Mina.Filter.Codec.StateMachine,ShortIntegerDecodingState,C:\repos\longshine_Mina.NET\Mina.NET\Filter\Codec\StateMachine\ShortIntegerDecodingState.cs,Decode,The following switch statement is missing a default case: switch (_counter)                  {                      case 0:                          _highByte = input.Get() & 0xff;                          break;                      case 1:                          _counter = 0;                          return FinishDecode((Int16)((_highByte << 8) | (input.Get() & 0xff))' output);                  }
Missing Default,Mina.Transport.Socket,AsyncDatagramConnector,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncDatagramConnector.cs,SocketAsyncEventArgs_Completed,The following switch statement is missing a default case: switch (e.LastOperation)              {                  case SocketAsyncOperation.ReceiveFrom:                      ((AsyncDatagramSession)e.UserToken).ProcessReceive(e);                      break;                  case SocketAsyncOperation.SendTo:                      ((AsyncDatagramSession)e.UserToken).ProcessSend(e);                      break;              }
Missing Default,Mina.Transport.Socket,AsyncSocketConnector,C:\repos\longshine_Mina.NET\Mina.NET\Transport\Socket\AsyncSocketConnector.cs,SocketAsyncEventArgs_Completed,The following switch statement is missing a default case: switch (e.LastOperation)              {                  case SocketAsyncOperation.Connect:                      ProcessConnect(e);                      break;                  case SocketAsyncOperation.Receive:                      ((AsyncSocketSession)e.UserToken).ProcessReceive(e);                      break;                  case SocketAsyncOperation.Send:                  case SocketAsyncOperation.SendPackets:                      ((AsyncSocketSession)e.UserToken).ProcessSend(e);                      break;              }
