Implementation smell,Namespace,Class,File,Method,Description
Long Method,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetFactory,The method has 183 lines of code.
Complex Method,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,Cyclomatic complexity of the method is 12
Complex Method,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 10
Complex Method,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Insert,Cyclomatic complexity of the method is 11
Complex Method,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Update,Cyclomatic complexity of the method is 14
Complex Method,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 13
Long Parameter List,CalendarReminderService,Program,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Program.cs,Main,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,BuildPageQueries,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Page,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Update,The method has 5 parameters.
Long Parameter List,Internal,MultiPocoFactory,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,FindSplitPoint,The method has 6 parameters.
Long Parameter List,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetFactory,The method has 6 parameters.
Long Parameter List,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetConverter,The method has 8 parameters.
Long Statement,CalendarReminderService,CalendarReminderService,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\CalendarReminderService.cs,Execute,The length of the statement  "	_logger.Info ("{0} assigment(s) to be sent for the week of {1}"' (object)reminders.Count' (object)mondayOfThisWeek.ToShortDateString ()); " is 137.
Long Statement,CalendarReminderService,CalendarReminderWindowsService,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\CalendarReminderWindowsService.cs,Start,The length of the statement  "	var trigger = TriggerBuilder.Create ().ForJob (jobDetail).WithDescription ("myTrigger")//.WithCalendarIntervalSchedule(a => a.WithIntervalInMinutes(1)) " is 151.
Long Statement,CalendarReminderService,EmailHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\EmailHelper.cs,SendAssignmentReminderEmail,The length of the statement  "	var email = Email.From ("assignmentreminder@gmail.com"' "Congregation Assignment Reminder").To (calendarEvent.Email).Subject ("Congregation Assignment Reminder: " + calendarEvent.Title + " " + calendarEvent.AssignmnetDate.ToShortDateString ()).UsingClient (_smtpClient).UsingTemplateFromFile ("emailtemplate.txt"' new { " is 319.
Long Statement,CalendarReminderService,EmailHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\EmailHelper.cs,SendAssignmentReminderEmail,The length of the statement  "	if (calendarEvent.Assignment.Contains ("Tidying Assignment") || calendarEvent.Assignment.Contains ("Cleaning Assignment")) { " is 124.
Long Statement,CalendarReminderService,EmailHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\EmailHelper.cs,SendNoEventsEmail,The length of the statement  "	var email = Email.From ("assignmentreminder@gmail.com"' "Congregation Assignment Reminder").To ("ken.burkhardt@gmail.com").Subject ("Congregation Assignment Reminder").UsingClient (_smtpClient).UsingTemplateFromFile ("noassignmentemailtemplate.txt"' new { " is 255.
Long Statement,CalendarReminderService,EmailHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\EmailHelper.cs,SendKMEmail,The length of the statement  "	var email = Email.From ("assignmentreminder@gmail.com"' "Congregation Assignment Reminder").To (assignee.Email).Subject ("New Kingdom Ministry").UsingClient (_smtpClient).UsingTemplateFromFile ("km.txt"' new { " is 209.
Long Statement,CalendarReminderService,EmailHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\EmailHelper.cs,SendNoKMFoundEmail,The length of the statement  "	var email = Email.From ("assignmentreminder@gmail.com"' "Congregation Assignment Reminder").To ("ken.burkhardt@gmail.com").Subject ("New Kingdom Ministry").UsingClient (_smtpClient).UsingTemplateFromFile ("nokmfoundemailtemplate.txt"' new { " is 240.
Long Statement,CalendarReminderService,EmailHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\EmailHelper.cs,SendTestEmail,The length of the statement  "	var email = Email.From ("assignmentreminder@gmail.com"' "Congregation Assignment Reminder").To (emailAddress).Subject ("New Kingdom Ministry Test").UsingClient (_smtpClient).UsingTemplateFromFile ("km.txt"' new { " is 212.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The length of the statement  "			// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000 " is 179.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Query,The length of the statement  "			var factory = pd.GetFactory (cmd.CommandText' _sharedConnection.ConnectionString' 0' r.FieldCount' r) as Func<IDataReader' T>; " is 126.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Exists,The length of the statement  "	return Exists<T> (string.Format ("{0}=@0"' _dbType.EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 137.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Single,The length of the statement  "	return Single<T> (string.Format ("WHERE {0}=@0"' _dbType.EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 143.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,SingleOrDefault,The length of the statement  "	return SingleOrDefault<T> (string.Format ("WHERE {0}=@0"' _dbType.EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 152.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Insert,The length of the statement  "				cmd.CommandText = string.Format ("INSERT INTO {0} ({1}){2} VALUES ({3})"' _dbType.EscapeTableName (tableName)' string.Join ("'"' names.ToArray ())' outputClause' string.Join ("'"' values.ToArray ())); " is 200.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Update,The length of the statement  "				cmd.CommandText = string.Format ("UPDATE {0} SET {1} WHERE {2} = {3}{4}"' _dbType.EscapeTableName (tableName)' sb.ToString ()' _dbType.EscapeSqlIdentifier (primaryKeyName)' _paramPrefix' index++); " is 196.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Delete,The length of the statement  "	var sql = string.Format ("DELETE FROM {0} WHERE {1}=@0"' _dbType.EscapeTableName (tableName)' _dbType.EscapeSqlIdentifier (primaryKeyName)); " is 140.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Delete,The length of the statement  "	return Execute (new Sql (string.Format ("DELETE FROM {0}"' _dbType.EscapeTableName (pd.TableInfo.TableName))).Append (sql)); " is 124.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,IsNew,The length of the statement  "			throw new ArgumentException (string.Format ("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 142.
Long Statement,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,IsNew,The length of the statement  "		throw new InvalidOperationException ("IsNew() and Save() are only supported on tables with auto-increment/identity primary key columns"); " is 137.
Long Statement,Internal,MultiPocoFactory,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetAutoMapper,The length of the statement  "					throw new InvalidOperationException (string.Format ("Can't auto join {0} as {1} has more than one property of type {0}"' types [i]' types [j])); " is 144.
Long Statement,Internal,MultiPocoFactory,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "		if (usedColumns.ContainsKey (fieldName) || (!pdThis.Columns.ContainsKey (fieldName) && pdNext.Columns.ContainsKey (fieldName))) { " is 129.
Long Statement,Internal,MultiPocoFactory,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "	throw new InvalidOperationException (string.Format ("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 122.
Long Statement,Internal,MultiPocoFactory,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "	return (Func<IDataReader' object' TRet>)m.CreateDelegate (typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory () { " is 124.
Long Statement,Internal,MultiPocoFactory,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetFactory,The length of the statement  "	var key = Tuple.Create<Type' ArrayKey<Type>' string' string> (typeof(TRet)' new ArrayKey<Type> (types)' ConnectionString' sql); " is 127.
Long Statement,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetFactory,The length of the statement  "			il.Emit (OpCodes.Newobj' type.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null)); " is 142.
Long Statement,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetFactory,The length of the statement  "					if (valuegetter != null && valuegetter.ReturnType == srcType && (valuegetter.ReturnType == dstType || valuegetter.ReturnType == Nullable.GetUnderlyingType (dstType))) { " is 168.
Long Statement,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetFactory,The length of the statement  "			var fnOnLoaded = RecurseInheritedTypes<MethodInfo> (type' x => x.GetMethod ("OnLoaded"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null)); " is 184.
Long Statement,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetConverter,The length of the statement  "	if (pc != null && pc.ForceToUtc && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?))) { " is 130.
Long Statement,Internal,PagingHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,SplitSQL,The length of the statement  "		parts.sqlCount = sql.Substring (0' g.Index) + "COUNT(" + m.Groups [1].ToString ().Trim () + ") " + sql.Substring (g.Index + g.Length); " is 134.
Long Statement,Internal,ParametersHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentOutOfRangeException (string.Format ("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' args_src.Length' sql)); " is 163.
Long Statement,Internal,ParametersHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentException (string.Format ("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' sql)); " is 162.
Long Statement,Internal,ParametersHelper,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,ProcessParams,The length of the statement  "		if ((arg_val as System.Collections.IEnumerable) != null && (arg_val as string) == null && (arg_val as byte[]) == null) { " is 120.
Long Statement,DatabaseTypes,SqlServerCEDatabaseType,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,BuildPageQuery,The length of the statement  "	var sqlPage = string.Format ("{0}\nOFFSET @{1} ROWS FETCH NEXT @{2} ROWS ONLY"' parts.sql' args.Length' args.Length + 1); " is 121.
Long Statement,DatabaseTypes,SqlServerDatabaseType,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,BuildPageQuery,The length of the statement  "	var sqlPage = string.Format ("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn>@{2} AND peta_rn<=@{3}"' parts.sqlOrderBy == null ? "ORDER BY (SELECT NULL)" : parts.sqlOrderBy' parts.sqlSelectRemoved' args.Length' args.Length + 1); " is 266.
Complex Conditional,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetFactory,The conditional expression  "valuegetter != null && valuegetter.ReturnType == srcType && (valuegetter.ReturnType == dstType || valuegetter.ReturnType == Nullable.GetUnderlyingType (dstType))"  is complex.
Complex Conditional,Internal,PocoData,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,GetConverter,The conditional expression  "pc != null && pc.ForceToUtc && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?))"  is complex.
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	var t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	var t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	var t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	var t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = 40;  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  	p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((value as string).Length + 1' 4000);  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  
Magic Number,PetaPoco,Sql,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = ParametersHelper.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = ParametersHelper.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  	sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  	sql = "' " + sql.Substring (9);  
Magic Number,PetaPoco,Sql,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "' " + sql.Substring (9);  
Magic Number,Internal,ArrayKey,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,ArrayKey,The following statement contains a magic number: _hashCode = 17;  
Magic Number,Internal,ArrayKey,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,ArrayKey,The following statement contains a magic number: foreach (var k in keys) {  	_hashCode = _hashCode * 23 + (k == null ? 0 : k.GetHashCode ());  }  
Magic Number,Internal,ArrayKey,C:\repos\KennyBu_CalendarReminder\CalendarReminderService\Models\PetaPoco.cs,ArrayKey,The following statement contains a magic number: _hashCode = _hashCode * 23 + (k == null ? 0 : k.GetHashCode ());  
