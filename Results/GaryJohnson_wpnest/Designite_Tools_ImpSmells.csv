Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The method has 103 lines of code.
Long Identifier,Microsoft.Silverlight.Testing.Tools,TestRun,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestRun.cs,,The length of the parameter PollingThreadSleepMilliseconds is 30.
Long Statement,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The length of the statement  "                            str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "tagExpression"' ServiceHelper.UrlEncode(TestServiceEngine.Current.TagExpression))); " is 184.
Long Statement,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The length of the statement  "                        str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "testRunNamePrefix"' TestServiceEngine.Current.TestRunPrefix)); " is 163.
Long Statement,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The length of the statement  "                        str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "computerName"' ServiceHelper.UrlEncode(Environment.MachineName))); " is 167.
Long Statement,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The length of the statement  "                        str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "userName"' ServiceHelper.UrlEncode(Environment.UserName))); " is 160.
Long Statement,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The length of the statement  "                            str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "log"' ServiceHelper.UrlEncode(logShortName))); " is 147.
Empty Catch Block,Microsoft.Silverlight.Testing.Tools,TestServiceEngine,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestServiceEngine.cs,ProcessGetRequest,The method has an empty catch block.
Empty Catch Block,Microsoft.Silverlight.Testing.Tools,TestServiceEngine,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestServiceEngine.cs,ProcessGetRequest,The method has an empty catch block.
Empty Catch Block,Microsoft.Silverlight.Testing.Tools,TestServiceEngine,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestServiceEngine.cs,StartShutdownMonitorThread,The method has an empty catch block.
Empty Catch Block,Microsoft.Silverlight.Testing.Tools,TestService,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestService.cs,Stop,The method has an empty catch block.
Empty Catch Block,Microsoft.Silverlight.Testing.Tools,TestService,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestService.cs,Stop,The method has an empty catch block.
Magic Number,Microsoft.Silverlight.Testing.Tools,TargetDeviceInfo,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TargetDeviceInfo.cs,TargetDeviceInfo,The following statement contains a magic number: Locale = 1033;
Magic Number,Microsoft.Silverlight.Testing.Tools,TestServiceEngine,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestServiceEngine.cs,StartShutdownMonitorThread,The following statement contains a magic number: while (Listening && (DateTime.Now < _shutdownTime))              {                  Thread.Sleep(100);              }
Magic Number,Microsoft.Silverlight.Testing.Tools,TestServiceEngine,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestServiceEngine.cs,StartShutdownMonitorThread,The following statement contains a magic number: try              {                  for (int i = 0; i < 3; i++)                  {                      TestServiceHelper.PingService(HostName);                  }              }              catch              {              }
Magic Number,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The following statement contains a magic number: while (data.Count > 1)              {                  string key = data[0];                  string value = data[1];                  data.RemoveRange(0' 2);                  request[key] = value;              }
Magic Number,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ByteArrayToBitString,The following statement contains a magic number: StringBuilder s = new StringBuilder(bytes.Length * 16);
Magic Number,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ByteArrayToBitString,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  byte b = bytes[i];                  for (int bit = 0; bit < 8; bit++)                  {                      byte flag = (byte)(1 << (7 - bit));                      bool v = (flag & b) == flag;                      s.Append(v ? '1' : '0');                  }              }
Magic Number,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ByteArrayToBitString,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  byte b = bytes[i];                  for (int bit = 0; bit < 8; bit++)                  {                      byte flag = (byte)(1 << (7 - bit));                      bool v = (flag & b) == flag;                      s.Append(v ? '1' : '0');                  }              }
Magic Number,Microsoft.Silverlight.Testing.Tools,TestService,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestService.cs,Stop,The following statement contains a magic number: if (Service.Listening)              {                  Service.Listening = false;                  try                  {                      try                      {                          for (int i = 0; i < 5; i++)                          {                              TestServiceHelper.PingService(Service.HostName);                          }                      }                      catch (WebException)                      {                      }                  }                  catch                  {                  }              }
Missing Default,Microsoft.Silverlight.Testing.Tools,TestServiceEngine,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestServiceEngine.cs,GetMimeType,The following switch statement is missing a default case: switch (ext)              {                  case "xml":                  case "xaml":                      return ContentTypeXml;                    case "xap":                      return ContentTypeXap;              }
Missing Default,Microsoft.Silverlight.Testing.Tools,TestFunctions,C:\repos\GaryJohnson_wpnest\WPNest\Libraries\UnitTesting\Infrastructure\TestService\TestFunctions.cs,ProcessFunction,The following switch statement is missing a default case: switch (func)              {                  case "ping":                      return ServiceHelper.OK("Hello!");                    case "reportTestResults":                      {                          TestRunResult trr = new TestRunResult();                          trr.Log = string.Empty;                          trr.Total = int.Parse(request["total"]' CultureInfo.InvariantCulture);                          trr.Failures = int.Parse(request["failures"]' CultureInfo.InvariantCulture);                          TestRunResult result = trr;                            TestServiceEngine.Current.ProcessResult(result);                          return ServiceHelper.OK(guid);                      }                    case "getRunParameters":                      {                          StringBuilder str = new StringBuilder();                          str.AppendLine("<testRun>");                          str.AppendLine("<options>");                          if (!string.IsNullOrEmpty(TestServiceEngine.Current.TagExpression))                          {                              str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "tagExpression"' ServiceHelper.UrlEncode(TestServiceEngine.Current.TagExpression)));                          }                          str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "testRunNamePrefix"' TestServiceEngine.Current.TestRunPrefix));                          str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "computerName"' ServiceHelper.UrlEncode(Environment.MachineName)));                          str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "userName"' ServiceHelper.UrlEncode(Environment.UserName)));                          if (!string.IsNullOrEmpty(TestServiceEngine.Current.LogFile))                          {                              string logShortName = TestServiceEngine.Current.LogFile;                              string dir = Path.GetDirectoryName(TestServiceEngine.Current.LogFile);                              if (Directory.Exists(dir))                              {                                  logShortName = Path.GetFileName(TestServiceEngine.Current.LogFile);                              }                              str.AppendLine(string.Format(CultureInfo.InvariantCulture' "<option name=\"{0}\" value=\"{1}\" />"' "log"' ServiceHelper.UrlEncode(logShortName)));                          }                          str.AppendLine("</options>");                          str.AppendLine("<arguments>");                          str.AppendLine("</arguments>");                          str.AppendLine("</testRun>");                          Debug.WriteLine("getRunParameters:");                          Debug.WriteLine(str.ToString());                          return ServiceHelper.OK(str.ToString());                      }                    case "saveLogFile":                      {                          string logName = request["logName"];                          FileInfo logInfo = new FileInfo(Path.Combine(path' logName));                          if (!Directory.Exists(logInfo.DirectoryName))                          {                              logInfo = new FileInfo(logName);                          }                          if (!Directory.Exists(logInfo.DirectoryName))                          {                              Console.WriteLine("Could not find directory to store " + logName);                              return ServiceHelper.Error("Could not store log file.");                          }                          else                          {                              File.WriteAllText(logInfo.FullName' postData);                          }                            return ServiceHelper.OK();                      }                        // Improved code coverage transport' base 64 - store as the                      // simple bit character string for compatibility                  case "saveCodeCoverageBase64":                      string ba = ByteArrayToBitString(Convert.FromBase64String(postData));                      Console.WriteLine("Saving code coverage information...");                      File.WriteAllText(Path.Combine(path' "RawCodeCoverage.txt")' ba);                        return ServiceHelper.OK();                        // Legacy code coverage format' simple string of raw 0 and 1                      // characters over the wire. Highly inefficient.                  case "saveCodeCoverage":                      Console.WriteLine("Saving code coverage information...");                      File.WriteAllText(Path.Combine(path' "RawCodeCoverage.txt")' postData);                        return ServiceHelper.OK();              }
