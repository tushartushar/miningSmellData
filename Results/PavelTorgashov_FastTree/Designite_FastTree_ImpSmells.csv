Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnKeyDown,Cyclomatic complexity of the method is 24
Complex Method,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseDown,Cyclomatic complexity of the method is 13
Complex Method,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseSelectItem,Cyclomatic complexity of the method is 9
Complex Method,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,Cyclomatic complexity of the method is 16
Complex Method,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,SelectItem,Cyclomatic complexity of the method is 10
Complex Method,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,SelectItems,Cyclomatic complexity of the method is 9
Complex Method,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,Cyclomatic complexity of the method is 8
Complex Method,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,CollapseItem,Cyclomatic complexity of the method is 18
Long Parameter List,FastTreeNS,DragOverItemEventArgs,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DragOverItemEventArgs,The method has 8 parameters. Parameters: data' keyState' x' y' allowedEffects' effect' itemRect' textRect
Long Parameter List,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragDropMarker,The method has 5 parameters. Parameters: gr' rect' c1' c2' c3
Long Identifier,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,,The length of the parameter startDiapasonSelectedItemIndex is 30.
Long Statement,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOver,The length of the statement  "            var ea = new DragOverItemEventArgs(e.Data' e.KeyState' p.X' p.Y' e.AllowedEffect' e.Effect' rect' textRect) { ItemIndex = itemIndex }; " is 134.
Long Statement,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,CalcItemRect,The length of the statement  "                res = Rectangle.FromLTRB(ClientRectangle.Left + Padding.Left' ClientRectangle.Top + Padding.Top - 2' ClientRectangle.Right - Padding.Right' ClientRectangle.Top + Padding.Top - 1); " is 179.
Long Statement,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The length of the statement  "                    mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y)); " is 198.
Long Statement,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The length of the statement  "            if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2)) " is 173.
Long Statement,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawMouseSelectedArea,The length of the statement  "                var rect = new Rectangle(mouseSelectArea.Left - HorizontalScroll.Value' mouseSelectArea.Top - VerticalScroll.Value' mouseSelectArea.Width' mouseSelectArea.Height); " is 163.
Long Statement,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,WndProc,The length of the statement  "                    OnScroll(new ScrollEventArgs(ScrollEventType.ThumbPosition' VerticalScroll.Value + step' ScrollOrientation.VerticalScroll)); " is 124.
Long Statement,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnScrollVertical,The length of the statement  "            OnScroll(new ScrollEventArgs(ScrollEventType.ThumbPosition' newVerticalScrollBarValue' ScrollOrientation.VerticalScroll)); " is 122.
Long Statement,FastTreeNS,VisibleItemInfo,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The length of the statement  "                ExpandBoxType = list.ShowExpandBoxes ? (Expanded ? (list.CanCollapseItem(itemIndex) ? 1 : temp) : (list.CanExpandItem(itemIndex) ? 1 : temp)) : 0; " is 146.
Long Statement,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The length of the statement  "                            gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) }); " is 176.
Complex Conditional,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The conditional expression  "e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2)"  is complex.
Virtual Method Call from Constructor,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,FastListBase,The constructor "FastListBase" calls a virtual method "InitDefaultProperties".
Magic Number,FastTreeNS,FastList,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastList.cs,FastList,The following statement contains a magic number: ItemCount = 100;
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: IconSize = new Size(16' 16);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: IconSize = new Size(16' 16);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: ItemHeightDefault = 17;
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColor = Color.FromArgb(33' 53' 80);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColor = Color.FromArgb(33' 53' 80);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColor = Color.FromArgb(33' 53' 80);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColorOpaque = 100;
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: ItemInterval = 2;
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: ItemIndentDefault = 10;
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: HotTrackingColor = Color.FromArgb(255' 192' 128);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: HotTrackingColor = Color.FromArgb(255' 192' 128);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: HotTrackingColor = Color.FromArgb(255' 192' 128);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOver,The following statement contains a magic number: rect.Inflate(0' 2);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOverItem,The following statement contains a magic number: e.Y < e.ItemRect.Y + e.ItemRect.Height / 2
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,CalcItemRect,The following statement contains a magic number: res = Rectangle.FromLTRB(ClientRectangle.Left + Padding.Left' ClientRectangle.Top + Padding.Top - 2' ClientRectangle.Right - Padding.Right' ClientRectangle.Top + Padding.Top - 1);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseDown,The following statement contains a magic number: CreateDelayedAction(() => OnStartEdit(item.ItemIndex)' 500);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: e.Location.Y <= Padding.Top + ItemHeightDefault / 2
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: var c1 = Color.FromArgb(SelectionColor.A == 255 ? SelectionColorOpaque : SelectionColor.A' SelectionColor);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: var rect = new Rectangle(info.X_ExpandBox' info.Y' 1000' info.Height);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawMouseSelectedArea,The following statement contains a magic number: var c = Color.FromArgb(SelectionColor.A == 255 ? SelectionColorOpaque : SelectionColor.A' SelectionColor);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawSelection,The following statement contains a magic number: var c1 = Color.FromArgb(SelectionColor.A == 255 ? SelectionColorOpaque : SelectionColor.A' SelectionColor);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawSelection,The following statement contains a magic number: var c2 = Color.FromArgb(c1.A / 2' SelectionColor);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawItemIcons,The following statement contains a magic number: var img = (Bitmap)(info.ExpandBoxType == 2 ? ImageEmptyExpand : (info.Expanded ? ImageCollapse : ImageExpand));
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Build,The following statement contains a magic number: AutoScrollMinSize = new Size(AutoScrollMinSize.Width' y + Padding.Bottom + 2);
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,WndProc,The following statement contains a magic number: var step = -3 * ItemHeightDefault * Math.Sign((short) (m.WParam.ToInt64() >> 16));
Magic Number,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,WndProc,The following statement contains a magic number: var step = -3 * ItemHeightDefault * Math.Sign((short) (m.WParam.ToInt64() >> 16));
Magic Number,FastTreeNS,VisibleItemInfo,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: var temp = list.ShowEmptyExpandBoxes ? 2 : 0;
Magic Number,FastTreeNS,VisibleItemInfo,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: x += list.ImageExpand.Width + 2;
Magic Number,FastTreeNS,VisibleItemInfo,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: x += list.ImageCheckBoxOn.Width + 2;
Magic Number,FastTreeNS,VisibleItemInfo,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: x += list.IconSize.Width + 2;
Magic Number,FastTreeNS,VisibleItemInfo,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: X_End = list.ClientSize.Width - list.Padding.Right - 2;
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,FastTree,The following statement contains a magic number: ItemIndentDefault = 16;
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,ScrollToNode,The following statement contains a magic number: y -= ClientSize.Height/2 - 10;
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,ScrollToNode,The following statement contains a magic number: y -= ClientSize.Height/2 - 10;
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,ScrollToNode,The following statement contains a magic number: height += ClientSize.Height - 10;
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: var c1 = Color.FromArgb(255' SelectionColor);
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: var rect = new Rectangle(info.X_ExpandBox + 1' info.Y' 10000' info.Height);
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: rect.Offset(0' 2);
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragDropMarker,The following statement contains a magic number: brush.InterpolationColors = new ColorBlend()                  {                      Positions = new float[] { 0' 0.2f' 0.8f' 1.0f }'                      Colors = new Color[] { c2' c3' c3' c2 }                  };
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragDropMarker,The following statement contains a magic number: brush.InterpolationColors = new ColorBlend()                  {                      Positions = new float[] { 0' 0.2f' 0.8f' 1.0f }'                      Colors = new Color[] { c2' c3' c3' c2 }                  };
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragDropMarker,The following statement contains a magic number: rect = new Rectangle(rect.Left' rect.Top + h / 2 - 2' 50' 4);
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragDropMarker,The following statement contains a magic number: rect = new Rectangle(rect.Left' rect.Top + h / 2 - 2' 50' 4);
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragDropMarker,The following statement contains a magic number: rect = new Rectangle(rect.Left' rect.Top + h / 2 - 2' 50' 4);
Magic Number,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragDropMarker,The following statement contains a magic number: rect = new Rectangle(rect.Left' rect.Top + h / 2 - 2' 50' 4);
Missing Default,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Up:                      if (e.Control)                          ScrollUp();                      else                          SelectPrev();                      break;                    case Keys.Down:                      if (e.Control)                          ScrollDown();                      else                          SelectNext();                      break;                    case Keys.PageUp:                      if (e.Control)                          ScrollPageUp();                      else                      if (SelectedItemIndexes.Count > 0)                      {                          var i = SelectedItemIndexes.First();                          var y = GetItemY(i) - ClientRectMinusPaddings.Height;                          i = YToIndex(y) + 1;                          SelectItem(Math.Max(0' Math.Min(ItemCount - 1' i)));                      }                      break;                    case Keys.PageDown:                      if (e.Control)                          ScrollPageDown();                      else                      if (SelectedItemIndexes.Count > 0)                      {                          var i = SelectedItemIndexes.First();                          var y = GetItemY(i) + ClientRectMinusPaddings.Height;                          i = YToIndex(y);                          SelectItem(i < 0 ? ItemCount - 1 : i);                      }                      break;                    case Keys.Home:                      if (e.Control)                          ScrollToItem(0);                      else                          SelectItem(0);                      break;                    case Keys.End:                      if (e.Control)                          ScrollToItem(ItemCount - 1);                      else                          SelectItem(ItemCount - 1);                      break;                    case Keys.Enter:                  case Keys.Space:                      if (ShowCheckBoxes)                      {                          if (SelectedItemIndexes.Count > 0)                          {                              var val = GetItemChecked(SelectedItemIndexes.First());                              if (val)                                  UncheckSelected();                              else                                  CheckSelected();                          }                      }                      else                      if (ShowExpandBoxes)                      {                          if (SelectedItemIndexes.Count > 0)                          {                              var itemIndex = SelectedItemIndexes.First();                              if (GetItemExpanded(itemIndex))                                  CollapseItem(itemIndex);                              else                                  ExpandItem(itemIndex);                          }                      }                      break;                    case Keys.A:                      if (e.Control)                      {                          SelectAll();                      }                      break;              }
Missing Default,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following switch statement is missing a default case: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Missing Default,FastTreeNS,FastListBase,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnStartEdit,The following switch statement is missing a default case: switch (a.KeyCode)                  {                      case Keys.Escape: OnEndEdit(null); a.Handled = true; a.SuppressKeyPress = true; break;                      case Keys.Enter: OnEndEdit(); a.Handled = true; a.SuppressKeyPress = true; break;                  }
Missing Default,FastTreeNS,FastTree,C:\research\architectureSmells\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,DrawDragOverInsertEffect,The following switch statement is missing a default case: switch (e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      rect.Offset(0' -rect.Height / 2 - ItemInterval - 1);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.InsertAfter:                      rect.Offset(0' rect.Height / 2);                      DrawDragDropMarker(gr' rect' c1' c2' c3);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + ItemIndentDefault;                          var r = new Rectangle(dx' rect.Y + rect.Height / 2' rect.Width' rect.Height);                          DrawDragDropMarker(gr' r' c1' c2' c3);                          using (var pen = new Pen(c1))                              gr.DrawLines(pen' new PointF[] { new Point(r.Left' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2)' new Point(rect.Left + 8' r.Top + r.Height / 2 - 5) });                      }                      break;              }
