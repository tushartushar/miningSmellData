Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseDown,Cyclomatic complexity of the method is 10
Complex Method,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,SelectItem,Cyclomatic complexity of the method is 10
Complex Method,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,SelectItems,Cyclomatic complexity of the method is 9
Complex Method,FastTreeNS,FastTree,C:\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,FastTreeNS,FastTree,C:\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,CollapseItem,Cyclomatic complexity of the method is 17
Long Parameter List,FastTreeNS,DragOverItemEventArgs,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DragOverItemEventArgs,The method has 8 parameters. Parameters: data' keyState' x' y' allowedEffects' effect' itemRect' textRect
Long Identifier,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,,The length of the parameter startDiapasonSelectedItemIndex is 30.
Long Statement,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOver,The length of the statement  "            var ea = new DragOverItemEventArgs(e.Data' e.KeyState' p.X' p.Y' e.AllowedEffect' e.Effect' rect' textRect){ItemIndex = itemIndex}; " is 131.
Long Statement,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,CalcItemRect,The length of the statement  "                res = Rectangle.FromLTRB(ClientRectangle.Left + Padding.Left' ClientRectangle.Top + Padding.Top - 2' ClientRectangle.Right - Padding.Right' ClientRectangle.Top + Padding.Top - 1); " is 179.
Long Statement,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The length of the statement  "                    mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y)); " is 198.
Long Statement,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The length of the statement  "            if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2)) " is 206.
Long Statement,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawMouseSelectedArea,The length of the statement  "                var rect = new Rectangle(mouseSelectArea.Left - HorizontalScroll.Value' mouseSelectArea.Top - VerticalScroll.Value' mouseSelectArea.Width' mouseSelectArea.Height); " is 163.
Long Statement,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnScrollVertical,The length of the statement  "            OnScroll(new ScrollEventArgs(ScrollEventType.ThumbPosition' newVerticalScrollBarValue' ScrollOrientation.VerticalScroll)); " is 122.
Long Statement,FastTreeNS,VisibleItemInfo,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The length of the statement  "                ExpandBoxType = list.ShowExpandBoxes ? (Expanded ? (list.CanCollapseItem(itemIndex) ? 1 : temp) : (list.CanExpandItem(itemIndex) ? 1 : temp)) : 0; " is 146.
Complex Conditional,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The conditional expression  "e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2)"  is complex.
Virtual Method Call from Constructor,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,FastListBase,The constructor "FastListBase" calls a virtual method "InitDefaultProperties".
Magic Number,FastTreeNS,FastList,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastList.cs,FastList,The following statement contains a magic number: if (LicenseManager.UsageMode == LicenseUsageMode.Designtime)              {                  ItemCount = 100;                  ItemTextNeeded += (o' a) => a.Result = "Item " + a.ItemIndex;                  SelectedItemIndexes.Add(0);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: IconSize = new Size(16' 16);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: IconSize = new Size(16' 16);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: ItemHeightDefault = 17;
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColor = Color.FromArgb(33' 53' 80);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColor = Color.FromArgb(33' 53' 80);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColor = Color.FromArgb(33' 53' 80);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: SelectionColorOpaque = 100;
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: ItemInterval = 2;
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: ItemIndentDefault = 10;
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: HotTrackingColor = Color.FromArgb(255' 192' 128);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: HotTrackingColor = Color.FromArgb(255' 192' 128);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,InitDefaultProperties,The following statement contains a magic number: HotTrackingColor = Color.FromArgb(255' 192' 128);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOver,The following statement contains a magic number: if (ea.ItemIndex >= 0 && ea.ItemIndex < ItemCount && itemIndex != ea.ItemIndex)              {                  rect = CalcItemRect(ea.ItemIndex);                  rect.Inflate(0' 2);                  rect.Offset(HorizontalScroll.Value' VerticalScroll.Value);                  ScrollToRectangle(rect);              }              else              {                  if (p.Y <= Padding.Top + ItemHeightDefault/2)                      ScrollUp();                  else if (p.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault/2)                      ScrollDown();              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOver,The following statement contains a magic number: if (ea.ItemIndex >= 0 && ea.ItemIndex < ItemCount && itemIndex != ea.ItemIndex)              {                  rect = CalcItemRect(ea.ItemIndex);                  rect.Inflate(0' 2);                  rect.Offset(HorizontalScroll.Value' VerticalScroll.Value);                  ScrollToRectangle(rect);              }              else              {                  if (p.Y <= Padding.Top + ItemHeightDefault/2)                      ScrollUp();                  else if (p.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault/2)                      ScrollDown();              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOver,The following statement contains a magic number: if (ea.ItemIndex >= 0 && ea.ItemIndex < ItemCount && itemIndex != ea.ItemIndex)              {                  rect = CalcItemRect(ea.ItemIndex);                  rect.Inflate(0' 2);                  rect.Offset(HorizontalScroll.Value' VerticalScroll.Value);                  ScrollToRectangle(rect);              }              else              {                  if (p.Y <= Padding.Top + ItemHeightDefault/2)                      ScrollUp();                  else if (p.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault/2)                      ScrollDown();              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnDragOverItem,The following statement contains a magic number: if (e.Y < e.ItemRect.Y + e.ItemRect.Height / 2)                  e.InsertEffect = InsertEffect.InsertBefore;              else                  e.InsertEffect = InsertEffect.InsertAfter;
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,CalcItemRect,The following statement contains a magic number: if (i < 0)                  res = Rectangle.FromLTRB(ClientRectangle.Left + Padding.Left' ClientRectangle.Top + Padding.Top - 2' ClientRectangle.Right - Padding.Right' ClientRectangle.Top + Padding.Top - 1);              else              {                  var y = GetItemY(i);                  var h = GetItemY(i + 1) - y;                    res = Rectangle.FromLTRB(ClientRectangle.Left + Padding.Left' y' ClientRectangle.Right - Padding.Right'                                           y + h);                    if (index >= itemCount)                      res.Offset(0' (index - itemCount + 1)*ItemHeightDefault);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: if(e.Button == MouseButtons.Left && mouseCanSelectArea)              {                  if (Math.Abs(e.Location.X - startMouseSelectArea.X) > 0)                  {                      var pos = e.Location;                      pos.Offset(HorizontalScroll.Value' VerticalScroll.Value);                      mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y));                        var i1 = YToIndex(startMouseSelectArea.Y);                      var i2 = YToIndex(pos.Y);                      if (i1 >= 0 && i2 >= 0)                      {                          SelectItems(Math.Min(i1' i2)' Math.Max(i1' i2));                      }                        if (e.Location.Y <= Padding.Top + ItemHeightDefault / 2)                          ScrollUp();                      else                      if (e.Location.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault / 2)                          ScrollDown();                        Invalidate();                  }                  else                      mouseSelectArea = Rectangle.Empty;              }              else              if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2))              {                  OnItemDrag(new HashSet<int>(SelectedItemIndexes));              }else              if(e.Button == System.Windows.Forms.MouseButtons.None)              {                  var p = PointToClient(MousePosition);                  var info = PointToItemInfo(p);                    if(HotTracking)                  {                      var i = -1;                      if(info != null)                          i = info.ItemIndex;                        if(currentHotTrackingIndex != i)                      {                          currentHotTrackingIndex = i;                          Invalidate();                      }                  }                    if (info != null && info.X_EndText == info.X_End)                  {                      if (tt.Tag != info.Text && ShowToolTips)                          tt.Show(info.Text' this' info.X_Text - 3' info.Y - 2' 2000);                      tt.Tag = info.Text;                  }                  else                  {                      tt.Tag = null;                      tt.Hide(this);                  }              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: if(e.Button == MouseButtons.Left && mouseCanSelectArea)              {                  if (Math.Abs(e.Location.X - startMouseSelectArea.X) > 0)                  {                      var pos = e.Location;                      pos.Offset(HorizontalScroll.Value' VerticalScroll.Value);                      mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y));                        var i1 = YToIndex(startMouseSelectArea.Y);                      var i2 = YToIndex(pos.Y);                      if (i1 >= 0 && i2 >= 0)                      {                          SelectItems(Math.Min(i1' i2)' Math.Max(i1' i2));                      }                        if (e.Location.Y <= Padding.Top + ItemHeightDefault / 2)                          ScrollUp();                      else                      if (e.Location.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault / 2)                          ScrollDown();                        Invalidate();                  }                  else                      mouseSelectArea = Rectangle.Empty;              }              else              if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2))              {                  OnItemDrag(new HashSet<int>(SelectedItemIndexes));              }else              if(e.Button == System.Windows.Forms.MouseButtons.None)              {                  var p = PointToClient(MousePosition);                  var info = PointToItemInfo(p);                    if(HotTracking)                  {                      var i = -1;                      if(info != null)                          i = info.ItemIndex;                        if(currentHotTrackingIndex != i)                      {                          currentHotTrackingIndex = i;                          Invalidate();                      }                  }                    if (info != null && info.X_EndText == info.X_End)                  {                      if (tt.Tag != info.Text && ShowToolTips)                          tt.Show(info.Text' this' info.X_Text - 3' info.Y - 2' 2000);                      tt.Tag = info.Text;                  }                  else                  {                      tt.Tag = null;                      tt.Hide(this);                  }              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: if(e.Button == MouseButtons.Left && mouseCanSelectArea)              {                  if (Math.Abs(e.Location.X - startMouseSelectArea.X) > 0)                  {                      var pos = e.Location;                      pos.Offset(HorizontalScroll.Value' VerticalScroll.Value);                      mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y));                        var i1 = YToIndex(startMouseSelectArea.Y);                      var i2 = YToIndex(pos.Y);                      if (i1 >= 0 && i2 >= 0)                      {                          SelectItems(Math.Min(i1' i2)' Math.Max(i1' i2));                      }                        if (e.Location.Y <= Padding.Top + ItemHeightDefault / 2)                          ScrollUp();                      else                      if (e.Location.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault / 2)                          ScrollDown();                        Invalidate();                  }                  else                      mouseSelectArea = Rectangle.Empty;              }              else              if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2))              {                  OnItemDrag(new HashSet<int>(SelectedItemIndexes));              }else              if(e.Button == System.Windows.Forms.MouseButtons.None)              {                  var p = PointToClient(MousePosition);                  var info = PointToItemInfo(p);                    if(HotTracking)                  {                      var i = -1;                      if(info != null)                          i = info.ItemIndex;                        if(currentHotTrackingIndex != i)                      {                          currentHotTrackingIndex = i;                          Invalidate();                      }                  }                    if (info != null && info.X_EndText == info.X_End)                  {                      if (tt.Tag != info.Text && ShowToolTips)                          tt.Show(info.Text' this' info.X_Text - 3' info.Y - 2' 2000);                      tt.Tag = info.Text;                  }                  else                  {                      tt.Tag = null;                      tt.Hide(this);                  }              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: if(e.Button == MouseButtons.Left && mouseCanSelectArea)              {                  if (Math.Abs(e.Location.X - startMouseSelectArea.X) > 0)                  {                      var pos = e.Location;                      pos.Offset(HorizontalScroll.Value' VerticalScroll.Value);                      mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y));                        var i1 = YToIndex(startMouseSelectArea.Y);                      var i2 = YToIndex(pos.Y);                      if (i1 >= 0 && i2 >= 0)                      {                          SelectItems(Math.Min(i1' i2)' Math.Max(i1' i2));                      }                        if (e.Location.Y <= Padding.Top + ItemHeightDefault / 2)                          ScrollUp();                      else                      if (e.Location.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault / 2)                          ScrollDown();                        Invalidate();                  }                  else                      mouseSelectArea = Rectangle.Empty;              }              else              if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2))              {                  OnItemDrag(new HashSet<int>(SelectedItemIndexes));              }else              if(e.Button == System.Windows.Forms.MouseButtons.None)              {                  var p = PointToClient(MousePosition);                  var info = PointToItemInfo(p);                    if(HotTracking)                  {                      var i = -1;                      if(info != null)                          i = info.ItemIndex;                        if(currentHotTrackingIndex != i)                      {                          currentHotTrackingIndex = i;                          Invalidate();                      }                  }                    if (info != null && info.X_EndText == info.X_End)                  {                      if (tt.Tag != info.Text && ShowToolTips)                          tt.Show(info.Text' this' info.X_Text - 3' info.Y - 2' 2000);                      tt.Tag = info.Text;                  }                  else                  {                      tt.Tag = null;                      tt.Hide(this);                  }              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: if(e.Button == MouseButtons.Left && mouseCanSelectArea)              {                  if (Math.Abs(e.Location.X - startMouseSelectArea.X) > 0)                  {                      var pos = e.Location;                      pos.Offset(HorizontalScroll.Value' VerticalScroll.Value);                      mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y));                        var i1 = YToIndex(startMouseSelectArea.Y);                      var i2 = YToIndex(pos.Y);                      if (i1 >= 0 && i2 >= 0)                      {                          SelectItems(Math.Min(i1' i2)' Math.Max(i1' i2));                      }                        if (e.Location.Y <= Padding.Top + ItemHeightDefault / 2)                          ScrollUp();                      else                      if (e.Location.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault / 2)                          ScrollDown();                        Invalidate();                  }                  else                      mouseSelectArea = Rectangle.Empty;              }              else              if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2))              {                  OnItemDrag(new HashSet<int>(SelectedItemIndexes));              }else              if(e.Button == System.Windows.Forms.MouseButtons.None)              {                  var p = PointToClient(MousePosition);                  var info = PointToItemInfo(p);                    if(HotTracking)                  {                      var i = -1;                      if(info != null)                          i = info.ItemIndex;                        if(currentHotTrackingIndex != i)                      {                          currentHotTrackingIndex = i;                          Invalidate();                      }                  }                    if (info != null && info.X_EndText == info.X_End)                  {                      if (tt.Tag != info.Text && ShowToolTips)                          tt.Show(info.Text' this' info.X_Text - 3' info.Y - 2' 2000);                      tt.Tag = info.Text;                  }                  else                  {                      tt.Tag = null;                      tt.Hide(this);                  }              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: if(e.Button == MouseButtons.Left && mouseCanSelectArea)              {                  if (Math.Abs(e.Location.X - startMouseSelectArea.X) > 0)                  {                      var pos = e.Location;                      pos.Offset(HorizontalScroll.Value' VerticalScroll.Value);                      mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y));                        var i1 = YToIndex(startMouseSelectArea.Y);                      var i2 = YToIndex(pos.Y);                      if (i1 >= 0 && i2 >= 0)                      {                          SelectItems(Math.Min(i1' i2)' Math.Max(i1' i2));                      }                        if (e.Location.Y <= Padding.Top + ItemHeightDefault / 2)                          ScrollUp();                      else                      if (e.Location.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault / 2)                          ScrollDown();                        Invalidate();                  }                  else                      mouseSelectArea = Rectangle.Empty;              }              else              if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2))              {                  OnItemDrag(new HashSet<int>(SelectedItemIndexes));              }else              if(e.Button == System.Windows.Forms.MouseButtons.None)              {                  var p = PointToClient(MousePosition);                  var info = PointToItemInfo(p);                    if(HotTracking)                  {                      var i = -1;                      if(info != null)                          i = info.ItemIndex;                        if(currentHotTrackingIndex != i)                      {                          currentHotTrackingIndex = i;                          Invalidate();                      }                  }                    if (info != null && info.X_EndText == info.X_End)                  {                      if (tt.Tag != info.Text && ShowToolTips)                          tt.Show(info.Text' this' info.X_Text - 3' info.Y - 2' 2000);                      tt.Tag = info.Text;                  }                  else                  {                      tt.Tag = null;                      tt.Hide(this);                  }              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnMouseMove,The following statement contains a magic number: if(e.Button == MouseButtons.Left && mouseCanSelectArea)              {                  if (Math.Abs(e.Location.X - startMouseSelectArea.X) > 0)                  {                      var pos = e.Location;                      pos.Offset(HorizontalScroll.Value' VerticalScroll.Value);                      mouseSelectArea = new Rectangle(Math.Min(startMouseSelectArea.X' pos.X)' Math.Min(startMouseSelectArea.Y' pos.Y)' Math.Abs(startMouseSelectArea.X - pos.X)' Math.Abs(startMouseSelectArea.Y - pos.Y));                        var i1 = YToIndex(startMouseSelectArea.Y);                      var i2 = YToIndex(pos.Y);                      if (i1 >= 0 && i2 >= 0)                      {                          SelectItems(Math.Min(i1' i2)' Math.Max(i1' i2));                      }                        if (e.Location.Y <= Padding.Top + ItemHeightDefault / 2)                          ScrollUp();                      else                      if (e.Location.Y >= ClientSize.Height - Padding.Bottom - +ItemHeightDefault / 2)                          ScrollDown();                        Invalidate();                  }                  else                      mouseSelectArea = Rectangle.Empty;              }              else              if (e.Button == System.Windows.Forms.MouseButtons.Left && AllowDragItems && SelectedItemIndexes.Count > 0 && (Math.Abs(lastMouseClick.X - e.Location.X) > 2 || Math.Abs(lastMouseClick.Y - e.Location.Y) > 2))              {                  OnItemDrag(new HashSet<int>(SelectedItemIndexes));              }else              if(e.Button == System.Windows.Forms.MouseButtons.None)              {                  var p = PointToClient(MousePosition);                  var info = PointToItemInfo(p);                    if(HotTracking)                  {                      var i = -1;                      if(info != null)                          i = info.ItemIndex;                        if(currentHotTrackingIndex != i)                      {                          currentHotTrackingIndex = i;                          Invalidate();                      }                  }                    if (info != null && info.X_EndText == info.X_End)                  {                      if (tt.Tag != info.Text && ShowToolTips)                          tt.Show(info.Text' this' info.X_Text - 3' info.Y - 2' 2000);                      tt.Tag = info.Text;                  }                  else                  {                      tt.Tag = null;                      tt.Hide(this);                  }              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: if (!Enabled)              {                  e.Graphics.SetClip(ClientRectangle);                  var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);                  using(var brush = new SolidBrush(color))                      e.Graphics.FillRectangle(brush' ClientRectangle);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: if (!Enabled)              {                  e.Graphics.SetClip(ClientRectangle);                  var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);                  using(var brush = new SolidBrush(color))                      e.Graphics.FillRectangle(brush' ClientRectangle);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: if (!Enabled)              {                  e.Graphics.SetClip(ClientRectangle);                  var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);                  using(var brush = new SolidBrush(color))                      e.Graphics.FillRectangle(brush' ClientRectangle);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnPaint,The following statement contains a magic number: if (!Enabled)              {                  e.Graphics.SetClip(ClientRectangle);                  var color = Color.FromArgb(50' (BackColor.R + 127) >> 1' (BackColor.G + 127) >> 1' (BackColor.B + 127) >> 1);                  using(var brush = new SolidBrush(color))                      e.Graphics.FillRectangle(brush' ClientRectangle);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: var c1 = Color.FromArgb(SelectionColor.A == 255 ? SelectionColorOpaque : SelectionColor.A' SelectionColor);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: var rect = new Rectangle(info.X_ExpandBox' info.Y' 1000' info.Height);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch(e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen ' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) {DashStyle = DashStyle.Dash})                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch(e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen ' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) {DashStyle = DashStyle.Dash})                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch(e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen ' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) {DashStyle = DashStyle.Dash})                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch(e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen ' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) {DashStyle = DashStyle.Dash})                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch(e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen ' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) {DashStyle = DashStyle.Dash})                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following statement contains a magic number: switch(e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen ' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) {DashStyle = DashStyle.Dash})                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawMouseSelectedArea,The following statement contains a magic number: if (mouseCanSelectArea && mouseSelectArea != Rectangle.Empty)              {                  var c = Color.FromArgb(SelectionColor.A == 255 ? SelectionColorOpaque : SelectionColor.A' SelectionColor);                  var rect = new Rectangle(mouseSelectArea.Left - HorizontalScroll.Value' mouseSelectArea.Top - VerticalScroll.Value' mouseSelectArea.Width' mouseSelectArea.Height);                  using(var pen = new Pen(c))                      gr.DrawRectangle(pen' rect);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawSelection,The following statement contains a magic number: var c1 = Color.FromArgb(SelectionColor.A == 255 ? SelectionColorOpaque : SelectionColor.A' SelectionColor);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawSelection,The following statement contains a magic number: var c2 = Color.FromArgb(c1.A / 2' SelectionColor);
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawItemIcons,The following statement contains a magic number: if (info.ExpandBoxType > 0)              {                  var img = (Bitmap)(info.ExpandBoxType == 2 ? ImageEmptyExpand :  (info.Expanded ? ImageCollapse : ImageExpand));                  img.SetResolution(gr.DpiX' gr.DpiY);                  gr.DrawImage(img' info.X_ExpandBox' info.Y + 1);              }
Magic Number,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Build,The following statement contains a magic number: AutoScrollMinSize = new Size(AutoScrollMinSize.Width' y + Padding.Bottom + 2);
Magic Number,FastTreeNS,VisibleItemInfo,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: var temp = list.ShowEmptyExpandBoxes ? 2 : 0;
Magic Number,FastTreeNS,VisibleItemInfo,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: if (list.ShowExpandBoxes) x += list.ImageExpand.Width + 2;
Magic Number,FastTreeNS,VisibleItemInfo,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: if (list.ShowCheckBoxes) x += list.ImageCheckBoxOn.Width + 2;
Magic Number,FastTreeNS,VisibleItemInfo,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: if (list.ShowIcons) x += list.IconSize.Width + 2;
Magic Number,FastTreeNS,VisibleItemInfo,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,Calc,The following statement contains a magic number: X_End = list.ClientSize.Width - list.Padding.Right - 2;
Magic Number,FastTreeNS,FastTree,C:\repos\PavelTorgashov_FastTree\FastTree\FastTree\FastTree.cs,FastTree,The following statement contains a magic number: ItemIndentDefault = 16;
Missing Default,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,OnKeyDown,The following switch statement is missing a default case: switch(e.KeyCode)              {                  case Keys.Up:                      if (e.Control)                          ScrollUp();                      else                          SelectPrev();                      break;                    case Keys.Down:                      if (e.Control)                          ScrollDown();                      else                          SelectNext();                      break;                    case Keys.PageUp:                      if (e.Control)                          ScrollPageUp();                      else                      if (SelectedItemIndexes.Count > 0)                      {                          var i = SelectedItemIndexes.First();                          var y = GetItemY(i) - ClientRectMinusPaddings.Height;                          i = YToIndex(y) + 1;                          SelectItem(Math.Max(0' Math.Min(ItemCount - 1' i)));                      }                      break;                    case Keys.PageDown:                      if (e.Control)                          ScrollPageDown();                      else                      if (SelectedItemIndexes.Count > 0)                      {                          var i = SelectedItemIndexes.First();                          var y = GetItemY(i) + ClientRectMinusPaddings.Height;                          i = YToIndex(y);                          SelectItem(i < 0 ? ItemCount - 1 : i);                      }                      break;                    case Keys.Home:                      if (e.Control)                          ScrollToItem(0);                      else                          SelectItem(0);                      break;                    case Keys.End:                      if (e.Control)                          ScrollToItem(ItemCount - 1);                      else                          SelectItem(ItemCount - 1);                      break;                    case Keys.Enter:                  case Keys.Space:                      if (ShowCheckBoxes)                      {                          if (SelectedItemIndexes.Count > 0)                          {                              var val = GetItemChecked(SelectedItemIndexes.First());                              if (val)                                  UncheckSelected();                              else                                  CheckSelected();                          }                      }else                      if(ShowExpandBoxes)                      {                          if (SelectedItemIndexes.Count > 0)                          {                              var itemIndex = SelectedItemIndexes.First();                              if (GetItemExpanded(itemIndex))                                  CollapseItem(itemIndex);                              else                                  ExpandItem(itemIndex);                          }                      }                      break;                    case Keys.A :                      if(e.Control)                      {                          SelectAll();                      }                      break;              }
Missing Default,FastTreeNS,FastListBase,C:\repos\PavelTorgashov_FastTree\FastTree\FastList\FastListBase.cs,DrawDragOverInsertEffect,The following switch statement is missing a default case: switch(e.InsertEffect)              {                  case InsertEffect.Replace:                      using (var brush = new SolidBrush(c1))                          gr.FillRectangle(brush' rect);                      break;                    case InsertEffect.InsertBefore:                      if (e.ItemIndex <= 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen' rect.Left' rect.Top' rect.Right' rect.Top);                      break;                    case InsertEffect.InsertAfter:                      if (e.ItemIndex < 0)                          rect.Offset(0' 2);                      using (var pen = new Pen(c1' 2) { DashStyle = DashStyle.Dash })                          gr.DrawLine(pen ' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      break;                    case InsertEffect.AddAsChild:                      if (e.ItemIndex >= 0 && e.ItemIndex < ItemCount)                      {                          var dx = GetItemIndent(e.ItemIndex) + 80;                          rect.Offset(dx' 0);                          using (var pen = new Pen(c1' 2) {DashStyle = DashStyle.Dash})                              gr.DrawLine(pen' rect.Left' rect.Bottom' rect.Right' rect.Bottom);                      }                      break;              }
