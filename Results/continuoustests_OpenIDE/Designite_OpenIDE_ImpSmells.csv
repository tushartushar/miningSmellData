Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The method has 164 lines of code.
Long Method,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The method has 164 lines of code.
Complex Method,OpenIDE.Arguments.Handlers,EditorHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EditorHandler.cs,Execute,Cyclomatic complexity of the method is 11
Complex Method,OpenIDE.Arguments.Handlers,ConfigurationHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ConfigurationHandler.cs,printClosestConfiguration,Cyclomatic complexity of the method is 12
Complex Method,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,Cyclomatic complexity of the method is 14
Complex Method,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,Execute,Cyclomatic complexity of the method is 12
Complex Method,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,Cyclomatic complexity of the method is 19
Complex Method,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,Cyclomatic complexity of the method is 14
Long Parameter List,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,itemsPrLanguage,The method has 6 parameters. Parameters: onLanguage' onItem' pathExtractor' items' languageName' type
Long Parameter List,OpenIDE.Arguments.Handlers,EnvironmentHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EnvironmentHandler.cs,EnvironmentHandler,The method has 5 parameters. Parameters: token' dispatch' locator' editorLocator' environment
Long Identifier,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,,The length of the parameter _printOnlyErrorsAndInconclusives is 32.
Long Identifier,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,,The length of the parameter _printOnlyErrorsAndInconclusives is 32.
Long Statement,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,preparePath,The length of the statement  "            if ((textContent.EndsWith(lookfor) && (textContent.Count(x => x.Equals('"')) % 2) == 0) || textContent.Trim().Length == 0) " is 122.
Long Statement,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,getFileName,The length of the statement  "            return informationList.Items.Add(x.Substring(dir.Length' x.Length - dir.Length).TrimStart(new char[] { Path.DirectorySeparatorChar }) + tail); " is 142.
Long Statement,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The length of the statement  "            this.labelInfo.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right | System.Windows.Forms.AnchorStyles.Left))); " is 186.
Long Statement,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The length of the statement  "            this.textBoxSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right)  " is 188.
Long Statement,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The length of the statement  "            this.informationList.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right | System.Windows.Forms.AnchorStyles.Bottom)  " is 233.
Long Statement,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The length of the statement  "            this.labelDescription.Anchor = ((System.Windows.Forms.AnchorStyles)(System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right | System.Windows.Forms.AnchorStyles.Bottom  " is 191.
Long Statement,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The length of the statement  "            this.buttonRun.Anchor = ((System.Windows.Forms.AnchorStyles)(System.Windows.Forms.AnchorStyles.Right | System.Windows.Forms.AnchorStyles.Top)); " is 143.
Long Statement,OpenIDE,CommandRunner,C:\repos\continuoustests_OpenIDE\OpenIDE\CommandRunner.cs,Run,The length of the statement  "					Logger.Write("Removing second parameter from language command as it's a language script prefixed by language: " + arguments[0]); " is 128.
Long Statement,OpenIDE.Arguments.Handlers,ProfileHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProfileHandler.cs,listProfilesRaw,The length of the statement  "			Console.WriteLine("active-global|" + profileLocator.GetActiveGlobalProfile()+"|"+profileLocator.GetGlobalProfilePath(profileLocator.GetActiveGlobalProfile())); " is 159.
Long Statement,OpenIDE.Arguments.Handlers,ProfileHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProfileHandler.cs,listProfilesRaw,The length of the statement  "			Console.WriteLine("active-local|" + profileLocator.GetActiveLocalProfile()+"|"+profileLocator.GetLocalProfilePath(profileLocator.GetActiveLocalProfile())); " is 155.
Long Statement,OpenIDE.Arguments.Handlers,EventEndpointLocator,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,getInstances,The length of the statement  "            var user = System.Security.Principal.WindowsIdentity.GetCurrent().Name.Replace(Path.DirectorySeparatorChar.ToString()' "-"); " is 124.
Long Statement,OpenIDE.CommandBuilding,PathAutoCompletion,C:\repos\continuoustests_OpenIDE\OpenIDE\CommandBuilding\PathAutoCompletion.cs,AutoComplete,The length of the statement  "            if (dirContent.LastIndexOf(Path.DirectorySeparatorChar) < dirContent.LastIndexOf(' ') && (dirContent.Count(x => x.Equals('"')) % 2) == 0) " is 137.
Long Statement,OpenIDE.CommandBuilding,PathAutoCompletion,C:\repos\continuoustests_OpenIDE\OpenIDE\CommandBuilding\PathAutoCompletion.cs,AutoComplete,The length of the statement  "            var dir = dirContent.Substring(dirContent.LastIndexOf(lookFor) + 1' dirContent.Length - (dirContent.LastIndexOf(lookFor) + 1)); " is 127.
Long Statement,OpenIDE.EventIntegration,EventDispatcher,C:\repos\continuoustests_OpenIDE\OpenIDE\EventIntegration\EventDispatcher.cs,getInstances,The length of the statement  "            var user = System.Security.Principal.WindowsIdentity.GetCurrent().Name.Replace(Path.DirectorySeparatorChar.ToString()' "-"); " is 124.
Long Statement,EventStuff,EventEndpointLocator,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,getInstances,The length of the statement  "            var user = System.Security.Principal.WindowsIdentity.GetCurrent().Name.Replace(Path.DirectorySeparatorChar.ToString()' "-"); " is 124.
Empty Catch Block,OpenIDE.Arguments.Handlers,CreateScriptHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\CreateScriptHandler.cs,run,The method has an empty catch block.
Empty Catch Block,OpenIDE.Arguments.Handlers,CreateReactiveScriptHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\CreateReactiveScriptHandler.cs,run,The method has an empty catch block.
Empty Catch Block,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleTestDone,The method has an empty catch block.
Empty Catch Block,OpenIDE.Arguments.Handlers,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,OpenIDE.Arguments.Handlers,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,SendFromQueue,The method has an empty catch block.
Empty Catch Block,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,read,The method has an empty catch block.
Empty Catch Block,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,getPackages,The method has an empty catch block.
Empty Catch Block,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,run,The method has an empty catch block.
Empty Catch Block,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleTestDone,The method has an empty catch block.
Empty Catch Block,EventStuff,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,EventStuff,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,SendFromQueue,The method has an empty catch block.
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,preparePath,The following statement contains a magic number: if ((textContent.EndsWith(lookfor) && (textContent.Count(x => x.Equals('"')) % 2) == 0) || textContent.Trim().Length == 0)                  _directoryMode = false;
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,getLookForCharacter,The following statement contains a magic number: if (quoteCount > 0 && (quoteCount % 2) == 0)  				lookfor = "\"";
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelInfo.Location = new System.Drawing.Point(12' 1);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelInfo.Size = new System.Drawing.Size(648' 21);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelInfo.Size = new System.Drawing.Size(648' 21);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelInfo.TabIndex = 6;
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxSearch.Location = new System.Drawing.Point(12' 25);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxSearch.Location = new System.Drawing.Point(12' 25);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxSearch.Size = new System.Drawing.Size(595' 20);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxSearch.Size = new System.Drawing.Size(595' 20);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.informationList.Location = new System.Drawing.Point(12' 51);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.informationList.Location = new System.Drawing.Point(12' 51);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.informationList.Size = new System.Drawing.Size(648' 166);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.informationList.Size = new System.Drawing.Size(648' 166);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.informationList.TabIndex = 3;
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 621;
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(13' 224);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(13' 224);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(647' 89);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(647' 89);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.TabIndex = 4;
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRun.Location = new System.Drawing.Point(613' 25);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRun.Location = new System.Drawing.Point(613' 25);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRun.Size = new System.Drawing.Size(47' 20);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRun.Size = new System.Drawing.Size(47' 20);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRun.TabIndex = 2;
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(672' 322);
Magic Number,OpenIDE.UI,RunCommandForm,C:\repos\continuoustests_OpenIDE\OpenIDE\UI\RunCommandForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(672' 322);
Magic Number,OpenIDE.Bootstrapping,DIContainer,C:\repos\continuoustests_OpenIDE\OpenIDE\Bootstrapping\DIContainer.cs,dispatchAndCompleteMessage,The following statement contains a magic number: if (command.Length == 0) {  				Console.WriteLine();  			} else if (isError(command)) {  				printError(command);  			} else if (isWarning(command)) {  				printWarning(command);  			} else if (isColorized(command)) {  				printColorized(command);  			} else if (isCommand(command) || isEvent(command)) {  				lock (_commandProcessLock) {  					_commandsInProcessing++;  				}  				ThreadPool.QueueUserWorkItem((m) => {  					Logger.Write("Handling command in background thread");  					if (isCommand(command)) {  						Logger.Write("Handling as command");  						var prefix = getCommandPrefix(command);  						var parser = new CommandStringParser();  						var args =   							parser.Parse(  								command.Substring(prefix.Length' command.Length - prefix.Length))  								.ToArray();  						if (args.Length == 0) {  							Logger.Write("No commands specified for " + command);  						}  						DefinitionCacheItem cmd = null;  						if (prefix == "command|")  							cmd = GetDefinitionBuilder().Get(args);  						else if (prefix == "command-builtin|")  							cmd = GetDefinitionBuilder().GetBuiltIn(args);  						else if (prefix == "command-language|")  							cmd = GetDefinitionBuilder().GetLanguage(args);  						else if (prefix == "command-languagescript|")  							cmd = GetDefinitionBuilder().GetLanguageScript(args);  						else if (prefix == "command-script|")  							cmd = GetDefinitionBuilder().GetScript(args);  						else if (prefix == "command-original|")  							cmd = GetDefinitionBuilder().GetOriginal(args);    						if (cmd != null) {  							new CommandRunner(EventDispatcher)  								.Run(cmd' args);  						} else {  							Logger.Write("Could not find handler for " + command);  						}  						onCommandCompleted();  					} else if (isEvent(command)) {  						Logger.Write("Handling as event");  						var prefix = "event|";  						EventDispatcher()  							.Forward(command.Substring(prefix.Length' command.Length - prefix.Length));  					}  					lock (_commandProcessLock) {  						_commandsInProcessing--;  					}  				}' null);  			} else if (command.StartsWith("raw|")) {  				var msg = command.Substring(4' command.Length - 4);  				Console.Write(msg);  			} else {  				Console.WriteLine(command);  			}
Magic Number,OpenIDE.Bootstrapping,DIContainer,C:\repos\continuoustests_OpenIDE\OpenIDE\Bootstrapping\DIContainer.cs,dispatchAndCompleteMessage,The following statement contains a magic number: if (command.Length == 0) {  				Console.WriteLine();  			} else if (isError(command)) {  				printError(command);  			} else if (isWarning(command)) {  				printWarning(command);  			} else if (isColorized(command)) {  				printColorized(command);  			} else if (isCommand(command) || isEvent(command)) {  				lock (_commandProcessLock) {  					_commandsInProcessing++;  				}  				ThreadPool.QueueUserWorkItem((m) => {  					Logger.Write("Handling command in background thread");  					if (isCommand(command)) {  						Logger.Write("Handling as command");  						var prefix = getCommandPrefix(command);  						var parser = new CommandStringParser();  						var args =   							parser.Parse(  								command.Substring(prefix.Length' command.Length - prefix.Length))  								.ToArray();  						if (args.Length == 0) {  							Logger.Write("No commands specified for " + command);  						}  						DefinitionCacheItem cmd = null;  						if (prefix == "command|")  							cmd = GetDefinitionBuilder().Get(args);  						else if (prefix == "command-builtin|")  							cmd = GetDefinitionBuilder().GetBuiltIn(args);  						else if (prefix == "command-language|")  							cmd = GetDefinitionBuilder().GetLanguage(args);  						else if (prefix == "command-languagescript|")  							cmd = GetDefinitionBuilder().GetLanguageScript(args);  						else if (prefix == "command-script|")  							cmd = GetDefinitionBuilder().GetScript(args);  						else if (prefix == "command-original|")  							cmd = GetDefinitionBuilder().GetOriginal(args);    						if (cmd != null) {  							new CommandRunner(EventDispatcher)  								.Run(cmd' args);  						} else {  							Logger.Write("Could not find handler for " + command);  						}  						onCommandCompleted();  					} else if (isEvent(command)) {  						Logger.Write("Handling as event");  						var prefix = "event|";  						EventDispatcher()  							.Forward(command.Substring(prefix.Length' command.Length - prefix.Length));  					}  					lock (_commandProcessLock) {  						_commandsInProcessing--;  					}  				}' null);  			} else if (command.StartsWith("raw|")) {  				var msg = command.Substring(4' command.Length - 4);  				Console.Write(msg);  			} else {  				Console.WriteLine(command);  			}
Magic Number,OpenIDE.Bootstrapping,DIContainer,C:\repos\continuoustests_OpenIDE\OpenIDE\Bootstrapping\DIContainer.cs,isColorized,The following statement contains a magic number: return trimmed.Length > 6 && trimmed.StartsWith("color|") && trimmed.IndexOf("|"' 6) > 0;
Magic Number,OpenIDE.Bootstrapping,DIContainer,C:\repos\continuoustests_OpenIDE\OpenIDE\Bootstrapping\DIContainer.cs,isColorized,The following statement contains a magic number: return trimmed.Length > 6 && trimmed.StartsWith("color|") && trimmed.IndexOf("|"' 6) > 0;
Magic Number,OpenIDE.Arguments.Handlers,EditorHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EditorHandler.cs,Execute,The following statement contains a magic number: if (instance == null && arguments.Length >= 0 && !isSetfocus)  			{  				var args = new List<string>();  				Logger.Write("Reading configuration from " + _rootPath);  				var configReader = new ConfigReader(_rootPath);  				if (arguments.Length == 0) {  					var name = configReader.Get("default.editor");  					if (name == null) {  						Console.WriteLine("To launch without specifying editor you must specify the default.editor config option");  						return;  					}  					args.Add(name);  				} else {  					args.AddRange(arguments);  				}  				var editorName = args[0];  				args.AddRange(   					configReader	  						.GetStartingWith("editor." + editorName)  						.Select(x => "--" + x.Key + "=" + x.Value));    				// A bit of a hack but if we find a configuration called executable for the editor  				// if the path is rooted (avvoids checking for files in PATH) display a warning  				// if it does not exist.  				var executableSetting = configReader.Get("editor." + editorName + ".executable");  				if (executableSetting != null) {  					if (Path.IsPathRooted(executableSetting)) {  						if (!File.Exists(executableSetting))  							_dispatch("warning|The configured path for the " + editorName + " editor does not exist: " + executableSetting);  					}  				}    				if (!_environment.HasEditorEngine(_rootPath)) {  					if (!_environment.StartEditorEngine(args' _rootPath)) {  						Logger.Write("Could not launch editor " + args[0]);  						return;  					}  				}  				if (!_environment.HasEditorEngine(_rootPath)) {  					Logger.Write("Could not launch editor " + args[0]);  					return;  				}  				if (!_environment.IsRunning(_rootPath)) {  					_environment.Start(_rootPath);  				}  			}  			else if (arguments.Length >= 1 && arguments[0] == "get-dirty-files")  			{  				if (instance == null)  					return;  				string file = null;  				if (arguments.Length > 1)  					file = arguments[1];  				Console.WriteLine(instance.GetDirtyFiles(file));  			}  			else if (arguments.Length == 1 && arguments[0] == "get-caret")  			{  				Console.WriteLine(instance.GetCaret());  			}  			else if (arguments.Length == 3 && arguments[0] == "user-select")  			{  				instance.UserSelect(arguments[1]' arguments[2]);  			}  			else if (arguments.Length >= 2 && arguments[0] == "user-input")  			{  				var defaultvalue = "";  				if (arguments.Length > 2)  					defaultvalue = arguments[2];  				instance.UserInput(arguments[1]' defaultvalue);  			}  			else if (arguments.Length == 1 && arguments[0] == "get-windows")  			{  				Console.WriteLine(instance.GetWindows());  			}  			else  			{  				if (instance == null)  					return;  				instance.Run(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,EditorHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EditorHandler.cs,Execute,The following statement contains a magic number: if (instance == null && arguments.Length >= 0 && !isSetfocus)  			{  				var args = new List<string>();  				Logger.Write("Reading configuration from " + _rootPath);  				var configReader = new ConfigReader(_rootPath);  				if (arguments.Length == 0) {  					var name = configReader.Get("default.editor");  					if (name == null) {  						Console.WriteLine("To launch without specifying editor you must specify the default.editor config option");  						return;  					}  					args.Add(name);  				} else {  					args.AddRange(arguments);  				}  				var editorName = args[0];  				args.AddRange(   					configReader	  						.GetStartingWith("editor." + editorName)  						.Select(x => "--" + x.Key + "=" + x.Value));    				// A bit of a hack but if we find a configuration called executable for the editor  				// if the path is rooted (avvoids checking for files in PATH) display a warning  				// if it does not exist.  				var executableSetting = configReader.Get("editor." + editorName + ".executable");  				if (executableSetting != null) {  					if (Path.IsPathRooted(executableSetting)) {  						if (!File.Exists(executableSetting))  							_dispatch("warning|The configured path for the " + editorName + " editor does not exist: " + executableSetting);  					}  				}    				if (!_environment.HasEditorEngine(_rootPath)) {  					if (!_environment.StartEditorEngine(args' _rootPath)) {  						Logger.Write("Could not launch editor " + args[0]);  						return;  					}  				}  				if (!_environment.HasEditorEngine(_rootPath)) {  					Logger.Write("Could not launch editor " + args[0]);  					return;  				}  				if (!_environment.IsRunning(_rootPath)) {  					_environment.Start(_rootPath);  				}  			}  			else if (arguments.Length >= 1 && arguments[0] == "get-dirty-files")  			{  				if (instance == null)  					return;  				string file = null;  				if (arguments.Length > 1)  					file = arguments[1];  				Console.WriteLine(instance.GetDirtyFiles(file));  			}  			else if (arguments.Length == 1 && arguments[0] == "get-caret")  			{  				Console.WriteLine(instance.GetCaret());  			}  			else if (arguments.Length == 3 && arguments[0] == "user-select")  			{  				instance.UserSelect(arguments[1]' arguments[2]);  			}  			else if (arguments.Length >= 2 && arguments[0] == "user-input")  			{  				var defaultvalue = "";  				if (arguments.Length > 2)  					defaultvalue = arguments[2];  				instance.UserInput(arguments[1]' defaultvalue);  			}  			else if (arguments.Length == 1 && arguments[0] == "get-windows")  			{  				Console.WriteLine(instance.GetWindows());  			}  			else  			{  				if (instance == null)  					return;  				instance.Run(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,EditorHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EditorHandler.cs,Execute,The following statement contains a magic number: if (instance == null && arguments.Length >= 0 && !isSetfocus)  			{  				var args = new List<string>();  				Logger.Write("Reading configuration from " + _rootPath);  				var configReader = new ConfigReader(_rootPath);  				if (arguments.Length == 0) {  					var name = configReader.Get("default.editor");  					if (name == null) {  						Console.WriteLine("To launch without specifying editor you must specify the default.editor config option");  						return;  					}  					args.Add(name);  				} else {  					args.AddRange(arguments);  				}  				var editorName = args[0];  				args.AddRange(   					configReader	  						.GetStartingWith("editor." + editorName)  						.Select(x => "--" + x.Key + "=" + x.Value));    				// A bit of a hack but if we find a configuration called executable for the editor  				// if the path is rooted (avvoids checking for files in PATH) display a warning  				// if it does not exist.  				var executableSetting = configReader.Get("editor." + editorName + ".executable");  				if (executableSetting != null) {  					if (Path.IsPathRooted(executableSetting)) {  						if (!File.Exists(executableSetting))  							_dispatch("warning|The configured path for the " + editorName + " editor does not exist: " + executableSetting);  					}  				}    				if (!_environment.HasEditorEngine(_rootPath)) {  					if (!_environment.StartEditorEngine(args' _rootPath)) {  						Logger.Write("Could not launch editor " + args[0]);  						return;  					}  				}  				if (!_environment.HasEditorEngine(_rootPath)) {  					Logger.Write("Could not launch editor " + args[0]);  					return;  				}  				if (!_environment.IsRunning(_rootPath)) {  					_environment.Start(_rootPath);  				}  			}  			else if (arguments.Length >= 1 && arguments[0] == "get-dirty-files")  			{  				if (instance == null)  					return;  				string file = null;  				if (arguments.Length > 1)  					file = arguments[1];  				Console.WriteLine(instance.GetDirtyFiles(file));  			}  			else if (arguments.Length == 1 && arguments[0] == "get-caret")  			{  				Console.WriteLine(instance.GetCaret());  			}  			else if (arguments.Length == 3 && arguments[0] == "user-select")  			{  				instance.UserSelect(arguments[1]' arguments[2]);  			}  			else if (arguments.Length >= 2 && arguments[0] == "user-input")  			{  				var defaultvalue = "";  				if (arguments.Length > 2)  					defaultvalue = arguments[2];  				instance.UserInput(arguments[1]' defaultvalue);  			}  			else if (arguments.Length == 1 && arguments[0] == "get-windows")  			{  				Console.WriteLine(instance.GetWindows());  			}  			else  			{  				if (instance == null)  					return;  				instance.Run(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,EditorHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EditorHandler.cs,Execute,The following statement contains a magic number: if (instance == null && arguments.Length >= 0 && !isSetfocus)  			{  				var args = new List<string>();  				Logger.Write("Reading configuration from " + _rootPath);  				var configReader = new ConfigReader(_rootPath);  				if (arguments.Length == 0) {  					var name = configReader.Get("default.editor");  					if (name == null) {  						Console.WriteLine("To launch without specifying editor you must specify the default.editor config option");  						return;  					}  					args.Add(name);  				} else {  					args.AddRange(arguments);  				}  				var editorName = args[0];  				args.AddRange(   					configReader	  						.GetStartingWith("editor." + editorName)  						.Select(x => "--" + x.Key + "=" + x.Value));    				// A bit of a hack but if we find a configuration called executable for the editor  				// if the path is rooted (avvoids checking for files in PATH) display a warning  				// if it does not exist.  				var executableSetting = configReader.Get("editor." + editorName + ".executable");  				if (executableSetting != null) {  					if (Path.IsPathRooted(executableSetting)) {  						if (!File.Exists(executableSetting))  							_dispatch("warning|The configured path for the " + editorName + " editor does not exist: " + executableSetting);  					}  				}    				if (!_environment.HasEditorEngine(_rootPath)) {  					if (!_environment.StartEditorEngine(args' _rootPath)) {  						Logger.Write("Could not launch editor " + args[0]);  						return;  					}  				}  				if (!_environment.HasEditorEngine(_rootPath)) {  					Logger.Write("Could not launch editor " + args[0]);  					return;  				}  				if (!_environment.IsRunning(_rootPath)) {  					_environment.Start(_rootPath);  				}  			}  			else if (arguments.Length >= 1 && arguments[0] == "get-dirty-files")  			{  				if (instance == null)  					return;  				string file = null;  				if (arguments.Length > 1)  					file = arguments[1];  				Console.WriteLine(instance.GetDirtyFiles(file));  			}  			else if (arguments.Length == 1 && arguments[0] == "get-caret")  			{  				Console.WriteLine(instance.GetCaret());  			}  			else if (arguments.Length == 3 && arguments[0] == "user-select")  			{  				instance.UserSelect(arguments[1]' arguments[2]);  			}  			else if (arguments.Length >= 2 && arguments[0] == "user-input")  			{  				var defaultvalue = "";  				if (arguments.Length > 2)  					defaultvalue = arguments[2];  				instance.UserInput(arguments[1]' defaultvalue);  			}  			else if (arguments.Length == 1 && arguments[0] == "get-windows")  			{  				Console.WriteLine(instance.GetWindows());  			}  			else  			{  				if (instance == null)  					return;  				instance.Run(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,EditorHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EditorHandler.cs,Execute,The following statement contains a magic number: if (instance == null && arguments.Length >= 0 && !isSetfocus)  			{  				var args = new List<string>();  				Logger.Write("Reading configuration from " + _rootPath);  				var configReader = new ConfigReader(_rootPath);  				if (arguments.Length == 0) {  					var name = configReader.Get("default.editor");  					if (name == null) {  						Console.WriteLine("To launch without specifying editor you must specify the default.editor config option");  						return;  					}  					args.Add(name);  				} else {  					args.AddRange(arguments);  				}  				var editorName = args[0];  				args.AddRange(   					configReader	  						.GetStartingWith("editor." + editorName)  						.Select(x => "--" + x.Key + "=" + x.Value));    				// A bit of a hack but if we find a configuration called executable for the editor  				// if the path is rooted (avvoids checking for files in PATH) display a warning  				// if it does not exist.  				var executableSetting = configReader.Get("editor." + editorName + ".executable");  				if (executableSetting != null) {  					if (Path.IsPathRooted(executableSetting)) {  						if (!File.Exists(executableSetting))  							_dispatch("warning|The configured path for the " + editorName + " editor does not exist: " + executableSetting);  					}  				}    				if (!_environment.HasEditorEngine(_rootPath)) {  					if (!_environment.StartEditorEngine(args' _rootPath)) {  						Logger.Write("Could not launch editor " + args[0]);  						return;  					}  				}  				if (!_environment.HasEditorEngine(_rootPath)) {  					Logger.Write("Could not launch editor " + args[0]);  					return;  				}  				if (!_environment.IsRunning(_rootPath)) {  					_environment.Start(_rootPath);  				}  			}  			else if (arguments.Length >= 1 && arguments[0] == "get-dirty-files")  			{  				if (instance == null)  					return;  				string file = null;  				if (arguments.Length > 1)  					file = arguments[1];  				Console.WriteLine(instance.GetDirtyFiles(file));  			}  			else if (arguments.Length == 1 && arguments[0] == "get-caret")  			{  				Console.WriteLine(instance.GetCaret());  			}  			else if (arguments.Length == 3 && arguments[0] == "user-select")  			{  				instance.UserSelect(arguments[1]' arguments[2]);  			}  			else if (arguments.Length >= 2 && arguments[0] == "user-input")  			{  				var defaultvalue = "";  				if (arguments.Length > 2)  					defaultvalue = arguments[2];  				instance.UserInput(arguments[1]' defaultvalue);  			}  			else if (arguments.Length == 1 && arguments[0] == "get-windows")  			{  				Console.WriteLine(instance.GetWindows());  			}  			else  			{  				if (instance == null)  					return;  				instance.Run(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,ConfigurationHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ConfigurationHandler.cs,printClosestConfiguration,The following statement contains a magic number: if (args.Settings.Length == 2)  				pattern = args.Settings[1];
Magic Number,OpenIDE.Arguments.Handlers,PrewievSnippetHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PrewievSnippetHandler.cs,Execute,The following statement contains a magic number: using (var instance = _codeEngineFactory.GetInstance(Environment.CurrentDirectory)) {  				if (instance == null)  					return;  				if (arguments.Length < 3)  					return;  				instance.SnippetComplete(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,CreateSnippetHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\CreateSnippetHandler.cs,Execute,The following statement contains a magic number: using (var instance = _codeEngineFactory.GetInstance(Environment.CurrentDirectory)) {  				if (instance == null)  					return;  				if (arguments.Length < 2)  					return;  				instance.SnippetCreate(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,SnippetEditHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\SnippetEditHandler.cs,Execute,The following statement contains a magic number: using (var instance = _codeEngineFactory.GetInstance(Environment.CurrentDirectory)) {  				if (instance == null)  					return;  				if (arguments.Length < 2)  					return;  				instance.SnippetEdit(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,SnippetDeleteHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\SnippetDeleteHandler.cs,Execute,The following statement contains a magic number: using (var instance = _codeEngineFactory.GetInstance(Environment.CurrentDirectory)) {  				if (instance == null)  					return;  				if (arguments.Length < 2)  					return;  				instance.SnippetDelete(arguments);  			}
Magic Number,OpenIDE.Arguments.Handlers,ProcessStartHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProcessStartHandler.cs,setToForeground,The following statement contains a magic number: try {  				if (arguments[0] == "window") {  					int hwnd;  					if (int.TryParse(arguments[1]' out hwnd)) {  						BringToForeGround.ByHWnd(new IntPtr(int.Parse(arguments[1])));  					} else if (arguments.Length == 2) {  						BringToForeGround.ByProc(arguments[1]);  					} else if (arguments.Length == 3) {  						BringToForeGround.ByProcAndName(arguments[1]' arguments[2]);  					}  				} else if (arguments[0] == "process") {  					BringToForeGround.ByProcess(int.Parse(arguments[1]));  				}  			} catch (Exception ex) {  				Logger.Write(ex);  				Console.WriteLine("Invalid command arguments");  			}
Magic Number,OpenIDE.Arguments.Handlers,ProcessStartHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProcessStartHandler.cs,setToForeground,The following statement contains a magic number: try {  				if (arguments[0] == "window") {  					int hwnd;  					if (int.TryParse(arguments[1]' out hwnd)) {  						BringToForeGround.ByHWnd(new IntPtr(int.Parse(arguments[1])));  					} else if (arguments.Length == 2) {  						BringToForeGround.ByProc(arguments[1]);  					} else if (arguments.Length == 3) {  						BringToForeGround.ByProcAndName(arguments[1]' arguments[2]);  					}  				} else if (arguments[0] == "process") {  					BringToForeGround.ByProcess(int.Parse(arguments[1]));  				}  			} catch (Exception ex) {  				Logger.Write(ex);  				Console.WriteLine("Invalid command arguments");  			}
Magic Number,OpenIDE.Arguments.Handlers,ProcessStartHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProcessStartHandler.cs,setToForeground,The following statement contains a magic number: try {  				if (arguments[0] == "window") {  					int hwnd;  					if (int.TryParse(arguments[1]' out hwnd)) {  						BringToForeGround.ByHWnd(new IntPtr(int.Parse(arguments[1])));  					} else if (arguments.Length == 2) {  						BringToForeGround.ByProc(arguments[1]);  					} else if (arguments.Length == 3) {  						BringToForeGround.ByProcAndName(arguments[1]' arguments[2]);  					}  				} else if (arguments[0] == "process") {  					BringToForeGround.ByProcess(int.Parse(arguments[1]));  				}  			} catch (Exception ex) {  				Logger.Write(ex);  				Console.WriteLine("Invalid command arguments");  			}
Magic Number,OpenIDE.Arguments.Handlers,ProfileHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProfileHandler.cs,Execute,The following statement contains a magic number: if (args.Arguments.Length == 0)  				listProfiles();  			else if (args.Arguments.Length == 1 && args.Arguments[0] == "list")  				listProfilesRaw();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "list" && args.Arguments[1] == "paths")  				listProfilePaths();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "init")  				createProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "rm")  				deleteProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "load")  				loadProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "clone")  				cloneProfile(args);  			else  				Console.WriteLine("Invalid arguments. For valid arguments run oi help profile");
Magic Number,OpenIDE.Arguments.Handlers,ProfileHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProfileHandler.cs,Execute,The following statement contains a magic number: if (args.Arguments.Length == 0)  				listProfiles();  			else if (args.Arguments.Length == 1 && args.Arguments[0] == "list")  				listProfilesRaw();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "list" && args.Arguments[1] == "paths")  				listProfilePaths();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "init")  				createProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "rm")  				deleteProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "load")  				loadProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "clone")  				cloneProfile(args);  			else  				Console.WriteLine("Invalid arguments. For valid arguments run oi help profile");
Magic Number,OpenIDE.Arguments.Handlers,ProfileHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProfileHandler.cs,Execute,The following statement contains a magic number: if (args.Arguments.Length == 0)  				listProfiles();  			else if (args.Arguments.Length == 1 && args.Arguments[0] == "list")  				listProfilesRaw();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "list" && args.Arguments[1] == "paths")  				listProfilePaths();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "init")  				createProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "rm")  				deleteProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "load")  				loadProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "clone")  				cloneProfile(args);  			else  				Console.WriteLine("Invalid arguments. For valid arguments run oi help profile");
Magic Number,OpenIDE.Arguments.Handlers,ProfileHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProfileHandler.cs,Execute,The following statement contains a magic number: if (args.Arguments.Length == 0)  				listProfiles();  			else if (args.Arguments.Length == 1 && args.Arguments[0] == "list")  				listProfilesRaw();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "list" && args.Arguments[1] == "paths")  				listProfilePaths();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "init")  				createProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "rm")  				deleteProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "load")  				loadProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "clone")  				cloneProfile(args);  			else  				Console.WriteLine("Invalid arguments. For valid arguments run oi help profile");
Magic Number,OpenIDE.Arguments.Handlers,ProfileHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\ProfileHandler.cs,Execute,The following statement contains a magic number: if (args.Arguments.Length == 0)  				listProfiles();  			else if (args.Arguments.Length == 1 && args.Arguments[0] == "list")  				listProfilesRaw();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "list" && args.Arguments[1] == "paths")  				listProfilePaths();  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "init")  				createProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "rm")  				deleteProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "load")  				loadProfile(args);  			else if (args.Arguments.Length == 2 && args.Arguments[0] == "clone")  				cloneProfile(args);  			else  				Console.WriteLine("Invalid arguments. For valid arguments run oi help profile");
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,retryFor5SecondsIfFalse,The following statement contains a magic number: while (true) {  				if (check())  					return true;  				if (DateTime.Now > now.AddSeconds(5))  					break;  				Thread.Sleep(50);  			}
Magic Number,OpenIDE.Arguments.Handlers,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,retryFor5SecondsIfFalse,The following statement contains a magic number: while (true) {  				if (check())  					return true;  				if (DateTime.Now > now.AddSeconds(5))  					break;  				Thread.Sleep(50);  			}
Magic Number,OpenIDE.Arguments.Handlers,Instance,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Get,The following statement contains a magic number: if (lines.Length != 2)  				return null;
Magic Number,OpenIDE.Arguments.Handlers,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Connect,The following statement contains a magic number: if (retryCount >= 5)                  return;
Magic Number,OpenIDE.Arguments.Handlers,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,SendAndWait,The following statement contains a magic number: while (IsSending && DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)                  Thread.Sleep(10);
Magic Number,OpenIDE.Arguments.Handlers,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,SendAndWait,The following statement contains a magic number: while (IsSending && DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)                  Thread.Sleep(10);
Magic Number,OpenIDE.Arguments.Handlers,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Request,The following statement contains a magic number: while (DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)  			{  				if (recieved != null)  					break;                  Thread.Sleep(10);  			}
Magic Number,OpenIDE.Arguments.Handlers,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Request,The following statement contains a magic number: while (DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)  			{  				if (recieved != null)  					break;                  Thread.Sleep(10);  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,Execute,The following statement contains a magic number: if (arguments.Length == 2 && arguments[0] == "init")  				init(arguments[1]);
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,Execute,The following statement contains a magic number: if (arguments.Length == 2 && arguments[0] == "new-metapackage")  				newMetaPackage(arguments[1]);
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,Execute,The following statement contains a magic number: if (arguments.Length == 2 && arguments[0] == "read")  				read(arguments[1]);
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,Execute,The following statement contains a magic number: if (new[] {2'3}.Contains(arguments.Length) && arguments[0] == "build")  				build(arguments);
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,Execute,The following statement contains a magic number: if (new[] {2'3}.Contains(arguments.Length) && arguments[0] == "build")  				build(arguments);
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,build,The following statement contains a magic number: if (args.Length == 3) {  				destination = Path.GetFullPath(args[2]);  			} else {  				var setting = new ConfigReader(_token).Get("default.package.destination");  				if (setting != null)  					destination = setting;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,build,The following statement contains a magic number: if (args.Length == 3) {  				destination = Path.GetFullPath(args[2]);  			} else {  				var setting = new ConfigReader(_token).Get("default.package.destination");  				if (setting != null)  					destination = setting;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length == 4 && args[1] == "add") {  				if (path == null) {  					printError("Config point is not initialized");  					return;  				}  				var name = args[2];  				var sources = locator.GetSourcesFrom(path);  				if (sources.Any(x => x.Name == name)) {  					printError("There is already a source named " + name);  					return;  				}  				if (!Directory.Exists(path))  					Directory.CreateDirectory(path);  				var destination = Path.Combine(path' name + ".source");  				download(args[3]' destination);  				if (!File.Exists(destination))  					printError("Failed while downloading source file " + args[3]);  				_dispatch(string.Format("event|builtin package src added \"{0}\" \"{1}\""' name' destination));  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length == 4 && args[1] == "add") {  				if (path == null) {  					printError("Config point is not initialized");  					return;  				}  				var name = args[2];  				var sources = locator.GetSourcesFrom(path);  				if (sources.Any(x => x.Name == name)) {  					printError("There is already a source named " + name);  					return;  				}  				if (!Directory.Exists(path))  					Directory.CreateDirectory(path);  				var destination = Path.Combine(path' name + ".source");  				download(args[3]' destination);  				if (!File.Exists(destination))  					printError("Failed while downloading source file " + args[3]);  				_dispatch(string.Format("event|builtin package src added \"{0}\" \"{1}\""' name' destination));  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length == 4 && args[1] == "add") {  				if (path == null) {  					printError("Config point is not initialized");  					return;  				}  				var name = args[2];  				var sources = locator.GetSourcesFrom(path);  				if (sources.Any(x => x.Name == name)) {  					printError("There is already a source named " + name);  					return;  				}  				if (!Directory.Exists(path))  					Directory.CreateDirectory(path);  				var destination = Path.Combine(path' name + ".source");  				download(args[3]' destination);  				if (!File.Exists(destination))  					printError("Failed while downloading source file " + args[3]);  				_dispatch(string.Format("event|builtin package src added \"{0}\" \"{1}\""' name' destination));  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length == 4 && args[1] == "add") {  				if (path == null) {  					printError("Config point is not initialized");  					return;  				}  				var name = args[2];  				var sources = locator.GetSourcesFrom(path);  				if (sources.Any(x => x.Name == name)) {  					printError("There is already a source named " + name);  					return;  				}  				if (!Directory.Exists(path))  					Directory.CreateDirectory(path);  				var destination = Path.Combine(path' name + ".source");  				download(args[3]' destination);  				if (!File.Exists(destination))  					printError("Failed while downloading source file " + args[3]);  				_dispatch(string.Format("event|builtin package src added \"{0}\" \"{1}\""' name' destination));  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length == 3 && args[1] == "rm") {  				var name = args[2];  				var source =   					locator  						.GetSources()  						.FirstOrDefault(x => x.Name == name);  				if (source == null) {  					printError("There is no package source named " + name);  					return;  				}  				File.Delete(source.Path);  				_dispatch(string.Format("event|builtin package src removed \"{0}\" \"{1}\""' name' source.Path));  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length == 3 && args[1] == "rm") {  				var name = args[2];  				var source =   					locator  						.GetSources()  						.FirstOrDefault(x => x.Name == name);  				if (source == null) {  					printError("There is no package source named " + name);  					return;  				}  				File.Delete(source.Path);  				_dispatch(string.Format("event|builtin package src removed \"{0}\" \"{1}\""' name' source.Path));  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length > 1 && args[1] == "update") {  				string name = null;  				if (args.Length > 2)  					name = args[2];  				var sources =   					locator  						.GetSources()  						.Where(x => name == null || x.Name == name);  				if (sources.Count() == 0) {  					printError("There are no package sources to update");  					return;  				}  				foreach (var source in sources) {  					_dispatch("downloading "+source.Origin);  					if (!download(source.Origin' source.Path))  						printError("Failed to download source file " + source.Origin);  					else  						_dispatch(string.Format("event|builtin package src updated \"{0}\" \"{1}\""' source.Name' source.Path));  				}  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length > 1 && args[1] == "update") {  				string name = null;  				if (args.Length > 2)  					name = args[2];  				var sources =   					locator  						.GetSources()  						.Where(x => name == null || x.Name == name);  				if (sources.Count() == 0) {  					printError("There are no package sources to update");  					return;  				}  				foreach (var source in sources) {  					_dispatch("downloading "+source.Origin);  					if (!download(source.Origin' source.Path))  						printError("Failed to download source file " + source.Origin);  					else  						_dispatch(string.Format("event|builtin package src updated \"{0}\" \"{1}\""' source.Name' source.Path));  				}  				return;  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length > 1 && args[1] == "list") {  				var os = getOS();  				string name = null;  				if (args.Length > 2)  					name = args[2];  				var sources =   					locator  						.GetSources()  						.Where(x => name == null || x.Name == name);  				foreach (var source in sources) {  					_dispatch("Packages in " +  source.Name);  					var sourcePackages = source.Packages.Where(x => x.OS.Contains(os)).OrderBy(x => x.Name);  					foreach (var package in sourcePackages)  						_dispatch("    " + package.ToString());  				}  			}
Magic Number,OpenIDE.Arguments.Handlers,PackageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PackageHandler.cs,sourceCommands,The following statement contains a magic number: if (args.Length > 1 && args[1] == "list") {  				var os = getOS();  				string name = null;  				if (args.Length > 2)  					name = args[2];  				var sources =   					locator  						.GetSources()  						.Where(x => name == null || x.Name == name);  				foreach (var source in sources) {  					_dispatch("Packages in " +  source.Name);  					var sourcePackages = source.Packages.Where(x => x.OS.Contains(os)).OrderBy(x => x.Name);  					foreach (var package in sourcePackages)  						_dispatch("    " + package.ToString());  				}  			}
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleScript,The following statement contains a magic number: if (args.Length == 1)  				listScript();  			else if (args.Length >= 4 && args[1] == "new")  				newScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmScript(args);  			else if (args.Length == 2)  				listScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleScript,The following statement contains a magic number: if (args.Length == 1)  				listScript();  			else if (args.Length >= 4 && args[1] == "new")  				newScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmScript(args);  			else if (args.Length == 2)  				listScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleScript,The following statement contains a magic number: if (args.Length == 1)  				listScript();  			else if (args.Length >= 4 && args[1] == "new")  				newScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmScript(args);  			else if (args.Length == 2)  				listScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleScript,The following statement contains a magic number: if (args.Length == 1)  				listScript();  			else if (args.Length >= 4 && args[1] == "new")  				newScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmScript(args);  			else if (args.Length == 2)  				listScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleScript,The following statement contains a magic number: if (args.Length == 1)  				listScript();  			else if (args.Length >= 4 && args[1] == "new")  				newScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmScript(args);  			else if (args.Length == 2)  				listScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newScript,The following statement contains a magic number: var language = getLanguage(args[2]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newScript,The following statement contains a magic number: var filename = getFileName(args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newScript,The following statement contains a magic number: var extension = getExtension(args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newScript,The following statement contains a magic number: var createLocal = args.Length == 5 && args[4] == "-l";
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newScript,The following statement contains a magic number: var createLocal = args.Length == 5 && args[4] == "-l";
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,editScript,The following statement contains a magic number: var script = scriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,editScript,The following statement contains a magic number: var script = scriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,catScript,The following statement contains a magic number: var script = scriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,catScript,The following statement contains a magic number: var script = scriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,rmScript,The following statement contains a magic number: var script = scriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,rmScript,The following statement contains a magic number: var script = scriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleRScript,The following statement contains a magic number: if (args.Length == 1)  				listRScript();  			else if (args.Length >= 4 && args[1] == "new")  				newRScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editRScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catRScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmRScript(args);  			else if (args.Length == 2)  				listRScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleRScript,The following statement contains a magic number: if (args.Length == 1)  				listRScript();  			else if (args.Length >= 4 && args[1] == "new")  				newRScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editRScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catRScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmRScript(args);  			else if (args.Length == 2)  				listRScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleRScript,The following statement contains a magic number: if (args.Length == 1)  				listRScript();  			else if (args.Length >= 4 && args[1] == "new")  				newRScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editRScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catRScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmRScript(args);  			else if (args.Length == 2)  				listRScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleRScript,The following statement contains a magic number: if (args.Length == 1)  				listRScript();  			else if (args.Length >= 4 && args[1] == "new")  				newRScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editRScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catRScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmRScript(args);  			else if (args.Length == 2)  				listRScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,handleRScript,The following statement contains a magic number: if (args.Length == 1)  				listRScript();  			else if (args.Length >= 4 && args[1] == "new")  				newRScript(args);  			else if (args.Length == 4 && args[1] == "edit")  				editRScript(args);  			else if (args.Length == 4 && args[1] == "cat")  				catRScript(args);  			else if (args.Length == 4 && args[1] == "rm")  				rmRScript(args);  			else if (args.Length == 2)  				listRScript(args[1]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newRScript,The following statement contains a magic number: var language = getLanguage(args[2]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newRScript,The following statement contains a magic number: var filename = getFileName(args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newRScript,The following statement contains a magic number: var extension = getExtension(args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newRScript,The following statement contains a magic number: var createLocal = args.Length == 5 && args[4] == "-l";
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,newRScript,The following statement contains a magic number: var createLocal = args.Length == 5 && args[4] == "-l";
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,editRScript,The following statement contains a magic number: var script = reactiveScriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,editRScript,The following statement contains a magic number: var script = reactiveScriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,catRScript,The following statement contains a magic number: var script = reactiveScriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,catRScript,The following statement contains a magic number: var script = reactiveScriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,rmRScript,The following statement contains a magic number: var script = reactiveScriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,HandleLanguageHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\HandleLanguageHandler.cs,rmRScript,The following statement contains a magic number: var script = reactiveScriptFromLanguageAndScriptName(args[2]' args[3]);
Magic Number,OpenIDE.Arguments.Handlers,EnvironmentHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\EnvironmentHandler.cs,Execute,The following statement contains a magic number: if (arguments.Length >= 1 && arguments[0] == "details") {  				var token = _token;  				if (arguments.Length == 2)  					token = arguments[1];  				details(token);  			}
Magic Number,OpenIDE.Arguments.Handlers,TestScriptHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\TestScriptHandler.cs,runCommand,The following statement contains a magic number: if (arguments.Length > 1 && arguments[1] == "oi")                  index = 2;              else                  args = arguments[0];
Magic Number,OpenIDE.Arguments.Handlers,TestReactiveScriptHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\TestReactiveScriptHandler.cs,Execute,The following statement contains a magic number: if (arguments.Length < 2)                  return;
Magic Number,OpenIDE.Arguments.Handlers,TestReactiveScriptHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\TestReactiveScriptHandler.cs,Execute,The following statement contains a magic number: try {                  using (var output = new OutputClient(_token' (publisher' msg) => { if (name == publisher) _dispatch(msg); }))                  {                      output.Connect();                      var proc = new Process();                      proc.Query(                          Path.Combine(root' Path.Combine("EventListener"' "OpenIDE.EventListener.exe"))'                          ""'                          false'                          _token'                          (error' s) => {                              if (s == match1 || s == match2) {                                  var newHas = File.ReadAllText(script.File).GetHashCode();                                  if (newHas != hash) {                                      hash = newHas;                                      Thread.Sleep(200);                                      _dispatch("");                                      _dispatch("Triggering reactive script:");                                      _dispatch("event|"+arguments[1]);                                  }                              }                          }                      );                  }              } catch (Exception ex) {                  Logger.Write(ex);              }
Magic Number,OpenIDE.Arguments.Handlers,OutputListener,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\OutputListener.cs,Execute,The following statement contains a magic number: if (all) {                  var envList = new Dictionary<string' Thread>();                  while (true) {                      var instances = _locator.GetInstances();                      foreach (var instance in instances) {                          if (!envList.ContainsKey(instance.Key)) {                              var dirName = Path.GetFileName(instance.Key);                              Action<string' string> instancePrinter = (publiser' message) => {                                  printer(dirName + ": " + publiser' message);                              };                              var thread = new Thread(watchOutput);                              thread.Start(new WatchInstance() { Follow = true' Path = instance.Key' Printer = instancePrinter});                              envList.Add(instance.Key' thread);                              printer("output-listener"' "started listener for " + instance.Key);                          }                      }                      Thread.Sleep(5000);                  }              } else {                  watchOutput(new WatchInstance() { Follow = follow' Path = _token' Printer = printer});              }
Magic Number,OpenIDE.Arguments.Handlers,OutputListener,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\OutputListener.cs,watchOutput,The following statement contains a magic number: while (true) {                  client.Connect();                  while (client.IsConnected) {                      Thread.Sleep(100);                  }                  if (!instance.Follow)                      break;                  Thread.Sleep(1000);              }
Magic Number,OpenIDE.Arguments.Handlers,OutputListener,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\OutputListener.cs,watchOutput,The following statement contains a magic number: while (true) {                  client.Connect();                  while (client.IsConnected) {                      Thread.Sleep(100);                  }                  if (!instance.Follow)                      break;                  Thread.Sleep(1000);              }
Magic Number,OpenIDE.Arguments.Handlers,CodeEngineOutputWriteHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\CodeEngineOutputWriteHandler.cs,Execute,The following statement contains a magic number: using (var instance = _codeEngineFactory.GetInstance(Environment.CurrentDirectory)) {                  if (instance == null)                      return;                  if (arguments.Length != 2)                      return;                  instance.Send("write-output \"" + arguments[0] + "\" \"" + arguments[1] + "\"");              }
Magic Number,OpenIDE.CommandBuilding,CommandBuilder,C:\repos\continuoustests_OpenIDE\OpenIDE\CommandBuilding\CommandBuilder.cs,Describe,The following statement contains a magic number: foreach (var chunk in chunks) {                  if (available == null)                      return "";                  var command = available.FirstOrDefault(x => x.Name.Equals(chunk));                  if (command == null)                      return "";                  if (builder.Length == 0)                  {                      builder.AppendLine(command.Description);                      builder.AppendLine(command.Name);                  }                  else                      builder.AppendLine("".PadLeft(level * 4' ' ') + command.Name + " : " + command.Description);                  available = new List<DefinitionCacheItem>(command.Parameters);                  level++;              }
Magic Number,OpenIDE.CommandBuilding,PathAutoCompletion,C:\repos\continuoustests_OpenIDE\OpenIDE\CommandBuilding\PathAutoCompletion.cs,AutoComplete,The following statement contains a magic number: if (dirContent.LastIndexOf(Path.DirectorySeparatorChar) < dirContent.LastIndexOf(' ') && (dirContent.Count(x => x.Equals('"')) % 2) == 0)                  lookFor = ' ';
Magic Number,OpenIDE.EventIntegration,Instance,C:\repos\continuoustests_OpenIDE\OpenIDE\EventIntegration\EventDispatcher.cs,Get,The following statement contains a magic number: if (lines.Length != 2)  					return null;
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Execute,The following statement contains a magic number: foreach (var testFile in testFiles) {  				  				_testRunLocation = Path.Combine(Path.GetTempPath()' DateTime.Now.Ticks.ToString());  				Console.WriteLine("Testing: {0}"' testFile);  				var eventListenerStarted = false;  				var systemStarted = false;  				var runCompleted = false;  				var eventListener = new Thread(() => {  							var eventSocketClient = new EventStuff.EventClient(  								(line) => {  											if (line == "codeengine started") {  												log("Code engine started");  												systemStarted = true;  											} if (line == "codeengine stopped") {  												log("Code engine stopped");  												runCompleted = true;  											}  											_events.Add(line);  										});  							while (true) {  								eventSocketClient.Connect(_testRunLocation);  								eventListenerStarted = true;  								if (!eventSocketClient.IsConnected) {  									Thread.Sleep(10);  									if (runCompleted || systemStarted)  										break;  									continue;  								}  								log("Event listener connected");  								while (eventSocketClient.IsConnected)  									Thread.Sleep(10);  								break;  							}  							eventListenerStarted = false;  						});  				var isQuerying = false;  				var useEditor = false;  				var tests = new List<string>();  				Process proc = null;  				try {  					Directory.CreateDirectory(_testRunLocation);  					_events = new List<string>();  					_outputs = new List<string>();  					_asserts = new List<string>();    					log("Initializing test location");  					runCommand("init");  					// Make sure we run tests in default profile is  					// this by any chance overloaded in init command  					runCommand("profile load default");  					eventListener.Start();    					new Thread(() => {  							log("Starting test process");  							var testProc = new Process();  							try {  								testProc  									.Query(  										testFile'  										_testRunLocation'  										false'  										Environment.CurrentDirectory'  										(error' line) => {  												if (line == "initialized" || line.StartsWith("initialized|")) {  													log("Test file initialized");  				        							proc = testProc;  													var chunks = line.Split(new[] {'|'});  													if (chunks.Length > 1 && chunks[1] == "editor") {  														while (!eventListenerStarted)  															Thread.Sleep(10);  														log("Starting editor");  														new Process().Run("oi"' "editor test"' false' _testRunLocation);  														log("Editor launched");  														useEditor = true;  													} else {  														log("System started");  														systemStarted = true;  													}  				        							return;  				        						}  												if (line == "end-of-conversation") {  				        							isQuerying = false;  				        							return;  				        						}  												handleFeedback(proc' error' line);  											});  							} catch (Exception ex) {  								handleFeedback(testProc' true' "A fatal error occured while running " + testFile + Environment.NewLine + ex.Message);  							}  							isQuerying = false;  							runCompleted = true;  						}).Start();  				} catch (Exception ex) {  					Console.WriteLine(ex.ToString());  				}    				log("Waiting for system to complete loading");  				while (!systemStarted)  					Thread.Sleep(10);    				log("Getting tests");  				isQuerying = ask(proc' "get-tests");  				while (isQuerying)  					Thread.Sleep(10);  				tests.AddRange(  					_summary.ToString()  					.Replace("\t"' "")  					.Split(  						new[] { Environment.NewLine }'  						StringSplitOptions.RemoveEmptyEntries));    				foreach (var test in tests) {  					if (_currentTest != null)  						writeInconclusive();  					log("Running test: " + test);  					_outputs.Clear();  					_events.Clear();  					_asserts.Clear();  					_currentTest = test;  					_summary = new StringBuilder();  					if (_verbose)  						Console.Write(_currentTest + "...");  					isQuerying = ask(proc' "test|" + _currentTest);  					while (isQuerying)  						Thread.Sleep(10);  				}    				if (useEditor) {  					log("Shuting down editor");  					new Process().Run("oi"' "editor command kill"' false' _testRunLocation);  				}    				log("Shuting down system");  				ask(proc' "shutdown");  				while (!runCompleted)  					Thread.Sleep(10);    				log("Waiting for event listener to stop");  				while (eventListenerStarted)  					Thread.Sleep(10);    				if (Directory.Exists(_testRunLocation))  					Directory.Delete(_testRunLocation' true);    				if (_currentTest != null)  					writeInconclusive();  				_currentTest = null;  				log("Test run finished");  				Console.WriteLine();  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,handleFeedback,The following statement contains a magic number: if (line == "passed" || line.StartsWith("passed|")) {  				handleTestDone("PASSED "' ConsoleColor.Green' !_printOnlyErrorsAndInconclusives);  			} else if (error || line == "failed" || line.StartsWith("failed|")) {  				if (error)  					_summary.AppendLine(line);  				else {  					var chunks = line.Split(new[] { '|' });  					if (chunks.Length > 1)  						_asserts.Add(chunks[1]);  				}  				handleTestDone("FAILED "' ConsoleColor.Red);    				if (_asserts.Count > 0) {  					Console.ForegroundColor = ConsoleColor.Red;  					foreach (var assert in _asserts)  						Console.WriteLine("\t" + assert);  					Console.ResetColor();  				}    				if (_showoutputs) {  					Console.WriteLine("\tOutputs:");  					foreach (var output in _outputs)  						Console.WriteLine("\t" + output);  					Console.WriteLine();  				}  				  				if (_showevents) {  					Console.WriteLine("\tEvents:");  					foreach (var @event in _events)  						Console.WriteLine("\t" + @event);  					Console.WriteLine();  				}  			} else if (line.StartsWith("command|")) {  				runCommand(line.Substring(8' line.Length - 8));  			} else if (line.StartsWith("hasoutput|")) {  				var pattern = line.Substring(10' line.Length - 10);  				var result =   					retryFor5SecondsIfFalse(  						() => _outputs.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (output): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line.StartsWith("hasevent|")) {  				var pattern = line.Substring(9' line.Length - 9);  				var result =   					retryFor5SecondsIfFalse(  						() => _events.Any(x => x.Trim() == pattern.Trim()));  				if (!result)  					_asserts.Add("Expected (event): " + pattern);  				ask(proc' result.ToString().ToLower());  			} else if (line == "get|applocation") {  				ask(proc' Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));  			} else {  				_summary.AppendLine("\t" + line);  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,retryFor5SecondsIfFalse,The following statement contains a magic number: while (true) {  				if (check())  					return true;  				if (DateTime.Now > now.AddSeconds(5))  					break;  				Thread.Sleep(50);  			}
Magic Number,EventStuff,PkgTestHandler,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,retryFor5SecondsIfFalse,The following statement contains a magic number: while (true) {  				if (check())  					return true;  				if (DateTime.Now > now.AddSeconds(5))  					break;  				Thread.Sleep(50);  			}
Magic Number,EventStuff,Instance,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Get,The following statement contains a magic number: if (lines.Length != 2)  				return null;
Magic Number,EventStuff,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Connect,The following statement contains a magic number: if (retryCount >= 5)                  return;
Magic Number,EventStuff,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,SendAndWait,The following statement contains a magic number: while (IsSending && DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)                  Thread.Sleep(10);
Magic Number,EventStuff,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,SendAndWait,The following statement contains a magic number: while (IsSending && DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)                  Thread.Sleep(10);
Magic Number,EventStuff,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Request,The following statement contains a magic number: while (DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)  			{  				if (recieved != null)  					break;                  Thread.Sleep(10);  			}
Magic Number,EventStuff,SocketClient,C:\repos\continuoustests_OpenIDE\OpenIDE\Arguments\Handlers\PkgTestHandler.cs,Request,The following statement contains a magic number: while (DateTime.Now.Subtract(timeout).TotalMilliseconds < 8000)  			{  				if (recieved != null)  					break;                  Thread.Sleep(10);  			}
