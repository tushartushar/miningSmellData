Implementation smell,Namespace,Class,File,Method,Description
Long Method,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The method has 106 lines of code.
Long Method,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The method has 110 lines of code.
Complex Method,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,Cyclomatic complexity of the method is 12
Complex Method,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,com_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,Window_Close,Cyclomatic complexity of the method is 14
Complex Method,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,Cyclomatic complexity of the method is 41
Complex Method,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,Cyclomatic complexity of the method is 17
Complex Method,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,splitComma,Cyclomatic complexity of the method is 16
Complex Method,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,Cyclomatic complexity of the method is 76
Complex Method,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,Cyclomatic complexity of the method is 22
Complex Method,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseSession,Cyclomatic complexity of the method is 11
Complex Method,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,Cyclomatic complexity of the method is 17
Complex Method,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,Cyclomatic complexity of the method is 42
Complex Method,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,addRemoveQuote,Cyclomatic complexity of the method is 15
Complex Method,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,ExceptWhiteSpaces,Cyclomatic complexity of the method is 8
Complex Method,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createOutput,Cyclomatic complexity of the method is 17
Complex Method,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,Cyclomatic complexity of the method is 8
Complex Method,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,setCompromiseNodes,Cyclomatic complexity of the method is 9
Complex Method,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,compromiteNode,Cyclomatic complexity of the method is 14
Complex Method,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,combinationUtil,Cyclomatic complexity of the method is 8
Complex Method,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,writeFile,Cyclomatic complexity of the method is 15
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,Cyclomatic complexity of the method is 15
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,Cyclomatic complexity of the method is 12
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,Cyclomatic complexity of the method is 9
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,Cyclomatic complexity of the method is 25
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,showGraph,Cyclomatic complexity of the method is 17
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,Cyclomatic complexity of the method is 8
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,findMinSet,Cyclomatic complexity of the method is 17
Complex Method,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,Cyclomatic complexity of the method is 10
Long Parameter List,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,findCombination,The method has 5 parameters.
Long Parameter List,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,combinationUtil,The method has 9 parameters.
Long Statement,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The length of the statement  "		if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) { " is 193.
Long Statement,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseMessage,The length of the statement  "		if (twoSubstrings.Count > 1 && !String.IsNullOrEmpty (twoSubstrings [0]) && !String.IsNullOrEmpty (twoSubstrings [1])) { " is 120.
Long Statement,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The length of the statement  "				writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")[type=data];"); " is 121.
Long Statement,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The length of the statement  "					writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + " -> {" + parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1)); " is 135.
Long Statement,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The length of the statement  "					writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ") -> encrypt" + countEncrypt.ToString ()); " is 147.
Long Statement,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,The length of the statement  "					if ((node1.Type == "function") || (String.IsNullOrEmpty (node1.Type) && (node1.containSub ("hmac") || node1.containSub ("encrypt") || node1.containSub ("hash") || node1.containSub ("prf")))) " is 190.
Long Statement,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,addRemoveQuote,The length of the statement  "				while ((k - 1 >= 0) && (Char.IsLetter (str [k - 1]) || str [k - 1] == '-' || str [k - 1] == '_' || Char.IsDigit (str [k - 1]))) { " is 129.
Long Statement,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,addRemoveQuote,The length of the statement  "				while ((k - 1 >= 0) && (Char.IsLetter (str [k - 1]) || str [k - 1] == '-' || str [k] == '_' || Char.IsDigit (str [k - 1]))) { " is 125.
Long Statement,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The length of the statement  "	if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) { " is 284.
Long Statement,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The length of the statement  "		if (!(par.Value.Length > 1 && char.ToUpper (par.Value [0]) == char.ToUpper (n.Value [0]) && par.Value.Substring (1' number.Length) == number)) { " is 144.
Long Statement,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The length of the statement  "		if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 3 && n.getChildren ().Contains (unCompromised)) { " is 191.
Long Statement,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The length of the statement  "		if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 2 && n.getChildren ().Contains (unCompromised)) { " is 191.
Long Statement,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The length of the statement  "	if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot"))) " is 204.
Long Statement,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The length of the statement  "				writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces."); " is 138.
Long Statement,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The length of the statement  "	if ((fileName.Substring (fileName.Length - 3).ToLower () != "dot") && fileName.Substring (fileName.Length - 2).ToLower () != "gv") " is 130.
Long Statement,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The length of the statement  "	if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot"))) " is 204.
Long Statement,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The length of the statement  "			System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error); " is 139.
Long Statement,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,CreatePng_Click,The length of the statement  "			MessageBox.Show ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces."' "Incorrect path"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error); " is 227.
Long Statement,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,sendWarning,The length of the statement  "		return MessageBox.Show ("Do you want to save changes?"' "Save changes"' MessageBoxButton.YesNoCancel' MessageBoxImage.Question); " is 128.
Long Statement,CAG,Node,C:\repos\Strigimar_CAG\CAG\CAG\Node.cs,Equals,The length of the statement  "		if (this.parents [i].Color != nodeParents [i].Color || this.parents [i].Value != nodeParents [i].Value || !this.parents [i].V.Equals (nodeParents [i].V)) " is 153.
Complex Conditional,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The conditional expression  "(!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))"  is complex.
Complex Conditional,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,The conditional expression  "(node1.Type == "function") || (String.IsNullOrEmpty (node1.Type) && (node1.containSub ("hmac") || node1.containSub ("encrypt") || node1.containSub ("hash") || node1.containSub ("prf")))"  is complex.
Complex Conditional,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,ExceptWhiteSpaces,The conditional expression  "str [i] != ' ' && str [i] != '\n' && str [i] != '\r' && str [i] != '\t' && str [i] != '{' && str [i] != '}'"  is complex.
Complex Conditional,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The conditional expression  "(fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))"  is complex.
Complex Conditional,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The conditional expression  "encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 3 && n.getChildren ().Contains (unCompromised)"  is complex.
Complex Conditional,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The conditional expression  "encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 2 && n.getChildren ().Contains (unCompromised)"  is complex.
Complex Conditional,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The conditional expression  "!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot"))"  is complex.
Complex Conditional,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The conditional expression  "!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot"))"  is complex.
Magic Number,Petzold.Media2D,ArrowLineBase,C:\repos\Strigimar_CAG\CAG\CAG\ArrowLineBase.cs,CalculateArrow,The following statement contains a magic number: matx.Rotate (ArrowAngle / 2);  
Magic Number,CAG,Edge,C:\repos\Strigimar_CAG\CAG\CAG\Edge.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + fromTo.Item1.GetHashCode ();  
Magic Number,CAG,Edge,C:\repos\Strigimar_CAG\CAG\CAG\Edge.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + fromTo.Item2.GetHashCode ();  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: foreach (Node node in nodes) {  	if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  		BrushConverter conv = new BrushConverter ();  		SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  		TextBlock textBlock = new TextBlock ();  		textBlock.TextTrimming = TextTrimming.WordEllipsis;  		textBlock.Width = 125;  		textBlock.Height = 27;  		textBlock.Text = node.Value;  		textBlock.FontSize = 15;  		textBlock.Background = Brushes.LightGray;  		textBlock.FontWeight = FontWeights.Bold;  		textBlock.IsEnabled = false;  		textBlock.TextAlignment = TextAlignment.Center;  		Label label = new Label ();  		label.Width = 125;  		label.Height = 27;  		label.Content = node.Value;  		label.BorderThickness = new Thickness (0.5);  		label.BorderBrush = brush;  		label.FontWeight = FontWeights.Bold;  		Canvas.SetLeft (textBlock' x);  		Canvas.SetTop (textBlock' y);  		Slider slider = new Slider ();  		slider.Width = 80;  		slider.Height = 26;  		slider.Maximum = 256;  		slider.Minimum = 0;  		slider.Value = node.Bit;  		slider.ValueChanged += slider_ValueChanged;  		Canvas.SetLeft (slider' 152);  		Canvas.SetTop (slider' y);  		TextBox txt = new TextBox ();  		txt.Width = 50;  		txt.Height = 26;  		txt.IsEnabled = false;  		txt.Text = node.Bit.ToString ();  		txt.FontWeight = FontWeights.Bold;  		txt.TextAlignment = TextAlignment.Center;  		Canvas.SetLeft (txt' 247);  		Canvas.SetTop (txt' y);  		entropy.Add (slider' txt);  		sliders.Add (slider' node);  		ComboBox com = new ComboBox ();  		com.Width = 50;  		com.Height = 26;  		ComboBoxItem comItem1 = new ComboBoxItem ();  		ComboBoxItem comItem2 = new ComboBoxItem ();  		ComboBoxItem comItem3 = new ComboBoxItem ();  		ComboBoxItem comItem4 = new ComboBoxItem ();  		comItem1.Content = "D";  		comItem2.Content = "A";  		comItem3.Content = "A/D";  		comItem4.Content = "-";  		com.Items.Add (comItem1);  		com.Items.Add (comItem2);  		com.Items.Add (comItem3);  		com.Items.Add (comItem4);  		switch (node.Set) {  		case Set.Attack:  			com.Text = "A";  			break;  		case Set.Input:  			com.Text = "D";  			break;  		case Set.Both:  			com.Text = "A/D";  			break;  		}  		com.SelectionChanged += com_SelectionChanged;  		Canvas.SetLeft (com' 307);  		Canvas.SetTop (com' y);  		setNode.Add (com' node);  		myCanvas.Children.Add (textBlock);  		myCanvas.Children.Add (slider);  		myCanvas.Children.Add (txt);  		myCanvas.Children.Add (com);  		y += 50;  		if (y > this.Height)  			myCanvas.Height = y;  	}  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: if ((!String.IsNullOrEmpty (node.Type) && node.Type != "function") || (!node.containSub ("encrypt") && !node.containSub ("hash") && !node.containSub ("decrypt") && !node.containSub ("hmac"))) {  	BrushConverter conv = new BrushConverter ();  	SolidColorBrush brush = conv.ConvertFromString ("lightGray") as SolidColorBrush;  	TextBlock textBlock = new TextBlock ();  	textBlock.TextTrimming = TextTrimming.WordEllipsis;  	textBlock.Width = 125;  	textBlock.Height = 27;  	textBlock.Text = node.Value;  	textBlock.FontSize = 15;  	textBlock.Background = Brushes.LightGray;  	textBlock.FontWeight = FontWeights.Bold;  	textBlock.IsEnabled = false;  	textBlock.TextAlignment = TextAlignment.Center;  	Label label = new Label ();  	label.Width = 125;  	label.Height = 27;  	label.Content = node.Value;  	label.BorderThickness = new Thickness (0.5);  	label.BorderBrush = brush;  	label.FontWeight = FontWeights.Bold;  	Canvas.SetLeft (textBlock' x);  	Canvas.SetTop (textBlock' y);  	Slider slider = new Slider ();  	slider.Width = 80;  	slider.Height = 26;  	slider.Maximum = 256;  	slider.Minimum = 0;  	slider.Value = node.Bit;  	slider.ValueChanged += slider_ValueChanged;  	Canvas.SetLeft (slider' 152);  	Canvas.SetTop (slider' y);  	TextBox txt = new TextBox ();  	txt.Width = 50;  	txt.Height = 26;  	txt.IsEnabled = false;  	txt.Text = node.Bit.ToString ();  	txt.FontWeight = FontWeights.Bold;  	txt.TextAlignment = TextAlignment.Center;  	Canvas.SetLeft (txt' 247);  	Canvas.SetTop (txt' y);  	entropy.Add (slider' txt);  	sliders.Add (slider' node);  	ComboBox com = new ComboBox ();  	com.Width = 50;  	com.Height = 26;  	ComboBoxItem comItem1 = new ComboBoxItem ();  	ComboBoxItem comItem2 = new ComboBoxItem ();  	ComboBoxItem comItem3 = new ComboBoxItem ();  	ComboBoxItem comItem4 = new ComboBoxItem ();  	comItem1.Content = "D";  	comItem2.Content = "A";  	comItem3.Content = "A/D";  	comItem4.Content = "-";  	com.Items.Add (comItem1);  	com.Items.Add (comItem2);  	com.Items.Add (comItem3);  	com.Items.Add (comItem4);  	switch (node.Set) {  	case Set.Attack:  		com.Text = "A";  		break;  	case Set.Input:  		com.Text = "D";  		break;  	case Set.Both:  		com.Text = "A/D";  		break;  	}  	com.SelectionChanged += com_SelectionChanged;  	Canvas.SetLeft (com' 307);  	Canvas.SetTop (com' y);  	setNode.Add (com' node);  	myCanvas.Children.Add (textBlock);  	myCanvas.Children.Add (slider);  	myCanvas.Children.Add (txt);  	myCanvas.Children.Add (com);  	y += 50;  	if (y > this.Height)  		myCanvas.Height = y;  }  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: textBlock.Width = 125;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: textBlock.Height = 27;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: textBlock.FontSize = 15;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: label.Width = 125;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: label.Height = 27;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: label.BorderThickness = new Thickness (0.5);  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: slider.Width = 80;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: slider.Height = 26;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: slider.Maximum = 256;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: Canvas.SetLeft (slider' 152);  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: txt.Width = 50;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: txt.Height = 26;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: Canvas.SetLeft (txt' 247);  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: com.Width = 50;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: com.Height = 26;  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: Canvas.SetLeft (com' 307);  
Magic Number,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following statement contains a magic number: y += 50;  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: name = name.Remove (name.Length - 4);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: try {  	parseLines ();  }  catch (System.IndexOutOfRangeException) {  	throwException = true;  }  catch (Exception ex) {  	throwException = true;  	throw ex;  }  finally {  	writeDot.Close ();  	StreamReader fm = new StreamReader (nameDotFile);  	fm.Close ();  	File.Delete (nameDotFile);  	if (throwException) {  		for (int j = 1; j <= countDotFiles; j++) {  			File.Delete (nameDotFile.Insert (nameDotFile.Length - 4' j.ToString ()));  		}  		countDotFiles = -2;  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: try {  	parseLines ();  }  catch (System.IndexOutOfRangeException) {  	throwException = true;  }  catch (Exception ex) {  	throwException = true;  	throw ex;  }  finally {  	writeDot.Close ();  	StreamReader fm = new StreamReader (nameDotFile);  	fm.Close ();  	File.Delete (nameDotFile);  	if (throwException) {  		for (int j = 1; j <= countDotFiles; j++) {  			File.Delete (nameDotFile.Insert (nameDotFile.Length - 4' j.ToString ()));  		}  		countDotFiles = -2;  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: if (throwException) {  	for (int j = 1; j <= countDotFiles; j++) {  		File.Delete (nameDotFile.Insert (nameDotFile.Length - 4' j.ToString ()));  	}  	countDotFiles = -2;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: if (throwException) {  	for (int j = 1; j <= countDotFiles; j++) {  		File.Delete (nameDotFile.Insert (nameDotFile.Length - 4' j.ToString ()));  	}  	countDotFiles = -2;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: for (int j = 1; j <= countDotFiles; j++) {  	File.Delete (nameDotFile.Insert (nameDotFile.Length - 4' j.ToString ()));  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: File.Delete (nameDotFile.Insert (nameDotFile.Length - 4' j.ToString ()));  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parse,The following statement contains a magic number: countDotFiles = -2;  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: foreach (string line in lines) {  	if (parts.Any (item => line.Contains (item))) {  		string compress = line;  		if (line.Contains ('%'))  			compress = line.Remove (line.IndexOf ('%'));  		compress = compress.Trim ();  		switch (compress) {  		case "identifiers":  			section++;  			break;  		case "messages":  			//bad format in CAS+' previous section was forgotten  			if (section != 1)  				throw new IndexOutOfRangeException ();  			parseIdentifirers (descriptions);  			section++;  			break;  		case "knowledge":  			if (section != 2)  				throw new IndexOutOfRangeException ();  			parseMessage (descriptions);  			writeDot.Close ();  			section++;  			break;  		case "session_instances":  			if (section != 3)  				throw new IndexOutOfRangeException ();  			knowledges = new List<string> (descriptions);  			section++;  			break;  		case "intruder_knowledge":  			if (section != 4)  				throw new IndexOutOfRangeException ();  			parseSession (descriptions);  			section++;  			break;  		case "goal":  			if (section != 5)  				throw new IndexOutOfRangeException ();  			parseKnowledgeIntruder (descriptions);  			section++;  			break;  		default:  			throw new IndexOutOfRangeException ();  		}  		descriptions.Clear ();  		continue;  	}  	string lin = line.Trim ();  	if (!String.IsNullOrEmpty (lin) && lin [0] != '%') {  		if (section > 1 && lin.Contains ('%'))  			lin = lin.Remove (lin.IndexOf ('%'));  		descriptions.Add (lin);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: foreach (string line in lines) {  	if (parts.Any (item => line.Contains (item))) {  		string compress = line;  		if (line.Contains ('%'))  			compress = line.Remove (line.IndexOf ('%'));  		compress = compress.Trim ();  		switch (compress) {  		case "identifiers":  			section++;  			break;  		case "messages":  			//bad format in CAS+' previous section was forgotten  			if (section != 1)  				throw new IndexOutOfRangeException ();  			parseIdentifirers (descriptions);  			section++;  			break;  		case "knowledge":  			if (section != 2)  				throw new IndexOutOfRangeException ();  			parseMessage (descriptions);  			writeDot.Close ();  			section++;  			break;  		case "session_instances":  			if (section != 3)  				throw new IndexOutOfRangeException ();  			knowledges = new List<string> (descriptions);  			section++;  			break;  		case "intruder_knowledge":  			if (section != 4)  				throw new IndexOutOfRangeException ();  			parseSession (descriptions);  			section++;  			break;  		case "goal":  			if (section != 5)  				throw new IndexOutOfRangeException ();  			parseKnowledgeIntruder (descriptions);  			section++;  			break;  		default:  			throw new IndexOutOfRangeException ();  		}  		descriptions.Clear ();  		continue;  	}  	string lin = line.Trim ();  	if (!String.IsNullOrEmpty (lin) && lin [0] != '%') {  		if (section > 1 && lin.Contains ('%'))  			lin = lin.Remove (lin.IndexOf ('%'));  		descriptions.Add (lin);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: foreach (string line in lines) {  	if (parts.Any (item => line.Contains (item))) {  		string compress = line;  		if (line.Contains ('%'))  			compress = line.Remove (line.IndexOf ('%'));  		compress = compress.Trim ();  		switch (compress) {  		case "identifiers":  			section++;  			break;  		case "messages":  			//bad format in CAS+' previous section was forgotten  			if (section != 1)  				throw new IndexOutOfRangeException ();  			parseIdentifirers (descriptions);  			section++;  			break;  		case "knowledge":  			if (section != 2)  				throw new IndexOutOfRangeException ();  			parseMessage (descriptions);  			writeDot.Close ();  			section++;  			break;  		case "session_instances":  			if (section != 3)  				throw new IndexOutOfRangeException ();  			knowledges = new List<string> (descriptions);  			section++;  			break;  		case "intruder_knowledge":  			if (section != 4)  				throw new IndexOutOfRangeException ();  			parseSession (descriptions);  			section++;  			break;  		case "goal":  			if (section != 5)  				throw new IndexOutOfRangeException ();  			parseKnowledgeIntruder (descriptions);  			section++;  			break;  		default:  			throw new IndexOutOfRangeException ();  		}  		descriptions.Clear ();  		continue;  	}  	string lin = line.Trim ();  	if (!String.IsNullOrEmpty (lin) && lin [0] != '%') {  		if (section > 1 && lin.Contains ('%'))  			lin = lin.Remove (lin.IndexOf ('%'));  		descriptions.Add (lin);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: foreach (string line in lines) {  	if (parts.Any (item => line.Contains (item))) {  		string compress = line;  		if (line.Contains ('%'))  			compress = line.Remove (line.IndexOf ('%'));  		compress = compress.Trim ();  		switch (compress) {  		case "identifiers":  			section++;  			break;  		case "messages":  			//bad format in CAS+' previous section was forgotten  			if (section != 1)  				throw new IndexOutOfRangeException ();  			parseIdentifirers (descriptions);  			section++;  			break;  		case "knowledge":  			if (section != 2)  				throw new IndexOutOfRangeException ();  			parseMessage (descriptions);  			writeDot.Close ();  			section++;  			break;  		case "session_instances":  			if (section != 3)  				throw new IndexOutOfRangeException ();  			knowledges = new List<string> (descriptions);  			section++;  			break;  		case "intruder_knowledge":  			if (section != 4)  				throw new IndexOutOfRangeException ();  			parseSession (descriptions);  			section++;  			break;  		case "goal":  			if (section != 5)  				throw new IndexOutOfRangeException ();  			parseKnowledgeIntruder (descriptions);  			section++;  			break;  		default:  			throw new IndexOutOfRangeException ();  		}  		descriptions.Clear ();  		continue;  	}  	string lin = line.Trim ();  	if (!String.IsNullOrEmpty (lin) && lin [0] != '%') {  		if (section > 1 && lin.Contains ('%'))  			lin = lin.Remove (lin.IndexOf ('%'));  		descriptions.Add (lin);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (parts.Any (item => line.Contains (item))) {  	string compress = line;  	if (line.Contains ('%'))  		compress = line.Remove (line.IndexOf ('%'));  	compress = compress.Trim ();  	switch (compress) {  	case "identifiers":  		section++;  		break;  	case "messages":  		//bad format in CAS+' previous section was forgotten  		if (section != 1)  			throw new IndexOutOfRangeException ();  		parseIdentifirers (descriptions);  		section++;  		break;  	case "knowledge":  		if (section != 2)  			throw new IndexOutOfRangeException ();  		parseMessage (descriptions);  		writeDot.Close ();  		section++;  		break;  	case "session_instances":  		if (section != 3)  			throw new IndexOutOfRangeException ();  		knowledges = new List<string> (descriptions);  		section++;  		break;  	case "intruder_knowledge":  		if (section != 4)  			throw new IndexOutOfRangeException ();  		parseSession (descriptions);  		section++;  		break;  	case "goal":  		if (section != 5)  			throw new IndexOutOfRangeException ();  		parseKnowledgeIntruder (descriptions);  		section++;  		break;  	default:  		throw new IndexOutOfRangeException ();  	}  	descriptions.Clear ();  	continue;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (parts.Any (item => line.Contains (item))) {  	string compress = line;  	if (line.Contains ('%'))  		compress = line.Remove (line.IndexOf ('%'));  	compress = compress.Trim ();  	switch (compress) {  	case "identifiers":  		section++;  		break;  	case "messages":  		//bad format in CAS+' previous section was forgotten  		if (section != 1)  			throw new IndexOutOfRangeException ();  		parseIdentifirers (descriptions);  		section++;  		break;  	case "knowledge":  		if (section != 2)  			throw new IndexOutOfRangeException ();  		parseMessage (descriptions);  		writeDot.Close ();  		section++;  		break;  	case "session_instances":  		if (section != 3)  			throw new IndexOutOfRangeException ();  		knowledges = new List<string> (descriptions);  		section++;  		break;  	case "intruder_knowledge":  		if (section != 4)  			throw new IndexOutOfRangeException ();  		parseSession (descriptions);  		section++;  		break;  	case "goal":  		if (section != 5)  			throw new IndexOutOfRangeException ();  		parseKnowledgeIntruder (descriptions);  		section++;  		break;  	default:  		throw new IndexOutOfRangeException ();  	}  	descriptions.Clear ();  	continue;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (parts.Any (item => line.Contains (item))) {  	string compress = line;  	if (line.Contains ('%'))  		compress = line.Remove (line.IndexOf ('%'));  	compress = compress.Trim ();  	switch (compress) {  	case "identifiers":  		section++;  		break;  	case "messages":  		//bad format in CAS+' previous section was forgotten  		if (section != 1)  			throw new IndexOutOfRangeException ();  		parseIdentifirers (descriptions);  		section++;  		break;  	case "knowledge":  		if (section != 2)  			throw new IndexOutOfRangeException ();  		parseMessage (descriptions);  		writeDot.Close ();  		section++;  		break;  	case "session_instances":  		if (section != 3)  			throw new IndexOutOfRangeException ();  		knowledges = new List<string> (descriptions);  		section++;  		break;  	case "intruder_knowledge":  		if (section != 4)  			throw new IndexOutOfRangeException ();  		parseSession (descriptions);  		section++;  		break;  	case "goal":  		if (section != 5)  			throw new IndexOutOfRangeException ();  		parseKnowledgeIntruder (descriptions);  		section++;  		break;  	default:  		throw new IndexOutOfRangeException ();  	}  	descriptions.Clear ();  	continue;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (parts.Any (item => line.Contains (item))) {  	string compress = line;  	if (line.Contains ('%'))  		compress = line.Remove (line.IndexOf ('%'));  	compress = compress.Trim ();  	switch (compress) {  	case "identifiers":  		section++;  		break;  	case "messages":  		//bad format in CAS+' previous section was forgotten  		if (section != 1)  			throw new IndexOutOfRangeException ();  		parseIdentifirers (descriptions);  		section++;  		break;  	case "knowledge":  		if (section != 2)  			throw new IndexOutOfRangeException ();  		parseMessage (descriptions);  		writeDot.Close ();  		section++;  		break;  	case "session_instances":  		if (section != 3)  			throw new IndexOutOfRangeException ();  		knowledges = new List<string> (descriptions);  		section++;  		break;  	case "intruder_knowledge":  		if (section != 4)  			throw new IndexOutOfRangeException ();  		parseSession (descriptions);  		section++;  		break;  	case "goal":  		if (section != 5)  			throw new IndexOutOfRangeException ();  		parseKnowledgeIntruder (descriptions);  		section++;  		break;  	default:  		throw new IndexOutOfRangeException ();  	}  	descriptions.Clear ();  	continue;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: switch (compress) {  case "identifiers":  	section++;  	break;  case "messages":  	//bad format in CAS+' previous section was forgotten  	if (section != 1)  		throw new IndexOutOfRangeException ();  	parseIdentifirers (descriptions);  	section++;  	break;  case "knowledge":  	if (section != 2)  		throw new IndexOutOfRangeException ();  	parseMessage (descriptions);  	writeDot.Close ();  	section++;  	break;  case "session_instances":  	if (section != 3)  		throw new IndexOutOfRangeException ();  	knowledges = new List<string> (descriptions);  	section++;  	break;  case "intruder_knowledge":  	if (section != 4)  		throw new IndexOutOfRangeException ();  	parseSession (descriptions);  	section++;  	break;  case "goal":  	if (section != 5)  		throw new IndexOutOfRangeException ();  	parseKnowledgeIntruder (descriptions);  	section++;  	break;  default:  	throw new IndexOutOfRangeException ();  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: switch (compress) {  case "identifiers":  	section++;  	break;  case "messages":  	//bad format in CAS+' previous section was forgotten  	if (section != 1)  		throw new IndexOutOfRangeException ();  	parseIdentifirers (descriptions);  	section++;  	break;  case "knowledge":  	if (section != 2)  		throw new IndexOutOfRangeException ();  	parseMessage (descriptions);  	writeDot.Close ();  	section++;  	break;  case "session_instances":  	if (section != 3)  		throw new IndexOutOfRangeException ();  	knowledges = new List<string> (descriptions);  	section++;  	break;  case "intruder_knowledge":  	if (section != 4)  		throw new IndexOutOfRangeException ();  	parseSession (descriptions);  	section++;  	break;  case "goal":  	if (section != 5)  		throw new IndexOutOfRangeException ();  	parseKnowledgeIntruder (descriptions);  	section++;  	break;  default:  	throw new IndexOutOfRangeException ();  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: switch (compress) {  case "identifiers":  	section++;  	break;  case "messages":  	//bad format in CAS+' previous section was forgotten  	if (section != 1)  		throw new IndexOutOfRangeException ();  	parseIdentifirers (descriptions);  	section++;  	break;  case "knowledge":  	if (section != 2)  		throw new IndexOutOfRangeException ();  	parseMessage (descriptions);  	writeDot.Close ();  	section++;  	break;  case "session_instances":  	if (section != 3)  		throw new IndexOutOfRangeException ();  	knowledges = new List<string> (descriptions);  	section++;  	break;  case "intruder_knowledge":  	if (section != 4)  		throw new IndexOutOfRangeException ();  	parseSession (descriptions);  	section++;  	break;  case "goal":  	if (section != 5)  		throw new IndexOutOfRangeException ();  	parseKnowledgeIntruder (descriptions);  	section++;  	break;  default:  	throw new IndexOutOfRangeException ();  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: switch (compress) {  case "identifiers":  	section++;  	break;  case "messages":  	//bad format in CAS+' previous section was forgotten  	if (section != 1)  		throw new IndexOutOfRangeException ();  	parseIdentifirers (descriptions);  	section++;  	break;  case "knowledge":  	if (section != 2)  		throw new IndexOutOfRangeException ();  	parseMessage (descriptions);  	writeDot.Close ();  	section++;  	break;  case "session_instances":  	if (section != 3)  		throw new IndexOutOfRangeException ();  	knowledges = new List<string> (descriptions);  	section++;  	break;  case "intruder_knowledge":  	if (section != 4)  		throw new IndexOutOfRangeException ();  	parseSession (descriptions);  	section++;  	break;  case "goal":  	if (section != 5)  		throw new IndexOutOfRangeException ();  	parseKnowledgeIntruder (descriptions);  	section++;  	break;  default:  	throw new IndexOutOfRangeException ();  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (section != 2)  	throw new IndexOutOfRangeException ();  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (section != 3)  	throw new IndexOutOfRangeException ();  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (section != 4)  	throw new IndexOutOfRangeException ();  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseLines,The following statement contains a magic number: if (section != 5)  	throw new IndexOutOfRangeException ();  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: foreach (string line in descriptions) {  	HashSet<string> finishProperties = new HashSet<string> ();  	// Line for example: A' B : user  	// First line is divided by ':'' then '''.   	string[] byColon = line.Split (new char[] {  		':'  	}' 2);  	string[] singleNodes = byColon [0].Split (''');  	string[] typeAndEntropy = byColon [1].Split (new char[] {  		';'  	}' 2);  	string[] singleEntropy =  {  		""  	};  	// After "%" user can set entropy.   	if (!string.IsNullOrEmpty (typeAndEntropy [1])) {  		if (!(typeAndEntropy [1].Contains (':') || typeAndEntropy [1].Contains ("<-")))  			typeAndEntropy [1] = typeAndEntropy [1].Remove (0);  		else {  			singleEntropy = typeAndEntropy [1].Split (';');  			singleEntropy [0] = singleEntropy [0].Replace ("%"' string.Empty);  			singleEntropy [0] = singleEntropy [0].Replace (" "' string.Empty);  		}  	}  	for (int i = 0; i < singleNodes.Length; i++) {  		singleNodes [i] = singleNodes [i].Trim ();  		string output = singleNodes [i];  		if (typeAndEntropy [0].ToLower ().Contains ("public_key")) {  			keys.Add (singleNodes [i]' typKey.PUBLIC);  			output += "_pub";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("private_key")) {  			keys.Add (singleNodes [i]' typKey.PRIVATE);  			output += "_priv";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("symmetric"))  			keys.Add (singleNodes [i]' typKey.SYMMETRIC);  		else if (typeAndEntropy [0].ToLower ().Contains ("key"))  			keys.Add (singleNodes [i]' typKey.NONE);  		if (typeAndEntropy [0].Contains ("function")) {  			numberOfFunction.Add (output.Trim ()' 1);  			output += "1";  		}  		output += "[type=" + typeAndEntropy [0];  		if (!string.IsNullOrEmpty (singleEntropy [0])) {  			List<int> indexs = new List<int> ();  			int k = 0;  			while (k < singleEntropy.Length) {  				if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  					indexs.Add (k);  					finishProperties.Add (singleEntropy [k]);  				}  				k++;  			}  			string[] partEntropy;  			foreach (int j in indexs) {  				if (singleEntropy [j].Contains ("<-")) {  					partEntropy = singleEntropy [j].Split (new string[] {  						"<-"  					}' StringSplitOptions.None);  					List<string> message = new List<string> ();  					message.Add (partEntropy [1]);  					parsePartMessage (message);  					countConverse++;  					writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  				}  				else {  					partEntropy = singleEntropy [j].Split (new char[] {  						':''  						'''  					});  					if (partEntropy [1].Contains ("bit")) {  						output += "'bit=";  						partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  					}  					else {  						output += "'set=";  					}  					output += partEntropy [1];  					if (partEntropy.Length > 2) {  						output += "'set=";  						output += partEntropy [2];  					}  				}  			}  		}  		output += "];";  		writeDot.WriteLine (output);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: foreach (string line in descriptions) {  	HashSet<string> finishProperties = new HashSet<string> ();  	// Line for example: A' B : user  	// First line is divided by ':'' then '''.   	string[] byColon = line.Split (new char[] {  		':'  	}' 2);  	string[] singleNodes = byColon [0].Split (''');  	string[] typeAndEntropy = byColon [1].Split (new char[] {  		';'  	}' 2);  	string[] singleEntropy =  {  		""  	};  	// After "%" user can set entropy.   	if (!string.IsNullOrEmpty (typeAndEntropy [1])) {  		if (!(typeAndEntropy [1].Contains (':') || typeAndEntropy [1].Contains ("<-")))  			typeAndEntropy [1] = typeAndEntropy [1].Remove (0);  		else {  			singleEntropy = typeAndEntropy [1].Split (';');  			singleEntropy [0] = singleEntropy [0].Replace ("%"' string.Empty);  			singleEntropy [0] = singleEntropy [0].Replace (" "' string.Empty);  		}  	}  	for (int i = 0; i < singleNodes.Length; i++) {  		singleNodes [i] = singleNodes [i].Trim ();  		string output = singleNodes [i];  		if (typeAndEntropy [0].ToLower ().Contains ("public_key")) {  			keys.Add (singleNodes [i]' typKey.PUBLIC);  			output += "_pub";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("private_key")) {  			keys.Add (singleNodes [i]' typKey.PRIVATE);  			output += "_priv";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("symmetric"))  			keys.Add (singleNodes [i]' typKey.SYMMETRIC);  		else if (typeAndEntropy [0].ToLower ().Contains ("key"))  			keys.Add (singleNodes [i]' typKey.NONE);  		if (typeAndEntropy [0].Contains ("function")) {  			numberOfFunction.Add (output.Trim ()' 1);  			output += "1";  		}  		output += "[type=" + typeAndEntropy [0];  		if (!string.IsNullOrEmpty (singleEntropy [0])) {  			List<int> indexs = new List<int> ();  			int k = 0;  			while (k < singleEntropy.Length) {  				if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  					indexs.Add (k);  					finishProperties.Add (singleEntropy [k]);  				}  				k++;  			}  			string[] partEntropy;  			foreach (int j in indexs) {  				if (singleEntropy [j].Contains ("<-")) {  					partEntropy = singleEntropy [j].Split (new string[] {  						"<-"  					}' StringSplitOptions.None);  					List<string> message = new List<string> ();  					message.Add (partEntropy [1]);  					parsePartMessage (message);  					countConverse++;  					writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  				}  				else {  					partEntropy = singleEntropy [j].Split (new char[] {  						':''  						'''  					});  					if (partEntropy [1].Contains ("bit")) {  						output += "'bit=";  						partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  					}  					else {  						output += "'set=";  					}  					output += partEntropy [1];  					if (partEntropy.Length > 2) {  						output += "'set=";  						output += partEntropy [2];  					}  				}  			}  		}  		output += "];";  		writeDot.WriteLine (output);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: foreach (string line in descriptions) {  	HashSet<string> finishProperties = new HashSet<string> ();  	// Line for example: A' B : user  	// First line is divided by ':'' then '''.   	string[] byColon = line.Split (new char[] {  		':'  	}' 2);  	string[] singleNodes = byColon [0].Split (''');  	string[] typeAndEntropy = byColon [1].Split (new char[] {  		';'  	}' 2);  	string[] singleEntropy =  {  		""  	};  	// After "%" user can set entropy.   	if (!string.IsNullOrEmpty (typeAndEntropy [1])) {  		if (!(typeAndEntropy [1].Contains (':') || typeAndEntropy [1].Contains ("<-")))  			typeAndEntropy [1] = typeAndEntropy [1].Remove (0);  		else {  			singleEntropy = typeAndEntropy [1].Split (';');  			singleEntropy [0] = singleEntropy [0].Replace ("%"' string.Empty);  			singleEntropy [0] = singleEntropy [0].Replace (" "' string.Empty);  		}  	}  	for (int i = 0; i < singleNodes.Length; i++) {  		singleNodes [i] = singleNodes [i].Trim ();  		string output = singleNodes [i];  		if (typeAndEntropy [0].ToLower ().Contains ("public_key")) {  			keys.Add (singleNodes [i]' typKey.PUBLIC);  			output += "_pub";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("private_key")) {  			keys.Add (singleNodes [i]' typKey.PRIVATE);  			output += "_priv";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("symmetric"))  			keys.Add (singleNodes [i]' typKey.SYMMETRIC);  		else if (typeAndEntropy [0].ToLower ().Contains ("key"))  			keys.Add (singleNodes [i]' typKey.NONE);  		if (typeAndEntropy [0].Contains ("function")) {  			numberOfFunction.Add (output.Trim ()' 1);  			output += "1";  		}  		output += "[type=" + typeAndEntropy [0];  		if (!string.IsNullOrEmpty (singleEntropy [0])) {  			List<int> indexs = new List<int> ();  			int k = 0;  			while (k < singleEntropy.Length) {  				if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  					indexs.Add (k);  					finishProperties.Add (singleEntropy [k]);  				}  				k++;  			}  			string[] partEntropy;  			foreach (int j in indexs) {  				if (singleEntropy [j].Contains ("<-")) {  					partEntropy = singleEntropy [j].Split (new string[] {  						"<-"  					}' StringSplitOptions.None);  					List<string> message = new List<string> ();  					message.Add (partEntropy [1]);  					parsePartMessage (message);  					countConverse++;  					writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  				}  				else {  					partEntropy = singleEntropy [j].Split (new char[] {  						':''  						'''  					});  					if (partEntropy [1].Contains ("bit")) {  						output += "'bit=";  						partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  					}  					else {  						output += "'set=";  					}  					output += partEntropy [1];  					if (partEntropy.Length > 2) {  						output += "'set=";  						output += partEntropy [2];  					}  				}  			}  		}  		output += "];";  		writeDot.WriteLine (output);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: foreach (string line in descriptions) {  	HashSet<string> finishProperties = new HashSet<string> ();  	// Line for example: A' B : user  	// First line is divided by ':'' then '''.   	string[] byColon = line.Split (new char[] {  		':'  	}' 2);  	string[] singleNodes = byColon [0].Split (''');  	string[] typeAndEntropy = byColon [1].Split (new char[] {  		';'  	}' 2);  	string[] singleEntropy =  {  		""  	};  	// After "%" user can set entropy.   	if (!string.IsNullOrEmpty (typeAndEntropy [1])) {  		if (!(typeAndEntropy [1].Contains (':') || typeAndEntropy [1].Contains ("<-")))  			typeAndEntropy [1] = typeAndEntropy [1].Remove (0);  		else {  			singleEntropy = typeAndEntropy [1].Split (';');  			singleEntropy [0] = singleEntropy [0].Replace ("%"' string.Empty);  			singleEntropy [0] = singleEntropy [0].Replace (" "' string.Empty);  		}  	}  	for (int i = 0; i < singleNodes.Length; i++) {  		singleNodes [i] = singleNodes [i].Trim ();  		string output = singleNodes [i];  		if (typeAndEntropy [0].ToLower ().Contains ("public_key")) {  			keys.Add (singleNodes [i]' typKey.PUBLIC);  			output += "_pub";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("private_key")) {  			keys.Add (singleNodes [i]' typKey.PRIVATE);  			output += "_priv";  		}  		else if (typeAndEntropy [0].ToLower ().Contains ("symmetric"))  			keys.Add (singleNodes [i]' typKey.SYMMETRIC);  		else if (typeAndEntropy [0].ToLower ().Contains ("key"))  			keys.Add (singleNodes [i]' typKey.NONE);  		if (typeAndEntropy [0].Contains ("function")) {  			numberOfFunction.Add (output.Trim ()' 1);  			output += "1";  		}  		output += "[type=" + typeAndEntropy [0];  		if (!string.IsNullOrEmpty (singleEntropy [0])) {  			List<int> indexs = new List<int> ();  			int k = 0;  			while (k < singleEntropy.Length) {  				if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  					indexs.Add (k);  					finishProperties.Add (singleEntropy [k]);  				}  				k++;  			}  			string[] partEntropy;  			foreach (int j in indexs) {  				if (singleEntropy [j].Contains ("<-")) {  					partEntropy = singleEntropy [j].Split (new string[] {  						"<-"  					}' StringSplitOptions.None);  					List<string> message = new List<string> ();  					message.Add (partEntropy [1]);  					parsePartMessage (message);  					countConverse++;  					writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  					writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  				}  				else {  					partEntropy = singleEntropy [j].Split (new char[] {  						':''  						'''  					});  					if (partEntropy [1].Contains ("bit")) {  						output += "'bit=";  						partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  					}  					else {  						output += "'set=";  					}  					output += partEntropy [1];  					if (partEntropy.Length > 2) {  						output += "'set=";  						output += partEntropy [2];  					}  				}  			}  		}  		output += "];";  		writeDot.WriteLine (output);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: for (int i = 0; i < singleNodes.Length; i++) {  	singleNodes [i] = singleNodes [i].Trim ();  	string output = singleNodes [i];  	if (typeAndEntropy [0].ToLower ().Contains ("public_key")) {  		keys.Add (singleNodes [i]' typKey.PUBLIC);  		output += "_pub";  	}  	else if (typeAndEntropy [0].ToLower ().Contains ("private_key")) {  		keys.Add (singleNodes [i]' typKey.PRIVATE);  		output += "_priv";  	}  	else if (typeAndEntropy [0].ToLower ().Contains ("symmetric"))  		keys.Add (singleNodes [i]' typKey.SYMMETRIC);  	else if (typeAndEntropy [0].ToLower ().Contains ("key"))  		keys.Add (singleNodes [i]' typKey.NONE);  	if (typeAndEntropy [0].Contains ("function")) {  		numberOfFunction.Add (output.Trim ()' 1);  		output += "1";  	}  	output += "[type=" + typeAndEntropy [0];  	if (!string.IsNullOrEmpty (singleEntropy [0])) {  		List<int> indexs = new List<int> ();  		int k = 0;  		while (k < singleEntropy.Length) {  			if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  				indexs.Add (k);  				finishProperties.Add (singleEntropy [k]);  			}  			k++;  		}  		string[] partEntropy;  		foreach (int j in indexs) {  			if (singleEntropy [j].Contains ("<-")) {  				partEntropy = singleEntropy [j].Split (new string[] {  					"<-"  				}' StringSplitOptions.None);  				List<string> message = new List<string> ();  				message.Add (partEntropy [1]);  				parsePartMessage (message);  				countConverse++;  				writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  				writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  				writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  			}  			else {  				partEntropy = singleEntropy [j].Split (new char[] {  					':''  					'''  				});  				if (partEntropy [1].Contains ("bit")) {  					output += "'bit=";  					partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  				}  				else {  					output += "'set=";  				}  				output += partEntropy [1];  				if (partEntropy.Length > 2) {  					output += "'set=";  					output += partEntropy [2];  				}  			}  		}  	}  	output += "];";  	writeDot.WriteLine (output);  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: for (int i = 0; i < singleNodes.Length; i++) {  	singleNodes [i] = singleNodes [i].Trim ();  	string output = singleNodes [i];  	if (typeAndEntropy [0].ToLower ().Contains ("public_key")) {  		keys.Add (singleNodes [i]' typKey.PUBLIC);  		output += "_pub";  	}  	else if (typeAndEntropy [0].ToLower ().Contains ("private_key")) {  		keys.Add (singleNodes [i]' typKey.PRIVATE);  		output += "_priv";  	}  	else if (typeAndEntropy [0].ToLower ().Contains ("symmetric"))  		keys.Add (singleNodes [i]' typKey.SYMMETRIC);  	else if (typeAndEntropy [0].ToLower ().Contains ("key"))  		keys.Add (singleNodes [i]' typKey.NONE);  	if (typeAndEntropy [0].Contains ("function")) {  		numberOfFunction.Add (output.Trim ()' 1);  		output += "1";  	}  	output += "[type=" + typeAndEntropy [0];  	if (!string.IsNullOrEmpty (singleEntropy [0])) {  		List<int> indexs = new List<int> ();  		int k = 0;  		while (k < singleEntropy.Length) {  			if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  				indexs.Add (k);  				finishProperties.Add (singleEntropy [k]);  			}  			k++;  		}  		string[] partEntropy;  		foreach (int j in indexs) {  			if (singleEntropy [j].Contains ("<-")) {  				partEntropy = singleEntropy [j].Split (new string[] {  					"<-"  				}' StringSplitOptions.None);  				List<string> message = new List<string> ();  				message.Add (partEntropy [1]);  				parsePartMessage (message);  				countConverse++;  				writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  				writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  				writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  			}  			else {  				partEntropy = singleEntropy [j].Split (new char[] {  					':''  					'''  				});  				if (partEntropy [1].Contains ("bit")) {  					output += "'bit=";  					partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  				}  				else {  					output += "'set=";  				}  				output += partEntropy [1];  				if (partEntropy.Length > 2) {  					output += "'set=";  					output += partEntropy [2];  				}  			}  		}  	}  	output += "];";  	writeDot.WriteLine (output);  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: if (!string.IsNullOrEmpty (singleEntropy [0])) {  	List<int> indexs = new List<int> ();  	int k = 0;  	while (k < singleEntropy.Length) {  		if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  			indexs.Add (k);  			finishProperties.Add (singleEntropy [k]);  		}  		k++;  	}  	string[] partEntropy;  	foreach (int j in indexs) {  		if (singleEntropy [j].Contains ("<-")) {  			partEntropy = singleEntropy [j].Split (new string[] {  				"<-"  			}' StringSplitOptions.None);  			List<string> message = new List<string> ();  			message.Add (partEntropy [1]);  			parsePartMessage (message);  			countConverse++;  			writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  			writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  			writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  		}  		else {  			partEntropy = singleEntropy [j].Split (new char[] {  				':''  				'''  			});  			if (partEntropy [1].Contains ("bit")) {  				output += "'bit=";  				partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  			}  			else {  				output += "'set=";  			}  			output += partEntropy [1];  			if (partEntropy.Length > 2) {  				output += "'set=";  				output += partEntropy [2];  			}  		}  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: if (!string.IsNullOrEmpty (singleEntropy [0])) {  	List<int> indexs = new List<int> ();  	int k = 0;  	while (k < singleEntropy.Length) {  		if (!finishProperties.Contains (singleEntropy [k]) && singleEntropy [k].Contains (singleNodes [i])) {  			indexs.Add (k);  			finishProperties.Add (singleEntropy [k]);  		}  		k++;  	}  	string[] partEntropy;  	foreach (int j in indexs) {  		if (singleEntropy [j].Contains ("<-")) {  			partEntropy = singleEntropy [j].Split (new string[] {  				"<-"  			}' StringSplitOptions.None);  			List<string> message = new List<string> ();  			message.Add (partEntropy [1]);  			parsePartMessage (message);  			countConverse++;  			writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  			writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  			writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  		}  		else {  			partEntropy = singleEntropy [j].Split (new char[] {  				':''  				'''  			});  			if (partEntropy [1].Contains ("bit")) {  				output += "'bit=";  				partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  			}  			else {  				output += "'set=";  			}  			output += partEntropy [1];  			if (partEntropy.Length > 2) {  				output += "'set=";  				output += partEntropy [2];  			}  		}  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: foreach (int j in indexs) {  	if (singleEntropy [j].Contains ("<-")) {  		partEntropy = singleEntropy [j].Split (new string[] {  			"<-"  		}' StringSplitOptions.None);  		List<string> message = new List<string> ();  		message.Add (partEntropy [1]);  		parsePartMessage (message);  		countConverse++;  		writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  		writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  		writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  	}  	else {  		partEntropy = singleEntropy [j].Split (new char[] {  			':''  			'''  		});  		if (partEntropy [1].Contains ("bit")) {  			output += "'bit=";  			partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  		}  		else {  			output += "'set=";  		}  		output += partEntropy [1];  		if (partEntropy.Length > 2) {  			output += "'set=";  			output += partEntropy [2];  		}  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: foreach (int j in indexs) {  	if (singleEntropy [j].Contains ("<-")) {  		partEntropy = singleEntropy [j].Split (new string[] {  			"<-"  		}' StringSplitOptions.None);  		List<string> message = new List<string> ();  		message.Add (partEntropy [1]);  		parsePartMessage (message);  		countConverse++;  		writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  		writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  		writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  	}  	else {  		partEntropy = singleEntropy [j].Split (new char[] {  			':''  			'''  		});  		if (partEntropy [1].Contains ("bit")) {  			output += "'bit=";  			partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  		}  		else {  			output += "'set=";  		}  		output += partEntropy [1];  		if (partEntropy.Length > 2) {  			output += "'set=";  			output += partEntropy [2];  		}  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: if (singleEntropy [j].Contains ("<-")) {  	partEntropy = singleEntropy [j].Split (new string[] {  		"<-"  	}' StringSplitOptions.None);  	List<string> message = new List<string> ();  	message.Add (partEntropy [1]);  	parsePartMessage (message);  	countConverse++;  	writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  	writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  	writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  }  else {  	partEntropy = singleEntropy [j].Split (new char[] {  		':''  		'''  	});  	if (partEntropy [1].Contains ("bit")) {  		output += "'bit=";  		partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  	}  	else {  		output += "'set=";  	}  	output += partEntropy [1];  	if (partEntropy.Length > 2) {  		output += "'set=";  		output += partEntropy [2];  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: if (singleEntropy [j].Contains ("<-")) {  	partEntropy = singleEntropy [j].Split (new string[] {  		"<-"  	}' StringSplitOptions.None);  	List<string> message = new List<string> ();  	message.Add (partEntropy [1]);  	parsePartMessage (message);  	countConverse++;  	writeDot.WriteLine (partEntropy [1] + "-> converse" + countConverse.ToString () + ";");  	writeDot.WriteLine ("converse" + countConverse.ToString () + " -> " + partEntropy [0] + ";");  	writeDot.WriteLine ("converse" + countConverse.ToString () + "[type=function];");  }  else {  	partEntropy = singleEntropy [j].Split (new char[] {  		':''  		'''  	});  	if (partEntropy [1].Contains ("bit")) {  		output += "'bit=";  		partEntropy [1] = Regex.Replace (partEntropy [1]' "[^0-9.]"' "");  	}  	else {  		output += "'set=";  	}  	output += partEntropy [1];  	if (partEntropy.Length > 2) {  		output += "'set=";  		output += partEntropy [2];  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: if (partEntropy.Length > 2) {  	output += "'set=";  	output += partEntropy [2];  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: if (partEntropy.Length > 2) {  	output += "'set=";  	output += partEntropy [2];  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseIdentifirers,The following statement contains a magic number: output += partEntropy [2];  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseMessage,The following statement contains a magic number: foreach (string line in descriptions) {  	List<string> twoSubstrings = new List<string> (line.Split (new char[] {  		':'  	}' 2));  	if (twoSubstrings.Count > 1 && !String.IsNullOrEmpty (twoSubstrings [0]) && !String.IsNullOrEmpty (twoSubstrings [1])) {  		List<string> parts = new List<string> (splitComma (twoSubstrings [1]));  		parsePartMessage (parts);  	}  	else  		throw new System.IndexOutOfRangeException ();  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: for (int m = 0; m < parts.Count; m++) {  	for (int i = 0; i < parts [m].Length; i++) {  		switch (parts [m] [i]) {  		case '{':  		case '(':  		case ''':  			indexs.Push (i);  			break;  		case '}':  			int beginArgument1 = indexs.Pop ();  			while (parts [m] [beginArgument1] != '{') {  				beginArgument1 = indexs.Pop ();  			}  			string line = "{";  			line += parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1);  			int k = i;  			int indexKey = i++;  			while ((i < parts [m].Length) && ((parts [m] [i] != ''') && parts [m] [i] != ')' && parts [m] [i] != '}'))  				i++;  			string key = parts [m].Substring (indexKey + 1' i - indexKey - 1).Trim ();  			if (!(key.Contains ("_pub") || key.Contains ("_priv"))) {  				if (key [key.Length - 1] == '\'') {  					key = key.Remove (key.Length - 1);  					switch (keys [key]) {  					case typKey.PUBLIC:  						key += "_priv";  						break;  					case typKey.PRIVATE:  						key += "_pub";  						break;  					}  				}  				else {  					switch (keys [key]) {  					case typKey.PRIVATE:  						key += "_priv";  						break;  					case typKey.PUBLIC:  						key += "_pub";  						break;  					}  				}  			}  			line += "'" + key;  			line += "} -> encrypt" + countEncrypt.ToString () + ";";  			string secondLine = "encrypt" + countEncrypt.ToString () + " -> E" + countEncrypt.ToString () + "(";  			secondLine += line.Substring (1' line.IndexOf ('}') - 1);  			secondLine += ");";  			writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")[type=data];");  			writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + "[type=function];");  			// symmetric vs asymmetric keys  			if (keys.ContainsKey (key) && keys [key] == typKey.SYMMETRIC) {  				writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + " -> {" + parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1));  				writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ") -> encrypt" + countEncrypt.ToString ());  			}  			writeDot.WriteLine (line);  			writeDot.WriteLine (secondLine);  			int countCipher = 1;  			if (countEncrypt > 0)  				countCipher = Convert.ToInt32 (Math.Floor (Math.Log10 (countEncrypt) + 1));  			writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  			string replace = "E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")";  			parts [m] = parts [m].Replace (parts [m].Substring (beginArgument1' i - beginArgument1)' replace);  			countEncrypt++;  			i = beginArgument1 + replace.Length;  			if ((i + 1 == parts [m].Length) && (parts [m] [i] == ')' || parts [m] [i] == '}'))  				i--;  			break;  		case ')':  			int beginArgument2 = indexs.Pop ();  			while (parts [m] [beginArgument2] != '(') {  				beginArgument2 = indexs.Pop ();  			}  			string first = "{";  			first += parts [m].Substring (beginArgument2 + 1' i - beginArgument2 - 1);  			first += "} -> ";  			int beginFunction = -1;  			if (indexs.Count != 0)  				beginFunction = indexs.Pop ();  			string nameFunction = parts [m].Substring (beginFunction + 1' beginArgument2 - beginFunction - 1).Trim ();  			first += nameFunction;  			if (numberOfFunction.ContainsKey (nameFunction)) {  				first += numberOfFunction [nameFunction];  			}  			first += ";";  			string second = nameFunction;  			if (numberOfFunction.ContainsKey (nameFunction)) {  				second += numberOfFunction [nameFunction];  				writeDot.WriteLine (nameFunction + numberOfFunction [nameFunction] + "[type=function];");  				numberOfFunction [nameFunction]++;  			}  			second += " -> ";  			second += parts [m].Substring (beginFunction + 1' i - beginFunction) + ";";  			writeDot.WriteLine (parts [m].Substring (beginFunction + 1' i - beginFunction) + "[type=data];");  			writeDot.WriteLine (first);  			writeDot.WriteLine (second);  			break;  		default:  			break;  		}  	}  	indexs.Clear ();  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: for (int m = 0; m < parts.Count; m++) {  	for (int i = 0; i < parts [m].Length; i++) {  		switch (parts [m] [i]) {  		case '{':  		case '(':  		case ''':  			indexs.Push (i);  			break;  		case '}':  			int beginArgument1 = indexs.Pop ();  			while (parts [m] [beginArgument1] != '{') {  				beginArgument1 = indexs.Pop ();  			}  			string line = "{";  			line += parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1);  			int k = i;  			int indexKey = i++;  			while ((i < parts [m].Length) && ((parts [m] [i] != ''') && parts [m] [i] != ')' && parts [m] [i] != '}'))  				i++;  			string key = parts [m].Substring (indexKey + 1' i - indexKey - 1).Trim ();  			if (!(key.Contains ("_pub") || key.Contains ("_priv"))) {  				if (key [key.Length - 1] == '\'') {  					key = key.Remove (key.Length - 1);  					switch (keys [key]) {  					case typKey.PUBLIC:  						key += "_priv";  						break;  					case typKey.PRIVATE:  						key += "_pub";  						break;  					}  				}  				else {  					switch (keys [key]) {  					case typKey.PRIVATE:  						key += "_priv";  						break;  					case typKey.PUBLIC:  						key += "_pub";  						break;  					}  				}  			}  			line += "'" + key;  			line += "} -> encrypt" + countEncrypt.ToString () + ";";  			string secondLine = "encrypt" + countEncrypt.ToString () + " -> E" + countEncrypt.ToString () + "(";  			secondLine += line.Substring (1' line.IndexOf ('}') - 1);  			secondLine += ");";  			writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")[type=data];");  			writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + "[type=function];");  			// symmetric vs asymmetric keys  			if (keys.ContainsKey (key) && keys [key] == typKey.SYMMETRIC) {  				writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + " -> {" + parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1));  				writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ") -> encrypt" + countEncrypt.ToString ());  			}  			writeDot.WriteLine (line);  			writeDot.WriteLine (secondLine);  			int countCipher = 1;  			if (countEncrypt > 0)  				countCipher = Convert.ToInt32 (Math.Floor (Math.Log10 (countEncrypt) + 1));  			writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  			string replace = "E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")";  			parts [m] = parts [m].Replace (parts [m].Substring (beginArgument1' i - beginArgument1)' replace);  			countEncrypt++;  			i = beginArgument1 + replace.Length;  			if ((i + 1 == parts [m].Length) && (parts [m] [i] == ')' || parts [m] [i] == '}'))  				i--;  			break;  		case ')':  			int beginArgument2 = indexs.Pop ();  			while (parts [m] [beginArgument2] != '(') {  				beginArgument2 = indexs.Pop ();  			}  			string first = "{";  			first += parts [m].Substring (beginArgument2 + 1' i - beginArgument2 - 1);  			first += "} -> ";  			int beginFunction = -1;  			if (indexs.Count != 0)  				beginFunction = indexs.Pop ();  			string nameFunction = parts [m].Substring (beginFunction + 1' beginArgument2 - beginFunction - 1).Trim ();  			first += nameFunction;  			if (numberOfFunction.ContainsKey (nameFunction)) {  				first += numberOfFunction [nameFunction];  			}  			first += ";";  			string second = nameFunction;  			if (numberOfFunction.ContainsKey (nameFunction)) {  				second += numberOfFunction [nameFunction];  				writeDot.WriteLine (nameFunction + numberOfFunction [nameFunction] + "[type=function];");  				numberOfFunction [nameFunction]++;  			}  			second += " -> ";  			second += parts [m].Substring (beginFunction + 1' i - beginFunction) + ";";  			writeDot.WriteLine (parts [m].Substring (beginFunction + 1' i - beginFunction) + "[type=data];");  			writeDot.WriteLine (first);  			writeDot.WriteLine (second);  			break;  		default:  			break;  		}  	}  	indexs.Clear ();  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: for (int i = 0; i < parts [m].Length; i++) {  	switch (parts [m] [i]) {  	case '{':  	case '(':  	case ''':  		indexs.Push (i);  		break;  	case '}':  		int beginArgument1 = indexs.Pop ();  		while (parts [m] [beginArgument1] != '{') {  			beginArgument1 = indexs.Pop ();  		}  		string line = "{";  		line += parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1);  		int k = i;  		int indexKey = i++;  		while ((i < parts [m].Length) && ((parts [m] [i] != ''') && parts [m] [i] != ')' && parts [m] [i] != '}'))  			i++;  		string key = parts [m].Substring (indexKey + 1' i - indexKey - 1).Trim ();  		if (!(key.Contains ("_pub") || key.Contains ("_priv"))) {  			if (key [key.Length - 1] == '\'') {  				key = key.Remove (key.Length - 1);  				switch (keys [key]) {  				case typKey.PUBLIC:  					key += "_priv";  					break;  				case typKey.PRIVATE:  					key += "_pub";  					break;  				}  			}  			else {  				switch (keys [key]) {  				case typKey.PRIVATE:  					key += "_priv";  					break;  				case typKey.PUBLIC:  					key += "_pub";  					break;  				}  			}  		}  		line += "'" + key;  		line += "} -> encrypt" + countEncrypt.ToString () + ";";  		string secondLine = "encrypt" + countEncrypt.ToString () + " -> E" + countEncrypt.ToString () + "(";  		secondLine += line.Substring (1' line.IndexOf ('}') - 1);  		secondLine += ");";  		writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")[type=data];");  		writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + "[type=function];");  		// symmetric vs asymmetric keys  		if (keys.ContainsKey (key) && keys [key] == typKey.SYMMETRIC) {  			writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + " -> {" + parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1));  			writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ") -> encrypt" + countEncrypt.ToString ());  		}  		writeDot.WriteLine (line);  		writeDot.WriteLine (secondLine);  		int countCipher = 1;  		if (countEncrypt > 0)  			countCipher = Convert.ToInt32 (Math.Floor (Math.Log10 (countEncrypt) + 1));  		writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  		string replace = "E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")";  		parts [m] = parts [m].Replace (parts [m].Substring (beginArgument1' i - beginArgument1)' replace);  		countEncrypt++;  		i = beginArgument1 + replace.Length;  		if ((i + 1 == parts [m].Length) && (parts [m] [i] == ')' || parts [m] [i] == '}'))  			i--;  		break;  	case ')':  		int beginArgument2 = indexs.Pop ();  		while (parts [m] [beginArgument2] != '(') {  			beginArgument2 = indexs.Pop ();  		}  		string first = "{";  		first += parts [m].Substring (beginArgument2 + 1' i - beginArgument2 - 1);  		first += "} -> ";  		int beginFunction = -1;  		if (indexs.Count != 0)  			beginFunction = indexs.Pop ();  		string nameFunction = parts [m].Substring (beginFunction + 1' beginArgument2 - beginFunction - 1).Trim ();  		first += nameFunction;  		if (numberOfFunction.ContainsKey (nameFunction)) {  			first += numberOfFunction [nameFunction];  		}  		first += ";";  		string second = nameFunction;  		if (numberOfFunction.ContainsKey (nameFunction)) {  			second += numberOfFunction [nameFunction];  			writeDot.WriteLine (nameFunction + numberOfFunction [nameFunction] + "[type=function];");  			numberOfFunction [nameFunction]++;  		}  		second += " -> ";  		second += parts [m].Substring (beginFunction + 1' i - beginFunction) + ";";  		writeDot.WriteLine (parts [m].Substring (beginFunction + 1' i - beginFunction) + "[type=data];");  		writeDot.WriteLine (first);  		writeDot.WriteLine (second);  		break;  	default:  		break;  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: for (int i = 0; i < parts [m].Length; i++) {  	switch (parts [m] [i]) {  	case '{':  	case '(':  	case ''':  		indexs.Push (i);  		break;  	case '}':  		int beginArgument1 = indexs.Pop ();  		while (parts [m] [beginArgument1] != '{') {  			beginArgument1 = indexs.Pop ();  		}  		string line = "{";  		line += parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1);  		int k = i;  		int indexKey = i++;  		while ((i < parts [m].Length) && ((parts [m] [i] != ''') && parts [m] [i] != ')' && parts [m] [i] != '}'))  			i++;  		string key = parts [m].Substring (indexKey + 1' i - indexKey - 1).Trim ();  		if (!(key.Contains ("_pub") || key.Contains ("_priv"))) {  			if (key [key.Length - 1] == '\'') {  				key = key.Remove (key.Length - 1);  				switch (keys [key]) {  				case typKey.PUBLIC:  					key += "_priv";  					break;  				case typKey.PRIVATE:  					key += "_pub";  					break;  				}  			}  			else {  				switch (keys [key]) {  				case typKey.PRIVATE:  					key += "_priv";  					break;  				case typKey.PUBLIC:  					key += "_pub";  					break;  				}  			}  		}  		line += "'" + key;  		line += "} -> encrypt" + countEncrypt.ToString () + ";";  		string secondLine = "encrypt" + countEncrypt.ToString () + " -> E" + countEncrypt.ToString () + "(";  		secondLine += line.Substring (1' line.IndexOf ('}') - 1);  		secondLine += ");";  		writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")[type=data];");  		writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + "[type=function];");  		// symmetric vs asymmetric keys  		if (keys.ContainsKey (key) && keys [key] == typKey.SYMMETRIC) {  			writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + " -> {" + parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1));  			writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ") -> encrypt" + countEncrypt.ToString ());  		}  		writeDot.WriteLine (line);  		writeDot.WriteLine (secondLine);  		int countCipher = 1;  		if (countEncrypt > 0)  			countCipher = Convert.ToInt32 (Math.Floor (Math.Log10 (countEncrypt) + 1));  		writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  		string replace = "E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")";  		parts [m] = parts [m].Replace (parts [m].Substring (beginArgument1' i - beginArgument1)' replace);  		countEncrypt++;  		i = beginArgument1 + replace.Length;  		if ((i + 1 == parts [m].Length) && (parts [m] [i] == ')' || parts [m] [i] == '}'))  			i--;  		break;  	case ')':  		int beginArgument2 = indexs.Pop ();  		while (parts [m] [beginArgument2] != '(') {  			beginArgument2 = indexs.Pop ();  		}  		string first = "{";  		first += parts [m].Substring (beginArgument2 + 1' i - beginArgument2 - 1);  		first += "} -> ";  		int beginFunction = -1;  		if (indexs.Count != 0)  			beginFunction = indexs.Pop ();  		string nameFunction = parts [m].Substring (beginFunction + 1' beginArgument2 - beginFunction - 1).Trim ();  		first += nameFunction;  		if (numberOfFunction.ContainsKey (nameFunction)) {  			first += numberOfFunction [nameFunction];  		}  		first += ";";  		string second = nameFunction;  		if (numberOfFunction.ContainsKey (nameFunction)) {  			second += numberOfFunction [nameFunction];  			writeDot.WriteLine (nameFunction + numberOfFunction [nameFunction] + "[type=function];");  			numberOfFunction [nameFunction]++;  		}  		second += " -> ";  		second += parts [m].Substring (beginFunction + 1' i - beginFunction) + ";";  		writeDot.WriteLine (parts [m].Substring (beginFunction + 1' i - beginFunction) + "[type=data];");  		writeDot.WriteLine (first);  		writeDot.WriteLine (second);  		break;  	default:  		break;  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: switch (parts [m] [i]) {  case '{':  case '(':  case ''':  	indexs.Push (i);  	break;  case '}':  	int beginArgument1 = indexs.Pop ();  	while (parts [m] [beginArgument1] != '{') {  		beginArgument1 = indexs.Pop ();  	}  	string line = "{";  	line += parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1);  	int k = i;  	int indexKey = i++;  	while ((i < parts [m].Length) && ((parts [m] [i] != ''') && parts [m] [i] != ')' && parts [m] [i] != '}'))  		i++;  	string key = parts [m].Substring (indexKey + 1' i - indexKey - 1).Trim ();  	if (!(key.Contains ("_pub") || key.Contains ("_priv"))) {  		if (key [key.Length - 1] == '\'') {  			key = key.Remove (key.Length - 1);  			switch (keys [key]) {  			case typKey.PUBLIC:  				key += "_priv";  				break;  			case typKey.PRIVATE:  				key += "_pub";  				break;  			}  		}  		else {  			switch (keys [key]) {  			case typKey.PRIVATE:  				key += "_priv";  				break;  			case typKey.PUBLIC:  				key += "_pub";  				break;  			}  		}  	}  	line += "'" + key;  	line += "} -> encrypt" + countEncrypt.ToString () + ";";  	string secondLine = "encrypt" + countEncrypt.ToString () + " -> E" + countEncrypt.ToString () + "(";  	secondLine += line.Substring (1' line.IndexOf ('}') - 1);  	secondLine += ");";  	writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")[type=data];");  	writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + "[type=function];");  	// symmetric vs asymmetric keys  	if (keys.ContainsKey (key) && keys [key] == typKey.SYMMETRIC) {  		writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + " -> {" + parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1));  		writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ") -> encrypt" + countEncrypt.ToString ());  	}  	writeDot.WriteLine (line);  	writeDot.WriteLine (secondLine);  	int countCipher = 1;  	if (countEncrypt > 0)  		countCipher = Convert.ToInt32 (Math.Floor (Math.Log10 (countEncrypt) + 1));  	writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  	string replace = "E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")";  	parts [m] = parts [m].Replace (parts [m].Substring (beginArgument1' i - beginArgument1)' replace);  	countEncrypt++;  	i = beginArgument1 + replace.Length;  	if ((i + 1 == parts [m].Length) && (parts [m] [i] == ')' || parts [m] [i] == '}'))  		i--;  	break;  case ')':  	int beginArgument2 = indexs.Pop ();  	while (parts [m] [beginArgument2] != '(') {  		beginArgument2 = indexs.Pop ();  	}  	string first = "{";  	first += parts [m].Substring (beginArgument2 + 1' i - beginArgument2 - 1);  	first += "} -> ";  	int beginFunction = -1;  	if (indexs.Count != 0)  		beginFunction = indexs.Pop ();  	string nameFunction = parts [m].Substring (beginFunction + 1' beginArgument2 - beginFunction - 1).Trim ();  	first += nameFunction;  	if (numberOfFunction.ContainsKey (nameFunction)) {  		first += numberOfFunction [nameFunction];  	}  	first += ";";  	string second = nameFunction;  	if (numberOfFunction.ContainsKey (nameFunction)) {  		second += numberOfFunction [nameFunction];  		writeDot.WriteLine (nameFunction + numberOfFunction [nameFunction] + "[type=function];");  		numberOfFunction [nameFunction]++;  	}  	second += " -> ";  	second += parts [m].Substring (beginFunction + 1' i - beginFunction) + ";";  	writeDot.WriteLine (parts [m].Substring (beginFunction + 1' i - beginFunction) + "[type=data];");  	writeDot.WriteLine (first);  	writeDot.WriteLine (second);  	break;  default:  	break;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: switch (parts [m] [i]) {  case '{':  case '(':  case ''':  	indexs.Push (i);  	break;  case '}':  	int beginArgument1 = indexs.Pop ();  	while (parts [m] [beginArgument1] != '{') {  		beginArgument1 = indexs.Pop ();  	}  	string line = "{";  	line += parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1);  	int k = i;  	int indexKey = i++;  	while ((i < parts [m].Length) && ((parts [m] [i] != ''') && parts [m] [i] != ')' && parts [m] [i] != '}'))  		i++;  	string key = parts [m].Substring (indexKey + 1' i - indexKey - 1).Trim ();  	if (!(key.Contains ("_pub") || key.Contains ("_priv"))) {  		if (key [key.Length - 1] == '\'') {  			key = key.Remove (key.Length - 1);  			switch (keys [key]) {  			case typKey.PUBLIC:  				key += "_priv";  				break;  			case typKey.PRIVATE:  				key += "_pub";  				break;  			}  		}  		else {  			switch (keys [key]) {  			case typKey.PRIVATE:  				key += "_priv";  				break;  			case typKey.PUBLIC:  				key += "_pub";  				break;  			}  		}  	}  	line += "'" + key;  	line += "} -> encrypt" + countEncrypt.ToString () + ";";  	string secondLine = "encrypt" + countEncrypt.ToString () + " -> E" + countEncrypt.ToString () + "(";  	secondLine += line.Substring (1' line.IndexOf ('}') - 1);  	secondLine += ");";  	writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")[type=data];");  	writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + "[type=function];");  	// symmetric vs asymmetric keys  	if (keys.ContainsKey (key) && keys [key] == typKey.SYMMETRIC) {  		writeDot.WriteLine ("encrypt" + countEncrypt.ToString () + " -> {" + parts [m].Substring (beginArgument1 + 1' i - beginArgument1 - 1));  		writeDot.WriteLine ("E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ") -> encrypt" + countEncrypt.ToString ());  	}  	writeDot.WriteLine (line);  	writeDot.WriteLine (secondLine);  	int countCipher = 1;  	if (countEncrypt > 0)  		countCipher = Convert.ToInt32 (Math.Floor (Math.Log10 (countEncrypt) + 1));  	writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  	string replace = "E" + countEncrypt.ToString () + "(" + line.Substring (1' line.IndexOf ('}') - 1) + ")";  	parts [m] = parts [m].Replace (parts [m].Substring (beginArgument1' i - beginArgument1)' replace);  	countEncrypt++;  	i = beginArgument1 + replace.Length;  	if ((i + 1 == parts [m].Length) && (parts [m] [i] == ')' || parts [m] [i] == '}'))  		i--;  	break;  case ')':  	int beginArgument2 = indexs.Pop ();  	while (parts [m] [beginArgument2] != '(') {  		beginArgument2 = indexs.Pop ();  	}  	string first = "{";  	first += parts [m].Substring (beginArgument2 + 1' i - beginArgument2 - 1);  	first += "} -> ";  	int beginFunction = -1;  	if (indexs.Count != 0)  		beginFunction = indexs.Pop ();  	string nameFunction = parts [m].Substring (beginFunction + 1' beginArgument2 - beginFunction - 1).Trim ();  	first += nameFunction;  	if (numberOfFunction.ContainsKey (nameFunction)) {  		first += numberOfFunction [nameFunction];  	}  	first += ";";  	string second = nameFunction;  	if (numberOfFunction.ContainsKey (nameFunction)) {  		second += numberOfFunction [nameFunction];  		writeDot.WriteLine (nameFunction + numberOfFunction [nameFunction] + "[type=function];");  		numberOfFunction [nameFunction]++;  	}  	second += " -> ";  	second += parts [m].Substring (beginFunction + 1' i - beginFunction) + ";";  	writeDot.WriteLine (parts [m].Substring (beginFunction + 1' i - beginFunction) + "[type=data];");  	writeDot.WriteLine (first);  	writeDot.WriteLine (second);  	break;  default:  	break;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following statement contains a magic number: writeDecrypt (key' secondLine.Substring (11 + countCipher' secondLine.Length - 12 - countCipher)' countEncrypt);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (!keys.ContainsKey (key)) {  	if (key.Contains ("_pub"))  		pomKey = key.Remove (key.Length - 4);  	else if (key.Contains ("_priv"))  		pomKey = key.Remove (key.Length - 5);  	if (!keys.ContainsKey (pomKey))  		found = false;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (!keys.ContainsKey (key)) {  	if (key.Contains ("_pub"))  		pomKey = key.Remove (key.Length - 4);  	else if (key.Contains ("_priv"))  		pomKey = key.Remove (key.Length - 5);  	if (!keys.ContainsKey (pomKey))  		found = false;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (key.Contains ("_pub"))  	pomKey = key.Remove (key.Length - 4);  else if (key.Contains ("_priv"))  	pomKey = key.Remove (key.Length - 5);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (key.Contains ("_pub"))  	pomKey = key.Remove (key.Length - 4);  else if (key.Contains ("_priv"))  	pomKey = key.Remove (key.Length - 5);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: pomKey = key.Remove (key.Length - 4);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (key.Contains ("_priv"))  	pomKey = key.Remove (key.Length - 5);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: pomKey = key.Remove (key.Length - 5);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (found) {  	switch (keys [pomKey]) {  	case typKey.NONE:  	case typKey.SYMMETRIC:  		line += key + "'";  		break;  	case typKey.PUBLIC:  	case typKey.PRIVATE:  		if (key.Contains ("_pub")) {  			key = key.Remove (key.Length - 4);  			line += key + "_priv'";  			writeDot.WriteLine (key + "_priv[type=private_key];");  		}  		else {  			key = key.Remove (key.Length - 5);  			line += key + "_pub'";  			writeDot.WriteLine (key + "_pub[type=public_key];");  		}  		break;  	}  	line += input + "} -> decrypt" + j.ToString () + ";";  	writeDot.WriteLine ("decrypt" + j.ToString () + "[type=function];");  	writeDot.WriteLine (line);  	string output = "decrypt" + j.ToString () + " -> ";  	string parameters = input.Substring (input.IndexOf ('(') + 1' input.LastIndexOf (')') - input.IndexOf ('(') - 1);  	List<string> parts = new List<string> ();  	int countBrackets = 0;  	string p = "";  	foreach (char c in parameters) {  		if (c == ''') {  			if (countBrackets == 0) {  				parts.Add (p);  				p = "";  			}  			else  				p += c;  		}  		else {  			if (c == '(')  				countBrackets++;  			else if (c == ')')  				countBrackets--;  			p += c;  		}  	}  	if (!String.IsNullOrEmpty (p)) {  		parts.Add (p);  	}  	foreach (string part in parts) {  		if (!part.Contains (key))  			writeDot.WriteLine (output + part + ";");  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (found) {  	switch (keys [pomKey]) {  	case typKey.NONE:  	case typKey.SYMMETRIC:  		line += key + "'";  		break;  	case typKey.PUBLIC:  	case typKey.PRIVATE:  		if (key.Contains ("_pub")) {  			key = key.Remove (key.Length - 4);  			line += key + "_priv'";  			writeDot.WriteLine (key + "_priv[type=private_key];");  		}  		else {  			key = key.Remove (key.Length - 5);  			line += key + "_pub'";  			writeDot.WriteLine (key + "_pub[type=public_key];");  		}  		break;  	}  	line += input + "} -> decrypt" + j.ToString () + ";";  	writeDot.WriteLine ("decrypt" + j.ToString () + "[type=function];");  	writeDot.WriteLine (line);  	string output = "decrypt" + j.ToString () + " -> ";  	string parameters = input.Substring (input.IndexOf ('(') + 1' input.LastIndexOf (')') - input.IndexOf ('(') - 1);  	List<string> parts = new List<string> ();  	int countBrackets = 0;  	string p = "";  	foreach (char c in parameters) {  		if (c == ''') {  			if (countBrackets == 0) {  				parts.Add (p);  				p = "";  			}  			else  				p += c;  		}  		else {  			if (c == '(')  				countBrackets++;  			else if (c == ')')  				countBrackets--;  			p += c;  		}  	}  	if (!String.IsNullOrEmpty (p)) {  		parts.Add (p);  	}  	foreach (string part in parts) {  		if (!part.Contains (key))  			writeDot.WriteLine (output + part + ";");  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: switch (keys [pomKey]) {  case typKey.NONE:  case typKey.SYMMETRIC:  	line += key + "'";  	break;  case typKey.PUBLIC:  case typKey.PRIVATE:  	if (key.Contains ("_pub")) {  		key = key.Remove (key.Length - 4);  		line += key + "_priv'";  		writeDot.WriteLine (key + "_priv[type=private_key];");  	}  	else {  		key = key.Remove (key.Length - 5);  		line += key + "_pub'";  		writeDot.WriteLine (key + "_pub[type=public_key];");  	}  	break;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: switch (keys [pomKey]) {  case typKey.NONE:  case typKey.SYMMETRIC:  	line += key + "'";  	break;  case typKey.PUBLIC:  case typKey.PRIVATE:  	if (key.Contains ("_pub")) {  		key = key.Remove (key.Length - 4);  		line += key + "_priv'";  		writeDot.WriteLine (key + "_priv[type=private_key];");  	}  	else {  		key = key.Remove (key.Length - 5);  		line += key + "_pub'";  		writeDot.WriteLine (key + "_pub[type=public_key];");  	}  	break;  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (key.Contains ("_pub")) {  	key = key.Remove (key.Length - 4);  	line += key + "_priv'";  	writeDot.WriteLine (key + "_priv[type=private_key];");  }  else {  	key = key.Remove (key.Length - 5);  	line += key + "_pub'";  	writeDot.WriteLine (key + "_pub[type=public_key];");  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: if (key.Contains ("_pub")) {  	key = key.Remove (key.Length - 4);  	line += key + "_priv'";  	writeDot.WriteLine (key + "_priv[type=private_key];");  }  else {  	key = key.Remove (key.Length - 5);  	line += key + "_pub'";  	writeDot.WriteLine (key + "_pub[type=public_key];");  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: key = key.Remove (key.Length - 4);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following statement contains a magic number: key = key.Remove (key.Length - 5);  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseSession,The following statement contains a magic number: foreach (string line in descriptions) {  	if (String.IsNullOrEmpty (line))  		continue;  	i++;  	List<string> dotPom = new List<string> (dot);  	List<string> parts = new List<string> (line.Split (new char[] {  		''''  		'[''  		']'  	}));  	Dictionary<string' string> pairs = new Dictionary<string' string> ();  	foreach (string part in parts) {  		List<string> pair = new List<string> (part.Split (':'));  		if (pair.Count > 1)  			pairs.Add (pair [0]' pair [1]);  	}  	nameDotFile1 = nameDotFile.Insert (nameDotFile.Length - 4' i.ToString ());  	if (!File.Exists (nameDotFile1)) {  		FileStream fs = File.Create (nameDotFile1);  		fs.Close ();  	}  	File.WriteAllText (nameDotFile1' string.Empty);  	for (int j = 0; j < dot.Count; j++) {  		foreach (string key in pairs.Keys) {  			if (dot [j].Contains (key)) {  				if (dot [j].Contains ('[')) {  					if (dot [j].IndexOf (key) < dot [j].IndexOf ('[')) {  						var regex = new Regex (Regex.Escape (key));  						dotPom [j] = regex.Replace (dotPom [j]' pairs [key]' 1);  					}  				}  				else {  					dotPom [j] = dotPom [j].Replace (key' pairs [key]);  				}  			}  		}  	}  	File.WriteAllLines (nameDotFile1' dotPom);  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseSession,The following statement contains a magic number: nameDotFile1 = nameDotFile.Insert (nameDotFile.Length - 4' i.ToString ());  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseKnowledgeIntruder,The following statement contains a magic number: foreach (string line in descriptions) {  	if (!String.IsNullOrEmpty (line)) {  		List<string> compromised = new List<string> ();  		string[] parts = line.Split (''');  		parts [parts.Length - 1] = parts [parts.Length - 1].Replace (";"' "");  		for (int i = 0; i < parts.Length; i++) {  			compromised.Add (parts [i] + "[color=red];");  		}  		compromised.Add ("}");  		for (int i = 1; i <= countDotFiles; i++) {  			File.AppendAllLines (nameDotFile.Insert (nameDotFile.Length - 4' i.ToString ())' compromised);  		}  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseKnowledgeIntruder,The following statement contains a magic number: if (!String.IsNullOrEmpty (line)) {  	List<string> compromised = new List<string> ();  	string[] parts = line.Split (''');  	parts [parts.Length - 1] = parts [parts.Length - 1].Replace (";"' "");  	for (int i = 0; i < parts.Length; i++) {  		compromised.Add (parts [i] + "[color=red];");  	}  	compromised.Add ("}");  	for (int i = 1; i <= countDotFiles; i++) {  		File.AppendAllLines (nameDotFile.Insert (nameDotFile.Length - 4' i.ToString ())' compromised);  	}  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseKnowledgeIntruder,The following statement contains a magic number: for (int i = 1; i <= countDotFiles; i++) {  	File.AppendAllLines (nameDotFile.Insert (nameDotFile.Length - 4' i.ToString ())' compromised);  }  
Magic Number,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parseKnowledgeIntruder,The following statement contains a magic number: File.AppendAllLines (nameDotFile.Insert (nameDotFile.Length - 4' i.ToString ())' compromised);  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,readFile,The following statement contains a magic number: if (String.IsNullOrEmpty (str))  	return -2;  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,readFile,The following statement contains a magic number: return -2;  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLines,The following statement contains a magic number: try {  	for (int i = 3; i < lines.Count; i++) {  		parseLine (lines [i]' ref gr);  	}  }  catch (System.NullReferenceException) {  	return -1;  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLines,The following statement contains a magic number: for (int i = 3; i < lines.Count; i++) {  	parseLine (lines [i]' ref gr);  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,The following statement contains a magic number: for (int j = 0; j < line.Count (); j++) {  	if (line.Count () == 1)  		continue;  	string s = "";  	if ((j + 1) != line.Count ()) {  		s += line [j];  		s += line [j + 1];  	}  	if (s.Equals ("->")) {  		gr.setNode (token' ref node1' node2' direct);  		node2 = node1;  		token = "";  		j++;  		direct = true;  	}  	else {  		switch (line [j]) {  		// start of properties of node or edge  		case '[':  			gr.setNode (token' ref node1' node2' direct);  			token = token.Remove (0);  			break;  		// end of properties of node or edge  		case ']':  			token += line [j];  			if (!direct) {  				node1.Bit = 128;  				node1 = (Node)parseProperty (token' node1);  				if ((node1.Type == "function") || (String.IsNullOrEmpty (node1.Type) && (node1.containSub ("hmac") || node1.containSub ("encrypt") || node1.containSub ("hash") || node1.containSub ("prf"))))  					gr.addFunction (ref node1);  			}  			else {  				Edge ed = new Edge (node2' node1);  				ed = (Edge)parseProperty (token' ed);  				gr.addEdge (ed);  			}  			break;  		default:  			token += line [j];  			break;  		}  	}  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,The following statement contains a magic number: if (s.Equals ("->")) {  	gr.setNode (token' ref node1' node2' direct);  	node2 = node1;  	token = "";  	j++;  	direct = true;  }  else {  	switch (line [j]) {  	// start of properties of node or edge  	case '[':  		gr.setNode (token' ref node1' node2' direct);  		token = token.Remove (0);  		break;  	// end of properties of node or edge  	case ']':  		token += line [j];  		if (!direct) {  			node1.Bit = 128;  			node1 = (Node)parseProperty (token' node1);  			if ((node1.Type == "function") || (String.IsNullOrEmpty (node1.Type) && (node1.containSub ("hmac") || node1.containSub ("encrypt") || node1.containSub ("hash") || node1.containSub ("prf"))))  				gr.addFunction (ref node1);  		}  		else {  			Edge ed = new Edge (node2' node1);  			ed = (Edge)parseProperty (token' ed);  			gr.addEdge (ed);  		}  		break;  	default:  		token += line [j];  		break;  	}  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,The following statement contains a magic number: switch (line [j]) {  // start of properties of node or edge  case '[':  	gr.setNode (token' ref node1' node2' direct);  	token = token.Remove (0);  	break;  // end of properties of node or edge  case ']':  	token += line [j];  	if (!direct) {  		node1.Bit = 128;  		node1 = (Node)parseProperty (token' node1);  		if ((node1.Type == "function") || (String.IsNullOrEmpty (node1.Type) && (node1.containSub ("hmac") || node1.containSub ("encrypt") || node1.containSub ("hash") || node1.containSub ("prf"))))  			gr.addFunction (ref node1);  	}  	else {  		Edge ed = new Edge (node2' node1);  		ed = (Edge)parseProperty (token' ed);  		gr.addEdge (ed);  	}  	break;  default:  	token += line [j];  	break;  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,The following statement contains a magic number: if (!direct) {  	node1.Bit = 128;  	node1 = (Node)parseProperty (token' node1);  	if ((node1.Type == "function") || (String.IsNullOrEmpty (node1.Type) && (node1.containSub ("hmac") || node1.containSub ("encrypt") || node1.containSub ("hash") || node1.containSub ("prf"))))  		gr.addFunction (ref node1);  }  else {  	Edge ed = new Edge (node2' node1);  	ed = (Edge)parseProperty (token' ed);  	gr.addEdge (ed);  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseLine,The following statement contains a magic number: node1.Bit = 128;  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: foreach (char it in prop) {  	switch (it) {  	case '=':  		attribute = part;  		part = part.Remove (0);  		break;  	case '\"':  		quotes = !quotes;  		break;  	case ']':  	case ''':  		if (!quotes) {  			value = part;  			if (attribute.Equals ("color")) {  				switch (value) {  				case "red":  					unit.Compromised = Compromise.EASY;  					break;  				case "orange":  					unit.Compromised = Compromise.HARD;  					break;  				case "green":  					unit.Compromised = Compromise.IMPOSSIBLE;  					break;  				}  				unit.Color = value;  			}  			if (attribute.Equals ("type"))  				unit.Type = value;  			if (attribute.Equals ("pos")) {  				List<string> numbers = new List<string> (value.Split ('''));  				if (numbers.Count == 2) {  					numbers [0] = numbers [0].Replace ('.'' ''');  					numbers [1] = numbers [1].Replace ('.'' ''');  					Vertex v = unit.V;  					v.X = Double.Parse (numbers [0]);  					v.Y = Double.Parse (numbers [1]);  					unit.V = v;  				}  				else {  					string newValue = value.Replace ("\r"' "");  					newValue = newValue.Replace ("\n"' "");  					newValue = newValue.Replace ("\\"' "");  					// line for position of edge is in format:   					// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  					numbers = new List<string> (newValue.Split (' '));  					numbers [0] = numbers [0].Remove (0' 2);  					numbers.RemoveAll (x => String.IsNullOrEmpty (x));  					List<Vertex> vertices = new List<Vertex> ();  					for (int i = 1; i < numbers.Count; i++) {  						List<string> coord = new List<string> (numbers [i].Split ('''));  						coord [0] = coord [0].Replace ('.'' ''');  						coord [1] = coord [1].Replace ('.'' ''');  						Vertex vert = new Vertex (coord [0]' coord [1]);  						vertices.Add (vert);  					}  					List<string> coord2 = new List<string> (numbers [0].Split ('''));  					coord2 [0] = coord2 [0].Replace ('.'' ''');  					coord2 [1] = coord2 [1].Replace ('.'' ''');  					vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  					unit.Vertices = vertices;  				}  			}  			if (attribute.Equals ("height")) {  				value = value.Replace ('.'' ''');  				Vertex v = unit.V;  				v.Height = Double.Parse (value);  				unit.V = v;  			}  			if (attribute.Equals ("width")) {  				value = value.Replace ('.'' ''');  				Vertex v = unit.V;  				v.Width = Double.Parse (value);  				unit.V = v;  			}  			if (attribute.Equals ("bit")) {  				unit.Bit = Int32.Parse (value);  			}  			if (attribute.Equals ("set")) {  				switch (value) {  				case "D":  					unit.Set = Set.Input;  					break;  				case "A":  					unit.Set = Set.Attack;  					break;  				case "AD":  				case "DA":  					unit.Set = Set.Both;  					break;  				}  			}  			part = part.Remove (0);  			attribute = attribute.Remove (0);  		}  		else  			part += it;  		break;  	default:  		part += it;  		break;  	}  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: foreach (char it in prop) {  	switch (it) {  	case '=':  		attribute = part;  		part = part.Remove (0);  		break;  	case '\"':  		quotes = !quotes;  		break;  	case ']':  	case ''':  		if (!quotes) {  			value = part;  			if (attribute.Equals ("color")) {  				switch (value) {  				case "red":  					unit.Compromised = Compromise.EASY;  					break;  				case "orange":  					unit.Compromised = Compromise.HARD;  					break;  				case "green":  					unit.Compromised = Compromise.IMPOSSIBLE;  					break;  				}  				unit.Color = value;  			}  			if (attribute.Equals ("type"))  				unit.Type = value;  			if (attribute.Equals ("pos")) {  				List<string> numbers = new List<string> (value.Split ('''));  				if (numbers.Count == 2) {  					numbers [0] = numbers [0].Replace ('.'' ''');  					numbers [1] = numbers [1].Replace ('.'' ''');  					Vertex v = unit.V;  					v.X = Double.Parse (numbers [0]);  					v.Y = Double.Parse (numbers [1]);  					unit.V = v;  				}  				else {  					string newValue = value.Replace ("\r"' "");  					newValue = newValue.Replace ("\n"' "");  					newValue = newValue.Replace ("\\"' "");  					// line for position of edge is in format:   					// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  					numbers = new List<string> (newValue.Split (' '));  					numbers [0] = numbers [0].Remove (0' 2);  					numbers.RemoveAll (x => String.IsNullOrEmpty (x));  					List<Vertex> vertices = new List<Vertex> ();  					for (int i = 1; i < numbers.Count; i++) {  						List<string> coord = new List<string> (numbers [i].Split ('''));  						coord [0] = coord [0].Replace ('.'' ''');  						coord [1] = coord [1].Replace ('.'' ''');  						Vertex vert = new Vertex (coord [0]' coord [1]);  						vertices.Add (vert);  					}  					List<string> coord2 = new List<string> (numbers [0].Split ('''));  					coord2 [0] = coord2 [0].Replace ('.'' ''');  					coord2 [1] = coord2 [1].Replace ('.'' ''');  					vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  					unit.Vertices = vertices;  				}  			}  			if (attribute.Equals ("height")) {  				value = value.Replace ('.'' ''');  				Vertex v = unit.V;  				v.Height = Double.Parse (value);  				unit.V = v;  			}  			if (attribute.Equals ("width")) {  				value = value.Replace ('.'' ''');  				Vertex v = unit.V;  				v.Width = Double.Parse (value);  				unit.V = v;  			}  			if (attribute.Equals ("bit")) {  				unit.Bit = Int32.Parse (value);  			}  			if (attribute.Equals ("set")) {  				switch (value) {  				case "D":  					unit.Set = Set.Input;  					break;  				case "A":  					unit.Set = Set.Attack;  					break;  				case "AD":  				case "DA":  					unit.Set = Set.Both;  					break;  				}  			}  			part = part.Remove (0);  			attribute = attribute.Remove (0);  		}  		else  			part += it;  		break;  	default:  		part += it;  		break;  	}  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: switch (it) {  case '=':  	attribute = part;  	part = part.Remove (0);  	break;  case '\"':  	quotes = !quotes;  	break;  case ']':  case ''':  	if (!quotes) {  		value = part;  		if (attribute.Equals ("color")) {  			switch (value) {  			case "red":  				unit.Compromised = Compromise.EASY;  				break;  			case "orange":  				unit.Compromised = Compromise.HARD;  				break;  			case "green":  				unit.Compromised = Compromise.IMPOSSIBLE;  				break;  			}  			unit.Color = value;  		}  		if (attribute.Equals ("type"))  			unit.Type = value;  		if (attribute.Equals ("pos")) {  			List<string> numbers = new List<string> (value.Split ('''));  			if (numbers.Count == 2) {  				numbers [0] = numbers [0].Replace ('.'' ''');  				numbers [1] = numbers [1].Replace ('.'' ''');  				Vertex v = unit.V;  				v.X = Double.Parse (numbers [0]);  				v.Y = Double.Parse (numbers [1]);  				unit.V = v;  			}  			else {  				string newValue = value.Replace ("\r"' "");  				newValue = newValue.Replace ("\n"' "");  				newValue = newValue.Replace ("\\"' "");  				// line for position of edge is in format:   				// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  				numbers = new List<string> (newValue.Split (' '));  				numbers [0] = numbers [0].Remove (0' 2);  				numbers.RemoveAll (x => String.IsNullOrEmpty (x));  				List<Vertex> vertices = new List<Vertex> ();  				for (int i = 1; i < numbers.Count; i++) {  					List<string> coord = new List<string> (numbers [i].Split ('''));  					coord [0] = coord [0].Replace ('.'' ''');  					coord [1] = coord [1].Replace ('.'' ''');  					Vertex vert = new Vertex (coord [0]' coord [1]);  					vertices.Add (vert);  				}  				List<string> coord2 = new List<string> (numbers [0].Split ('''));  				coord2 [0] = coord2 [0].Replace ('.'' ''');  				coord2 [1] = coord2 [1].Replace ('.'' ''');  				vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  				unit.Vertices = vertices;  			}  		}  		if (attribute.Equals ("height")) {  			value = value.Replace ('.'' ''');  			Vertex v = unit.V;  			v.Height = Double.Parse (value);  			unit.V = v;  		}  		if (attribute.Equals ("width")) {  			value = value.Replace ('.'' ''');  			Vertex v = unit.V;  			v.Width = Double.Parse (value);  			unit.V = v;  		}  		if (attribute.Equals ("bit")) {  			unit.Bit = Int32.Parse (value);  		}  		if (attribute.Equals ("set")) {  			switch (value) {  			case "D":  				unit.Set = Set.Input;  				break;  			case "A":  				unit.Set = Set.Attack;  				break;  			case "AD":  			case "DA":  				unit.Set = Set.Both;  				break;  			}  		}  		part = part.Remove (0);  		attribute = attribute.Remove (0);  	}  	else  		part += it;  	break;  default:  	part += it;  	break;  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: switch (it) {  case '=':  	attribute = part;  	part = part.Remove (0);  	break;  case '\"':  	quotes = !quotes;  	break;  case ']':  case ''':  	if (!quotes) {  		value = part;  		if (attribute.Equals ("color")) {  			switch (value) {  			case "red":  				unit.Compromised = Compromise.EASY;  				break;  			case "orange":  				unit.Compromised = Compromise.HARD;  				break;  			case "green":  				unit.Compromised = Compromise.IMPOSSIBLE;  				break;  			}  			unit.Color = value;  		}  		if (attribute.Equals ("type"))  			unit.Type = value;  		if (attribute.Equals ("pos")) {  			List<string> numbers = new List<string> (value.Split ('''));  			if (numbers.Count == 2) {  				numbers [0] = numbers [0].Replace ('.'' ''');  				numbers [1] = numbers [1].Replace ('.'' ''');  				Vertex v = unit.V;  				v.X = Double.Parse (numbers [0]);  				v.Y = Double.Parse (numbers [1]);  				unit.V = v;  			}  			else {  				string newValue = value.Replace ("\r"' "");  				newValue = newValue.Replace ("\n"' "");  				newValue = newValue.Replace ("\\"' "");  				// line for position of edge is in format:   				// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  				numbers = new List<string> (newValue.Split (' '));  				numbers [0] = numbers [0].Remove (0' 2);  				numbers.RemoveAll (x => String.IsNullOrEmpty (x));  				List<Vertex> vertices = new List<Vertex> ();  				for (int i = 1; i < numbers.Count; i++) {  					List<string> coord = new List<string> (numbers [i].Split ('''));  					coord [0] = coord [0].Replace ('.'' ''');  					coord [1] = coord [1].Replace ('.'' ''');  					Vertex vert = new Vertex (coord [0]' coord [1]);  					vertices.Add (vert);  				}  				List<string> coord2 = new List<string> (numbers [0].Split ('''));  				coord2 [0] = coord2 [0].Replace ('.'' ''');  				coord2 [1] = coord2 [1].Replace ('.'' ''');  				vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  				unit.Vertices = vertices;  			}  		}  		if (attribute.Equals ("height")) {  			value = value.Replace ('.'' ''');  			Vertex v = unit.V;  			v.Height = Double.Parse (value);  			unit.V = v;  		}  		if (attribute.Equals ("width")) {  			value = value.Replace ('.'' ''');  			Vertex v = unit.V;  			v.Width = Double.Parse (value);  			unit.V = v;  		}  		if (attribute.Equals ("bit")) {  			unit.Bit = Int32.Parse (value);  		}  		if (attribute.Equals ("set")) {  			switch (value) {  			case "D":  				unit.Set = Set.Input;  				break;  			case "A":  				unit.Set = Set.Attack;  				break;  			case "AD":  			case "DA":  				unit.Set = Set.Both;  				break;  			}  		}  		part = part.Remove (0);  		attribute = attribute.Remove (0);  	}  	else  		part += it;  	break;  default:  	part += it;  	break;  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: if (!quotes) {  	value = part;  	if (attribute.Equals ("color")) {  		switch (value) {  		case "red":  			unit.Compromised = Compromise.EASY;  			break;  		case "orange":  			unit.Compromised = Compromise.HARD;  			break;  		case "green":  			unit.Compromised = Compromise.IMPOSSIBLE;  			break;  		}  		unit.Color = value;  	}  	if (attribute.Equals ("type"))  		unit.Type = value;  	if (attribute.Equals ("pos")) {  		List<string> numbers = new List<string> (value.Split ('''));  		if (numbers.Count == 2) {  			numbers [0] = numbers [0].Replace ('.'' ''');  			numbers [1] = numbers [1].Replace ('.'' ''');  			Vertex v = unit.V;  			v.X = Double.Parse (numbers [0]);  			v.Y = Double.Parse (numbers [1]);  			unit.V = v;  		}  		else {  			string newValue = value.Replace ("\r"' "");  			newValue = newValue.Replace ("\n"' "");  			newValue = newValue.Replace ("\\"' "");  			// line for position of edge is in format:   			// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  			numbers = new List<string> (newValue.Split (' '));  			numbers [0] = numbers [0].Remove (0' 2);  			numbers.RemoveAll (x => String.IsNullOrEmpty (x));  			List<Vertex> vertices = new List<Vertex> ();  			for (int i = 1; i < numbers.Count; i++) {  				List<string> coord = new List<string> (numbers [i].Split ('''));  				coord [0] = coord [0].Replace ('.'' ''');  				coord [1] = coord [1].Replace ('.'' ''');  				Vertex vert = new Vertex (coord [0]' coord [1]);  				vertices.Add (vert);  			}  			List<string> coord2 = new List<string> (numbers [0].Split ('''));  			coord2 [0] = coord2 [0].Replace ('.'' ''');  			coord2 [1] = coord2 [1].Replace ('.'' ''');  			vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  			unit.Vertices = vertices;  		}  	}  	if (attribute.Equals ("height")) {  		value = value.Replace ('.'' ''');  		Vertex v = unit.V;  		v.Height = Double.Parse (value);  		unit.V = v;  	}  	if (attribute.Equals ("width")) {  		value = value.Replace ('.'' ''');  		Vertex v = unit.V;  		v.Width = Double.Parse (value);  		unit.V = v;  	}  	if (attribute.Equals ("bit")) {  		unit.Bit = Int32.Parse (value);  	}  	if (attribute.Equals ("set")) {  		switch (value) {  		case "D":  			unit.Set = Set.Input;  			break;  		case "A":  			unit.Set = Set.Attack;  			break;  		case "AD":  		case "DA":  			unit.Set = Set.Both;  			break;  		}  	}  	part = part.Remove (0);  	attribute = attribute.Remove (0);  }  else  	part += it;  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: if (!quotes) {  	value = part;  	if (attribute.Equals ("color")) {  		switch (value) {  		case "red":  			unit.Compromised = Compromise.EASY;  			break;  		case "orange":  			unit.Compromised = Compromise.HARD;  			break;  		case "green":  			unit.Compromised = Compromise.IMPOSSIBLE;  			break;  		}  		unit.Color = value;  	}  	if (attribute.Equals ("type"))  		unit.Type = value;  	if (attribute.Equals ("pos")) {  		List<string> numbers = new List<string> (value.Split ('''));  		if (numbers.Count == 2) {  			numbers [0] = numbers [0].Replace ('.'' ''');  			numbers [1] = numbers [1].Replace ('.'' ''');  			Vertex v = unit.V;  			v.X = Double.Parse (numbers [0]);  			v.Y = Double.Parse (numbers [1]);  			unit.V = v;  		}  		else {  			string newValue = value.Replace ("\r"' "");  			newValue = newValue.Replace ("\n"' "");  			newValue = newValue.Replace ("\\"' "");  			// line for position of edge is in format:   			// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  			numbers = new List<string> (newValue.Split (' '));  			numbers [0] = numbers [0].Remove (0' 2);  			numbers.RemoveAll (x => String.IsNullOrEmpty (x));  			List<Vertex> vertices = new List<Vertex> ();  			for (int i = 1; i < numbers.Count; i++) {  				List<string> coord = new List<string> (numbers [i].Split ('''));  				coord [0] = coord [0].Replace ('.'' ''');  				coord [1] = coord [1].Replace ('.'' ''');  				Vertex vert = new Vertex (coord [0]' coord [1]);  				vertices.Add (vert);  			}  			List<string> coord2 = new List<string> (numbers [0].Split ('''));  			coord2 [0] = coord2 [0].Replace ('.'' ''');  			coord2 [1] = coord2 [1].Replace ('.'' ''');  			vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  			unit.Vertices = vertices;  		}  	}  	if (attribute.Equals ("height")) {  		value = value.Replace ('.'' ''');  		Vertex v = unit.V;  		v.Height = Double.Parse (value);  		unit.V = v;  	}  	if (attribute.Equals ("width")) {  		value = value.Replace ('.'' ''');  		Vertex v = unit.V;  		v.Width = Double.Parse (value);  		unit.V = v;  	}  	if (attribute.Equals ("bit")) {  		unit.Bit = Int32.Parse (value);  	}  	if (attribute.Equals ("set")) {  		switch (value) {  		case "D":  			unit.Set = Set.Input;  			break;  		case "A":  			unit.Set = Set.Attack;  			break;  		case "AD":  		case "DA":  			unit.Set = Set.Both;  			break;  		}  	}  	part = part.Remove (0);  	attribute = attribute.Remove (0);  }  else  	part += it;  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: if (attribute.Equals ("pos")) {  	List<string> numbers = new List<string> (value.Split ('''));  	if (numbers.Count == 2) {  		numbers [0] = numbers [0].Replace ('.'' ''');  		numbers [1] = numbers [1].Replace ('.'' ''');  		Vertex v = unit.V;  		v.X = Double.Parse (numbers [0]);  		v.Y = Double.Parse (numbers [1]);  		unit.V = v;  	}  	else {  		string newValue = value.Replace ("\r"' "");  		newValue = newValue.Replace ("\n"' "");  		newValue = newValue.Replace ("\\"' "");  		// line for position of edge is in format:   		// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  		numbers = new List<string> (newValue.Split (' '));  		numbers [0] = numbers [0].Remove (0' 2);  		numbers.RemoveAll (x => String.IsNullOrEmpty (x));  		List<Vertex> vertices = new List<Vertex> ();  		for (int i = 1; i < numbers.Count; i++) {  			List<string> coord = new List<string> (numbers [i].Split ('''));  			coord [0] = coord [0].Replace ('.'' ''');  			coord [1] = coord [1].Replace ('.'' ''');  			Vertex vert = new Vertex (coord [0]' coord [1]);  			vertices.Add (vert);  		}  		List<string> coord2 = new List<string> (numbers [0].Split ('''));  		coord2 [0] = coord2 [0].Replace ('.'' ''');  		coord2 [1] = coord2 [1].Replace ('.'' ''');  		vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  		unit.Vertices = vertices;  	}  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: if (attribute.Equals ("pos")) {  	List<string> numbers = new List<string> (value.Split ('''));  	if (numbers.Count == 2) {  		numbers [0] = numbers [0].Replace ('.'' ''');  		numbers [1] = numbers [1].Replace ('.'' ''');  		Vertex v = unit.V;  		v.X = Double.Parse (numbers [0]);  		v.Y = Double.Parse (numbers [1]);  		unit.V = v;  	}  	else {  		string newValue = value.Replace ("\r"' "");  		newValue = newValue.Replace ("\n"' "");  		newValue = newValue.Replace ("\\"' "");  		// line for position of edge is in format:   		// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  		numbers = new List<string> (newValue.Split (' '));  		numbers [0] = numbers [0].Remove (0' 2);  		numbers.RemoveAll (x => String.IsNullOrEmpty (x));  		List<Vertex> vertices = new List<Vertex> ();  		for (int i = 1; i < numbers.Count; i++) {  			List<string> coord = new List<string> (numbers [i].Split ('''));  			coord [0] = coord [0].Replace ('.'' ''');  			coord [1] = coord [1].Replace ('.'' ''');  			Vertex vert = new Vertex (coord [0]' coord [1]);  			vertices.Add (vert);  		}  		List<string> coord2 = new List<string> (numbers [0].Split ('''));  		coord2 [0] = coord2 [0].Replace ('.'' ''');  		coord2 [1] = coord2 [1].Replace ('.'' ''');  		vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  		unit.Vertices = vertices;  	}  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: if (numbers.Count == 2) {  	numbers [0] = numbers [0].Replace ('.'' ''');  	numbers [1] = numbers [1].Replace ('.'' ''');  	Vertex v = unit.V;  	v.X = Double.Parse (numbers [0]);  	v.Y = Double.Parse (numbers [1]);  	unit.V = v;  }  else {  	string newValue = value.Replace ("\r"' "");  	newValue = newValue.Replace ("\n"' "");  	newValue = newValue.Replace ("\\"' "");  	// line for position of edge is in format:   	// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  	numbers = new List<string> (newValue.Split (' '));  	numbers [0] = numbers [0].Remove (0' 2);  	numbers.RemoveAll (x => String.IsNullOrEmpty (x));  	List<Vertex> vertices = new List<Vertex> ();  	for (int i = 1; i < numbers.Count; i++) {  		List<string> coord = new List<string> (numbers [i].Split ('''));  		coord [0] = coord [0].Replace ('.'' ''');  		coord [1] = coord [1].Replace ('.'' ''');  		Vertex vert = new Vertex (coord [0]' coord [1]);  		vertices.Add (vert);  	}  	List<string> coord2 = new List<string> (numbers [0].Split ('''));  	coord2 [0] = coord2 [0].Replace ('.'' ''');  	coord2 [1] = coord2 [1].Replace ('.'' ''');  	vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  	unit.Vertices = vertices;  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: if (numbers.Count == 2) {  	numbers [0] = numbers [0].Replace ('.'' ''');  	numbers [1] = numbers [1].Replace ('.'' ''');  	Vertex v = unit.V;  	v.X = Double.Parse (numbers [0]);  	v.Y = Double.Parse (numbers [1]);  	unit.V = v;  }  else {  	string newValue = value.Replace ("\r"' "");  	newValue = newValue.Replace ("\n"' "");  	newValue = newValue.Replace ("\\"' "");  	// line for position of edge is in format:   	// "e' end coordinates' start coordinates' coordinates of vertices on path' always step by step"  	numbers = new List<string> (newValue.Split (' '));  	numbers [0] = numbers [0].Remove (0' 2);  	numbers.RemoveAll (x => String.IsNullOrEmpty (x));  	List<Vertex> vertices = new List<Vertex> ();  	for (int i = 1; i < numbers.Count; i++) {  		List<string> coord = new List<string> (numbers [i].Split ('''));  		coord [0] = coord [0].Replace ('.'' ''');  		coord [1] = coord [1].Replace ('.'' ''');  		Vertex vert = new Vertex (coord [0]' coord [1]);  		vertices.Add (vert);  	}  	List<string> coord2 = new List<string> (numbers [0].Split ('''));  	coord2 [0] = coord2 [0].Replace ('.'' ''');  	coord2 [1] = coord2 [1].Replace ('.'' ''');  	vertices.Add (new Vertex (coord2 [0]' coord2 [1]));  	unit.Vertices = vertices;  }  
Magic Number,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following statement contains a magic number: numbers [0] = numbers [0].Remove (0' 2);  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: if (!String.IsNullOrEmpty (pngFile)) {  	//Old png file will be removed because of test of length of new file under.  	if (File.Exists (pngFile))  		File.Delete (pngFile);  	string start = Environment.CurrentDirectory;  	string fullPath = Path.GetFullPath (pngFile);  	start += '\\';  	System.Uri uri1 = new Uri (fullPath);  	System.Uri uri2 = new Uri (start);  	string path = uri2.MakeRelativeUri (uri1).ToString ();  	System.Uri uri3 = new Uri (Path.GetFullPath (nameFile));  	string path2 = uri2.MakeRelativeUri (uri3).ToString ();  	string system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "system32");  	if (Environment.Is64BitOperatingSystem && !Environment.Is64BitProcess) {  		// For 32-bit processes on 64-bit systems' %windir%\system32 folder  		// can only be accessed by specifying %windir%\sysnative folder.  		system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "sysnative");  	}  	system32Directory += "\\cmd.exe";  	System.Diagnostics.Process process = new System.Diagnostics.Process ();  	process.StartInfo = new System.Diagnostics.ProcessStartInfo ();  	process.StartInfo.FileName = system32Directory;  	//".\\cmd.exe";  	process.StartInfo.Arguments = "/K dot -Tpng " + path2 + " -o " + path;  	process.StartInfo.CreateNoWindow = true;  	process.StartInfo.UseShellExecute = false;  	process.StartInfo.RedirectStandardOutput = true;  	process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	process.Start ();  	while (!process.HasExited) {  		process.Refresh ();  		System.Threading.Thread.Sleep (200);  		if (File.Exists (pngFile)) {  			FileInfo f = new FileInfo (pngFile);  			if (f.Length > 0)  				break;  		}  	}  	process.Close ();  	this.nameFile = fullPath;  	int i = 0;  	while (!openFile () && i < 20) {  		System.Threading.Thread.Sleep (200);  		i++;  	}  	File.Delete (path2);  	if (i == 20)  		return false;  	return true;  }  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: if (!String.IsNullOrEmpty (pngFile)) {  	//Old png file will be removed because of test of length of new file under.  	if (File.Exists (pngFile))  		File.Delete (pngFile);  	string start = Environment.CurrentDirectory;  	string fullPath = Path.GetFullPath (pngFile);  	start += '\\';  	System.Uri uri1 = new Uri (fullPath);  	System.Uri uri2 = new Uri (start);  	string path = uri2.MakeRelativeUri (uri1).ToString ();  	System.Uri uri3 = new Uri (Path.GetFullPath (nameFile));  	string path2 = uri2.MakeRelativeUri (uri3).ToString ();  	string system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "system32");  	if (Environment.Is64BitOperatingSystem && !Environment.Is64BitProcess) {  		// For 32-bit processes on 64-bit systems' %windir%\system32 folder  		// can only be accessed by specifying %windir%\sysnative folder.  		system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "sysnative");  	}  	system32Directory += "\\cmd.exe";  	System.Diagnostics.Process process = new System.Diagnostics.Process ();  	process.StartInfo = new System.Diagnostics.ProcessStartInfo ();  	process.StartInfo.FileName = system32Directory;  	//".\\cmd.exe";  	process.StartInfo.Arguments = "/K dot -Tpng " + path2 + " -o " + path;  	process.StartInfo.CreateNoWindow = true;  	process.StartInfo.UseShellExecute = false;  	process.StartInfo.RedirectStandardOutput = true;  	process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	process.Start ();  	while (!process.HasExited) {  		process.Refresh ();  		System.Threading.Thread.Sleep (200);  		if (File.Exists (pngFile)) {  			FileInfo f = new FileInfo (pngFile);  			if (f.Length > 0)  				break;  		}  	}  	process.Close ();  	this.nameFile = fullPath;  	int i = 0;  	while (!openFile () && i < 20) {  		System.Threading.Thread.Sleep (200);  		i++;  	}  	File.Delete (path2);  	if (i == 20)  		return false;  	return true;  }  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: if (!String.IsNullOrEmpty (pngFile)) {  	//Old png file will be removed because of test of length of new file under.  	if (File.Exists (pngFile))  		File.Delete (pngFile);  	string start = Environment.CurrentDirectory;  	string fullPath = Path.GetFullPath (pngFile);  	start += '\\';  	System.Uri uri1 = new Uri (fullPath);  	System.Uri uri2 = new Uri (start);  	string path = uri2.MakeRelativeUri (uri1).ToString ();  	System.Uri uri3 = new Uri (Path.GetFullPath (nameFile));  	string path2 = uri2.MakeRelativeUri (uri3).ToString ();  	string system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "system32");  	if (Environment.Is64BitOperatingSystem && !Environment.Is64BitProcess) {  		// For 32-bit processes on 64-bit systems' %windir%\system32 folder  		// can only be accessed by specifying %windir%\sysnative folder.  		system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "sysnative");  	}  	system32Directory += "\\cmd.exe";  	System.Diagnostics.Process process = new System.Diagnostics.Process ();  	process.StartInfo = new System.Diagnostics.ProcessStartInfo ();  	process.StartInfo.FileName = system32Directory;  	//".\\cmd.exe";  	process.StartInfo.Arguments = "/K dot -Tpng " + path2 + " -o " + path;  	process.StartInfo.CreateNoWindow = true;  	process.StartInfo.UseShellExecute = false;  	process.StartInfo.RedirectStandardOutput = true;  	process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	process.Start ();  	while (!process.HasExited) {  		process.Refresh ();  		System.Threading.Thread.Sleep (200);  		if (File.Exists (pngFile)) {  			FileInfo f = new FileInfo (pngFile);  			if (f.Length > 0)  				break;  		}  	}  	process.Close ();  	this.nameFile = fullPath;  	int i = 0;  	while (!openFile () && i < 20) {  		System.Threading.Thread.Sleep (200);  		i++;  	}  	File.Delete (path2);  	if (i == 20)  		return false;  	return true;  }  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: if (!String.IsNullOrEmpty (pngFile)) {  	//Old png file will be removed because of test of length of new file under.  	if (File.Exists (pngFile))  		File.Delete (pngFile);  	string start = Environment.CurrentDirectory;  	string fullPath = Path.GetFullPath (pngFile);  	start += '\\';  	System.Uri uri1 = new Uri (fullPath);  	System.Uri uri2 = new Uri (start);  	string path = uri2.MakeRelativeUri (uri1).ToString ();  	System.Uri uri3 = new Uri (Path.GetFullPath (nameFile));  	string path2 = uri2.MakeRelativeUri (uri3).ToString ();  	string system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "system32");  	if (Environment.Is64BitOperatingSystem && !Environment.Is64BitProcess) {  		// For 32-bit processes on 64-bit systems' %windir%\system32 folder  		// can only be accessed by specifying %windir%\sysnative folder.  		system32Directory = Path.Combine (Environment.ExpandEnvironmentVariables ("%windir%")' "sysnative");  	}  	system32Directory += "\\cmd.exe";  	System.Diagnostics.Process process = new System.Diagnostics.Process ();  	process.StartInfo = new System.Diagnostics.ProcessStartInfo ();  	process.StartInfo.FileName = system32Directory;  	//".\\cmd.exe";  	process.StartInfo.Arguments = "/K dot -Tpng " + path2 + " -o " + path;  	process.StartInfo.CreateNoWindow = true;  	process.StartInfo.UseShellExecute = false;  	process.StartInfo.RedirectStandardOutput = true;  	process.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	process.Start ();  	while (!process.HasExited) {  		process.Refresh ();  		System.Threading.Thread.Sleep (200);  		if (File.Exists (pngFile)) {  			FileInfo f = new FileInfo (pngFile);  			if (f.Length > 0)  				break;  		}  	}  	process.Close ();  	this.nameFile = fullPath;  	int i = 0;  	while (!openFile () && i < 20) {  		System.Threading.Thread.Sleep (200);  		i++;  	}  	File.Delete (path2);  	if (i == 20)  		return false;  	return true;  }  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: while (!process.HasExited) {  	process.Refresh ();  	System.Threading.Thread.Sleep (200);  	if (File.Exists (pngFile)) {  		FileInfo f = new FileInfo (pngFile);  		if (f.Length > 0)  			break;  	}  }  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: System.Threading.Thread.Sleep (200);  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: while (!openFile () && i < 20) {  	System.Threading.Thread.Sleep (200);  	i++;  }  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: while (!openFile () && i < 20) {  	System.Threading.Thread.Sleep (200);  	i++;  }  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: System.Threading.Thread.Sleep (200);  
Magic Number,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createPng,The following statement contains a magic number: if (i == 20)  	return false;  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) {  	if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  		fce.Color = colorsFunction [0];  	}  	else if (fce.containSub ("hash")) {  		fce.Color = colorsFunction [1];  	}  	else if (fce.containSub ("prf")) {  		fce.Color = colorsFunction [2];  	}  	else if (fce.containSub ("hmac")) {  		fce.Color = colorsFunction [3];  	}  	else {  		fce.Color = colorsFunction [4];  	}  	if (!functions.Contains (fce))  		functions.Add (fce);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) {  	if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  		fce.Color = colorsFunction [0];  	}  	else if (fce.containSub ("hash")) {  		fce.Color = colorsFunction [1];  	}  	else if (fce.containSub ("prf")) {  		fce.Color = colorsFunction [2];  	}  	else if (fce.containSub ("hmac")) {  		fce.Color = colorsFunction [3];  	}  	else {  		fce.Color = colorsFunction [4];  	}  	if (!functions.Contains (fce))  		functions.Add (fce);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) {  	if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  		fce.Color = colorsFunction [0];  	}  	else if (fce.containSub ("hash")) {  		fce.Color = colorsFunction [1];  	}  	else if (fce.containSub ("prf")) {  		fce.Color = colorsFunction [2];  	}  	else if (fce.containSub ("hmac")) {  		fce.Color = colorsFunction [3];  	}  	else {  		fce.Color = colorsFunction [4];  	}  	if (!functions.Contains (fce))  		functions.Add (fce);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) {  	if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  		fce.Color = colorsFunction [0];  	}  	else if (fce.containSub ("hash")) {  		fce.Color = colorsFunction [1];  	}  	else if (fce.containSub ("prf")) {  		fce.Color = colorsFunction [2];  	}  	else if (fce.containSub ("hmac")) {  		fce.Color = colorsFunction [3];  	}  	else {  		fce.Color = colorsFunction [4];  	}  	if (!functions.Contains (fce))  		functions.Add (fce);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) {  	if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  		fce.Color = colorsFunction [0];  	}  	else if (fce.containSub ("hash")) {  		fce.Color = colorsFunction [1];  	}  	else if (fce.containSub ("prf")) {  		fce.Color = colorsFunction [2];  	}  	else if (fce.containSub ("hmac")) {  		fce.Color = colorsFunction [3];  	}  	else {  		fce.Color = colorsFunction [4];  	}  	if (!functions.Contains (fce))  		functions.Add (fce);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) {  	if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  		fce.Color = colorsFunction [0];  	}  	else if (fce.containSub ("hash")) {  		fce.Color = colorsFunction [1];  	}  	else if (fce.containSub ("prf")) {  		fce.Color = colorsFunction [2];  	}  	else if (fce.containSub ("hmac")) {  		fce.Color = colorsFunction [3];  	}  	else {  		fce.Color = colorsFunction [4];  	}  	if (!functions.Contains (fce))  		functions.Add (fce);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if ((fce.Type == "function") || (String.IsNullOrEmpty (fce.Type) && (fce.Value.Substring (0' 4).ToLower () == "hmac" || (fce.Value.Substring (0' 4).ToLower () == "hash" && (fce.Value.Length <= 4 || !fce.Value.Contains ('('))) || fce.Value.Substring (0' 7).ToLower () == "encrypt"))) {  	if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  		fce.Color = colorsFunction [0];  	}  	else if (fce.containSub ("hash")) {  		fce.Color = colorsFunction [1];  	}  	else if (fce.containSub ("prf")) {  		fce.Color = colorsFunction [2];  	}  	else if (fce.containSub ("hmac")) {  		fce.Color = colorsFunction [3];  	}  	else {  		fce.Color = colorsFunction [4];  	}  	if (!functions.Contains (fce))  		functions.Add (fce);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  	fce.Color = colorsFunction [0];  }  else if (fce.containSub ("hash")) {  	fce.Color = colorsFunction [1];  }  else if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  	fce.Color = colorsFunction [0];  }  else if (fce.containSub ("hash")) {  	fce.Color = colorsFunction [1];  }  else if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("encrypt") || fce.containSub ("decrypt")) {  	fce.Color = colorsFunction [0];  }  else if (fce.containSub ("hash")) {  	fce.Color = colorsFunction [1];  }  else if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("hash")) {  	fce.Color = colorsFunction [1];  }  else if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("hash")) {  	fce.Color = colorsFunction [1];  }  else if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("hash")) {  	fce.Color = colorsFunction [1];  }  else if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("prf")) {  	fce.Color = colorsFunction [2];  }  else if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: fce.Color = colorsFunction [2];  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: if (fce.containSub ("hmac")) {  	fce.Color = colorsFunction [3];  }  else {  	fce.Color = colorsFunction [4];  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: fce.Color = colorsFunction [3];  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,addFunction,The following statement contains a magic number: fce.Color = colorsFunction [4];  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The following statement contains a magic number: if (unCompromised.Compromised == Compromise.HARD) {  	if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 3 && n.getChildren ().Contains (unCompromised)) {  		compromiteNode (ref unCompromised);  	}  }  else {  	if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 2 && n.getChildren ().Contains (unCompromised)) {  		compromiteNode (ref unCompromised);  	}  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The following statement contains a magic number: if (unCompromised.Compromised == Compromise.HARD) {  	if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 3 && n.getChildren ().Contains (unCompromised)) {  		compromiteNode (ref unCompromised);  	}  }  else {  	if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 2 && n.getChildren ().Contains (unCompromised)) {  		compromiteNode (ref unCompromised);  	}  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The following statement contains a magic number: if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 3 && n.getChildren ().Contains (unCompromised)) {  	compromiteNode (ref unCompromised);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,analyseEncrypt,The following statement contains a magic number: if (encryptData.getParents ().Contains (n) && encryptData.Compromised != Compromise.IMPOSSIBLE && countCompromited == n.getParents ().Count - 2 && n.getChildren ().Contains (unCompromised)) {  	compromiteNode (ref unCompromised);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,compareEntropy,The following statement contains a magic number: if (bit < 60)  	coloration (ref n' "red");  else if (bit >= 60 && bit <= 80)  	coloration (ref n' "orange");  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,compareEntropy,The following statement contains a magic number: if (bit < 60)  	coloration (ref n' "red");  else if (bit >= 60 && bit <= 80)  	coloration (ref n' "orange");  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,compareEntropy,The following statement contains a magic number: if (bit < 60)  	coloration (ref n' "red");  else if (bit >= 60 && bit <= 80)  	coloration (ref n' "orange");  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,compareEntropy,The following statement contains a magic number: if (bit >= 60 && bit <= 80)  	coloration (ref n' "orange");  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,compareEntropy,The following statement contains a magic number: if (bit >= 60 && bit <= 80)  	coloration (ref n' "orange");  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,findCombination,The following statement contains a magic number: if (result == 3 && foundMinSet)  	return 2;  else  	return result;  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,findCombination,The following statement contains a magic number: if (result == 3 && foundMinSet)  	return 2;  else  	return result;  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,findCombination,The following statement contains a magic number: return 2;  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,combinationUtil,The following statement contains a magic number: return 3;  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,writeFile,The following statement contains a magic number: if (!String.IsNullOrEmpty (file)) {  	if (numberOfFound > 1) {  		int length = numberOfFound.ToString ().Length;  		file = file.Remove (file.Length - 4 - length' length);  	}  	numberOfFound++;  	file = file.Insert (file.Length - 4' numberOfFound.ToString ());  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,writeFile,The following statement contains a magic number: if (!String.IsNullOrEmpty (file)) {  	if (numberOfFound > 1) {  		int length = numberOfFound.ToString ().Length;  		file = file.Remove (file.Length - 4 - length' length);  	}  	numberOfFound++;  	file = file.Insert (file.Length - 4' numberOfFound.ToString ());  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,writeFile,The following statement contains a magic number: if (numberOfFound > 1) {  	int length = numberOfFound.ToString ().Length;  	file = file.Remove (file.Length - 4 - length' length);  }  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,writeFile,The following statement contains a magic number: file = file.Remove (file.Length - 4 - length' length);  
Magic Number,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,writeFile,The following statement contains a magic number: file = file.Insert (file.Length - 4' numberOfFound.ToString ());  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (input.Length > 1) {  	// -4 in case bad input  	// -3 in case not to open or find file  	// -2 if format in CAS+ is not correct  	// -1 if format in DOT is not correct  	// 0 if all was correct  	// 1 if windows must be showed  	switch (parseInput (input)) {  	case -4:  		if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  			InitializeComponent ();  			return;  		}  		else  			writeToCommandLine ("Error - bad input format");  		break;  	case -3:  		writeToCommandLine ("Error - file wasn't found or couldn't be opened");  		break;  	case -2:  		writeToCommandLine ("Error - bad format in CAS+ protocol");  		break;  	case -1:  		writeToCommandLine ("Error - bad format in DOT");  		break;  	case 1:  		return;  	}  	this.Close ();  }  else  	InitializeComponent ();  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (input.Length > 1) {  	// -4 in case bad input  	// -3 in case not to open or find file  	// -2 if format in CAS+ is not correct  	// -1 if format in DOT is not correct  	// 0 if all was correct  	// 1 if windows must be showed  	switch (parseInput (input)) {  	case -4:  		if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  			InitializeComponent ();  			return;  		}  		else  			writeToCommandLine ("Error - bad input format");  		break;  	case -3:  		writeToCommandLine ("Error - file wasn't found or couldn't be opened");  		break;  	case -2:  		writeToCommandLine ("Error - bad format in CAS+ protocol");  		break;  	case -1:  		writeToCommandLine ("Error - bad format in DOT");  		break;  	case 1:  		return;  	}  	this.Close ();  }  else  	InitializeComponent ();  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (input.Length > 1) {  	// -4 in case bad input  	// -3 in case not to open or find file  	// -2 if format in CAS+ is not correct  	// -1 if format in DOT is not correct  	// 0 if all was correct  	// 1 if windows must be showed  	switch (parseInput (input)) {  	case -4:  		if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  			InitializeComponent ();  			return;  		}  		else  			writeToCommandLine ("Error - bad input format");  		break;  	case -3:  		writeToCommandLine ("Error - file wasn't found or couldn't be opened");  		break;  	case -2:  		writeToCommandLine ("Error - bad format in CAS+ protocol");  		break;  	case -1:  		writeToCommandLine ("Error - bad format in DOT");  		break;  	case 1:  		return;  	}  	this.Close ();  }  else  	InitializeComponent ();  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (input.Length > 1) {  	// -4 in case bad input  	// -3 in case not to open or find file  	// -2 if format in CAS+ is not correct  	// -1 if format in DOT is not correct  	// 0 if all was correct  	// 1 if windows must be showed  	switch (parseInput (input)) {  	case -4:  		if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  			InitializeComponent ();  			return;  		}  		else  			writeToCommandLine ("Error - bad input format");  		break;  	case -3:  		writeToCommandLine ("Error - file wasn't found or couldn't be opened");  		break;  	case -2:  		writeToCommandLine ("Error - bad format in CAS+ protocol");  		break;  	case -1:  		writeToCommandLine ("Error - bad format in DOT");  		break;  	case 1:  		return;  	}  	this.Close ();  }  else  	InitializeComponent ();  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: switch (parseInput (input)) {  case -4:  	if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  		InitializeComponent ();  		return;  	}  	else  		writeToCommandLine ("Error - bad input format");  	break;  case -3:  	writeToCommandLine ("Error - file wasn't found or couldn't be opened");  	break;  case -2:  	writeToCommandLine ("Error - bad format in CAS+ protocol");  	break;  case -1:  	writeToCommandLine ("Error - bad format in DOT");  	break;  case 1:  	return;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: switch (parseInput (input)) {  case -4:  	if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  		InitializeComponent ();  		return;  	}  	else  		writeToCommandLine ("Error - bad input format");  	break;  case -3:  	writeToCommandLine ("Error - file wasn't found or couldn't be opened");  	break;  case -2:  	writeToCommandLine ("Error - bad format in CAS+ protocol");  	break;  case -1:  	writeToCommandLine ("Error - bad format in DOT");  	break;  case 1:  	return;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: switch (parseInput (input)) {  case -4:  	if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  		InitializeComponent ();  		return;  	}  	else  		writeToCommandLine ("Error - bad input format");  	break;  case -3:  	writeToCommandLine ("Error - file wasn't found or couldn't be opened");  	break;  case -2:  	writeToCommandLine ("Error - bad format in CAS+ protocol");  	break;  case -1:  	writeToCommandLine ("Error - bad format in DOT");  	break;  case 1:  	return;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: switch (parseInput (input)) {  case -4:  	if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  		InitializeComponent ();  		return;  	}  	else  		writeToCommandLine ("Error - bad input format");  	break;  case -3:  	writeToCommandLine ("Error - file wasn't found or couldn't be opened");  	break;  case -2:  	writeToCommandLine ("Error - bad format in CAS+ protocol");  	break;  case -1:  	writeToCommandLine ("Error - bad format in DOT");  	break;  case 1:  	return;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  	InitializeComponent ();  	return;  }  else  	writeToCommandLine ("Error - bad input format");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if ((input.Length != 6) && (!(input [1].ToLower ().Contains ("-r") && input.Length == 4)))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if ((input.Length != 6) && (!(input [1].ToLower ().Contains ("-r") && input.Length == 4)))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if ((input.Length != 6) && (!(input [1].ToLower ().Contains ("-r") && input.Length == 4)))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [1]) {  case "-fd":  case "-FD":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  	default:  		return -4;  	}  case "-fa":  case "-FA":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.FIND_MIN_ALL);  	default:  		return -4;  	}  case "-a":  case "-A":  	switch (input [2]) {  	case "-t":  	case "-T":  		return cmdLineProtocol (input' Analyse.ANALYSE);  	case "-d":  	case "-D":  		return cmdLineDot (input' Analyse.ANALYSE);  	default:  		return -4;  	}  case "-r":  case "-R":  	switch (input [2]) {  	case "-t":  	case "-T":  		string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  		dotName += ".dot";  		while (System.IO.File.Exists (dotName))  			dotName = dotName.Insert (dotName.Length - 4' "1");  		System.IO.FileStream fs = System.IO.File.Create (dotName);  		fs.Close ();  		Parser myParser = new Parser (input [3]' dotName);  		int count = myParser.parse ();  		if (count == -1)  			return -3;  		else if (count == -2)  			return -2;  		else if (count != -2) {  			for (int i = 1; i <= count; i++) {  				fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  				if (i == 1) {  					InitializeComponent ();  					showGraph ();  				}  				else {  					MainWindow newWindow = new MainWindow (fileName);  					newWindow.Show ();  				}  				System.IO.File.Delete (fileName);  			}  		}  		return 1;  	case "-d":  	case "-D":  		fileName = input [3];  		InitializeComponent ();  		showGraph ();  		return 1;  	default:  		return -4;  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  case "-d":  case "-D":  	return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	return cmdLineProtocol (input' Analyse.FIND_MIN_DEFINED);  case "-d":  case "-D":  	return cmdLineDot (input' Analyse.FIND_MIN_DEFINED);  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  case "-d":  case "-D":  	return cmdLineDot (input' Analyse.FIND_MIN_ALL);  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	return cmdLineProtocol (input' Analyse.FIND_MIN_ALL);  case "-d":  case "-D":  	return cmdLineDot (input' Analyse.FIND_MIN_ALL);  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	return cmdLineProtocol (input' Analyse.ANALYSE);  case "-d":  case "-D":  	return cmdLineDot (input' Analyse.ANALYSE);  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	return cmdLineProtocol (input' Analyse.ANALYSE);  case "-d":  case "-D":  	return cmdLineDot (input' Analyse.ANALYSE);  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: switch (input [2]) {  case "-t":  case "-T":  	string dotName = input [3].Remove (input [3].LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (input [3]' dotName);  	int count = myParser.parse ();  	if (count == -1)  		return -3;  	else if (count == -2)  		return -2;  	else if (count != -2) {  		for (int i = 1; i <= count; i++) {  			fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  			if (i == 1) {  				InitializeComponent ();  				showGraph ();  			}  			else {  				MainWindow newWindow = new MainWindow (fileName);  				newWindow.Show ();  			}  			System.IO.File.Delete (fileName);  		}  	}  	return 1;  case "-d":  case "-D":  	fileName = input [3];  	InitializeComponent ();  	showGraph ();  	return 1;  default:  	return -4;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: while (System.IO.File.Exists (dotName))  	dotName = dotName.Insert (dotName.Length - 4' "1");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: dotName = dotName.Insert (dotName.Length - 4' "1");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -3;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -2;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		if (i == 1) {  			InitializeComponent ();  			showGraph ();  		}  		else {  			MainWindow newWindow = new MainWindow (fileName);  			newWindow.Show ();  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: for (int i = 1; i <= count; i++) {  	fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  	if (i == 1) {  		InitializeComponent ();  		showGraph ();  	}  	else {  		MainWindow newWindow = new MainWindow (fileName);  		newWindow.Show ();  	}  	System.IO.File.Delete (fileName);  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: fileName = input [3];  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,parseInput,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: fileName = input [3];  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (fileName.Substring (fileName.Length - 3).ToLower () != "txt")  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (fileName.Substring (fileName.Length - 3).ToLower () != "txt")  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: while (System.IO.File.Exists (dotName))  	dotName = dotName.Insert (dotName.Length - 4' "1");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: dotName = dotName.Insert (dotName.Length - 4' "1");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -1)  	return -3;  else if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: return -3;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count == -2)  	return -2;  else if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: return -2;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: if (count != -2) {  	for (int i = 1; i <= count; i++) {  		fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  		switch (readFile ()) {  		case -2:  			return -1;  		case -1:  			return -3;  		case 0:  			cmdLineFourthArgument (analyse' input);  			break;  		}  		System.IO.File.Delete (fileName);  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: for (int i = 1; i <= count; i++) {  	fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  	switch (readFile ()) {  	case -2:  		return -1;  	case -1:  		return -3;  	case 0:  		cmdLineFourthArgument (analyse' input);  		break;  	}  	System.IO.File.Delete (fileName);  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: for (int i = 1; i <= count; i++) {  	fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  	switch (readFile ()) {  	case -2:  		return -1;  	case -1:  		return -3;  	case 0:  		cmdLineFourthArgument (analyse' input);  		break;  	}  	System.IO.File.Delete (fileName);  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: for (int i = 1; i <= count; i++) {  	fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  	switch (readFile ()) {  	case -2:  		return -1;  	case -1:  		return -3;  	case 0:  		cmdLineFourthArgument (analyse' input);  		break;  	}  	System.IO.File.Delete (fileName);  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: fileName = dotName.Insert (dotName.Length - 4' i.ToString ());  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: switch (readFile ()) {  case -2:  	return -1;  case -1:  	return -3;  case 0:  	cmdLineFourthArgument (analyse' input);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: switch (readFile ()) {  case -2:  	return -1;  case -1:  	return -3;  case 0:  	cmdLineFourthArgument (analyse' input);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following statement contains a magic number: return -3;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	Writer wr = new Writer ("replacement.gv");  	wr.writeFile (g' false);  	if (!wr.createPng (input [5]))  		writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  	break;  case "-d":  case "-D":  	Writer wr1 = new Writer (input [5]);  	wr1.writeFile (g' true);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	Writer wr = new Writer ("replacement.gv");  	wr.writeFile (g' false);  	if (!wr.createPng (input [5]))  		writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  	break;  case "-d":  case "-D":  	Writer wr1 = new Writer (input [5]);  	wr1.writeFile (g' true);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	Writer wr = new Writer ("replacement.gv");  	wr.writeFile (g' false);  	if (!wr.createPng (input [5]))  		writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  	break;  case "-d":  case "-D":  	Writer wr1 = new Writer (input [5]);  	wr1.writeFile (g' true);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: if (!wr.createPng (input [5]))  	writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	findMinSet (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSet (input [5]' Output.DOT);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	findMinSet (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSet (input [5]' Output.DOT);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	findMinSet (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSet (input [5]' Output.DOT);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: findMinSet (input [5]' Output.PNG);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: findMinSet (input [5]' Output.DOT);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	findMinSetAll (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSetAll (input [5]' Output.DOT);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	findMinSetAll (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSetAll (input [5]' Output.DOT);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: switch (input [4]) {  case "-p":  case "-P":  	findMinSetAll (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSetAll (input [5]' Output.DOT);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: findMinSetAll (input [5]' Output.PNG);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following statement contains a magic number: findMinSetAll (input [5]' Output.DOT);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: fileName = input [3];  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if ((fileName.Substring (fileName.Length - 3).ToLower () != "dot") && fileName.Substring (fileName.Length - 2).ToLower () != "gv")  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if ((fileName.Substring (fileName.Length - 3).ToLower () != "dot") && fileName.Substring (fileName.Length - 2).ToLower () != "gv")  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if ((fileName.Substring (fileName.Length - 3).ToLower () != "dot") && fileName.Substring (fileName.Length - 2).ToLower () != "gv")  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: if (!((input [4].ToLower () == "-p" && input [5].Substring (input [5].Length - 3).ToLower () == "png") || (input [4].ToLower () == "-d" && input [5].Substring (input [5].Length - 3).ToLower () == "dot")))  	return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: return -4;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: switch (readFile ()) {  case -2:  	// error format in DOT  	return -1;  case -1:  	// error opening of file  	return -3;  case 0:  	cmdLineFourthArgument (analyse' input);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: switch (readFile ()) {  case -2:  	// error format in DOT  	return -1;  case -1:  	// error opening of file  	return -3;  case 0:  	cmdLineFourthArgument (analyse' input);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following statement contains a magic number: return -3;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_SizeChanged,The following statement contains a magic number: if (myCanvas.Height < this.Height - 27)  	myCanvas.Height = this.Height - 27;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_SizeChanged,The following statement contains a magic number: if (myCanvas.Height < this.Height - 27)  	myCanvas.Height = this.Height - 27;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_SizeChanged,The following statement contains a magic number: myCanvas.Height = this.Height - 27;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_SizeChanged,The following statement contains a magic number: if (myCanvas.Width < this.Width - 18)  	myCanvas.Width = this.Width;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_SizeChanged,The following statement contains a magic number: myScroll.Width = this.Width - 18;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_SizeChanged,The following statement contains a magic number: myScroll.Height = this.Height - 63;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,showGraph,The following statement contains a magic number: switch (readFile ()) {  case 0:  	g.analyse ();  	drawGraph ();  	MenuItem_CreatePng.IsEnabled = true;  	MenuItem_Mark.IsEnabled = true;  	MenuItem_MinSet.IsEnabled = true;  	MenuItem_Save.IsEnabled = true;  	MenuItem_Unmark.IsEnabled = true;  	MenuItem_Properties.IsEnabled = true;  	MenuItem_MinSet2.IsEnabled = true;  	break;  case -1:  	MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	break;  case -2:  	MessageBox.Show ("Error format in DOT"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,readFile,The following statement contains a magic number: switch (f.readFile ()) {  case -2:  	return -2;  case -1:  	return -1;  case 0:  	if (f.parseLines (ref g) == -1)  		return -2;  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,readFile,The following statement contains a magic number: switch (f.readFile ()) {  case -2:  	return -2;  case -1:  	return -1;  case 0:  	if (f.parseLines (ref g) == -1)  		return -2;  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,readFile,The following statement contains a magic number: switch (f.readFile ()) {  case -2:  	return -2;  case -1:  	return -1;  case 0:  	if (f.parseLines (ref g) == -1)  		return -2;  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,readFile,The following statement contains a magic number: return -2;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,readFile,The following statement contains a magic number: if (f.parseLines (ref g) == -1)  	return -2;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,readFile,The following statement contains a magic number: return -2;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (openDialog ("TXT files (*.txt)|*.txt") == true) {  	clearAll ();  	List<string> parts = new List<string> (fileName.Split ('\\'));  	string dotName = fileName.Remove (fileName.LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (fileName' dotName);  	int count = myParser.parse ();  	if (count == -1) {  		MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	}  	else if (count == -2)  		System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  	else if (count != -2) {  		fileName = dotName.Insert (dotName.Length - 4' "1");  		// for change on correct size of window. Also change Scrollviewers.  		this.myCanvas.Height = 0;  		this.myCanvas.Width = 0;  		Analysis_StateChanged (null' null);  		Analysis_SizeChanged (null' null);  		showGraph ();  		System.IO.File.Delete (fileName);  		for (int j = 2; j <= count; j++) {  			string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  			MainWindow window = new MainWindow (nextFile);  			System.IO.File.Delete (nextFile);  			window.Show ();  		}  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (openDialog ("TXT files (*.txt)|*.txt") == true) {  	clearAll ();  	List<string> parts = new List<string> (fileName.Split ('\\'));  	string dotName = fileName.Remove (fileName.LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (fileName' dotName);  	int count = myParser.parse ();  	if (count == -1) {  		MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	}  	else if (count == -2)  		System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  	else if (count != -2) {  		fileName = dotName.Insert (dotName.Length - 4' "1");  		// for change on correct size of window. Also change Scrollviewers.  		this.myCanvas.Height = 0;  		this.myCanvas.Width = 0;  		Analysis_StateChanged (null' null);  		Analysis_SizeChanged (null' null);  		showGraph ();  		System.IO.File.Delete (fileName);  		for (int j = 2; j <= count; j++) {  			string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  			MainWindow window = new MainWindow (nextFile);  			System.IO.File.Delete (nextFile);  			window.Show ();  		}  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (openDialog ("TXT files (*.txt)|*.txt") == true) {  	clearAll ();  	List<string> parts = new List<string> (fileName.Split ('\\'));  	string dotName = fileName.Remove (fileName.LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (fileName' dotName);  	int count = myParser.parse ();  	if (count == -1) {  		MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	}  	else if (count == -2)  		System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  	else if (count != -2) {  		fileName = dotName.Insert (dotName.Length - 4' "1");  		// for change on correct size of window. Also change Scrollviewers.  		this.myCanvas.Height = 0;  		this.myCanvas.Width = 0;  		Analysis_StateChanged (null' null);  		Analysis_SizeChanged (null' null);  		showGraph ();  		System.IO.File.Delete (fileName);  		for (int j = 2; j <= count; j++) {  			string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  			MainWindow window = new MainWindow (nextFile);  			System.IO.File.Delete (nextFile);  			window.Show ();  		}  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (openDialog ("TXT files (*.txt)|*.txt") == true) {  	clearAll ();  	List<string> parts = new List<string> (fileName.Split ('\\'));  	string dotName = fileName.Remove (fileName.LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (fileName' dotName);  	int count = myParser.parse ();  	if (count == -1) {  		MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	}  	else if (count == -2)  		System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  	else if (count != -2) {  		fileName = dotName.Insert (dotName.Length - 4' "1");  		// for change on correct size of window. Also change Scrollviewers.  		this.myCanvas.Height = 0;  		this.myCanvas.Width = 0;  		Analysis_StateChanged (null' null);  		Analysis_SizeChanged (null' null);  		showGraph ();  		System.IO.File.Delete (fileName);  		for (int j = 2; j <= count; j++) {  			string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  			MainWindow window = new MainWindow (nextFile);  			System.IO.File.Delete (nextFile);  			window.Show ();  		}  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (openDialog ("TXT files (*.txt)|*.txt") == true) {  	clearAll ();  	List<string> parts = new List<string> (fileName.Split ('\\'));  	string dotName = fileName.Remove (fileName.LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (fileName' dotName);  	int count = myParser.parse ();  	if (count == -1) {  		MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	}  	else if (count == -2)  		System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  	else if (count != -2) {  		fileName = dotName.Insert (dotName.Length - 4' "1");  		// for change on correct size of window. Also change Scrollviewers.  		this.myCanvas.Height = 0;  		this.myCanvas.Width = 0;  		Analysis_StateChanged (null' null);  		Analysis_SizeChanged (null' null);  		showGraph ();  		System.IO.File.Delete (fileName);  		for (int j = 2; j <= count; j++) {  			string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  			MainWindow window = new MainWindow (nextFile);  			System.IO.File.Delete (nextFile);  			window.Show ();  		}  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (openDialog ("TXT files (*.txt)|*.txt") == true) {  	clearAll ();  	List<string> parts = new List<string> (fileName.Split ('\\'));  	string dotName = fileName.Remove (fileName.LastIndexOf ('.'));  	dotName += ".dot";  	while (System.IO.File.Exists (dotName))  		dotName = dotName.Insert (dotName.Length - 4' "1");  	System.IO.FileStream fs = System.IO.File.Create (dotName);  	fs.Close ();  	Parser myParser = new Parser (fileName' dotName);  	int count = myParser.parse ();  	if (count == -1) {  		MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	}  	else if (count == -2)  		System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  	else if (count != -2) {  		fileName = dotName.Insert (dotName.Length - 4' "1");  		// for change on correct size of window. Also change Scrollviewers.  		this.myCanvas.Height = 0;  		this.myCanvas.Width = 0;  		Analysis_StateChanged (null' null);  		Analysis_SizeChanged (null' null);  		showGraph ();  		System.IO.File.Delete (fileName);  		for (int j = 2; j <= count; j++) {  			string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  			MainWindow window = new MainWindow (nextFile);  			System.IO.File.Delete (nextFile);  			window.Show ();  		}  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: while (System.IO.File.Exists (dotName))  	dotName = dotName.Insert (dotName.Length - 4' "1");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: dotName = dotName.Insert (dotName.Length - 4' "1");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -1) {  	MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  }  else if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -1) {  	MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  }  else if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -1) {  	MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  }  else if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -1) {  	MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  }  else if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -1) {  	MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  }  else if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count == -2)  	System.Windows.MessageBox.Show ("Error format in CAS+"' "Error"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Error);  else if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: if (count != -2) {  	fileName = dotName.Insert (dotName.Length - 4' "1");  	// for change on correct size of window. Also change Scrollviewers.  	this.myCanvas.Height = 0;  	this.myCanvas.Width = 0;  	Analysis_StateChanged (null' null);  	Analysis_SizeChanged (null' null);  	showGraph ();  	System.IO.File.Delete (fileName);  	for (int j = 2; j <= count; j++) {  		string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  		MainWindow window = new MainWindow (nextFile);  		System.IO.File.Delete (nextFile);  		window.Show ();  	}  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: fileName = dotName.Insert (dotName.Length - 4' "1");  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: for (int j = 2; j <= count; j++) {  	string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  	MainWindow window = new MainWindow (nextFile);  	System.IO.File.Delete (nextFile);  	window.Show ();  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,OpenProtocol_Click,The following statement contains a magic number: for (int j = 2; j <= count; j++) {  	string nextFile = dotName.Insert (dotName.Length - 4' j.ToString ());  	MainWindow window = new MainWindow (nextFile);  	System.IO.File.Delete (nextFile);  	window.Show ();  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,findMinSet,The following statement contains a magic number: for (int k = 1; k <= input.Count; k++)  	if (g.findCombination (k' ref input' ref attack' ref file' value) == 2) {  		g.uncompromiteAll ();  		k = input.Count;  		found = true;  	}  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,findMinSet,The following statement contains a magic number: if (g.findCombination (k' ref input' ref attack' ref file' value) == 2) {  	g.uncompromiteAll ();  	k = input.Count;  	found = true;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.Y * 96 / 72 > myCanvas.Height) {  	myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.Y * 96 / 72 > myCanvas.Height) {  	myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.Y * 96 / 72 > myCanvas.Height) {  	myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.Y * 96 / 72 > myCanvas.Height) {  	myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.Y * 96 / 72 > myCanvas.Height) {  	myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: myCanvas.Height = (n.V.Y * 96 / 72) + n.V.Height * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.X * 96 / 72 > myCanvas.Width) {  	myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.X * 96 / 72 > myCanvas.Width) {  	myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.X * 96 / 72 > myCanvas.Width) {  	myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.X * 96 / 72 > myCanvas.Width) {  	myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: if (n.V.X * 96 / 72 > myCanvas.Width) {  	myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: myCanvas.Width = (n.V.X * 96 / 72) + n.V.Width * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: bor.CornerRadius = new System.Windows.CornerRadius (360);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: bor.Width = n.V.Width * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: bor.Height = n.V.Height * 96;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: bor.BorderThickness = new System.Windows.Thickness (2);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: txt.FontSize = 20;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: Canvas.SetTop (bor' (n.V.Y * 96 / 72) - (bor.Height / 2));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: Canvas.SetTop (bor' (n.V.Y * 96 / 72) - (bor.Height / 2));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: Canvas.SetTop (bor' (n.V.Y * 96 / 72) - (bor.Height / 2));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: Canvas.SetLeft (bor' (n.V.X * 96 / 72) - (bor.Width / 2));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: Canvas.SetLeft (bor' (n.V.X * 96 / 72) - (bor.Width / 2));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following statement contains a magic number: Canvas.SetLeft (bor' (n.V.X * 96 / 72) - (bor.Width / 2));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pthFigure.StartPoint = new Point (e.Vertices [0].X * 96 / 72' e.Vertices [0].Y * 96 / 72);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pthFigure.StartPoint = new Point (e.Vertices [0].X * 96 / 72' e.Vertices [0].Y * 96 / 72);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pthFigure.StartPoint = new Point (e.Vertices [0].X * 96 / 72' e.Vertices [0].Y * 96 / 72);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pthFigure.StartPoint = new Point (e.Vertices [0].X * 96 / 72' e.Vertices [0].Y * 96 / 72);  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: for (int i = 1; i < count - 1; i++) {  	pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: for (int i = 1; i < count - 1; i++) {  	pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: for (int i = 1; i < count - 1; i++) {  	pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: for (int i = 1; i < count - 1; i++) {  	pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: pbzSeg.Points.Add (new Point (e.Vertices [i].X * 96 / 72' e.Vertices [i].Y * 96 / 72));  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.X1 = e.Vertices [count - 2].X * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.X1 = e.Vertices [count - 2].X * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.X1 = e.Vertices [count - 2].X * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.Y1 = e.Vertices [count - 2].Y * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.Y1 = e.Vertices [count - 2].Y * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.Y1 = e.Vertices [count - 2].Y * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.X2 = e.Vertices [count - 1].X * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.X2 = e.Vertices [count - 1].X * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.Y2 = e.Vertices [count - 1].Y * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawEdge,The following statement contains a magic number: arrowLine.Y2 = e.Vertices [count - 1].Y * 96 / 72;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_StateChanged,The following statement contains a magic number: switch (this.WindowState) {  case System.Windows.WindowState.Maximized:  	this.Width = System.Windows.SystemParameters.PrimaryScreenWidth + 10;  	this.Height = System.Windows.SystemParameters.PrimaryScreenHeight + 10;  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_StateChanged,The following statement contains a magic number: switch (this.WindowState) {  case System.Windows.WindowState.Maximized:  	this.Width = System.Windows.SystemParameters.PrimaryScreenWidth + 10;  	this.Height = System.Windows.SystemParameters.PrimaryScreenHeight + 10;  	break;  }  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_StateChanged,The following statement contains a magic number: this.Width = System.Windows.SystemParameters.PrimaryScreenWidth + 10;  
Magic Number,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_StateChanged,The following statement contains a magic number: this.Height = System.Windows.SystemParameters.PrimaryScreenHeight + 10;  
Missing Default,CAG,PropertiesGraph,C:\repos\Strigimar_CAG\CAG\CAG\PropertiesGraph.xaml.cs,addNodes,The following switch statement is missing a default case: switch (node.Set) {  case Set.Attack:  	com.Text = "A";  	break;  case Set.Input:  	com.Text = "D";  	break;  case Set.Both:  	com.Text = "A/D";  	break;  }  
Missing Default,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,splitComma,The following switch statement is missing a default case: switch (c) {  case ''':  	if (bracket == 0) {  		splitString.Add (part);  		part = part.Remove (0);  		add = false;  	}  	break;  case '[':  case '(':  case '{':  	bracket++;  	break;  case '}':  case ']':  case ')':  	bracket--;  	break;  }  
Missing Default,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following switch statement is missing a default case: switch (keys [key]) {  case typKey.PUBLIC:  	key += "_priv";  	break;  case typKey.PRIVATE:  	key += "_pub";  	break;  }  
Missing Default,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,parsePartMessage,The following switch statement is missing a default case: switch (keys [key]) {  case typKey.PRIVATE:  	key += "_priv";  	break;  case typKey.PUBLIC:  	key += "_pub";  	break;  }  
Missing Default,CAG,Parser,C:\repos\Strigimar_CAG\CAG\CAG\Parser.cs,writeDecrypt,The following switch statement is missing a default case: switch (keys [pomKey]) {  case typKey.NONE:  case typKey.SYMMETRIC:  	line += key + "'";  	break;  case typKey.PUBLIC:  case typKey.PRIVATE:  	if (key.Contains ("_pub")) {  		key = key.Remove (key.Length - 4);  		line += key + "_priv'";  		writeDot.WriteLine (key + "_priv[type=private_key];");  	}  	else {  		key = key.Remove (key.Length - 5);  		line += key + "_pub'";  		writeDot.WriteLine (key + "_pub[type=public_key];");  	}  	break;  }  
Missing Default,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following switch statement is missing a default case: switch (value) {  case "red":  	unit.Compromised = Compromise.EASY;  	break;  case "orange":  	unit.Compromised = Compromise.HARD;  	break;  case "green":  	unit.Compromised = Compromise.IMPOSSIBLE;  	break;  }  
Missing Default,CAG,Reader,C:\repos\Strigimar_CAG\CAG\CAG\Reader.cs,parseProperty,The following switch statement is missing a default case: switch (value) {  case "D":  	unit.Set = Set.Input;  	break;  case "A":  	unit.Set = Set.Attack;  	break;  case "AD":  case "DA":  	unit.Set = Set.Both;  	break;  }  
Missing Default,CAG,Writer,C:\repos\Strigimar_CAG\CAG\CAG\Writer.cs,createOutput,The following switch statement is missing a default case: switch (n.Set) {  case Set.Attack:  	node += "A";  	break;  case Set.Input:  	node += "D";  	break;  case Set.Both:  	node += "AD";  	break;  }  
Missing Default,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,setCompromiseNodes,The following switch statement is missing a default case: switch (compr.Value) {  case Compromise.EASY:  	compr.Key.Color = "red";  	compr.Key.Compromised = Compromise.EASY;  	break;  case Compromise.HARD:  	compr.Key.Color = "orange";  	compr.Key.Compromised = Compromise.HARD;  	break;  }  
Missing Default,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,compromiteNode,The following switch statement is missing a default case: switch (color) {  case "orange":  	n.Compromised = Compromise.HARD;  	addCompromisedNode (n);  	break;  case "red":  	n.Compromised = Compromise.EASY;  	addCompromisedNode (n);  	break;  case "green":  	n.Compromised = Compromise.IMPOSSIBLE;  	deleteCompromisedNode (n);  	break;  }  
Missing Default,CAG,Graph,C:\repos\Strigimar_CAG\CAG\CAG\Graph.cs,writeFile,The following switch statement is missing a default case: switch (value) {  case MainWindow.Output.PNG:  	Writer wr1 = new Writer ("replacement" + numberOfFound.ToString () + ".gv");  	wr1.writeFile (this' false);  	wr1.createPng (file);  	break;  case MainWindow.Output.DOT:  	Writer wr2 = new Writer (file);  	wr2.writeFile (this' true);  	break;  case MainWindow.Output.NOTHING:  	if (String.IsNullOrEmpty (file))  		createPngDialog (ref file);  	else {  		Writer wr3 = new Writer ("replacement" + numberOfFound.ToString () + ".gv");  		wr3.writeFile (this' false);  		wr3.createPng (file);  	}  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,MainWindow,The following switch statement is missing a default case: switch (parseInput (input)) {  case -4:  	if ((input [1].CompareTo ("-r") == 0 || input [1].CompareTo ("-R") == 0) && input.Length == 2) {  		InitializeComponent ();  		return;  	}  	else  		writeToCommandLine ("Error - bad input format");  	break;  case -3:  	writeToCommandLine ("Error - file wasn't found or couldn't be opened");  	break;  case -2:  	writeToCommandLine ("Error - bad format in CAS+ protocol");  	break;  case -1:  	writeToCommandLine ("Error - bad format in DOT");  	break;  case 1:  	return;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineProtocol,The following switch statement is missing a default case: switch (readFile ()) {  case -2:  	return -1;  case -1:  	return -3;  case 0:  	cmdLineFourthArgument (analyse' input);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following switch statement is missing a default case: switch (analyse) {  case Analyse.ANALYSE: {  	g.analyse ();  	switch (input [4]) {  	case "-p":  	case "-P":  		Writer wr = new Writer ("replacement.gv");  		wr.writeFile (g' false);  		if (!wr.createPng (input [5]))  			writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  		break;  	case "-d":  	case "-D":  		Writer wr1 = new Writer (input [5]);  		wr1.writeFile (g' true);  		break;  	}  	break;  }  case Analyse.FIND_MIN_DEFINED: {  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSet (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSet (input [5]' Output.DOT);  		break;  	}  	break;  }  case Analyse.FIND_MIN_ALL:  	switch (input [4]) {  	case "-p":  	case "-P":  		findMinSetAll (input [5]' Output.PNG);  		break;  	case "-d":  	case "-D":  		findMinSetAll (input [5]' Output.DOT);  		break;  	}  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following switch statement is missing a default case: switch (input [4]) {  case "-p":  case "-P":  	Writer wr = new Writer ("replacement.gv");  	wr.writeFile (g' false);  	if (!wr.createPng (input [5]))  		writeToCommandLine ("Incorrect path to file. Probably name of some folder is bad. Please rewrite old names on new names without spaces.");  	break;  case "-d":  case "-D":  	Writer wr1 = new Writer (input [5]);  	wr1.writeFile (g' true);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following switch statement is missing a default case: switch (input [4]) {  case "-p":  case "-P":  	findMinSet (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSet (input [5]' Output.DOT);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineFourthArgument,The following switch statement is missing a default case: switch (input [4]) {  case "-p":  case "-P":  	findMinSetAll (input [5]' Output.PNG);  	break;  case "-d":  case "-D":  	findMinSetAll (input [5]' Output.DOT);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,cmdLineDot,The following switch statement is missing a default case: switch (readFile ()) {  case -2:  	// error format in DOT  	return -1;  case -1:  	// error opening of file  	return -3;  case 0:  	cmdLineFourthArgument (analyse' input);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,showGraph,The following switch statement is missing a default case: switch (readFile ()) {  case 0:  	g.analyse ();  	drawGraph ();  	MenuItem_CreatePng.IsEnabled = true;  	MenuItem_Mark.IsEnabled = true;  	MenuItem_MinSet.IsEnabled = true;  	MenuItem_Save.IsEnabled = true;  	MenuItem_Unmark.IsEnabled = true;  	MenuItem_Properties.IsEnabled = true;  	MenuItem_MinSet2.IsEnabled = true;  	break;  case -1:  	MessageBox.Show ("Error file - can't find or is already open!"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	break;  case -2:  	MessageBox.Show ("Error format in DOT"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,readFile,The following switch statement is missing a default case: switch (f.readFile ()) {  case -2:  	return -2;  case -1:  	return -1;  case 0:  	if (f.parseLines (ref g) == -1)  		return -2;  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,findMinSet,The following switch statement is missing a default case: switch (n.Set) {  case Set.Input:  	input.Add (n);  	break;  case Set.Attack:  	attack.Add (n);  	break;  case Set.Both:  	attack.Add (n);  	input.Add (n);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,drawNode,The following switch statement is missing a default case: switch (n.Color) {  case "red":  	n.Compromised = Compromise.EASY;  	g.addCompromisedNode (n);  	break;  case "orange":  	n.Compromised = Compromise.HARD;  	g.addCompromisedNode (n);  	break;  }  
Missing Default,CAG,MainWindow,C:\repos\Strigimar_CAG\CAG\CAG\MainWindow.xaml.cs,Analysis_StateChanged,The following switch statement is missing a default case: switch (this.WindowState) {  case System.Windows.WindowState.Maximized:  	this.Width = System.Windows.SystemParameters.PrimaryScreenWidth + 10;  	this.Height = System.Windows.SystemParameters.PrimaryScreenHeight + 10;  	break;  }  
