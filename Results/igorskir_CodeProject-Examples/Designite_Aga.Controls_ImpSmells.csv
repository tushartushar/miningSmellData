Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Aga.Controls.Tree,TreeListItem,C:\repos\igorskir_CodeProject-Examples\soucre\2. Controls\TreeListViewSamples\WPF_TreeListiVew_Russ_RegEdit\Aga.Controls\Tree\TreeListItem.cs,OnKeyDown,Cyclomatic complexity of the method is 23
Complex Method,Aga.Controls.Tree,TreeNode,C:\repos\igorskir_CodeProject-Examples\soucre\2. Controls\TreeListViewSamples\WPF_TreeListiVew_Russ_RegEdit\Aga.Controls\Tree\TreeNode.cs,ChildrenChanged,Cyclomatic complexity of the method is 15
Missing Default,Aga.Controls.Tree,TreeListItem,C:\repos\igorskir_CodeProject-Examples\soucre\2. Controls\TreeListViewSamples\WPF_TreeListiVew_Russ_RegEdit\Aga.Controls\Tree\TreeListItem.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.Right:  	e.Handled = true;  	if (!Node.IsExpanded) {  		Node.IsExpanded = true;  		ChangeFocus (Node);  	}  	else if (Node.Children.Count > 0)  		ChangeFocus (Node.Children [0]);  	break;  case Key.Left:  	e.Handled = true;  	if (Node.IsExpanded && Node.IsExpandable) {  		Node.IsExpanded = false;  		ChangeFocus (Node);  	}  	else  		ChangeFocus (Node.Parent);  	break;  case Key.Subtract:  	e.Handled = true;  	Node.IsExpanded = false;  	ChangeFocus (Node);  	break;  case Key.Add:  	e.Handled = true;  	Node.IsExpanded = true;  	ChangeFocus (Node);  	break;  }  
Missing Default,Aga.Controls.Tree,TreeNode,C:\repos\igorskir_CodeProject-Examples\soucre\2. Controls\TreeListViewSamples\WPF_TreeListiVew_Russ_RegEdit\Aga.Controls\Tree\TreeNode.cs,ChildrenChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	if (e.NewItems != null) {  		int index = e.NewStartingIndex;  		int rowIndex = Tree.Rows.IndexOf (this);  		foreach (object obj in e.NewItems) {  			Tree.InsertNewNode (this' obj' rowIndex' index);  			index++;  		}  	}  	break;  case NotifyCollectionChangedAction.Remove:  	if (Children.Count > e.OldStartingIndex)  		RemoveChildAt (e.OldStartingIndex);  	break;  case NotifyCollectionChangedAction.Move:  case NotifyCollectionChangedAction.Replace:  case NotifyCollectionChangedAction.Reset:  	while (Children.Count > 0)  		RemoveChildAt (0);  	Tree.CreateChildrenNodes (this);  	break;  }  
