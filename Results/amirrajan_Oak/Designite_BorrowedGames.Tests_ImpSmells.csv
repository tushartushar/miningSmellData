Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BorrowedGames.Tests.Controllers,wanted_games,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_GamesController\wanted_games.cs,retrieving_wanted_games,The length of the statement  "                (WantedGames().First().DeleteWant as string).should_be("/Games/DeleteWant?gameId=" + mirrorsEdgeId + "&followingId=" + friendId); " is 129.
Long Statement,BorrowedGames.Tests.Controllers,describe_HomeController,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_HomeController.cs,updating_user_handle,The length of the statement  "            it["returns message stating that handle has been updated"] = () => StatusMessage().should_be("Your handle has been updated to " + handle + "."); " is 144.
Long Statement,BorrowedGames.Tests.Controllers,describe_HomeController,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_HomeController.cs,updating_user_handle,The length of the statement  "                it["has no errors"] = () => (result.Data.Message as string).should_be("Your handle has been updated to " + handle + "."); " is 121.
Long Statement,BorrowedGames.Tests.Controllers.describe_GamesController,giving_game,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_GamesController\giving_game.cs,a_game_has_been_requested,The length of the statement  "                    ((string)FirstRequestedGame(gearsOfWarId' friendId).GameReturned).should_be("/Games/GameReturned?gameId=" + gearsOfWarId + "&byUserId=" + friendId); " is 148.
Long Statement,BorrowedGames.Tests.Controllers.describe_GamesController,requested_games,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_GamesController\requested_games.cs,retrieving_requested_games,The length of the statement  "                    ((string)FirstRequestedGame().GiveGame).should_be("/Games/GiveGame?gameId=" + mirrorsEdgeId + "&toUserId=" + FirstRequestedGame().RequestedBy.Id as string); " is 156.
Long Statement,BorrowedGames.Tests.Controllers.describe_GamesController,returning_game,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_GamesController\returning_game.cs,a_game_has_been_given,The length of the statement  "                ((string)wantedGames.First().ReturnGame).should_be("/Games/ReturnGame?gameId=" + gearsOfWarId + "&toUserId=" + currentUserId); " is 126.
Magic Number,BorrowedGames.Tests.Controllers,describe_LibraryController,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_LibraryController.cs,adding_games_to_library,The following statement contains a magic number: context["friends are following the person who added the game"] = () =>              {                  before = () =>                  {                      GivenUserIsFollowing(anotherUser' user);                      GivenUserIsFollowing(yetAnotherUser' user);                  };                    it["notification emails are sent to followers"] = () =>                  {                      var email = emailsSent[0];                        email.To.should_be(User(anotherUser).Email as string);                        var subject = User(user).Handle as string + " added Final Fantasy 7 (PS2) to his library.";                        email.Subject.should_be(subject);                        email.Body.should_be(subject + Environment.NewLine + "Go check it out at http://borrowedgames.com/");                        email = emailsSent[1];                        email.To.should_be(User(yetAnotherUser).Email as string);                        emailsSent.Count.should_be(2);                  };                    context["user adds another game the same day"' "wip"] = () =>                  {                      before = () => finalFantasyTactics = GivenGame("Final Fantasy Tactics"' "PS2");                        act = () =>                      {                          emailsSent.Count.should_be(2);                          emailsSent.Clear();                          controller.Add(new { gameId = finalFantasyTactics });                      };                        it["a subsequent email for that day is not sent"] = () =>                          emailsSent.Count.should_be(0);                  };              };
Magic Number,BorrowedGames.Tests.Controllers,describe_LibraryController,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_LibraryController.cs,adding_games_to_library,The following statement contains a magic number: context["friends are following the person who added the game"] = () =>              {                  before = () =>                  {                      GivenUserIsFollowing(anotherUser' user);                      GivenUserIsFollowing(yetAnotherUser' user);                  };                    it["notification emails are sent to followers"] = () =>                  {                      var email = emailsSent[0];                        email.To.should_be(User(anotherUser).Email as string);                        var subject = User(user).Handle as string + " added Final Fantasy 7 (PS2) to his library.";                        email.Subject.should_be(subject);                        email.Body.should_be(subject + Environment.NewLine + "Go check it out at http://borrowedgames.com/");                        email = emailsSent[1];                        email.To.should_be(User(yetAnotherUser).Email as string);                        emailsSent.Count.should_be(2);                  };                    context["user adds another game the same day"' "wip"] = () =>                  {                      before = () => finalFantasyTactics = GivenGame("Final Fantasy Tactics"' "PS2");                        act = () =>                      {                          emailsSent.Count.should_be(2);                          emailsSent.Clear();                          controller.Add(new { gameId = finalFantasyTactics });                      };                        it["a subsequent email for that day is not sent"] = () =>                          emailsSent.Count.should_be(0);                  };              };
Magic Number,BorrowedGames.Tests.Controllers.describe_GamesController,giving_game,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Controllers\describe_GamesController\giving_game.cs,a_game_has_been_requested,The following statement contains a magic number: context["the requested game has been given"] = () =>              {                  act = () => controller.GiveGame(gearsOfWarId' friendId);                    it["the games return date is set to one month from today"] = () =>                  {                      ((DateTime?)FirstRequestedGame(gearsOfWarId' friendId).ReturnDate).should_be(OneMonthFromToday());                      ((int)FirstRequestedGame(gearsOfWarId' friendId).DaysOut).should_be(0);                      ((DateTime?)FirstWantedGame(friendId).ReturnDate).should_be(OneMonthFromToday());                      ((int)FirstWantedGame(friendId).DaysLeft).should_be_greater_than(27);                  };                    it["the game is considered borrowed"] = () =>                      ((int)FirstBorrowedGame(friendId).Id).should_be(gearsOfWarId);                                    it["requested game cannot be given again (hypermedia link is removed)"] = () =>                      ((bool)FirstRequestedGame(gearsOfWarId' friendId).RespondsTo("GiveGame")).should_be_false();                    it["the requested game can be marked as returned by the lender"] = () =>                      ((string)FirstRequestedGame(gearsOfWarId' friendId).GameReturned).should_be("/Games/GameReturned?gameId=" + gearsOfWarId + "&byUserId=" + friendId);                    it["the user who gave the game doesn't have any borrowed games"] = () =>                      BorrowedGames(currentUserId).Count().should_be(0);              };
Magic Number,BorrowedGames.Tests.Models.describe_User,retrieving_preferred_games,D:\research\architectureSmells\repos\amirrajan_Oak\Sample Apps\BorrowedGames\BorrowedGames.Tests\Models\describe_User\retrieving_preferred_games.cs,the_same_preferred_games_exist_accross_multiple_friends,The following statement contains a magic number: it["contains an entry for each game"] = () =>                  PreferredGames().Count().should_be(2);
