Implementation smell,Namespace,Class,File,Method,Description
Long Method,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The method has 118 lines of code.
Long Method,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The method has 119 lines of code.
Long Statement,Oak.Tests,describe_DynamicForm,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicForm.cs,creating_element_meta_data_for_a_dynamic_model,The length of the statement  "                it["value is not considered as part of the element meta data hash (used by OakForm.cshtml)"] = () => result.Hash.ContainsKey("value").should_be_false(); " is 152.
Long Statement,Oak.Tests,describe_DynamicForm,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicForm.cs,accessing_a_property_that_doesnt_exist_on_a_regular_class,The length of the statement  "                expect<InvalidOperationException>("The entity that you passed into DynamicForm does not contain the property called LastName."' () => result = form.LastName); " is 158.
Long Statement,Oak.Tests,describe_DynamicForm,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicForm.cs,accessing_a_property_that_doesnt_exist_on_a_Gemini,The length of the statement  "                expect<InvalidOperationException>("The Gemini that you passed into DynamicForm does not contain the property called LastName."' () => result = form.LastName); " is 158.
Long Statement,Oak.Tests,describe_DynamicForm,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicForm.cs,concatenating_html_attributes,The length of the statement  "                expect<InvalidOperationException>("The Gemini that you passed into DynamicForm does not contain the property called LastName."' () => result = form.LastName()); " is 160.
Long Statement,Oak.Tests,describe_DynamicForm,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicForm.cs,concatenating_html_attributes,The length of the statement  "                it["id property should not be contained in hash (used by OakForm.cshtml)"] = () => result.Hash.ContainsKey("id").should_be_false(); " is 131.
Long Statement,Oak.Tests,describe_JsonToDynamic,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_JsonToDynamic.cs,converting_json_string_to_dynamic,The length of the statement  "            context["json array of complex types { result: [ { FirstName: 'Jane'' LastName: 'Doe' }' { FirstName: 'John'' LastName: 'Smith' } ] }"] = () => " is 143.
Long Statement,Oak.Tests,describe_JsonToDynamic,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_JsonToDynamic.cs,converting_json_string_to_dynamic,The length of the statement  "                before = () => jsonString = "{ result: [ { FirstName: 'Jane'' LastName: 'Doe' }' { FirstName: 'John'' LastName: 'Smith' } ] }"; " is 127.
Long Statement,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_many_help,The length of the statement  "                        ex.Message.should_contain("Table [BlogsComments] with schema [Id' BlogId' CommentId] doesn't exist (HasManyAndBelongsTo)."); " is 124.
Long Statement,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_many_and_belongs_to_help,The length of the statement  "                        ex.Message.should_contain("Table [CoursesStudents] with schema [Id' CourseId' StudentId] doesn't exist (HasManyAndBelongsTo)."); " is 128.
Long Statement,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_many_and_belongs_to_help,The length of the statement  "                        ex.Message.should_contain("Table [CoursesStudents] with schema [Id' CourseId' StudentId] doesn't exist (HasManyAndBelongsTo)."); " is 128.
Long Statement,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_one_through,The length of the statement  "                        ex.Message.should_contain("Table [LocationsPeeps] with schema [Id' LocationId' PeepId] doesn't exist (HasOneThrough)."); " is 120.
Long Statement,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_one_through,The length of the statement  "                        ex.Message.should_contain("Table [LocationsPeeps] with schema [Id' LocationId' PeepId] doesn't exist (HasOneThrough)."); " is 120.
Long Statement,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to_with_duplicates,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to_with_duplicates.cs,describe_track_back_property,The length of the statement  "                seed.CreateTable("Tasks"' seed.Id()' new { Description = "nvarchar(255)" }' new { RabbitId = "int" }).ExecuteNonQuery(); " is 120.
Long Statement,Oak.Tests.describe_DynamicModel,saving_model_that_contains_an_identity_column,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\saving_dynamic_model.cs,inserting_model_with_invalid_props,The length of the statement  "                    ex.Message.should_contain("override the IDictionary<string' object> GetAttributesToSave(object o) method on your repository"); " is 126.
Long Statement,Oak.Tests.describe_DynamicModel,saving_model_that_contains_properties_that_dont_map_to_column,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\saving_dynamic_model.cs,inserting_model_with_invalid_props,The length of the statement  "                    ex.Message.should_contain("override the IDictionary<string' object> GetAttributesToSave(object o) method on your repository"); " is 126.
Long Statement,Oak.Tests.describe_DynamicModel,saving_model_that_contains_properties_that_dont_map_to_column,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\saving_dynamic_model.cs,updating_model_with_invalid_props,The length of the statement  "                    ex.Message.should_contain("override the IDictionary<string' object> GetAttributesToSave(object o) method on your repository"); " is 126.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation,core_behavior_for_validations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\core_behavior_for_validations.cs,specify_a_detailed_exception_is_thrown_if_the_inititalization_for_validation_fails,The length of the statement  "                ex.Message.should_contain("Validation initialization failed for class FailedValidation.  Check the Validates method on FailedValidation for a validation declaration related to this exception: "); " is 195.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation,core_validation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\core_validation.cs,describe_property_location,The length of the statement  "                it["it exists on gemini object as opposed to virtual"] = () => (book as DynamicModel).RespondsTo("id").should_be_true(); " is 120.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation,core_validation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\core_validation.cs,virtual_properties_for_validation,The length of the statement  "                it["the properties added for validation are delegates' so that they are not included in persistance by DynamicRepository"] = () => " is 130.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,LegalDocument,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\LegalDocument.cs,Validates,The length of the statement  "            yield return new Acceptance("TermsOfService") { ErrorMessage = new DynamicFunction(() => "Terms of service requires acceptance") }; " is 131.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,LegalDocumentWithAutoProps,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\LegalDocument.cs,Validates,The length of the statement  "            yield return new Acceptance("TermsOfService") { ErrorMessage = new DynamicFunction(() => "Terms of service requires acceptance") }; " is 131.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Registration,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Registration.cs,Validates,The length of the statement  "            yield return new Exclusion("UserName") { In = new[] { "admin"' "administrator" }' ErrorMessage = "Invalid user name." }; " is 120.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,RegistrationWithDeferredErrorMessage,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Registration.cs,Validates,The length of the statement  "            yield return new Exclusion("UserName") { In = new[] { "admin"' "administrator" }' ErrorMessage = new DynamicFunction(() => "Invalid user name.") }; " is 147.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,RegistrationWithAutoProperties,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Registration.cs,Validates,The length of the statement  "            yield return new Exclusion("UserName") { In = new[] { "admin"' "administrator" }' ErrorMessage = "Invalid user name." }; " is 120.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,UserWithDeferredError,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\User.cs,Validates,The length of the statement  "            yield return new Uniqueness("Email"' users) { ErrorMessage = new DynamicFunction(() => "User " + _.Email + " is taken.") }; " is 123.
Long Statement,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,User,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\User.cs,Validates,The length of the statement  "            yield return new Uniqueness("Email"' users) { ErrorMessage = new DynamicFunction(() => "User " + _.Email + " is taken.") }; " is 123.
Long Statement,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_two_objects_referencing_the_same_list,The length of the statement  "                var expected = @"{ ""people"": [ { ""name"": ""Jane Doe""' ""friends"": [ { ""name"": ""John Smith""' ""friends"": [ { ""name"": ""Jane Smith"" } ] } ] }' { ""name"": ""John Doe""' ""friends"": [ { ""name"": ""John Smith""' ""friends"": [ { ""name"": ""Jane Smith"" } ] } ] } ] }"; " is 281.
Long Statement,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_entities_with_error_collection,The length of the statement  "                var expected = @"[ { ""name"": """"' ""errors"": [ { ""key"": ""Name""' ""value"": ""Name is required."" } ] }' { ""name"": """"' ""errors"": [ { ""key"": ""Name""' ""value"": ""Name is required."" } ] } ]"; " is 207.
Long Statement,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The length of the statement  "                string expected = @"{ ""tasks"": [ { ""id"": 1' ""description"": ""bolt onto vans""' ""rabbitId"": 1' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 1' ""name"": ""Yours Truly"" } }' { ""id"": 2' ""description"": ""save the world""' ""rabbitId"": 2' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 2' ""name"": ""Hiro Protaganist"" } }' { ""id"": 3' ""description"": ""deliver pizza""' ""rabbitId"": 2' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 2' ""name"": ""Hiro Protaganist"" } }' { ""id"": 4' ""description"": ""Task: 0""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 5' ""description"": ""Task: 1""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 6' ""description"": ""Task: 2""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 7' ""description"": ""Task: 3""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 8' ""description"": ""Task: 4""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 9' ""description"": ""Task: 5""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 10' ""description"": ""Task: 6""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 11' ""description"": ""Task: 7""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 12' ""description"": ""Task: 8""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } }' { ""id"": 13' ""description"": ""Task: 9""' ""rabbitId"": 3' ""dueDate"": ""1/14/13 12:00:00 AM""' ""rabbit"": { ""id"": 3' ""name"": ""Lots"" } } ] }"; " is 2005.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The length of the statement  "                var expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6}' ""stringAsNull"": {7}' ""long"": 100' ""s"": ""property with single character"" }}" " is 233.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_gemini_to_json,The length of the statement  "                string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}" " is 155.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_dynamic_model_to_json,The length of the statement  "                string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}" " is 155.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_can_be_converted,The length of the statement  "                { new List<object> { new { Name = "Jane Doe" }' new Prototype()' new Gemini() }' true' "list containing gemini's and anonymous types" }' " is 136.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_can_be_converted,The length of the statement  "                { new List<object> { new { Name = "Jane Doe" }' "Foobar" }' false' "list containing convertable types and non convertable types" }' " is 131.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_nested_object,The length of the statement  "                string expected = @"{ ""id"": 15' ""name"": ""Mirror's Edge""' ""owner"": { ""id"": 22' ""handle"": ""@amirrajan"" } }"; " is 120.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_named_classes,The length of the statement  "                string expected = @"{ ""goal"": { ""name"": ""Goal""' ""cost"": 100' ""expense"": { ""name"": ""Expense""' ""amount"": 500 } } }"; " is 130.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,escaping_strings,The length of the statement  "                    Ticks = @"'Ticked'"' //ticks don't need to be escaped' jquery for some reason refuses to deserialize a payload if ticks are escaped when they dont need to be " is 157.
Long Statement,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,escaping_strings,The length of the statement  "                string expected = @"{ ""quotes"": ""\""Quoted\""""' ""ticks"": ""'Ticked'""' ""backSlashes"": ""c:\\Temp""' ""newLine"": ""New\r\nLine"" }"; " is 140.
Long Statement,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,when_retrieving_property_from_gemini,The length of the statement  "            it["calls value for geminied entity even if property's first letter is capilized' but underlying property is lowercase"] = () => " is 128.
Long Statement,Oak.Tests.describe_Gemini,implicitly_private_methods,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\implicitly_private_methods.cs,private_dynamic_methods_and_functions,The length of the statement  "            it["original exception is retained for private functions"] = expect<InvalidOperationException>(() => gemini.HelloException()); " is 126.
Long Statement,Oak.Tests.describe_Gemini,performance_against_nhibernate,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\performance_against_nhibernate.cs,BuildSessionFactory,The length of the statement  "                .Database(MsSqlConfiguration.MsSql2008.ConnectionString(ConfigurationManager.ConnectionStrings["OakTestsConnectionString"].ConnectionString)) " is 141.
Long Statement,Oak.Tests.describe_Gemini,setting_member,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\setting_member.cs,when_setting_property_of_gemini,The length of the statement  "            it["sets property of underlying prototype even if property's first letter is capitalized' but underlying property is lowercase"] = () => " is 136.
Empty Catch Block,Oak.Tests.describe_DynamicModel,describe_StrongParamerters,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_StrongParameterss.cs,specify_exception_is_thrown_if_mass_assignment_is_performed_on_non_permitted_parameters,The method has an empty catch block.
Empty Catch Block,Oak.Tests.describe_Seed,when_creating_table,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_creating_table.cs,primary_key_column,The method has an empty catch block.
Empty Catch Block,Oak.Tests.describe_Seed,when_creating_table,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_creating_table.cs,generating_composite_primary_keys,The method has an empty catch block.
Magic Number,Oak.Tests,core_behavior_dynamic_db,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\core_behavior_dynamic_db.cs,specify_has_many,The following statement contains a magic number: Expect(comments.Count()).to_be(2);
Magic Number,Oak.Tests,core_behavior_dynamic_db,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\core_behavior_dynamic_db.cs,specify_many_to_many,The following statement contains a magic number: Expect(student.Courses().Count()).to_be(2);
Magic Number,Oak.Tests,core_behavior_dynamic_db,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\core_behavior_dynamic_db.cs,specify_many_to_many,The following statement contains a magic number: Expect(student.Courses().Count()).to_be(2);
Magic Number,Oak.Tests,core_behavior_dynamic_db,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\core_behavior_dynamic_db.cs,specify_many_to_many,The following statement contains a magic number: Expect(course.Students().Count()).to_be(2);
Magic Number,Oak.Tests,core_behavior_dynamic_db,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\core_behavior_dynamic_db.cs,specify_eager_load_many,The following statement contains a magic number: Expect(comments.Count()).to_be(2);
Magic Number,Oak.Tests,core_behavior_dynamic_db,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\core_behavior_dynamic_db.cs,ancillary_methods_for_has_many,The following statement contains a magic number: context["[Association]Ids method provides correct values"] = () =>              {                  it["works"] = () =>                   {                      var blog = db.Blogs().Single(blogId);                        var commentsIds = blog.CommentIds();                        Expect(commentsIds.Count).to_be(2);                  };              };
Magic Number,Oak.Tests,describe_DynamicForm,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicForm.cs,creating_element_meta_data_for_a_regular_class,The following statement contains a magic number: before = () =>              {                  entity = new RegularClass                  {                      Name = "Jane Doe"'                      Age = 10                  };                    form = new DynamicForm(entity);              };
Magic Number,Oak.Tests,describe_JsonToDynamic,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_JsonToDynamic.cs,converting_json_string_to_dynamic,The following statement contains a magic number: context["root object is simple integer"] = () =>              {                  before = () => jsonString = "10";                    it["returns int"] = () => ((int)json).should_be(10);              };
Magic Number,Oak.Tests,describe_JsonToDynamic,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_JsonToDynamic.cs,converting_json_string_to_dynamic,The following statement contains a magic number: context["root object is simple double"] = () =>              {                  before = () => jsonString = "10.5";                    it["returns double"] = () => ((double)json).should_be((double)10.5);              };
Magic Number,Oak.Tests,describe_ParamsModelBinder_for_name_value_collection,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_ParamsModelBinder.cs,describe_casting_assumptions,The following statement contains a magic number: context["evaluating form collection for potential Int id candidate"] = () =>              {                  context["name ends in Id"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "123");                        it["comparing key's value with an int passes"] = () =>                          ((int)asDynamic.PersonId).should_be(123);                  };                    context["name ends in Id but isn't an int"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "123Foobar");                        it["keeps original value"] = () =>                          ((string)asDynamic.PersonId).should_be("123Foobar");                  };                    context["values with leading zero's is supplied"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "000123");                        it["converts to int"] = () =>                          ((int)asDynamic.PersonId).should_be(123);                  };                    context["name ends in ID"] = () =>                  {                      before = () => nameValueCollection.Add("PersonID"' "123");                        it["comparing key's value with an int passes"] = () =>                          ((int)asDynamic.PersonID).should_be(123);                  };                    context["name contains ID"] = () =>                  {                      before = () => nameValueCollection.Add("PersonIDFoobar"' "123");                        it["disregards conversion"] = () =>                          (asDynamic.PersonIDFoobar as string).should_be("123");                  };              };
Magic Number,Oak.Tests,describe_ParamsModelBinder_for_name_value_collection,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_ParamsModelBinder.cs,describe_casting_assumptions,The following statement contains a magic number: context["evaluating form collection for potential Int id candidate"] = () =>              {                  context["name ends in Id"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "123");                        it["comparing key's value with an int passes"] = () =>                          ((int)asDynamic.PersonId).should_be(123);                  };                    context["name ends in Id but isn't an int"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "123Foobar");                        it["keeps original value"] = () =>                          ((string)asDynamic.PersonId).should_be("123Foobar");                  };                    context["values with leading zero's is supplied"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "000123");                        it["converts to int"] = () =>                          ((int)asDynamic.PersonId).should_be(123);                  };                    context["name ends in ID"] = () =>                  {                      before = () => nameValueCollection.Add("PersonID"' "123");                        it["comparing key's value with an int passes"] = () =>                          ((int)asDynamic.PersonID).should_be(123);                  };                    context["name contains ID"] = () =>                  {                      before = () => nameValueCollection.Add("PersonIDFoobar"' "123");                        it["disregards conversion"] = () =>                          (asDynamic.PersonIDFoobar as string).should_be("123");                  };              };
Magic Number,Oak.Tests,describe_ParamsModelBinder_for_name_value_collection,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_ParamsModelBinder.cs,describe_casting_assumptions,The following statement contains a magic number: context["evaluating form collection for potential Int id candidate"] = () =>              {                  context["name ends in Id"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "123");                        it["comparing key's value with an int passes"] = () =>                          ((int)asDynamic.PersonId).should_be(123);                  };                    context["name ends in Id but isn't an int"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "123Foobar");                        it["keeps original value"] = () =>                          ((string)asDynamic.PersonId).should_be("123Foobar");                  };                    context["values with leading zero's is supplied"] = () =>                  {                      before = () => nameValueCollection.Add("PersonId"' "000123");                        it["converts to int"] = () =>                          ((int)asDynamic.PersonId).should_be(123);                  };                    context["name ends in ID"] = () =>                  {                      before = () => nameValueCollection.Add("PersonID"' "123");                        it["comparing key's value with an int passes"] = () =>                          ((int)asDynamic.PersonID).should_be(123);                  };                    context["name contains ID"] = () =>                  {                      before = () => nameValueCollection.Add("PersonIDFoobar"' "123");                        it["disregards conversion"] = () =>                          (asDynamic.PersonIDFoobar as string).should_be("123");                  };              };
Magic Number,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,belongs_to_help,The following statement contains a magic number: context["table doesn't exist"] = () =>              {                  before = () =>                  {                      seed.CreateTable("Comments"'                          seed.Id()'                          new { BlogId = "int" }'                          new { Text = "nvarchar(max)" }                      ).ExecuteNonQuery();                        commentId = new { BlogId = 10' Text = "a comment" }.InsertInto("Comments");                  };                    it["gives a helpful error message"] = () =>                  {                      try                      {                          db.Comments().Single(commentId).Blog();                          Exception();                      }                      catch (AssociationByConventionsException ex)                      {                          ex.Message.should_contain("No BelongsTo' HasOneThrough or HasOne relationships found:");                          ex.Message.should_contain("Table [Blogs] with column [CommentId] doesn't exist (HasOne).");                          ex.Message.should_contain("Table [Comments] with column [BlogId] doesn't exist (BelongsTo).");                          ex.Message.should_contain("Table [BlogsComments] with schema [Id' BlogId' CommentId] doesn't exist (HasOneThrough).");                      }                  };              };
Magic Number,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,belongs_to_help,The following statement contains a magic number: context["table exists' but columns aren't right"] = () =>              {                  before = () =>                  {                      seed.CreateTable("Blogs"'                          seed.Id()'                          new { Title = "nvarchar(255)" }'                          new { AuthorId = "int" }                      ).ExecuteNonQuery();                        seed.CreateTable("Comments"'                          seed.Id()'                          new { fk_BlogId = "int" }'                          new { Text = "nvarchar(max)" }                     ).ExecuteNonQuery();                        commentId = new { fk_BlogId = 10' Text = "a comment" }.InsertInto("Comments");                  };                    it["gives a helpful error message"] = () =>                  {                      try                      {                          db.Comments().Single(commentId).Blog();                          Exception();                      }                      catch (AssociationByConventionsException ex)                      {                          ex.Message.should_contain("No BelongsTo' HasOneThrough or HasOne relationships found:");                          ex.Message.should_contain("Table [Blogs] with column [CommentId] doesn't exist (HasOne).");                          ex.Message.should_contain("Table [Comments] with column [BlogId] doesn't exist (BelongsTo).");                          ex.Message.should_contain("Table [BlogsComments] with schema [Id' BlogId' CommentId] doesn't exist (HasOneThrough).");                      }                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to.cs,before_each,The following statement contains a magic number: car1Id = 100;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to.cs,before_each,The following statement contains a magic number: car2Id = 200;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to.cs,before_each,The following statement contains a magic number: bluePrint1Id = 300;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to.cs,before_each,The following statement contains a magic number: bluePrint2Id = 400;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to.cs,before_each,The following statement contains a magic number: bluePrint3Id = 500;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to.cs,it_eager_loads_and_caches,The following statement contains a magic number: sqlQueries.Count.should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to_with_duplicates,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to_with_duplicates.cs,belongs_where_entity_belongs_more_than_one_relation,The following statement contains a magic number: it["updates all references that map to the belongs to entity"] = () =>              {                  (allPlayers.First().Library().First().Game().Title as object).should_be("Gears of War");                    (allPlayers.Last().Library().First().Game().Title as object).should_be("Mirror's Edge");                    (allPlayers.Last().Library().Last().Game().Title as object).should_be("Gears of War");                      sqlQueries.Count.should_be(3);              };
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to_with_duplicates,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to_with_duplicates.cs,describe_track_back_property,The following statement contains a magic number: it["tracks back to multiple instances' converting a single value to a collection"] = () =>              {                  var allTasks = tasks.All().Include("Rabbit") as DynamicModels;                    var task = allTasks.First();                    (task.Rabbit().Task as List<dynamic>).Count.should_be(3);                    (task.Rabbit().Task as List<dynamic>).should_contain(allTasks.First() as object);                    (task.Rabbit().Task as List<dynamic>).should_contain(allTasks.Second() as object);                    (task.Rabbit().Task as List<dynamic>).should_contain(allTasks.Last() as object);              };
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to_with_overridden_primary_key,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to_with_overridden_primary_key.cs,before_each,The following statement contains a magic number: new { BoothId = 500' Name = "Booth 500" }.InsertInto("Booths");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_belongs_to_with_overridden_primary_key,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_belongs_to_with_overridden_primary_key.cs,before_each,The following statement contains a magic number: new { BoothId = 500' Name = "Agent 1" }.InsertInto("Agents");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,before_each,The following statement contains a magic number: book1Id = 100;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,before_each,The following statement contains a magic number: new { Id = 200' BookId = book1Id' Name = "Chapter I" }.InsertInto("Chapters");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,before_each,The following statement contains a magic number: new { Id = 300' BookId = book1Id' Name = "Chapter II" }.InsertInto("Chapters");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,before_each,The following statement contains a magic number: book2Id = 400;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,before_each,The following statement contains a magic number: new { Id = 500' BookId = book2Id' Name = "Chapter 1" }.InsertInto("Chapters");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,before_each,The following statement contains a magic number: new { Id = 600' BookId = book2Id' Name = "Chapter 2" }.InsertInto("Chapters");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,it_eager_loads_child_collections_and_caches_them,The following statement contains a magic number: ((int)allBooks.First().Chapters().Count()).should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,it_eager_loads_child_collections_and_caches_them,The following statement contains a magic number: ((int)allBooks.Last().Chapters().Count()).should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,it_eager_loads_child_collections_and_caches_them,The following statement contains a magic number: sqlQueries.Count.should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many.cs,specify_eager_loaded_collections_retain_creation_methods,The following statement contains a magic number: ((int)firstBook.Chapters().Count()).should_be(3);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_and_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_and_belongs_to.cs,before_each,The following statement contains a magic number: screencastId = 100;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_and_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_and_belongs_to.cs,before_each,The following statement contains a magic number: screencast2Id = 200;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_and_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_and_belongs_to.cs,before_each,The following statement contains a magic number: presenterId = 300;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_and_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_and_belongs_to.cs,before_each,The following statement contains a magic number: tagId = 400;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_and_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_and_belongs_to.cs,before_each,The following statement contains a magic number: tag2Id = 500;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_and_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_and_belongs_to.cs,it_loads_and_caches_each_child_collection_specified,The following statement contains a magic number: ((int)allScreencasts.Count()).should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_and_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_and_belongs_to.cs,it_loads_and_caches_each_child_collection_specified,The following statement contains a magic number: sqlQueries.Count.should_be(3);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,before_each,The following statement contains a magic number: supplier1Id = 100;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,before_each,The following statement contains a magic number: supplier2Id = 200;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,before_each,The following statement contains a magic number: market1Id = 300;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,before_each,The following statement contains a magic number: market2Id = 400;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,before_each,The following statement contains a magic number: new { Id = 500' MarketId = market1Id' SupplierId = supplier1Id }.InsertInto("SupplyChains");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,before_each,The following statement contains a magic number: new { Id = 600' MarketId = market2Id' SupplierId = supplier2Id }.InsertInto("SupplyChains");
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,it_eager_loads_child_collections_and_caches_them,The following statement contains a magic number: sqlQueries.Count.should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,specify_eager_loaded_collections_retain_creation_methods,The following statement contains a magic number: var supplierId = 1000;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,specify_eager_loaded_collections_retain_creation_methods,The following statement contains a magic number: var supplyChain = firstMarket.SupplyChains().New(new { Id = 900' SupplierId = supplierId });
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_many_through.cs,specify_eager_loaded_collections_retain_creation_methods,The following statement contains a magic number: ((int)firstMarket.Suppliers().Count()).should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_one,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_one.cs,before_each,The following statement contains a magic number: car1Id = 100;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_one,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_one.cs,before_each,The following statement contains a magic number: car2Id = 200;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_one,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_one.cs,before_each,The following statement contains a magic number: bluePrint1Id = 300;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_one,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_one.cs,before_each,The following statement contains a magic number: bluePrint2Id = 400;
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_one,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_one.cs,it_eager_loads_and_caches,The following statement contains a magic number: sqlQueries.Count.should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,eager_loading_for_has_one_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\eager_loading_for_has_one_through.cs,it_eager_loads_child_collections_and_caches_them,The following statement contains a magic number: sqlQueries.Count.should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,gemini_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\gemini_dynamic_models.cs,describe_Any,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultForAny = models.Any(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 15 }));                        it["any returns true"] = () => resultForAny.should_be_true();                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 10 }));                        it["any returns false"] = () => resultForAny.should_be_false();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,gemini_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\gemini_dynamic_models.cs,describe_Any,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultForAny = models.Any(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 15 }));                        it["any returns true"] = () => resultForAny.should_be_true();                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 10 }));                        it["any returns false"] = () => resultForAny.should_be_false();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,gemini_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\gemini_dynamic_models.cs,describe_Any,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultForAny = models.Any(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 15 }));                        it["any returns true"] = () => resultForAny.should_be_true();                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 10 }));                        it["any returns false"] = () => resultForAny.should_be_false();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,gemini_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\gemini_dynamic_models.cs,describe_Where,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultList = models.Where(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 15 }));                        it["returns item"] = () => resultList.Count().should_be(1);                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 10 }));                        it["result list is empty"] = () => resultList.should_be_empty();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,gemini_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\gemini_dynamic_models.cs,describe_Where,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultList = models.Where(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 15 }));                        it["returns item"] = () => resultList.Count().should_be(1);                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 10 }));                        it["result list is empty"] = () => resultList.should_be_empty();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,gemini_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\gemini_dynamic_models.cs,describe_Where,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultList = models.Where(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 15 }));                        it["returns item"] = () => resultList.Count().should_be(1);                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () => models.Models.Add(new Gemini(new { Name = "Jane"' Age = 10 }));                        it["result list is empty"] = () => resultList.should_be_empty();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,prototype_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\prototype_dynamic_models.cs,describe_Any,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultForAny = models.Any(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 15;                          models.Models.Add(prototype);                      };                        it["any returns true"] = () => resultForAny.should_be_true();                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 10;                          models.Models.Add(prototype);                      };                        it["any returns false"] = () => resultForAny.should_be_false();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,prototype_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\prototype_dynamic_models.cs,describe_Any,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultForAny = models.Any(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 15;                          models.Models.Add(prototype);                      };                        it["any returns true"] = () => resultForAny.should_be_true();                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 10;                          models.Models.Add(prototype);                      };                        it["any returns false"] = () => resultForAny.should_be_false();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,prototype_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\prototype_dynamic_models.cs,describe_Any,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultForAny = models.Any(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 15;                          models.Models.Add(prototype);                      };                        it["any returns true"] = () => resultForAny.should_be_true();                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 10;                          models.Models.Add(prototype);                      };                        it["any returns false"] = () => resultForAny.should_be_false();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,prototype_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\prototype_dynamic_models.cs,describe_Where,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultList = models.Where(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 15;                          models.Models.Add(prototype);                      };                        it["returns item"] = () => resultList.Count().should_be(1);                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 10;                          models.Models.Add(prototype);                      };                        it["result list is empty"] = () => resultList.should_be_empty();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,prototype_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\prototype_dynamic_models.cs,describe_Where,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultList = models.Where(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 15;                          models.Models.Add(prototype);                      };                        it["returns item"] = () => resultList.Count().should_be(1);                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 10;                          models.Models.Add(prototype);                      };                        it["result list is empty"] = () => resultList.should_be_empty();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,prototype_dynamic_models,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\prototype_dynamic_models.cs,describe_Where,The following statement contains a magic number: context["item exists in list that match multiple properties"] = () =>              {                  act = () => resultList = models.Where(new { Name = "Jane"' Age = 15 });                    context["entry exists where all properties match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 15;                          models.Models.Add(prototype);                      };                        it["returns item"] = () => resultList.Count().should_be(1);                  };                    context["entry exists where all properties do not match"] = () =>                  {                      before = () =>                      {                          dynamic prototype = new Prototype();                          prototype.Name = "Jane";                          prototype.Age = 10;                          models.Models.Add(prototype);                      };                        it["result list is empty"] = () => resultList.should_be_empty();                  };              };
Magic Number,Oak.Tests.describe_DynamicModels,select_has_many_and_belongs_to_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_has_many_and_belongs_to_relation.cs,accessing_the_relation_through_an_enumerable,The following statement contains a magic number: it["performs a select many for all entries in the collection"] = () =>              {                  var selectMany = (students.All() as dynamic).Courses();                    ((int)selectMany.Count()).should_be(2);                    var firstCourse = selectMany.First();                    (firstCourse.Student.Name as string).should_be("Amir");              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_relation.cs,selecting_many_off_of_collection,The following statement contains a magic number: it["returns all emails for all users"] = () =>              {                  selectMany.Count().should_be(2);                    var firstEmail = selectMany.First();                    (firstEmail.Address as string).should_be("jane@example.com");              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_relation.cs,select_many_from_nested_relations,The following statement contains a magic number: it["returns all records from nested relation"] = () => selectMany.Count().should_be(2);
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_relation.cs,cacheing_for_select_many,The following statement contains a magic number: it["allows the discarding of cache"] = () =>              {                  var userCollection = users.All() as dynamic;                    selectMany = userCollection.Emails().Aliases();                    new { EmailId = email1Id' Name = "Alias2" }.InsertInto("Aliases");                    selectMany = userCollection.Emails().Aliases(new { discardCache = true });                    selectMany.Count().should_be(2);              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_through_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_through_relation.cs,selecting_many_off_of_collection,The following statement contains a magic number: it["returns all games for all players"] = () =>              {                  selectMany.Count().should_be(2);                    var firstGame = selectMany.First();                    (firstGame.Title as string).should_be("Gears of War");              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_through_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_through_relation.cs,selecting_many_from_nested_relation,The following statement contains a magic number: it["returns all players through games"] = () =>              {                  selectMany.Count().should_be(2);                    var firstGame = selectMany.First();                    (firstGame.Name as string).should_be("Jane");              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_through_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_through_relation.cs,cache_access_in_specific_order,The following statement contains a magic number: it["in query isn't run if entries are access independently"] = () =>              {                  var allPlayers = players.All() as dynamic;                    (allPlayers as IEnumerable<dynamic>).Count().should_be(2);                    foreach(var p in allPlayers)                  {                      (p.Games() as IEnumerable<dynamic>).Count().should_be(1);                  }                    (allPlayers.Games() as IEnumerable<dynamic>).Count().should_be(2);                    sqlQueries.Count().should_be(3);              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_through_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_through_relation.cs,cache_access_in_specific_order,The following statement contains a magic number: it["in query isn't run if entries are access independently"] = () =>              {                  var allPlayers = players.All() as dynamic;                    (allPlayers as IEnumerable<dynamic>).Count().should_be(2);                    foreach(var p in allPlayers)                  {                      (p.Games() as IEnumerable<dynamic>).Count().should_be(1);                  }                    (allPlayers.Games() as IEnumerable<dynamic>).Count().should_be(2);                    sqlQueries.Count().should_be(3);              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_through_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_through_relation.cs,cache_access_in_specific_order,The following statement contains a magic number: it["in query isn't run if entries are access independently"] = () =>              {                  var allPlayers = players.All() as dynamic;                    (allPlayers as IEnumerable<dynamic>).Count().should_be(2);                    foreach(var p in allPlayers)                  {                      (p.Games() as IEnumerable<dynamic>).Count().should_be(1);                  }                    (allPlayers.Games() as IEnumerable<dynamic>).Count().should_be(2);                    sqlQueries.Count().should_be(3);              };
Magic Number,Oak.Tests.describe_DynamicModels,select_many_for_has_many_through_relation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_many_for_has_many_through_relation.cs,cacheing_for_select_many,The following statement contains a magic number: it["allows the discarding of cache"] = () =>              {                  var playerCollection = players.All() as dynamic;                    selectMany = playerCollection.Games();                    selectMany.Count().should_be(1);                    new { PlayerId = player1Id' GameId = game1Id }.InsertInto("Library");                    selectMany = playerCollection.Games(new { discardCache = true });                    selectMany.Count().should_be(2);              };
Magic Number,Oak.Tests.describe_DynamicModels,select_properties_from_collection,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_properties_from_collection.cs,it_creates_a_projection_for_populated_list_for_single_parameter,The following statement contains a magic number: (result[2] as string).should_be("Jane");
Magic Number,Oak.Tests.describe_DynamicModels,select_properties_from_collection,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_properties_from_collection.cs,it_creates_a_projection_for_populated_list_for_multiple_parameters,The following statement contains a magic number: models = new DynamicModels(new List<dynamic>()               {                   new { Name = "Jane"' Age = 15' Gender = "F" }'              });
Magic Number,Oak.Tests.describe_DynamicModels,select_properties_from_collection,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModels\select_properties_from_collection.cs,it_creates_a_projection_for_populated_list_for_multiple_parameters,The following statement contains a magic number: ((int)result[0].Age).should_be(15);
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,root_properties,The following statement contains a magic number: context["adding properties to dynamic model"] = () =>              {                  act = () => loan.Term = 5;                    it["the property is defined on dynamic model"] = () => ((int)loan.Term).should_be(5);                    it["property exists as a root property"] = () => ((int)Properties().Term).should_be(5);                    it["responds to newly defined property"] = () => (loan as DynamicModel).RespondsTo("Term").should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,root_properties,The following statement contains a magic number: context["adding properties to dynamic model"] = () =>              {                  act = () => loan.Term = 5;                    it["the property is defined on dynamic model"] = () => ((int)loan.Term).should_be(5);                    it["property exists as a root property"] = () => ((int)Properties().Term).should_be(5);                    it["responds to newly defined property"] = () => (loan as DynamicModel).RespondsTo("Term").should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,root_properties,The following statement contains a magic number: context["adding properties to dynamic model"] = () =>              {                  act = () => loan.Term = 5;                    it["the property is defined on dynamic model"] = () => ((int)loan.Term).should_be(5);                    it["property exists as a root property"] = () => ((int)Properties().Term).should_be(5);                    it["responds to newly defined property"] = () => (loan as DynamicModel).RespondsTo("Term").should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,root_methods,The following statement contains a magic number: context["adding methods to dynamic model"] = () =>              {                  act = () => loan.MonthsFor = new Func<double' double>(months => months * 12.0);                    it["the property is defined on dynamic model"] = () => ((double)loan.MonthsFor(1)).should_be(12);                    it["method exists on root"] = () => ((double)Properties().MonthsFor(1)).should_be(12);                    it["responds to newly defined method"] = () => (loan as DynamicModel).RespondsTo("MonthsFor").should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,root_methods,The following statement contains a magic number: context["adding methods to dynamic model"] = () =>              {                  act = () => loan.MonthsFor = new Func<double' double>(months => months * 12.0);                    it["the property is defined on dynamic model"] = () => ((double)loan.MonthsFor(1)).should_be(12);                    it["method exists on root"] = () => ((double)Properties().MonthsFor(1)).should_be(12);                    it["responds to newly defined method"] = () => (loan as DynamicModel).RespondsTo("MonthsFor").should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,root_methods,The following statement contains a magic number: context["adding methods to dynamic model"] = () =>              {                  act = () => loan.MonthsFor = new Func<double' double>(months => months * 12.0);                    it["the property is defined on dynamic model"] = () => ((double)loan.MonthsFor(1)).should_be(12);                    it["method exists on root"] = () => ((double)Properties().MonthsFor(1)).should_be(12);                    it["responds to newly defined method"] = () => (loan as DynamicModel).RespondsTo("MonthsFor").should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,describe_method_list,The following statement contains a magic number: context["dynamic model has methods and properties defined on root and virtual level"] = () =>              {                  before = () =>                  {                      Model().RespondsTo("Customer").should_be_true();                      loan.Term = 5;                  };                    act = () => methods = Model().Members();                    it["contains both defined methods"] = () =>                  {                      methods.should_contain("Customer");                      methods.should_contain("Term");                  };              };
Magic Number,Oak.Tests.describe_DynamicModel,core_behavior_for_dynamic_model,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\core_behavior_for_dynamic_model.cs,deleting_members,The following statement contains a magic number: context["dynamic model has methods and properties definded on root and virtual level"] = () =>              {                  before = () =>                  {                      Model().RespondsTo("Customer").should_be_true();                      loan.Term = 5;                  };                    act = () =>                  {                      Model().Members().ToList().Do(s => Model().DeleteMember(s));                      methods = Model().Members();                  };                    it["both methods are deleted"] = () =>                  {                      methods.ToList().should_not_contain("Customer");                      methods.ToList().should_not_contain("Term");                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many.cs,describe_has_many,The following statement contains a magic number: context["given blogs that have many comments"] = () =>              {                  before = () =>                  {                      seed.PurgeDb();                        seed.CreateTable("Blogs"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { Title = "nvarchar(255)" }'                          new { Body = "nvarchar(max)" }                      }).ExecuteNonQuery();                        seed.CreateTable("Comments"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { BlogId = "int"' ForeignKey = "Blogs(Id)" }'                          new { Text = "nvarchar(1000)" }                      }).ExecuteNonQuery();                        blogId = new { Title = "Some Blog"' Body = "Lorem Ipsum" }.InsertInto("Blogs");                        commentId = new { BlogId = blogId' Text = "Comment 1" }.InsertInto("Comments");                        new { BlogId = blogId' Text = "Comment 2" }.InsertInto("Comments");                        otherBlogId = new { Title = "Other Blog"' Body = "Other Body" }.InsertInto("Blogs");                        new { BlogId = otherBlogId' Text = "Comment 3" }.InsertInto("Comments");                  };                    context["retrieving comments for blog"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Comments();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                        it["comments are cached for an instance of blog"] = () =>                      {                          var blog = blogs.Single(blogId);                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                            new { blogId' Text = "Comment 4" }.InsertInto("Comments");                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                      };                  };                    context["retrieving comments for blog by another name"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Roses();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                  };                    context["retriving comment ids for blog"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).CommentIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retriving comment ids for blog by another name"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).RoseIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retrieving comments for other blog"] = () =>                  {                      act = () => blogComments = blogs.Single(otherBlogId).Comments();                                            it["has one comments"] = () =>                      {                          blogComments.Count().should_be(1);                            blogComments.should_contain(s => s.Text == "Comment 3");                      };                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many.cs,describe_has_many,The following statement contains a magic number: context["given blogs that have many comments"] = () =>              {                  before = () =>                  {                      seed.PurgeDb();                        seed.CreateTable("Blogs"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { Title = "nvarchar(255)" }'                          new { Body = "nvarchar(max)" }                      }).ExecuteNonQuery();                        seed.CreateTable("Comments"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { BlogId = "int"' ForeignKey = "Blogs(Id)" }'                          new { Text = "nvarchar(1000)" }                      }).ExecuteNonQuery();                        blogId = new { Title = "Some Blog"' Body = "Lorem Ipsum" }.InsertInto("Blogs");                        commentId = new { BlogId = blogId' Text = "Comment 1" }.InsertInto("Comments");                        new { BlogId = blogId' Text = "Comment 2" }.InsertInto("Comments");                        otherBlogId = new { Title = "Other Blog"' Body = "Other Body" }.InsertInto("Blogs");                        new { BlogId = otherBlogId' Text = "Comment 3" }.InsertInto("Comments");                  };                    context["retrieving comments for blog"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Comments();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                        it["comments are cached for an instance of blog"] = () =>                      {                          var blog = blogs.Single(blogId);                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                            new { blogId' Text = "Comment 4" }.InsertInto("Comments");                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                      };                  };                    context["retrieving comments for blog by another name"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Roses();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                  };                    context["retriving comment ids for blog"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).CommentIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retriving comment ids for blog by another name"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).RoseIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retrieving comments for other blog"] = () =>                  {                      act = () => blogComments = blogs.Single(otherBlogId).Comments();                                            it["has one comments"] = () =>                      {                          blogComments.Count().should_be(1);                            blogComments.should_contain(s => s.Text == "Comment 3");                      };                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many.cs,describe_has_many,The following statement contains a magic number: context["given blogs that have many comments"] = () =>              {                  before = () =>                  {                      seed.PurgeDb();                        seed.CreateTable("Blogs"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { Title = "nvarchar(255)" }'                          new { Body = "nvarchar(max)" }                      }).ExecuteNonQuery();                        seed.CreateTable("Comments"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { BlogId = "int"' ForeignKey = "Blogs(Id)" }'                          new { Text = "nvarchar(1000)" }                      }).ExecuteNonQuery();                        blogId = new { Title = "Some Blog"' Body = "Lorem Ipsum" }.InsertInto("Blogs");                        commentId = new { BlogId = blogId' Text = "Comment 1" }.InsertInto("Comments");                        new { BlogId = blogId' Text = "Comment 2" }.InsertInto("Comments");                        otherBlogId = new { Title = "Other Blog"' Body = "Other Body" }.InsertInto("Blogs");                        new { BlogId = otherBlogId' Text = "Comment 3" }.InsertInto("Comments");                  };                    context["retrieving comments for blog"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Comments();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                        it["comments are cached for an instance of blog"] = () =>                      {                          var blog = blogs.Single(blogId);                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                            new { blogId' Text = "Comment 4" }.InsertInto("Comments");                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                      };                  };                    context["retrieving comments for blog by another name"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Roses();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                  };                    context["retriving comment ids for blog"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).CommentIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retriving comment ids for blog by another name"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).RoseIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retrieving comments for other blog"] = () =>                  {                      act = () => blogComments = blogs.Single(otherBlogId).Comments();                                            it["has one comments"] = () =>                      {                          blogComments.Count().should_be(1);                            blogComments.should_contain(s => s.Text == "Comment 3");                      };                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many.cs,describe_has_many,The following statement contains a magic number: context["given blogs that have many comments"] = () =>              {                  before = () =>                  {                      seed.PurgeDb();                        seed.CreateTable("Blogs"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { Title = "nvarchar(255)" }'                          new { Body = "nvarchar(max)" }                      }).ExecuteNonQuery();                        seed.CreateTable("Comments"' new dynamic[] {                          new { Id = "int"' Identity = true' PrimaryKey = true }'                          new { BlogId = "int"' ForeignKey = "Blogs(Id)" }'                          new { Text = "nvarchar(1000)" }                      }).ExecuteNonQuery();                        blogId = new { Title = "Some Blog"' Body = "Lorem Ipsum" }.InsertInto("Blogs");                        commentId = new { BlogId = blogId' Text = "Comment 1" }.InsertInto("Comments");                        new { BlogId = blogId' Text = "Comment 2" }.InsertInto("Comments");                        otherBlogId = new { Title = "Other Blog"' Body = "Other Body" }.InsertInto("Blogs");                        new { BlogId = otherBlogId' Text = "Comment 3" }.InsertInto("Comments");                  };                    context["retrieving comments for blog"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Comments();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                        it["comments are cached for an instance of blog"] = () =>                      {                          var blog = blogs.Single(blogId);                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                            new { blogId' Text = "Comment 4" }.InsertInto("Comments");                            blogComments = blog.Comments();                            blogComments.Count().should_be(2);                      };                  };                    context["retrieving comments for blog by another name"] = () =>                  {                      act = () => blogComments = blogs.Single(blogId).Roses();                        it["has two comments"] = () =>                      {                          blogComments.Count().should_be(2);                            blogComments.should_contain(s => s.Text == "Comment 1");                            blogComments.should_contain(s => s.Text == "Comment 2");                      };                  };                    context["retriving comment ids for blog"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).CommentIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retriving comment ids for blog by another name"] = () =>                  {                      act = () => blogCommentIds = blogs.Single(blogId).RoseIds();                        it["has ids for comment"] = () =>                      {                          (blogCommentIds.First() as object).should_be(commentId as object);                      };                  };                    context["retrieving comments for other blog"] = () =>                  {                      act = () => blogComments = blogs.Single(otherBlogId).Comments();                                            it["has one comments"] = () =>                      {                          blogComments.Count().should_be(1);                            blogComments.should_contain(s => s.Text == "Comment 3");                      };                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many.cs,newing_up_has_many_association_for_blog,The following statement contains a magic number: before = () =>              {                  blog = new Blog();                  blog.Id = 100;              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many.cs,newing_up_has_many_association_for_blog,The following statement contains a magic number: context["building a comment where the blog id is specified"] = () =>              {                  act = () => comment = blog.Comments().New(new { BlogId = 20 });                    it["overrides the id"] = () => ((int)comment.BlogId).should_be(blog.Id as object);              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,saving_has_many_belongs_to,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many_and_belongs_to.cs,it_works,The following statement contains a magic number: students.All().Count().should_be(2);
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many_and_belongs_to_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many_and_belongs_to.cs,describe_cacheing,The following statement contains a magic number: it["collection is cached until discarded"] = () =>              {                  var newCourse = new { Name = "Science" }.InsertInto("Courses");                    new { studentId' courseId = newCourse }.InsertInto("CoursesStudents");                    int cachedCount = student.Courses().Count();                    cachedCount.should_be(1);                    int newCount = student.Courses(discardCache: true).Count();                    newCount.should_be(2);              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many_and_belongs_to_conventional_schema,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many_and_belongs_to.cs,describe_cacheing,The following statement contains a magic number: it["collection is cached until discarded"] = () =>              {                  var newCourse = new { Name = "Science" }.InsertInto("Courses");                    new { studentId' courseId = newCourse }.InsertInto("CoursesStudents");                    int cachedCount = student.Courses().Count();                    cachedCount.should_be(1);                    int newCount = student.Courses(discardCache: true).Count();                    newCount.should_be(2);              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many_through.cs,describe_has_many_through,The following statement contains a magic number: context["given users have a library of games (user has games through library)"] = () =>              {                  before = () => SetupGameLibraryScenario();                    context["cacheing"] = () =>                  {                      act = () =>                      {                          user = users.Single(userId);                          user.Games();                      };                        it["games are cached until cache is discarded"] = () =>                      {                          mirrorsEdgeGameId = new { Title = "Mirror's Edge" }.InsertInto("Games");                            new { UserId = userId' GameId = gearsOfWarGameId }.InsertInto("Library");                            int cachedCount = user.Games().Count();                            cachedCount.should_be(1);                            int newCount = user.Games(new { discardCache = true }).Count();                            newCount.should_be(2);                      };                  };                    context["retrieving game ids for user's library"] = () =>                  {                      act = () => gamesIds = users.Single(userId).GameIds();                        it["contains game for user"] = () =>                          (gamesIds.First() as object).should_be(gearsOfWarGameId as object);                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many_through.cs,newing_up_has_many_association,The following statement contains a magic number: before = () =>              {                  SetupGameLibraryScenario();                    user = new User(new { Id = 100 });              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Association,has_many_through,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Association\has_many_through.cs,newing_up_has_many_association,The following statement contains a magic number: context["building a game for user"] = () =>              {                  act = () => game = user.Games().New(new { Title = "Final Fantasy VII" });                    it["creates a game of type defined in projection"] = () =>                      (game as object).should_cast_to<Game>();                    context["saving newly created game"] = () =>                  {                      act = () => games.Save(game);                        it["saves game"] = () =>                           games                              .All()                              .Any(s => s.Title == "Final Fantasy VII")                              .should_be_true();                        it["saving game doesn't automatically associate the has many through"] = () =>                      {                          (user.Games(                              new                               {                                   discardCache = true                               }) as IEnumerable<dynamic>).Count().should_be(0);                      };                  };                    context["saving association through library and game"] = () =>                  {                      act = () =>                      {                          user = users.Single(userId);                            var game = user.Games().New(new { Title = "Final Fantasy VII" });                            game.Id = games.Insert(game);                            var libraryEntry = user.Library().New(new { GameId = game.Id });                            library.Insert(libraryEntry);                      };                        it["game is associated with user"] = () =>                      {                          var gameLibrary = user.Games(new { discardCache = true });                            ((int)gameLibrary.Count()).should_be(2);                            var game = gameLibrary.Last();                            (game.Title as string).should_be("Final Fantasy VII");                      };                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,core_validation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\core_validation.cs,describe_first_error,The following statement contains a magic number: context["both title and body are not specified in Book"] = () =>              {                  before = () =>                  {                      book.Title = string.Empty;                      book.Body = string.Empty;                      book.Id = 100;                  };                    it["contains 2 errors"] = () => ((int)book.Errors().Count).should_be(2);                    it["first error should be Title is required"] = () => firstError.should_be("Title is required.");              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,core_validation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\core_validation.cs,describe_first_error,The following statement contains a magic number: context["both title and body are not specified in Book"] = () =>              {                  before = () =>                  {                      book.Title = string.Empty;                      book.Body = string.Empty;                      book.Id = 100;                  };                    it["contains 2 errors"] = () => ((int)book.Errors().Count).should_be(2);                    it["first error should be Title is required"] = () => firstError.should_be("Title is required.");              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,core_validation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\core_validation.cs,describe_first_error,The following statement contains a magic number: context["title is specified but body is not"] = () =>              {                  before = () =>                  {                      book.Title = "Title";                      book.Body = string.Empty;                      book.Id = 100;                  };                    it["contains 1 error"] = () => ((int)book.Errors().Count).should_be(1);                    it["first error should be Body is required"] = () => firstError.should_be("Body is required.");              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,core_validation,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\core_validation.cs,case_insensitive_valdation,The following statement contains a magic number: context["setting the title with a lower case T and body with lower case b"] = () =>              {                  before = () => book = new Book(new { title = "Title"' body = "Body"' id = 100 });                    it["is still valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,format,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\format.cs,validating_format,The following statement contains a magic number: context["product code does not match format of all characters"] = () =>              {                  before = () =>                  {                      product.Code = "1232123";                      product.ProductId = 123456;                  };                    it["is invalid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,format,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\format.cs,validating_format,The following statement contains a magic number: context["product code matches format of all characters"] = () =>              {                  before = () =>                  {                      product.Code = "ABD";                      product.ProductId = 123456;                  };                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,format,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\format.cs,validating_format,The following statement contains a magic number: context["product id does not match regex"] = () =>              {                  before = () =>                  {                      product.Code = "ABD";                      product.ProductId = 1231;                  };                    it["is invalid"] = () =>                  {                         product.IsValid();                      (product.Errors()[0].Value as string).should_be("ProductId is invalid.");                      isValid.should_be_false();                  };              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.AveragePoints = 3.6;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.Age = 22;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.HeightInInches = 65;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.WeightInPounds = 185;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.NumberOfFingers = 10;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.LuckyEvenNumber = 36;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_static_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.LuckyOddNumber = 13;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_dynamic_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.AveragePoints = 3.6;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_dynamic_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.Age = 22;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_dynamic_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.HeightInInches = 65;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_dynamic_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.WeightInPounds = 185;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_dynamic_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.NumberOfFingers = 10;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_dynamic_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.LuckyEvenNumber = 36;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality_for_dynamic_type,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,before_each,The following statement contains a magic number: player.LuckyOddNumber = 13;
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["average points is a number"] = () =>              {                  before = () => player.AveragePoints = 3.6;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["age is not an integer"] = () =>              {                  before = () => player.Age = 22.1;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["age is an integer"] = () =>              {                  before = () => player.Age = 22;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["height in inches is a number"] = () =>              {                  before = () => player.HeightInInches = 65;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["height in inches is a number but less than lower threshold"] = () =>              {                  before = () => player.HeightInInches = 59.9;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["height in inches is a number but equal to lower threshold"] = () =>              {                  before = () => player.HeightInInches = 60;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["height in inches is a number and is greather than lower threshold"] = () =>              {                  before = () => player.HeightInInches = 60.1;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["weight in pounds is a number but less than threshold"] = () =>              {                  before = () => player.WeightInPounds = 184.9;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["weight in pounds is a number and is equal to threshold"] = () =>              {                  before = () => player.WeightInPounds = 185;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["weight in pounds is a number and is greater than threshold"] = () =>              {                  before = () => player.WeightInPounds = 185.1;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["number of fingers is a number but less than threshold"] = () =>              {                  before = () => player.NumberOfFingers = 9.9;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["number of fingers is a number but greater than threshold"] = () =>              {                  before = () => player.NumberOfFingers = 10.1;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["number of fingers is a number and equal to threshold"] = () =>              {                  before = () => player.NumberOfFingers = 10;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["height in inches is a number but greater than upper threshold"] = () =>              {                  before = () => player.HeightInInches = 72.1;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["height in inches is a number but equal to upper threshold"] = () =>              {                  before = () => player.HeightInInches = 72;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["height in inches is a number and less than upper threshold"] = () =>              {                  before = () => player.HeightInInches = 71.9;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["weight in pounds is a number but greater than upper threshold"] = () =>              {                  before = () => player.WeightInPounds = 300.1;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["weight in pounds is a number and equal to upper threshold"] = () =>              {                  before = () => player.WeightInPounds = 300;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["weight in pounds is a number and less than upper threshold"] = () =>              {                  before = () => player.WeightInPounds = 299.9;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["lucky even number is a number but is not even"] = () =>              {                  before = () => player.LuckyEvenNumber = 7;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["lucky even number is a number and is even"] = () =>              {                  before = () => player.LuckyEvenNumber = 36;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["lucky odd number is a number but is not odd"] = () =>              {                  before = () => player.LuckyOddNumber = 10;                    it["is not valid"] = () => isValid.should_be_false();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,numericality,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\numericality.cs,validating_numericality_of,The following statement contains a magic number: context["lucky odd number is a number and is odd"] = () =>              {                  before = () => player.LuckyOddNumber = 13;                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation,presence,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\presence.cs,validating_presense_of,The following statement contains a magic number: context["title and body is populated"] = () =>              {                  before = () =>                  {                      book.Title = "Some Title";                      book.Body = "Some Body";                      book.Id = 100;                  };                    it["is valid"] = () => isValid.should_be_true();              };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,EssayWithAutoProperties,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Essay.cs,Validates,The following statement contains a magic number: yield return new Length("Author") { Maximum = 5 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,EssayWithAutoProperties,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Essay.cs,Validates,The following statement contains a magic number: yield return new Length("Publisher") { In = Enumerable.Range(1' 10) };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Essay,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Essay.cs,Validates,The following statement contains a magic number: yield return new Length("Author") { Maximum = 5 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Essay,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Essay.cs,Validates,The following statement contains a magic number: yield return new Length("Publisher") { In = Enumerable.Range(1' 10) };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,PlayerWithAutoProps,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("HeightInInches") { GreaterThan = 60' LessThan = 72 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,PlayerWithAutoProps,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("HeightInInches") { GreaterThan = 60' LessThan = 72 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,PlayerWithAutoProps,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("WeightInPounds") { GreaterThanOrEqualTo = 185' LessThanOrEqualTo = 300 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,PlayerWithAutoProps,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("WeightInPounds") { GreaterThanOrEqualTo = 185' LessThanOrEqualTo = 300 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,PlayerWithAutoProps,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("NumberOfFingers") { EqualTo = 10 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Player,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("HeightInInches") { GreaterThan = 60' LessThan = 72 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Player,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("HeightInInches") { GreaterThan = 60' LessThan = 72 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Player,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("WeightInPounds") { GreaterThanOrEqualTo = 185' LessThanOrEqualTo = 300 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Player,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("WeightInPounds") { GreaterThanOrEqualTo = 185' LessThanOrEqualTo = 300 };
Magic Number,Oak.Tests.describe_DynamicModel.describe_Validation.Classes,Player,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicModel\describe_Validation\Classes\Player.cs,Validates,The following statement contains a magic number: yield return new Numericality("NumberOfFingers") { EqualTo = 10 };
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_exact_matches_on_the_same_thread_and_stack_trace_are_considered_inefficient,The following statement contains a magic number: var sqlLog = new SqlQueryLog(this'                  "select * from User where email = 'user@example.com'"'                  "stack trace"'                  50'                  null);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_exact_matches_on_the_same_thread_and_stack_trace_are_considered_inefficient,The following statement contains a magic number: var sqlLog2 = new SqlQueryLog(this'                  "select * from User where email = 'user@example.com'"'                  "stack trace"'                  50'                  null);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_exact_matches_on_the_same_thread_and_stack_trace_are_considered_inefficient,The following statement contains a magic number: inefficientQueries.Count().should_be(2);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_similiar_queries_are_considered_nPlus1_if_the_where_in_clause_is_different_but_the_stack_and_thread_are_the_same,The following statement contains a magic number: var sqlLog = new SqlQueryLog(this'                  "select * from User where email in ('user@example.com')"'                  "stack trace"'                  50'                  null);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_similiar_queries_are_considered_nPlus1_if_the_where_in_clause_is_different_but_the_stack_and_thread_are_the_same,The following statement contains a magic number: var sqlLog2 = new SqlQueryLog(this'                  "select * from User where email in ('user2@example.com')"'                  "stack trace"'                  50'                  null);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_similiar_queries_are_considered_nPlus1_if_the_where_in_clause_is_different_but_the_stack_and_thread_are_the_same,The following statement contains a magic number: inefficientQueries.Count().should_be(2);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_queries_on_the_same_thread_with_different_stacktraces_are_worth_looking_at_but_my_not_be_inefficient,The following statement contains a magic number: var sqlLog = new SqlQueryLog(this'                  "select * from User where email in ('user@example.com')"'                  "stack trace"'                  50'                  null);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_queries_on_the_same_thread_with_different_stacktraces_are_worth_looking_at_but_my_not_be_inefficient,The following statement contains a magic number: var sqlLog2 = new SqlQueryLog(this'                  "select * from User where email in ('user2@example.com')"'                  "stack trace 2"'                  50'                  null);
Magic Number,Oak.Tests.describe_DynamicRepository,detecting_inefficient_queries,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\detecting_inefficient_queries.cs,specify_queries_on_the_same_thread_with_different_stacktraces_are_worth_looking_at_but_my_not_be_inefficient,The following statement contains a magic number: inefficientQueries.Count().should_be(2);
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_find_by,The following statement contains a magic number: it["all"] = () =>              {                  new { Name = "B Name" }.InsertInto("Records");                    new { Name = "A Name" }.InsertInto("Records");                    var result = records.FindBy();                    ((int)result.Count()).should_be(2);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_count,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Name = "B Name" }.InsertInto("Records");                    new { Name = "A Name" }.InsertInto("Records");                    var result = records.Count();                    ((int)result).should_be(2);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_sum,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Sum(columns: "Weight");                    result.should_be(116);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_sum,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Sum(columns: "Weight");                    result.should_be(116);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_sum,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Sum(columns: "Weight");                    result.should_be(116);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_sum,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"'  Weight = 16 }.InsertInto("Records");                    var result = (int)records.Sum(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_sum,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"'  Weight = 16 }.InsertInto("Records");                    var result = (int)records.Sum(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_sum,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"'  Weight = 16 }.InsertInto("Records");                    var result = (int)records.Sum(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_max,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Max(columns: "Weight");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_max,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Max(columns: "Weight");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_max,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Max(columns: "Weight");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_max,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Max(columns: "Weight"' Name: "B Name");                    result.should_be(16);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_max,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Max(columns: "Weight"' Name: "B Name");                    result.should_be(16);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_max,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Max(columns: "Weight"' Name: "B Name");                    result.should_be(16);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_min,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Min(columns: "Weight");                    result.should_be(16);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_min,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Min(columns: "Weight");                    result.should_be(16);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_min,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Min(columns: "Weight");                    result.should_be(16);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_min,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Min(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_min,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Min(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_min,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Min(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_avg,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Avg(columns: "Weight");                    result.should_be(58);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_avg,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Avg(columns: "Weight");                    result.should_be(58);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_avg,The following statement contains a magic number: it["without equality specification"] = () =>              {                  new { Weight = 100 }.InsertInto("Records");                    new { Weight = 16 }.InsertInto("Records");                    var result = (int)records.Avg(columns: "Weight");                    result.should_be(58);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_avg,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Avg(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_avg,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Avg(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,dynamic_query,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\dynamic_query.cs,describe_avg,The following statement contains a magic number: it["with equality specification"] = () =>              {                  new { Name = "A Name"' Weight = 100 }.InsertInto("Records");                    new { Name = "B Name"' Weight = 16 }.InsertInto("Records");                    var result = (int)records.Avg(columns: "Weight"' Name: "A Name");                    result.should_be(100);              };
Magic Number,Oak.Tests.describe_DynamicRepository,executing_procs,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\executing_procs.cs,executing_stored_procs,The following statement contains a magic number: it["proc results are converted to type"] = () =>              {                  var result = records.Query("GetRecords @0"' "Name");                    result.Count().should_be(2);              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: before = () =>              {                  var sql = seed.CreateTable("Records"' new dynamic[]                   {                      new { BigIntColumn = "bigint" }'                     new { BinaryColumn = "binary(4)" }'                     new { BitColumn = "bit" }'                     new { CharColumn = "char(11)" }'                     new { DateColumn = "date" }'                     new { DateTimeColumn = "datetime" }'                     new { DateTimeTwoColumn = "datetime2(7)" }'                     new { DateTimeOffSetColumn = "datetimeoffset(7)" }'                     new { DecimalColumn = "decimal(18' 2)" }'                     new { FloatColumn = "float" }'                     //new { GeographyColumn = "geography" }'                     //new { GeographyColumn = "geometry" }'                     //new { HierarchyIdColumn = "hierarchyid" }                     new { ImageColumn = "image" }'                     new { IntColumn = "int" }'                     new { MoneyColumn = "money" }'                     new { NTextColumn = "ntext" }'                     new { NumericColumn = "numeric(18' 5)" }'                     new { NCharColumn = "nchar(12)" }'                     new { NVarCharColumn = "varchar(15)" }'                     new { NVarCharMaxColumn = "varchar(max)" }'                     new { RealColumn = "real" }'                     new { SmallDateTimeColumn = "smalldatetime" }'                     new { SmallIntColumn = "smallint" }'                     new { SmallMoneyColumn = "smallmoney" }'                     new { SqlVariantColumn = "sql_variant" }'                     new { TextColumn = "text" }'                     new { TimeColumn = "time(7)" }'                     new { TimeStampColumn = "timestamp" }'                     new { TinyIntColumn = "tinyint" }'                     new { UniqueIdentifierColumn = "uniqueidentifier" }'                     new { VarBinaryColumn = "varbinary(50)" }'                     new { VarBinaryMaxColumn = "varbinary(max)" }'                     new { VarCharColumn = "varchar(50)" }'                     new { VarCharMaxColumn = "varchar(max)" }'                     new { XmlColumn = "xml" }                  });                    sql.ExecuteNonQuery();                    recordToInsert = new                  {                      BigIntColumn = 10'                      BinaryColumn = new byte[] { 1' 2' 3' 4 }'                      BitColumn = true'                      CharColumn = "char column"'                      DateColumn = DateTime.Today'                      DateTimeColumn = DateTime.Today.AddDays(1).AddHours(1)'                      DateTimeTwoColumn = DateTime.Today.AddDays(2).AddHours(2)'                      DateTimeOffSetColumn = new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3))'                      DecimalColumn = 10.05'                      FloatColumn = (float)15.002'                      ImageColumn = new byte[] { 2' 3' 4' 5 }'                      IntColumn = 16'                      MoneyColumn = 9.99'                      NCharColumn = "nchar column"'                      NTextColumn = "ntext column"'                      NumericColumn = 18.003'                      NVarCharColumn = "nvarchar column"'                      NVarCharMaxColumn = "nvarchar(max) column"'                      RealColumn = 1.9'                      SqlVariantColumn = 62'                      SmallDateTimeColumn = DateTime.Today.AddDays(4)'                      SmallIntColumn = 1'                      SmallMoneyColumn = .99'                      TextColumn = "text column"'                      TimeColumn = DateTime.Today.AddHours(1)'                      TinyIntColumn = 2'                      UniqueIdentifierColumn = Guid.Empty'                      VarBinaryColumn = new byte[] { 5' 6' 7' 8 }'                      VarBinaryMaxColumn = new byte[] { 10' 11' 12' 13 }'                      VarCharColumn = "varchar column"'                      VarCharMaxColumn = "varcharmax column"'                      XmlColumn = "<person><first>Amir</first><last>Rajan</last></person>"                  };              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,inserting_and_updating,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\inserting_and_updating.cs,updating_every_type_of_sql_column,The following statement contains a magic number: it["each column is updated"] = () =>              {                  var record = records.All().First();                    ((long)record.BigIntColumn).should_be(10);                  ((object)record.BinaryColumn).should_be(new byte[] { 1' 2' 3' 4 });                  ((bool)record.BitColumn).should_be(true);                  ((string)record.CharColumn).should_be("char column");                  ((DateTime)record.DateColumn).should_be(DateTime.Today);                  ((DateTime)record.DateTimeColumn).should_be(DateTime.Today.AddDays(1).AddHours(1));                  ((DateTime)record.DateTimeTwoColumn).should_be(DateTime.Today.AddDays(2).AddHours(2));                  ((DateTimeOffset)record.DateTimeOffSetColumn).should_be(new DateTimeOffset(DateTime.Today.AddDays(3).AddHours(3)));                  ((Decimal)record.DecimalColumn).should_be(10.05);                  ((int)Convert.ToInt32(record.FloatColumn)).should_be(15);                  ((object)record.ImageColumn).should_be(new byte[] { 2' 3' 4' 5 });                  ((int)record.IntColumn).should_be(16);                  ((decimal)record.MoneyColumn).should_be(9.99);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NTextColumn).should_be("ntext column");                  ((decimal)record.NumericColumn).should_be(18.003);                  ((string)record.NCharColumn).should_be("nchar column");                  ((string)record.NVarCharColumn).should_be("nvarchar column");                  ((string)record.NVarCharMaxColumn).should_be("nvarchar(max) column");                  ((Single)Convert.ToInt32(record.RealColumn)).should_be(2);                  ((object)record.SqlVariantColumn).should_be(62);                  ((DateTime)record.SmallDateTimeColumn).should_be(DateTime.Today.AddDays(4));                  ((Int16)record.SmallIntColumn).should_be(1);                  ((Decimal)record.SmallMoneyColumn).should_be(.99);                  ((string)record.TextColumn).should_be("text column");                  ((TimeSpan)record.TimeColumn).should_be(DateTime.Today.AddHours(1) - DateTime.Today);                  ((object)record.TimeStampColumn).GetType().should_be(typeof(byte[]));                  ((byte)record.TinyIntColumn).should_be(2);                  ((Guid)record.UniqueIdentifierColumn).should_be(Guid.Empty);                  ((object)record.VarBinaryColumn).should_be(new byte[] { 5' 6' 7' 8 });                  ((object)record.VarBinaryMaxColumn).should_be(new byte[] { 10' 11' 12' 13 });                  ((string)record.VarCharColumn).should_be("varchar column");                  ((string)record.VarCharMaxColumn).should_be("varcharmax column");                  ((string)record.XmlColumn).should_be("<person><first>Amir</first><last>Rajan</last></person>");              };
Magic Number,Oak.Tests.describe_DynamicRepository,pagination,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\pagination.cs,specify_paged_for_repo,The following statement contains a magic number: var result = records.Paged("Name like @0"' pageSize: 5' args: "%10%").Items;
Magic Number,Oak.Tests.describe_DynamicRepository,pagination,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\pagination.cs,specify_paged_for_repo,The following statement contains a magic number: ((int)result.Count()).should_be(5);
Magic Number,Oak.Tests.describe_DynamicRepository,pagination,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\pagination.cs,specify_paged_query_for_repo,The following statement contains a magic number: var result = records.PagedQuery(                  @"select r.*                     from records r                     inner join otherrecords other                     on r.Id = other.RecordId                     where Name2 like @0"' pageSize: 5' args: "%30%").Items;
Magic Number,Oak.Tests.describe_DynamicRepository,pagination,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicRepository\pagination.cs,specify_paged_query_for_repo,The following statement contains a magic number: ((int)result.Count()).should_be(5);
Magic Number,Oak.Tests.describe_DynamicToJson,casing,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\casing.cs,describe_casing,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Gemini(                  new                  {                      Id = 15'                      Name = "Mirror's Edge"'                      Owner = new Gemini(new                      {                          Id = 22'                          Handle = "@amirrajan"                      })                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,casing,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\casing.cs,describe_casing,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Gemini(                  new                  {                      Id = 15'                      Name = "Mirror's Edge"'                      Owner = new Gemini(new                      {                          Id = 22'                          Handle = "@amirrajan"                      })                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,serialization_of_self_reference_objects,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\serialization_of_self_reference_objects.cs,describe_db_rows_to_json,The following statement contains a magic number: before = () =>              {                  Seed seed = new Seed();                    seed.PurgeDb();                    seed.CreateTable("Rabbits"' seed.Id()' new { Name = "nvarchar(255)" }).ExecuteNonQuery();                    seed.CreateTable("Tasks"'                      seed.Id()'                      new { Description = "nvarchar(255)" }'                      new { RabbitId = "int" }'                      new { DueDate = "datetime" }).ExecuteNonQuery();                    var rabbitId = new { Name = "Yours Truly" }.InsertInto("Rabbits");                    new { rabbitId' Description = "bolt onto vans"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Hiro Protaganist" }.InsertInto("Rabbits");                    new { rabbitId' Description = "save the world"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    new { rabbitId' Description = "deliver pizza"' DueDate = new DateTime(2013' 1' 14) }.InsertInto("Tasks");                    rabbitId = new { Name = "Lots" }.InsertInto("Rabbits");                    for (int i = 0; i < 10; i++)                  {                      new                      {                          rabbitId'                          Description = "Task: " + i.ToString()'                          DueDate = new DateTime(2013' 1' 14)                      }.InsertInto("Tasks");                  }              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Prototype();                  objectToConvert.Id = 15;                  objectToConvert.String = "hello";                  objectToConvert.Char = 'a';                  objectToConvert.DateTime = DateTime.Today;                  objectToConvert.Double = (double)100;                  objectToConvert.Guid = Guid.Empty;                  objectToConvert.Decimal = (decimal)15;                  objectToConvert.StringAsNull = null as string;                  objectToConvert.Long = (long)100;                  objectToConvert.S = "property with single character";              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Prototype();                  objectToConvert.Id = 15;                  objectToConvert.String = "hello";                  objectToConvert.Char = 'a';                  objectToConvert.DateTime = DateTime.Today;                  objectToConvert.Double = (double)100;                  objectToConvert.Guid = Guid.Empty;                  objectToConvert.Decimal = (decimal)15;                  objectToConvert.StringAsNull = null as string;                  objectToConvert.Long = (long)100;                  objectToConvert.S = "property with single character";              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Prototype();                  objectToConvert.Id = 15;                  objectToConvert.String = "hello";                  objectToConvert.Char = 'a';                  objectToConvert.DateTime = DateTime.Today;                  objectToConvert.Double = (double)100;                  objectToConvert.Guid = Guid.Empty;                  objectToConvert.Decimal = (decimal)15;                  objectToConvert.StringAsNull = null as string;                  objectToConvert.Long = (long)100;                  objectToConvert.S = "property with single character";              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Prototype();                  objectToConvert.Id = 15;                  objectToConvert.String = "hello";                  objectToConvert.Char = 'a';                  objectToConvert.DateTime = DateTime.Today;                  objectToConvert.Double = (double)100;                  objectToConvert.Guid = Guid.Empty;                  objectToConvert.Decimal = (decimal)15;                  objectToConvert.StringAsNull = null as string;                  objectToConvert.Long = (long)100;                  objectToConvert.S = "property with single character";              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The following statement contains a magic number: it["converts prototype"] = () =>              {                  var expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6}' ""stringAsNull"": {7}' ""long"": 100' ""s"": ""property with single character"" }}"                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15' "null");                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The following statement contains a magic number: it["converts prototype"] = () =>              {                  var expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6}' ""stringAsNull"": {7}' ""long"": 100' ""s"": ""property with single character"" }}"                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15' "null");                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_prototype_to_json,The following statement contains a magic number: it["converts prototype"] = () =>              {                  var expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6}' ""stringAsNull"": {7}' ""long"": 100' ""s"": ""property with single character"" }}"                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15' "null");                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_gemini_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Gemini(new                  {                      Id = 15'                      String = "hello"'                      Char = 'a''                      DateTime = DateTime.Today'                      Double = (double)100'                      Guid = Guid.Empty'                      Decimal = (decimal)15'                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_gemini_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Gemini(new                  {                      Id = 15'                      String = "hello"'                      Char = 'a''                      DateTime = DateTime.Today'                      Double = (double)100'                      Guid = Guid.Empty'                      Decimal = (decimal)15'                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_gemini_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Gemini(new                  {                      Id = 15'                      String = "hello"'                      Char = 'a''                      DateTime = DateTime.Today'                      Double = (double)100'                      Guid = Guid.Empty'                      Decimal = (decimal)15'                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_gemini_to_json,The following statement contains a magic number: it["converts gemini"] = () =>              {                  string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}"                                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15);                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_gemini_to_json,The following statement contains a magic number: it["converts gemini"] = () =>              {                  string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}"                                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15);                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_gemini_to_json,The following statement contains a magic number: it["converts gemini"] = () =>              {                  string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}"                                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15);                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_dynamic_model_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new DynamicModel(new                  {                      Id = 15'                      String = "hello"'                      Char = 'a''                      DateTime = DateTime.Today'                      Double = (double)100'                      Guid = Guid.Empty'                      Decimal = (decimal)15'                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_dynamic_model_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new DynamicModel(new                  {                      Id = 15'                      String = "hello"'                      Char = 'a''                      DateTime = DateTime.Today'                      Double = (double)100'                      Guid = Guid.Empty'                      Decimal = (decimal)15'                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_dynamic_model_to_json,The following statement contains a magic number: before = () =>              {                  objectToConvert = new DynamicModel(new                  {                      Id = 15'                      String = "hello"'                      Char = 'a''                      DateTime = DateTime.Today'                      Double = (double)100'                      Guid = Guid.Empty'                      Decimal = (decimal)15'                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_dynamic_model_to_json,The following statement contains a magic number: it["converts dynamic model"] = () =>              {                  string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}"                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15);                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_dynamic_model_to_json,The following statement contains a magic number: it["converts dynamic model"] = () =>              {                  string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}"                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15);                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_dynamic_model_to_json,The following statement contains a magic number: it["converts dynamic model"] = () =>              {                  string expected = @"{{ ""id"": {0}' ""string"": ""{1}""' ""char"": ""{2}""' ""dateTime"": ""{3}""' ""double"": {4}' ""guid"": ""{5}""' ""decimal"": {6} }}"                      .With(15' "hello"' 'a'' DateTime.Today' (double)100' Guid.Empty' (decimal)15);                    jsonString.should_be(expected);              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_collection,The following statement contains a magic number: before = () =>              {                  dynamic prototype = new Prototype();                  prototype.Id = 1;                    objectToConvert = new List<dynamic>                  {                      prototype'                      new DynamicModel(new { Id = 2 })'                      new Gemini(new { Id = 3 })'                  };              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,describe_collection,The following statement contains a magic number: before = () =>              {                  dynamic prototype = new Prototype();                  prototype.Id = 1;                    objectToConvert = new List<dynamic>                  {                      prototype'                      new DynamicModel(new { Id = 2 })'                      new Gemini(new { Id = 3 })'                  };              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_list_numeric,The following statement contains a magic number: before = () =>              {                  List<dynamic> users = new List<dynamic>                  {                      10'                      20                  };                    objectToConvert = new                  {                      Users = users.Where(s => s % 10 == 0)                  };              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_list_numeric,The following statement contains a magic number: before = () =>              {                  List<dynamic> users = new List<dynamic>                  {                      10'                      20                  };                    objectToConvert = new                  {                      Users = users.Where(s => s % 10 == 0)                  };              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_list_numeric,The following statement contains a magic number: before = () =>              {                  List<dynamic> users = new List<dynamic>                  {                      10'                      20                  };                    objectToConvert = new                  {                      Users = users.Where(s => s % 10 == 0)                  };              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_nested_object,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Gemini(                  new                  {                      Id = 15'                      Name = "Mirror's Edge"'                      Owner = new Gemini(new                      {                          Id = 22'                          Handle = "@amirrajan"                      })                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_nested_object,The following statement contains a magic number: before = () =>              {                  objectToConvert = new Gemini(                  new                  {                      Id = 15'                      Name = "Mirror's Edge"'                      Owner = new Gemini(new                      {                          Id = 22'                          Handle = "@amirrajan"                      })                  });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_dynamic_model,The following statement contains a magic number: before = () =>              {                  objectToConvert = new SomeDynamicModel(new { Id = 20' Title = "SomeTitle" });              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_named_classes,The following statement contains a magic number: before = () =>              {                  objectToConvert = new                  {                      Goal = new Goal                      {                          Cost = 100'                          Name = "Goal"'                          Expense = new Expense                          {                              Amount = 500'                              Name = "Expense"                          }                      }                  };              };
Magic Number,Oak.Tests.describe_DynamicToJson,simple_serializations,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicToJson\simple_serializations.cs,converting_named_classes,The following statement contains a magic number: before = () =>              {                  objectToConvert = new                  {                      Goal = new Goal                      {                          Cost = 100'                          Name = "Goal"'                          Expense = new Expense                          {                              Amount = 500'                              Name = "Expense"                          }                      }                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["core behavior"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30' DueDate = DateTime.Today });                    act = () => gemini = gemini.Select("Term"' "Amount");                    it["only responds to properties that were selected"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["core behavior"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30' DueDate = DateTime.Today });                    act = () => gemini = gemini.Select("Term"' "Amount");                    it["only responds to properties that were selected"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["core behavior"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30' DueDate = DateTime.Today });                    act = () => gemini = gemini.Select("Term"' "Amount");                    it["only responds to properties that were selected"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["collections"] = () =>              {                  before = () => gemini = new Gemini(new List<string> { "First"' "Second" });                    it["initializes a property called items and sets it to the collection"] = () =>                  {                      (gemini.Items as List<string>).Count().should_be(2);                        (gemini.Items[0] as string).should_be("First");                        (gemini.Items[1] as string).should_be("Second");                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["value types"] = () =>              {                  before = () => gemini = new Gemini(15);                    it["initializes a property called value"] = () =>                      (gemini.Value as object).should_be(15);              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["value types"] = () =>              {                  before = () => gemini = new Gemini(15);                    it["initializes a property called value"] = () =>                      (gemini.Value as object).should_be(15);              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["casing"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30' DueDate = DateTime.Today });                    act = () =>                  {                      gemini = gemini.Select("term"' "aMount"' "dueDate");                  };                    it["case doesn't matter"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("DueDate")).should_be(true);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["casing"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30' DueDate = DateTime.Today });                    act = () =>                  {                      gemini = gemini.Select("term"' "aMount"' "dueDate");                  };                    it["case doesn't matter"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("DueDate")).should_be(true);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,selecting_properties,The following statement contains a magic number: context["casing"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30' DueDate = DateTime.Today });                    act = () =>                  {                      gemini = gemini.Select("term"' "aMount"' "dueDate");                  };                    it["case doesn't matter"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("DueDate")).should_be(true);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,excluding_properties,The following statement contains a magic number: context["core behavior"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30 });                    act = () => gemini = gemini.Exclude("Interest");                    it["only responds to properties that were selected"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,excluding_properties,The following statement contains a magic number: context["core behavior"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30 });                    act = () => gemini = gemini.Exclude("Interest");                    it["only responds to properties that were selected"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,excluding_properties,The following statement contains a magic number: context["core behavior"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30 });                    act = () => gemini = gemini.Exclude("Interest");                    it["only responds to properties that were selected"] = () =>                  {                      ((bool)gemini.RespondsTo("Term")).should_be(true);                        ((bool)gemini.RespondsTo("Amount")).should_be(true);                        ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,excluding_properties,The following statement contains a magic number: context["casing"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30 });                    act = () => gemini = gemini.Exclude("inTerest");                    it["casing doesn't matter"] = () =>                  {                      ((bool)gemini.RespondsTo("Amount")).should_be(true);                      ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,excluding_properties,The following statement contains a magic number: context["casing"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30 });                    act = () => gemini = gemini.Exclude("inTerest");                    it["casing doesn't matter"] = () =>                  {                      ((bool)gemini.RespondsTo("Amount")).should_be(true);                      ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,accessing_property,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\accessing_property.cs,excluding_properties,The following statement contains a magic number: context["casing"] = () =>              {                  before = () => gemini = new Gemini(new { Term = 10' Amount = 100000' Interest = .30 });                    act = () => gemini = gemini.Exclude("inTerest");                    it["casing doesn't matter"] = () =>                  {                      ((bool)gemini.RespondsTo("Amount")).should_be(true);                      ((bool)gemini.RespondsTo("Interest")).should_be(false);                  };              };
Magic Number,Oak.Tests.describe_Gemini,describe_Info,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\describe_Info.cs,specify_nulls_are_not_considered_circular,The following statement contains a magic number: gemini = new Gemini(new { Description = "Test"' Order = 5' Person = (object)null' Person2 = (object)null });
Magic Number,Oak.Tests.describe_Gemini,performance,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\performance_against_nhibernate.cs,Insert100kRows,The following statement contains a magic number: i < 100000
Magic Number,Oak.Tests.describe_Gemini,performance_against_nhibernate,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\performance_against_nhibernate.cs,TimeToRetrieve100kRowsFromNHibernate,The following statement contains a magic number: nhPeople.Count.should_be(100000);
Magic Number,Oak.Tests.describe_Gemini,performance_against_nhibernate,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Gemini\performance_against_nhibernate.cs,TimeToRetrieve100kRowsFromOak,The following statement contains a magic number: oakPeople.Count.should_be(100000);
Magic Number,Oak.Tests.describe_Seed,when_adding_columns,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_adding_columns.cs,add_int_column,The following statement contains a magic number: it["the column can be inserted into"] = () =>               {                  "insert into Users(FooBar) values(42)".ExecuteNonQuery();                  "select top 1 FooBar from Users".ExecuteScalar().should_be(42);              };
Magic Number,Oak.Tests.describe_Seed,when_adding_columns,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_adding_columns.cs,add_two_int_columns,The following statement contains a magic number: it["both columns can be inserted into"] = () =>              {                  "insert into Users(Column1' Column2) values(42' 55)".ExecuteNonQuery();                  "select top 1 Column1 from Users".ExecuteScalar().should_be(42);                  "select top 1 Column2 from Users".ExecuteScalar().should_be(55);              };
Magic Number,Oak.Tests.describe_Seed,when_adding_columns,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_adding_columns.cs,add_two_int_columns,The following statement contains a magic number: it["both columns can be inserted into"] = () =>              {                  "insert into Users(Column1' Column2) values(42' 55)".ExecuteNonQuery();                  "select top 1 Column1 from Users".ExecuteScalar().should_be(42);                  "select top 1 Column2 from Users".ExecuteScalar().should_be(55);              };
Magic Number,Oak.Tests.describe_Seed,when_adding_columns,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_adding_columns.cs,column_with_default_value,The following statement contains a magic number: before = () =>                  columns = new[]                   {                      new { FooBar = "int"' Default = 10' Nullable = false }                  };
Magic Number,Oak.Tests.describe_Seed,when_adding_columns,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_adding_columns.cs,column_with_default_value,The following statement contains a magic number: it["default value is adhered to"] = () =>              {                  "insert into Users(AnExistingColumn) values('Existing Value')".ExecuteNonQuery();                    "select top 1 FooBar from Users".ExecuteScalar().should_be(10);              };
Magic Number,Oak.Tests.describe_Seed,when_adding_columns,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_adding_columns.cs,two_columns_with_default_values,The following statement contains a magic number: before = () =>                  columns = new dynamic[]                   {                      new { Column1 = "int"' Default = 10' Nullable = false }'                      new { Column2 = "nvarchar(255)"' Default = "Test" }                  };
Magic Number,Oak.Tests.describe_Seed,when_adding_columns,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_adding_columns.cs,two_columns_with_default_values,The following statement contains a magic number: it["default values are adhered to"] = () =>              {                  "insert into Users(AnExistingColumn) values('Existing Value')".ExecuteNonQuery();                    "select top 1 Column1 from Users".ExecuteScalar().should_be(10);                    "select top 1 Column2 from Users".ExecuteScalar().should_be("Test");              };
Magic Number,Oak.Tests.describe_Seed,when_creating_table,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_creating_table.cs,table_with_a_string_column,The following statement contains a magic number: it["length specification is adhered to"] =                   expect<SqlException>(() => "insert into Users(FirstName) values('{0}')".With(StringWithLength(300)).ExecuteNonQuery());
Magic Number,Oak.Tests.describe_Seed,when_creating_table,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_Seed\when_creating_table.cs,column_has_a_null_definition,The following statement contains a magic number: it["length specification is adhered to"] =                  expect<SqlException>(() => "insert into Users(FirstName) values('{0}')".With(StringWithLength(300)).ExecuteNonQuery());
Duplicate Code,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_many_and_belongs_to_help,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 35)' (55' 76))
Duplicate Code,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_one_help,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 29)' (44' 64))
Duplicate Code,Oak.Tests.describe_DynamicDb,helpful_errors,D:\research\architectureSmells\repos\amirrajan_Oak\Oak.Tests\describe_DynamicDb\helpful_errors.cs,has_one_through,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 36)' (51' 78))
