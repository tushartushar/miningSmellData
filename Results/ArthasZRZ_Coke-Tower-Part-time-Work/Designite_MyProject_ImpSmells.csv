Implementation smell,Namespace,Class,File,Method,Description
Long Method,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method has 558 lines of code.
Complex Method,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,Cyclomatic complexity of the method is 15
Complex Method,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,Cyclomatic complexity of the method is 15
Complex Method,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawModel,Cyclomatic complexity of the method is 10
Complex Method,WpfRibbonApplication1,WorkSpaceRunModelEnvironment,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,GetModelGeneratingPhase,Cyclomatic complexity of the method is 15
Complex Method,WpfRibbonApplication1,WorkSpaceRunModelEnvironment,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,GetModelTypeString,Cyclomatic complexity of the method is 18
Complex Method,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,Cyclomatic complexity of the method is 19
Complex Method,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,Cyclomatic complexity of the method is 30
Complex Method,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,Cyclomatic complexity of the method is 26
Complex Method,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,ImportFile,Cyclomatic complexity of the method is 13
Complex Method,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelColorTableResolver,Cyclomatic complexity of the method is 15
Complex Method,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelParameterResolver,Cyclomatic complexity of the method is 12
Complex Method,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,Cyclomatic complexity of the method is 9
Complex Method,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,Cyclomatic complexity of the method is 15
Complex Method,Com.StellmanGreene.CSVReader,CSVReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CSVReader.cs,ReadNextObject,Cyclomatic complexity of the method is 10
Complex Method,Com.StellmanGreene.CSVReader,CSVReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CSVReader.cs,CreateDataTable,Cyclomatic complexity of the method is 19
Complex Method,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,ConvertString,Cyclomatic complexity of the method is 11
Long Parameter List,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The method has 6 parameters.
Long Parameter List,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The method has 5 parameters.
Long Parameter List,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The method has 5 parameters.
Long Parameter List,WpfRibbonApplication1,ListNodeBase,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ListNodeBase,The method has 5 parameters.
Long Parameter List,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawModel,The method has 5 parameters.
Long Parameter List,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKLabelGetter,The method has 5 parameters.
Long Parameter List,WpfRibbonApplication1,WorkSpaceClass,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,WorkSpaceClass,The method has 7 parameters.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,RunModelButtonClick,The length of the statement  "	VTKFormRender CraftsModeForm = new VTKFormRender (CraftsModeFormParas' CraftsModeTowerModel' CraftsModeWorkSpaceInstance); " is 122.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,FrontViewBtn_Click_1,The length of the statement  "	camera.SetPosition (form.StoredViewCamera [0].GetPosition () [0]' form.StoredViewCamera [0].GetPosition () [1]' form.StoredViewCamera [0].GetPosition () [2]); " is 158.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,FrontViewBtn_Click_1,The length of the statement  "	camera.SetFocalPoint (form.StoredViewCamera [0].GetFocalPoint () [0]' form.StoredViewCamera [0].GetFocalPoint () [1]' form.StoredViewCamera [0].GetFocalPoint () [2]); " is 166.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,FrontViewBtn_Click_1,The length of the statement  "	camera.SetViewUp (form.StoredViewCamera [0].GetViewUp () [0]' form.StoredViewCamera [0].GetViewUp () [1]' form.StoredViewCamera [0].GetViewUp () [2]); " is 150.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,SideViewBtn_Click_1,The length of the statement  "	camera.SetPosition (form.StoredViewCamera [1].GetPosition () [0]' form.StoredViewCamera [1].GetPosition () [1]' form.StoredViewCamera [1].GetPosition () [2]); " is 158.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,SideViewBtn_Click_1,The length of the statement  "	camera.SetFocalPoint (form.StoredViewCamera [1].GetFocalPoint () [0]' form.StoredViewCamera [1].GetFocalPoint () [1]' form.StoredViewCamera [1].GetFocalPoint () [2]); " is 166.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,SideViewBtn_Click_1,The length of the statement  "	camera.SetViewUp (form.StoredViewCamera [1].GetViewUp () [0]' form.StoredViewCamera [1].GetViewUp () [1]' form.StoredViewCamera [1].GetViewUp () [2]); " is 150.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The length of the statement  "	camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]); " is 158.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The length of the statement  "	camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]); " is 166.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The length of the statement  "	camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]); " is 150.
Long Statement,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,Menu_Click_1,The length of the statement  "		VTKFormRender CraftsModeForm = new VTKFormRender (CraftsModeFormParas' CraftsModeTowerModel' CraftsModeWorkSpaceInstance); " is 122.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,OpenProjButton_Click,The length of the statement  "				WorkSpaceInstance = new WorkSpaceClass (wkspace.NLIST_FILENAME' wkspace.ELIST_FILENAME' wkspace.ROOT_DIR' wkspace.DBNAME' wkspace.TowerModelInstance' wkspace.HeatDoublerInstances' wkspace.Category); " is 198.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,ComfirmSettingButton_Click_1,The length of the statement  "		TowerModel newTowerModel = preExecutor.TowerModelGetter (WorkSpaceInstance.Env.LisFileExecutor' WorkSpaceInstance.Env.TowerModelList' WorkSpaceInstance.TowerModelInstance' paras); " is 179.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,FrontViewBtn_Click_1,The length of the statement  "	camera.SetPosition (form.StoredViewCamera [0].GetPosition () [0]' form.StoredViewCamera [0].GetPosition () [1]' form.StoredViewCamera [0].GetPosition () [2]); " is 158.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,FrontViewBtn_Click_1,The length of the statement  "	camera.SetFocalPoint (form.StoredViewCamera [0].GetFocalPoint () [0]' form.StoredViewCamera [0].GetFocalPoint () [1]' form.StoredViewCamera [0].GetFocalPoint () [2]); " is 166.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,FrontViewBtn_Click_1,The length of the statement  "	camera.SetViewUp (form.StoredViewCamera [0].GetViewUp () [0]' form.StoredViewCamera [0].GetViewUp () [1]' form.StoredViewCamera [0].GetViewUp () [2]); " is 150.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,SideViewBtn_Click_1,The length of the statement  "	camera.SetPosition (form.StoredViewCamera [1].GetPosition () [0]' form.StoredViewCamera [1].GetPosition () [1]' form.StoredViewCamera [1].GetPosition () [2]); " is 158.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,SideViewBtn_Click_1,The length of the statement  "	camera.SetFocalPoint (form.StoredViewCamera [1].GetFocalPoint () [0]' form.StoredViewCamera [1].GetFocalPoint () [1]' form.StoredViewCamera [1].GetFocalPoint () [2]); " is 166.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,SideViewBtn_Click_1,The length of the statement  "	camera.SetViewUp (form.StoredViewCamera [1].GetViewUp () [0]' form.StoredViewCamera [1].GetViewUp () [1]' form.StoredViewCamera [1].GetViewUp () [2]); " is 150.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The length of the statement  "	camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]); " is 158.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The length of the statement  "	camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]); " is 166.
Long Statement,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The length of the statement  "	camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]); " is 150.
Long Statement,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The length of the statement  "	mapper.SetScalarRange (TowerModelInstance.GetColorGenColorTableMinvalue ()' TowerModelInstance.GetColorGenColorTableMaxValue ()); " is 129.
Long Statement,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The length of the statement  "	hueLut.SetTableRange (TowerModelInstance.GetColorGenColorTableMinvalue ()' TowerModelInstance.GetColorGenColorTableMaxValue ()); " is 128.
Long Statement,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,VTKInfoBuilder,The length of the statement  "	outPutChartString += "Min: " + TowerModelInstance.GetColorGenColorTableMinvalue ().ToString () + " Max: " + TowerModelInstance.GetColorGenColorTableMaxValue ().ToString () + "\n"; " is 179.
Long Statement,WpfRibbonApplication1.Models,CraftsModeExecutor,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CraftsModeExecutor.cs,CraftsModePreExecutor,The length of the statement  "		TowerModel newTowerModel = preExecutor.TowerModelGetter (CfEnv.WorkSpaceInstance.Env.LisFileExecutor' CfEnv.WorkSpaceInstance.Env.TowerModelList' CfEnv.WorkSpaceInstance.TowerModelInstance' CfEnv.paras); " is 203.
Long Statement,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,ImportFile,The length of the statement  "		FileStream fstream = new FileStream (System.AppDomain.CurrentDomain.BaseDirectory + @"\" + fname' FileMode.Open' FileAccess.Read); " is 130.
Long Statement,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The length of the statement  "		point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2; " is 171.
Long Statement,WpfRibbonApplication1.Models,HeatDoublers,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\HeatDoublers.cs,HeatDoublerBuilder,The length of the statement  "		Models.HeatDoubler hdrow = new Models.HeatDoubler (dr [0].ToString ()' System.Convert.ToDouble (dr [1])' System.Convert.ToDouble (dr [2])' System.Convert.ToDouble (dr [3])); " is 173.
Long Statement,Com.StellmanGreene.CSVReader,CSVReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CSVReader.cs,ReadNextObject,The length of the statement  "		|| (!quoted && currentLine.Substring (i' 1) == "'") // quoted strings end with a quote followed by a comma or end of line " is 121.
Complex Conditional,Com.StellmanGreene.CSVReader,CSVReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CSVReader.cs,ReadNextObject,The conditional expression  "(!quoted && i == len) // non-quoted strings end with a comma or end of line  || (!quoted && currentLine.Substring (i' 1) == "'") // quoted strings end with a quote followed by a comma or end of line  || (quoted && i == len - 1 && currentLine.EndsWith ("\"")) || (quoted && currentLine.Substring (i' 2) == "\"'")"  is complex.
Empty Catch Block,Com.StellmanGreene.CSVReader,CSVReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CSVReader.cs,Dispose,The method has an empty catch block.
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,CraftsMode,The following statement contains a magic number: CfExe.CraftsModeEnvSetter (450' 500);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,CraftsMode,The following statement contains a magic number: CfExe.CraftsModeEnvSetter (450' 500);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,FrontViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [0].GetPosition () [0]' form.StoredViewCamera [0].GetPosition () [1]' form.StoredViewCamera [0].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,FrontViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [0].GetFocalPoint () [0]' form.StoredViewCamera [0].GetFocalPoint () [1]' form.StoredViewCamera [0].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,FrontViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [0].GetViewUp () [0]' form.StoredViewCamera [0].GetViewUp () [1]' form.StoredViewCamera [0].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,SideViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [1].GetPosition () [0]' form.StoredViewCamera [1].GetPosition () [1]' form.StoredViewCamera [1].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,SideViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [1].GetFocalPoint () [0]' form.StoredViewCamera [1].GetFocalPoint () [1]' form.StoredViewCamera [1].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,SideViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [1].GetViewUp () [0]' form.StoredViewCamera [1].GetViewUp () [1]' form.StoredViewCamera [1].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetRoll (form.StoredViewCamera [2].GetRoll ());  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: if (name == "预热阶段")  	return 0;  else if (name == "进油生焦阶段")  	return 1;  else if (name == "吹气冷焦阶段")  	return 2;  else if (name == "给水冷焦阶段")  	return 3;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: if (name == "预热阶段")  	return 0;  else if (name == "进油生焦阶段")  	return 1;  else if (name == "吹气冷焦阶段")  	return 2;  else if (name == "给水冷焦阶段")  	return 3;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: if (name == "进油生焦阶段")  	return 1;  else if (name == "吹气冷焦阶段")  	return 2;  else if (name == "给水冷焦阶段")  	return 3;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: if (name == "进油生焦阶段")  	return 1;  else if (name == "吹气冷焦阶段")  	return 2;  else if (name == "给水冷焦阶段")  	return 3;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: if (name == "吹气冷焦阶段")  	return 2;  else if (name == "给水冷焦阶段")  	return 3;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: if (name == "吹气冷焦阶段")  	return 2;  else if (name == "给水冷焦阶段")  	return 3;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: return 2;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: if (name == "给水冷焦阶段")  	return 3;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToStageId,The following statement contains a magic number: return 3;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "温度模型")  	return 0;  else if (name == "变形模型")  	return 1;  else if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "温度模型")  	return 0;  else if (name == "变形模型")  	return 1;  else if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "温度模型")  	return 0;  else if (name == "变形模型")  	return 1;  else if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "变形模型")  	return 1;  else if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "变形模型")  	return 1;  else if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "变形模型")  	return 1;  else if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "应力模型")  	return 2;  else if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: return 2;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "弹性应变模型")  	return 3;  else if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: return 3;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: if (name == "塑性应变模型")  	return 4;  else  	return -1;  
Magic Number,WpfRibbonApplication1,CraftsMode,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\CraftsMode.xaml.cs,NameToModelId,The following statement contains a magic number: return 4;  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: paras.RotateAngle = 180;  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,FrontViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [0].GetPosition () [0]' form.StoredViewCamera [0].GetPosition () [1]' form.StoredViewCamera [0].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,FrontViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [0].GetFocalPoint () [0]' form.StoredViewCamera [0].GetFocalPoint () [1]' form.StoredViewCamera [0].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,FrontViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [0].GetViewUp () [0]' form.StoredViewCamera [0].GetViewUp () [1]' form.StoredViewCamera [0].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,SideViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [1].GetPosition () [0]' form.StoredViewCamera [1].GetPosition () [1]' form.StoredViewCamera [1].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,SideViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [1].GetFocalPoint () [0]' form.StoredViewCamera [1].GetFocalPoint () [1]' form.StoredViewCamera [1].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,SideViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [1].GetViewUp () [0]' form.StoredViewCamera [1].GetViewUp () [1]' form.StoredViewCamera [1].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetRoll (form.StoredViewCamera [2].GetRoll ());  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetPosition (form.StoredViewCamera [2].GetPosition () [0]' form.StoredViewCamera [2].GetPosition () [1]' form.StoredViewCamera [2].GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetFocalPoint (form.StoredViewCamera [2].GetFocalPoint () [0]' form.StoredViewCamera [2].GetFocalPoint () [1]' form.StoredViewCamera [2].GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,MainWindow,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\MainWindow.xaml.cs,VerticalViewBtn_Click_1,The following statement contains a magic number: camera.SetViewUp (form.StoredViewCamera [2].GetViewUp () [0]' form.StoredViewCamera [2].GetViewUp () [1]' form.StoredViewCamera [2].GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,FormParas,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,FormParas,The following statement contains a magic number: Width = 300.0;  
Magic Number,WpfRibbonApplication1,FormParas,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,FormParas,The following statement contains a magic number: Height = 300.0;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	profile.GetCellData ().SetScalars (scalars);  	mapper.SetInput (profile);  }  else {  	vtkRotationalExtrusionFilter refilter = vtkRotationalExtrusionFilter.New ();  	profile.Update ();  	profile.GetCellData ().SetScalars (scalars);  	//profile.GetPointData().SetScalars(scalars);  	refilter.SetInput (profile);  	refilter.SetResolution (50);  	refilter.SetAngle (paras.RotateAngle);  	refilter.SetTranslation (0);  	refilter.SetDeltaRadius (0);  	mapper.SetInputConnection (refilter.GetOutputPort ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The following statement contains a magic number: refilter.SetResolution (50);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The following statement contains a magic number: textProperty.SetFontSize (10);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The following statement contains a magic number: scalarBar.SetWidth (0.07);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The following statement contains a magic number: scalarBar.SetHeight (0.6);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilder,The following statement contains a magic number: hueLut.SetHueRange (0.667' 0);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	profile.GetCellData ().SetScalars (scalars);  	mapper.SetInput (profile);  }  else {  	vtkRotationalExtrusionFilter refilter = vtkRotationalExtrusionFilter.New ();  	profile.Update ();  	profile.GetCellData ().SetScalars (scalars);  	//profile.GetPointData().SetScalars(scalars);  	refilter.SetInput (profile);  	refilter.SetResolution (50);  	refilter.SetAngle (paras.RotateAngle);  	refilter.SetTranslation (0);  	refilter.SetDeltaRadius (0);  	mapper.SetInputConnection (refilter.GetOutputPort ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: refilter.SetResolution (50);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: mapper.SetScalarRange (0' 5);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetNumberOfTableValues (7);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (1' 0' 0' 0.8' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (2' 0' 1' 0' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (3' 0' 0' 1' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (4' 0' 0' 0.8' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (4' 0' 0' 0.8' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (5' 0' 0.8' 0' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,BasicVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (5' 0' 0.8' 0' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	profile.GetCellData ().SetScalars (scalars);  	ExtProfile.SetInput (profile);  	mapper.SetInputConnection (ExtProfile.GetOutputPort ());  }  else {  	vtkRotationalExtrusionFilter refilter = vtkRotationalExtrusionFilter.New ();  	profile.Update ();  	profile.GetCellData ().SetScalars (scalars);  	//profile.GetPointData().SetScalars(scalars);  	ExtProfile.SetInput (profile);  	refilter.SetInputConnection (ExtProfile.GetOutputPort ());  	refilter.SetResolution (50);  	refilter.SetAngle (paras.RotateAngle);  	refilter.SetTranslation (0);  	refilter.SetDeltaRadius (0);  	mapper.SetInputConnection (refilter.GetOutputPort ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: refilter.SetResolution (50);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: mapper.SetScalarRange (0' 5);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetNumberOfTableValues (7);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (1' 0' 0' 0.8' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (2' 0' 1' 0' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (3' 0' 0' 1' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (4' 0' 0' 0.8' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (4' 0' 0' 0.8' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (5' 0' 0.8' 0' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,ExtractEdgesVTKBuilderWithoutRunning,The following statement contains a magic number: Luk.SetTableValue (5' 0' 0.8' 0' 1);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,VirtualHeaterVTKBuilder,The following statement contains a magic number: textProp.SetFontSize (12);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,VirtualHeaterVTKBuilder,The following statement contains a magic number: hie.SetMaximumDepth (15);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,VirtualHeaterVTKBuilder,The following statement contains a magic number: hie.SetTargetLabelCount (100);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,VTKInfoBuilder,The following statement contains a magic number: colorText.GetTextProperty ().SetFontSize (12);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,VTKInfoBuilder,The following statement contains a magic number: colorTextActor.SetDisplayPosition (20' 50);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,VTKInfoBuilder,The following statement contains a magic number: colorTextActor.SetDisplayPosition (20' 50);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.globalEnv == 1)  	camera_pos [1] = -70;  else  	camera_pos [1] = -80;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.globalEnv == 1)  	camera_pos [1] = -70;  else  	camera_pos [1] = -80;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [1] = -70;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [1] = -80;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 0) {  	camera_pos [1] = -camera_pos [1];  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (-2);  }  else if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [0] = camera_pos [2] = 0;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera.SetRoll (-2);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 180) {  	camera_pos [0] = camera_pos [2] = 0;  	camera.SetRoll (180);  }  else if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [0] = camera_pos [2] = 0;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera.SetRoll (180);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 90) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(-r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (225);  }  else if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [0] = (int)(-r * 0.707);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [1] = (int)(-r * 0.707);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [2] = 0;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera.SetRoll (225);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (paras.RotateAngle == 270) {  	double r = (double)Math.Abs (camera_pos [1]);  	camera_pos [0] = (int)(r * 0.707);  	camera_pos [1] = (int)(-r * 0.707);  	camera_pos [2] = 0;  	camera.SetRoll (135);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [0] = (int)(r * 0.707);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [1] = (int)(-r * 0.707);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera_pos [2] = 0;  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera.SetRoll (135);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera.SetPosition ((double)camera_pos [0]' (double)camera_pos [1]' (double)camera_pos [2]);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: camera.Zoom (0.9);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vtkCamera ViewCamera = new vtkCamera ();  	if (i == 0) {  		ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	else if (i == 1) {  		ViewCamera.SetPosition (80' 0' 0);  		ViewCamera.SetRoll (180);  	}  	else if (i == 2) {  		ViewCamera.SetPosition (0' 0' -80);  		ViewCamera.SetRoll (camera.GetRoll ());  	}  	ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  	ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  	StoredViewCamera.Add (ViewCamera);  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 0) {  	ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  	ViewCamera.SetRoll (camera.GetRoll ());  }  else if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 0) {  	ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  	ViewCamera.SetRoll (camera.GetRoll ());  }  else if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 0) {  	ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  	ViewCamera.SetRoll (camera.GetRoll ());  }  else if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 0) {  	ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  	ViewCamera.SetRoll (camera.GetRoll ());  }  else if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 0) {  	ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  	ViewCamera.SetRoll (camera.GetRoll ());  }  else if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: ViewCamera.SetPosition (camera.GetPosition () [0]' camera.GetPosition () [1]' camera.GetPosition () [2]);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 1) {  	ViewCamera.SetPosition (80' 0' 0);  	ViewCamera.SetRoll (180);  }  else if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: ViewCamera.SetPosition (80' 0' 0);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: ViewCamera.SetRoll (180);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: if (i == 2) {  	ViewCamera.SetPosition (0' 0' -80);  	ViewCamera.SetRoll (camera.GetRoll ());  }  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: ViewCamera.SetPosition (0' 0' -80);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: ViewCamera.SetFocalPoint (camera.GetFocalPoint () [0]' camera.GetFocalPoint () [1]' camera.GetFocalPoint () [2]);  
Magic Number,WpfRibbonApplication1,VTKFormRender,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\VTKFormRender.cs,renderWindowControl1_Load,The following statement contains a magic number: ViewCamera.SetViewUp (camera.GetViewUp () [0]' camera.GetViewUp () [1]' camera.GetViewUp () [2]);  
Magic Number,WpfRibbonApplication1,ListElemBase,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ListElemBase,The following statement contains a magic number: Elem_Modeltype = new int[5];  
Magic Number,WpfRibbonApplication1,ListElemBase,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ListElemBase,The following statement contains a magic number: Elem_Nodes = new int[8];  
Magic Number,WpfRibbonApplication1,ListNodeBase,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ListNodeBase,The following statement contains a magic number: Node_Coord = new double[3];  
Magic Number,WpfRibbonApplication1,ListNodeBase,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ListNodeBase,The following statement contains a magic number: Node_Coord [2] = Z;  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpNode != null) {  	string[] tmpNodeSplit = Regex.Split (tmpNode.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpNodeSplit [0] == "NODE") {  		NodeBegin = 1;  	}  	else if (NodeBegin == 1 && tmpNodeSplit [0] != "") {  		int NodeNumber = int.Parse (tmpNodeSplit [0]);  		double[] Coord = new double[3];  		int cnt = 0;  		int start = 0;  		foreach (string str in tmpNodeSplit) {  			if (start == 0)  				start = 1;  			else if (str != "") {  				Coord [cnt] = System.Convert.ToDouble (str);  				cnt++;  			}  		}  		NodeList.Add (new ListNodeBase (NodeListSize' NodeNumber' Coord [0]' Coord [1]' Coord [2]));  		NodeListSize++;  	}  	tmpNode = srNode.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpNode != null) {  	string[] tmpNodeSplit = Regex.Split (tmpNode.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpNodeSplit [0] == "NODE") {  		NodeBegin = 1;  	}  	else if (NodeBegin == 1 && tmpNodeSplit [0] != "") {  		int NodeNumber = int.Parse (tmpNodeSplit [0]);  		double[] Coord = new double[3];  		int cnt = 0;  		int start = 0;  		foreach (string str in tmpNodeSplit) {  			if (start == 0)  				start = 1;  			else if (str != "") {  				Coord [cnt] = System.Convert.ToDouble (str);  				cnt++;  			}  		}  		NodeList.Add (new ListNodeBase (NodeListSize' NodeNumber' Coord [0]' Coord [1]' Coord [2]));  		NodeListSize++;  	}  	tmpNode = srNode.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpNodeSplit [0] == "NODE") {  	NodeBegin = 1;  }  else if (NodeBegin == 1 && tmpNodeSplit [0] != "") {  	int NodeNumber = int.Parse (tmpNodeSplit [0]);  	double[] Coord = new double[3];  	int cnt = 0;  	int start = 0;  	foreach (string str in tmpNodeSplit) {  		if (start == 0)  			start = 1;  		else if (str != "") {  			Coord [cnt] = System.Convert.ToDouble (str);  			cnt++;  		}  	}  	NodeList.Add (new ListNodeBase (NodeListSize' NodeNumber' Coord [0]' Coord [1]' Coord [2]));  	NodeListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpNodeSplit [0] == "NODE") {  	NodeBegin = 1;  }  else if (NodeBegin == 1 && tmpNodeSplit [0] != "") {  	int NodeNumber = int.Parse (tmpNodeSplit [0]);  	double[] Coord = new double[3];  	int cnt = 0;  	int start = 0;  	foreach (string str in tmpNodeSplit) {  		if (start == 0)  			start = 1;  		else if (str != "") {  			Coord [cnt] = System.Convert.ToDouble (str);  			cnt++;  		}  	}  	NodeList.Add (new ListNodeBase (NodeListSize' NodeNumber' Coord [0]' Coord [1]' Coord [2]));  	NodeListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (NodeBegin == 1 && tmpNodeSplit [0] != "") {  	int NodeNumber = int.Parse (tmpNodeSplit [0]);  	double[] Coord = new double[3];  	int cnt = 0;  	int start = 0;  	foreach (string str in tmpNodeSplit) {  		if (start == 0)  			start = 1;  		else if (str != "") {  			Coord [cnt] = System.Convert.ToDouble (str);  			cnt++;  		}  	}  	NodeList.Add (new ListNodeBase (NodeListSize' NodeNumber' Coord [0]' Coord [1]' Coord [2]));  	NodeListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (NodeBegin == 1 && tmpNodeSplit [0] != "") {  	int NodeNumber = int.Parse (tmpNodeSplit [0]);  	double[] Coord = new double[3];  	int cnt = 0;  	int start = 0;  	foreach (string str in tmpNodeSplit) {  		if (start == 0)  			start = 1;  		else if (str != "") {  			Coord [cnt] = System.Convert.ToDouble (str);  			cnt++;  		}  	}  	NodeList.Add (new ListNodeBase (NodeListSize' NodeNumber' Coord [0]' Coord [1]' Coord [2]));  	NodeListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: NodeList.Add (new ListNodeBase (NodeListSize' NodeNumber' Coord [0]' Coord [1]' Coord [2]));  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: while (tmpElem != null) {  	string[] tmpElemSplit = Regex.Split (tmpElem.Trim ()' " "' RegexOptions.IgnoreCase);  	if (tmpElemSplit [0] == "ELEM") {  		ElemBegin = 1;  	}  	else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  		int ElemNumber = int.Parse (tmpElemSplit [0]);  		int[] M = new int[5];  		int[] N = new int[8];  		int cntM = 0' cntN = 0;  		int start = 0;  		foreach (string str in tmpElemSplit) {  			if (start == 0)  				start++;  			else if (str != "") {  				if (cntM == 5) {  					N [cntN] = int.Parse (str);  					cntN++;  				}  				else {  					M [cntM] = int.Parse (str);  					cntM++;  				}  			}  		}  		//Elemlist reorder  		int[] new_N = new int[8];  		new_N [0] = N [0];  		new_N [2] = N [1];  		new_N [4] = N [2];  		new_N [6] = N [3];  		new_N [1] = N [4];  		new_N [3] = N [5];  		new_N [5] = N [6];  		new_N [7] = N [7];  		ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  		ElemListSize++;  	}  	tmpElem = srElem.ReadLine ();  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (tmpElemSplit [0] == "ELEM") {  	ElemBegin = 1;  }  else if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (ElemBegin == 1 && tmpElemSplit [0] != "") {  	int ElemNumber = int.Parse (tmpElemSplit [0]);  	int[] M = new int[5];  	int[] N = new int[8];  	int cntM = 0' cntN = 0;  	int start = 0;  	foreach (string str in tmpElemSplit) {  		if (start == 0)  			start++;  		else if (str != "") {  			if (cntM == 5) {  				N [cntN] = int.Parse (str);  				cntN++;  			}  			else {  				M [cntM] = int.Parse (str);  				cntM++;  			}  		}  	}  	//Elemlist reorder  	int[] new_N = new int[8];  	new_N [0] = N [0];  	new_N [2] = N [1];  	new_N [4] = N [2];  	new_N [6] = N [3];  	new_N [1] = N [4];  	new_N [3] = N [5];  	new_N [5] = N [6];  	new_N [7] = N [7];  	ElemList.Add (new ListElemBase (ElemNumber' M' new_N));  	ElemListSize++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: foreach (string str in tmpElemSplit) {  	if (start == 0)  		start++;  	else if (str != "") {  		if (cntM == 5) {  			N [cntN] = int.Parse (str);  			cntN++;  		}  		else {  			M [cntM] = int.Parse (str);  			cntM++;  		}  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (start == 0)  	start++;  else if (str != "") {  	if (cntM == 5) {  		N [cntN] = int.Parse (str);  		cntN++;  	}  	else {  		M [cntM] = int.Parse (str);  		cntM++;  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (str != "") {  	if (cntM == 5) {  		N [cntN] = int.Parse (str);  		cntN++;  	}  	else {  		M [cntM] = int.Parse (str);  		cntM++;  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: if (cntM == 5) {  	N [cntN] = int.Parse (str);  	cntN++;  }  else {  	M [cntM] = int.Parse (str);  	cntM++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [2] = N [1];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [4] = N [2];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [4] = N [2];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [6] = N [3];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [6] = N [3];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [1] = N [4];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [3] = N [5];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [3] = N [5];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [5] = N [6];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [5] = N [6];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [7] = N [7];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,ImportModel,The following statement contains a magic number: new_N [7] = N [7];  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawModel,The following statement contains a magic number: foreach (ListElemBase elem in ElemList) {  	strips.InsertNextCell (8);  	if (paras.StageID == -1)  		scalars.InsertNextValue (elem.Elem_Modeltype [0]);  	else {  		if (IfElemToPropertyKeyExists (elem.Elem_Number))  			scalars.SetValue (cnt' (float)GetElemToProperty (elem.Elem_Number));  		else  			scalars.SetValue (cnt' 0);  		//MessageBox.Show(((float)GetElemToProperty(elem.Elem_Number)).ToString());  	}  	for (int i = 0; i < 8; i++) {  		int NodeId = elem.Elem_Nodes [i];  		int NodePosInPointsArray = GetNodePositionInNodeListFromNodeId (NodeId);  		strips.InsertCellPoint (NodePosInPointsArray);  		if (paras.StageID != -1) {  			if (NodeList [NodePosInPointsArray].Node_Coord [0] > MAX_R) {  				MAX_R = NodeList [NodePosInPointsArray].Node_Coord [0];  				if (IfElemToPropertyKeyExists (elem.Elem_Number))  					MAX_R_VALUE = GetElemToProperty (elem.Elem_Number);  				else  					MAX_R_VALUE = 0;  				MAX_ELEM_NUM = elem.Elem_Number;  			}  		}  	}  	cnt++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawModel,The following statement contains a magic number: foreach (ListElemBase elem in ElemList) {  	strips.InsertNextCell (8);  	if (paras.StageID == -1)  		scalars.InsertNextValue (elem.Elem_Modeltype [0]);  	else {  		if (IfElemToPropertyKeyExists (elem.Elem_Number))  			scalars.SetValue (cnt' (float)GetElemToProperty (elem.Elem_Number));  		else  			scalars.SetValue (cnt' 0);  		//MessageBox.Show(((float)GetElemToProperty(elem.Elem_Number)).ToString());  	}  	for (int i = 0; i < 8; i++) {  		int NodeId = elem.Elem_Nodes [i];  		int NodePosInPointsArray = GetNodePositionInNodeListFromNodeId (NodeId);  		strips.InsertCellPoint (NodePosInPointsArray);  		if (paras.StageID != -1) {  			if (NodeList [NodePosInPointsArray].Node_Coord [0] > MAX_R) {  				MAX_R = NodeList [NodePosInPointsArray].Node_Coord [0];  				if (IfElemToPropertyKeyExists (elem.Elem_Number))  					MAX_R_VALUE = GetElemToProperty (elem.Elem_Number);  				else  					MAX_R_VALUE = 0;  				MAX_ELEM_NUM = elem.Elem_Number;  			}  		}  	}  	cnt++;  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawModel,The following statement contains a magic number: strips.InsertNextCell (8);  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawModel,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	int NodeId = elem.Elem_Nodes [i];  	int NodePosInPointsArray = GetNodePositionInNodeListFromNodeId (NodeId);  	strips.InsertCellPoint (NodePosInPointsArray);  	if (paras.StageID != -1) {  		if (NodeList [NodePosInPointsArray].Node_Coord [0] > MAX_R) {  			MAX_R = NodeList [NodePosInPointsArray].Node_Coord [0];  			if (IfElemToPropertyKeyExists (elem.Elem_Number))  				MAX_R_VALUE = GetElemToProperty (elem.Elem_Number);  			else  				MAX_R_VALUE = 0;  			MAX_ELEM_NUM = elem.Elem_Number;  		}  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: foreach (ListElemBase elem in ElemList) {  	for (int i = 0; i < 8; i++) {  		strips.InsertNextCell (2);  		if (i != 7) {  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i + 1]] - 1);  		}  		else {  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [0]] - 1);  		}  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: foreach (ListElemBase elem in ElemList) {  	for (int i = 0; i < 8; i++) {  		strips.InsertNextCell (2);  		if (i != 7) {  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i + 1]] - 1);  		}  		else {  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [0]] - 1);  		}  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: foreach (ListElemBase elem in ElemList) {  	for (int i = 0; i < 8; i++) {  		strips.InsertNextCell (2);  		if (i != 7) {  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i + 1]] - 1);  		}  		else {  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  			strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [0]] - 1);  		}  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	strips.InsertNextCell (2);  	if (i != 7) {  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i + 1]] - 1);  	}  	else {  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [0]] - 1);  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	strips.InsertNextCell (2);  	if (i != 7) {  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i + 1]] - 1);  	}  	else {  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [0]] - 1);  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	strips.InsertNextCell (2);  	if (i != 7) {  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i + 1]] - 1);  	}  	else {  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  		strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [0]] - 1);  	}  }  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: strips.InsertNextCell (2);  
Magic Number,WpfRibbonApplication1,TowerModel,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\TowerModel.cs,VTKDrawEdgesModel,The following statement contains a magic number: if (i != 7) {  	strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  	strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i + 1]] - 1);  }  else {  	strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [i]] - 1);  	strips.InsertCellPoint ((int)NodeElemTable [elem.Elem_Nodes [0]] - 1);  }  
Magic Number,WpfRibbonApplication1,WorkSpaceRunModelEnvironment,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,GetModelGeneratingPhase,The following statement contains a magic number: switch (phaseId) {  case 0:  	result = "preheating";  	break;  case 1:  	result = "oilfilling";  	break;  case 2:  	result = "streamcooling";  	break;  case 3:  	result = "watercooling";  	break;  default:  	result = "WRONG: No such Phase ID";  	break;  }  
Magic Number,WpfRibbonApplication1,WorkSpaceRunModelEnvironment,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,GetModelGeneratingPhase,The following statement contains a magic number: switch (phaseId) {  case 0:  	result = "preheating";  	break;  case 1:  	result = "oilfilling";  	break;  case 2:  	result = "streamcooling";  	break;  case 3:  	result = "watercooling";  	break;  default:  	result = "WRONG: No such Phase ID";  	break;  }  
Magic Number,WpfRibbonApplication1,WorkSpaceRunModelEnvironment,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,GetModelTypeString,The following statement contains a magic number: switch (LisFileExecutor.param.ModelTypeId) {  case 0:  	result = "temperature";  	break;  case 1:  	result = "dof";  	break;  case 2:  	result = "stress";  	break;  case 3:  	result = "strain";  	break;  case 4:  	result = "plastic";  	break;  default:  	result = "WRONG: ModelTypeId can't be recognized";  	break;  }  
Magic Number,WpfRibbonApplication1,WorkSpaceRunModelEnvironment,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,GetModelTypeString,The following statement contains a magic number: switch (LisFileExecutor.param.ModelTypeId) {  case 0:  	result = "temperature";  	break;  case 1:  	result = "dof";  	break;  case 2:  	result = "stress";  	break;  case 3:  	result = "strain";  	break;  case 4:  	result = "plastic";  	break;  default:  	result = "WRONG: ModelTypeId can't be recognized";  	break;  }  
Magic Number,WpfRibbonApplication1,WorkSpaceRunModelEnvironment,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkSpaceClass.cs,GetModelTypeString,The following statement contains a magic number: switch (LisFileExecutor.param.ModelTypeId) {  case 0:  	result = "temperature";  	break;  case 1:  	result = "dof";  	break;  case 2:  	result = "stress";  	break;  case 3:  	result = "strain";  	break;  case 4:  	result = "plastic";  	break;  default:  	result = "WRONG: ModelTypeId can't be recognized";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,CraftsModePreDefinedModelType,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CraftsModeEnv.cs,SetAsPlasticStrainModel,The following statement contains a magic number: this.ModelId = 2;  
Magic Number,WpfRibbonApplication1.Models,CraftsModePreDefinedModelType,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CraftsModeEnv.cs,SetAsStressModel,The following statement contains a magic number: this.ModelId = 3;  
Magic Number,WpfRibbonApplication1.Models,CraftsModeEnv,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CraftsModeEnv.cs,CraftsModeEnv,The following statement contains a magic number: for (int StageId = 0; StageId < 4; StageId++) {  	CraftsModePreDefinedModelType pd = new CraftsModePreDefinedModelType ();  	pd.SetAsTemperatureModel (StageId);  	PreDefinedModelList.Add (pd);  }  
Magic Number,WpfRibbonApplication1.Models,CraftsModeEnv,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CraftsModeEnv.cs,CraftsModeSetFormParas,The following statement contains a magic number: paras.RotateAngle = 180;  
Magic Number,WpfRibbonApplication1.Models,CraftsModeEnv,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CraftsModeEnv.cs,CraftsModeSetFormParas,The following statement contains a magic number: paras.globalEnv = 2;  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (info_str == "Temperature") {  	PhaseId = pid;  	ModelTypeId = 0;  	SpecialTypeId = 0;  }  else {  	string[] tmpFileNameSplit = Regex.Split (info_str.Trim ()' " "' RegexOptions.IgnoreCase);  	int Size = tmpFileNameSplit.Count ();  	//MessageBox.Show(tmpFileNameSplit[Size - 1]);  	switch (tmpFileNameSplit [Size - 1]) {  	case "Displacement":  		ModelTypeId = 1;  		break;  	case "Stress":  		ModelTypeId = 2;  		break;  	case "Strain":  		if (tmpFileNameSplit [Size - 2] == "Plastic")  			ModelTypeId = 4;  		else  			ModelTypeId = 3;  		break;  	}  	switch (tmpFileNameSplit [0]) {  	case "X-Component":  		SpecialTypeId = 0;  		break;  	case "Y-Component":  		SpecialTypeId = 1;  		break;  	case "Z-Component":  		SpecialTypeId = 2;  		break;  	}  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (info_str == "Temperature") {  	PhaseId = pid;  	ModelTypeId = 0;  	SpecialTypeId = 0;  }  else {  	string[] tmpFileNameSplit = Regex.Split (info_str.Trim ()' " "' RegexOptions.IgnoreCase);  	int Size = tmpFileNameSplit.Count ();  	//MessageBox.Show(tmpFileNameSplit[Size - 1]);  	switch (tmpFileNameSplit [Size - 1]) {  	case "Displacement":  		ModelTypeId = 1;  		break;  	case "Stress":  		ModelTypeId = 2;  		break;  	case "Strain":  		if (tmpFileNameSplit [Size - 2] == "Plastic")  			ModelTypeId = 4;  		else  			ModelTypeId = 3;  		break;  	}  	switch (tmpFileNameSplit [0]) {  	case "X-Component":  		SpecialTypeId = 0;  		break;  	case "Y-Component":  		SpecialTypeId = 1;  		break;  	case "Z-Component":  		SpecialTypeId = 2;  		break;  	}  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (info_str == "Temperature") {  	PhaseId = pid;  	ModelTypeId = 0;  	SpecialTypeId = 0;  }  else {  	string[] tmpFileNameSplit = Regex.Split (info_str.Trim ()' " "' RegexOptions.IgnoreCase);  	int Size = tmpFileNameSplit.Count ();  	//MessageBox.Show(tmpFileNameSplit[Size - 1]);  	switch (tmpFileNameSplit [Size - 1]) {  	case "Displacement":  		ModelTypeId = 1;  		break;  	case "Stress":  		ModelTypeId = 2;  		break;  	case "Strain":  		if (tmpFileNameSplit [Size - 2] == "Plastic")  			ModelTypeId = 4;  		else  			ModelTypeId = 3;  		break;  	}  	switch (tmpFileNameSplit [0]) {  	case "X-Component":  		SpecialTypeId = 0;  		break;  	case "Y-Component":  		SpecialTypeId = 1;  		break;  	case "Z-Component":  		SpecialTypeId = 2;  		break;  	}  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (info_str == "Temperature") {  	PhaseId = pid;  	ModelTypeId = 0;  	SpecialTypeId = 0;  }  else {  	string[] tmpFileNameSplit = Regex.Split (info_str.Trim ()' " "' RegexOptions.IgnoreCase);  	int Size = tmpFileNameSplit.Count ();  	//MessageBox.Show(tmpFileNameSplit[Size - 1]);  	switch (tmpFileNameSplit [Size - 1]) {  	case "Displacement":  		ModelTypeId = 1;  		break;  	case "Stress":  		ModelTypeId = 2;  		break;  	case "Strain":  		if (tmpFileNameSplit [Size - 2] == "Plastic")  			ModelTypeId = 4;  		else  			ModelTypeId = 3;  		break;  	}  	switch (tmpFileNameSplit [0]) {  	case "X-Component":  		SpecialTypeId = 0;  		break;  	case "Y-Component":  		SpecialTypeId = 1;  		break;  	case "Z-Component":  		SpecialTypeId = 2;  		break;  	}  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (info_str == "Temperature") {  	PhaseId = pid;  	ModelTypeId = 0;  	SpecialTypeId = 0;  }  else {  	string[] tmpFileNameSplit = Regex.Split (info_str.Trim ()' " "' RegexOptions.IgnoreCase);  	int Size = tmpFileNameSplit.Count ();  	//MessageBox.Show(tmpFileNameSplit[Size - 1]);  	switch (tmpFileNameSplit [Size - 1]) {  	case "Displacement":  		ModelTypeId = 1;  		break;  	case "Stress":  		ModelTypeId = 2;  		break;  	case "Strain":  		if (tmpFileNameSplit [Size - 2] == "Plastic")  			ModelTypeId = 4;  		else  			ModelTypeId = 3;  		break;  	}  	switch (tmpFileNameSplit [0]) {  	case "X-Component":  		SpecialTypeId = 0;  		break;  	case "Y-Component":  		SpecialTypeId = 1;  		break;  	case "Z-Component":  		SpecialTypeId = 2;  		break;  	}  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: switch (tmpFileNameSplit [Size - 1]) {  case "Displacement":  	ModelTypeId = 1;  	break;  case "Stress":  	ModelTypeId = 2;  	break;  case "Strain":  	if (tmpFileNameSplit [Size - 2] == "Plastic")  		ModelTypeId = 4;  	else  		ModelTypeId = 3;  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: switch (tmpFileNameSplit [Size - 1]) {  case "Displacement":  	ModelTypeId = 1;  	break;  case "Stress":  	ModelTypeId = 2;  	break;  case "Strain":  	if (tmpFileNameSplit [Size - 2] == "Plastic")  		ModelTypeId = 4;  	else  		ModelTypeId = 3;  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: switch (tmpFileNameSplit [Size - 1]) {  case "Displacement":  	ModelTypeId = 1;  	break;  case "Stress":  	ModelTypeId = 2;  	break;  case "Strain":  	if (tmpFileNameSplit [Size - 2] == "Plastic")  		ModelTypeId = 4;  	else  		ModelTypeId = 3;  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: switch (tmpFileNameSplit [Size - 1]) {  case "Displacement":  	ModelTypeId = 1;  	break;  case "Stress":  	ModelTypeId = 2;  	break;  case "Strain":  	if (tmpFileNameSplit [Size - 2] == "Plastic")  		ModelTypeId = 4;  	else  		ModelTypeId = 3;  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: ModelTypeId = 2;  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (tmpFileNameSplit [Size - 2] == "Plastic")  	ModelTypeId = 4;  else  	ModelTypeId = 3;  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (tmpFileNameSplit [Size - 2] == "Plastic")  	ModelTypeId = 4;  else  	ModelTypeId = 3;  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: if (tmpFileNameSplit [Size - 2] == "Plastic")  	ModelTypeId = 4;  else  	ModelTypeId = 3;  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: ModelTypeId = 4;  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: ModelTypeId = 3;  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: switch (tmpFileNameSplit [0]) {  case "X-Component":  	SpecialTypeId = 0;  	break;  case "Y-Component":  	SpecialTypeId = 1;  	break;  case "Z-Component":  	SpecialTypeId = 2;  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following statement contains a magic number: SpecialTypeId = 2;  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,The following statement contains a magic number: switch (param.PhaseId) {  case 0:  	UpperDir = PreHeatDir;  	break;  case 1:  	UpperDir = OilFillingDir;  	break;  case 2:  	UpperDir = StreamCoolingDir;  	break;  case 3:  	UpperDir = WaterCoolingDir;  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,The following statement contains a magic number: switch (param.PhaseId) {  case 0:  	UpperDir = PreHeatDir;  	break;  case 1:  	UpperDir = OilFillingDir;  	break;  case 2:  	UpperDir = StreamCoolingDir;  	break;  case 3:  	UpperDir = WaterCoolingDir;  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,The following statement contains a magic number: switch (param.ModelTypeId) {  case 0:  	LowerDir = "PRNSOL_Temperature.lis";  	break;  case 1:  	LowerDir = "PRNSOL_DOF_ALL.lis";  	break;  case 2:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Stress_ALL.lis";  	else if (fileIdx == 1)  		LowerDir = "PRNSOL_Stress_VonMises.lis";  	else {  		MessageBox.Show ("WRONG: fileIdx number is out of range");  		return null;  	}  	break;  case 3:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Strain_ALL.lis";  	else  		LowerDir = "PRNSOL_Strain_VonMises.lis";  	break;  case 4:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_PLASTIC_ALL.lis";  	else  		LowerDir = "PRNSOL_PLASTIC_VonMises.lis";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,The following statement contains a magic number: switch (param.ModelTypeId) {  case 0:  	LowerDir = "PRNSOL_Temperature.lis";  	break;  case 1:  	LowerDir = "PRNSOL_DOF_ALL.lis";  	break;  case 2:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Stress_ALL.lis";  	else if (fileIdx == 1)  		LowerDir = "PRNSOL_Stress_VonMises.lis";  	else {  		MessageBox.Show ("WRONG: fileIdx number is out of range");  		return null;  	}  	break;  case 3:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Strain_ALL.lis";  	else  		LowerDir = "PRNSOL_Strain_VonMises.lis";  	break;  case 4:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_PLASTIC_ALL.lis";  	else  		LowerDir = "PRNSOL_PLASTIC_VonMises.lis";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,The following statement contains a magic number: switch (param.ModelTypeId) {  case 0:  	LowerDir = "PRNSOL_Temperature.lis";  	break;  case 1:  	LowerDir = "PRNSOL_DOF_ALL.lis";  	break;  case 2:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Stress_ALL.lis";  	else if (fileIdx == 1)  		LowerDir = "PRNSOL_Stress_VonMises.lis";  	else {  		MessageBox.Show ("WRONG: fileIdx number is out of range");  		return null;  	}  	break;  case 3:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Strain_ALL.lis";  	else  		LowerDir = "PRNSOL_Strain_VonMises.lis";  	break;  case 4:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_PLASTIC_ALL.lis";  	else  		LowerDir = "PRNSOL_PLASTIC_VonMises.lis";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,The following statement contains a magic number: switch (param.PhaseId) {  case 0:  	hi_name = "preheat";  	break;  case 1:  	hi_name = "oilfilling";  	break;  case 2:  	hi_name = "streamcooling";  	break;  case 3:  	hi_name = "watercooling";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,The following statement contains a magic number: switch (param.PhaseId) {  case 0:  	hi_name = "preheat";  	break;  case 1:  	hi_name = "oilfilling";  	break;  case 2:  	hi_name = "streamcooling";  	break;  case 3:  	hi_name = "watercooling";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,The following statement contains a magic number: switch (param.ModelTypeId) {  case 0:  	lo_name = "temperature";  	break;  case 1:  	lo_name = "dof";  	break;  case 2:  	lo_name = "stress";  	break;  case 3:  	lo_name = "strain";  	break;  case 4:  	lo_name = "plastic";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,The following statement contains a magic number: switch (param.ModelTypeId) {  case 0:  	lo_name = "temperature";  	break;  case 1:  	lo_name = "dof";  	break;  case 2:  	lo_name = "stress";  	break;  case 3:  	lo_name = "strain";  	break;  case 4:  	lo_name = "plastic";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,The following statement contains a magic number: switch (param.ModelTypeId) {  case 0:  	lo_name = "temperature";  	break;  case 1:  	lo_name = "dof";  	break;  case 2:  	lo_name = "stress";  	break;  case 3:  	lo_name = "strain";  	break;  case 4:  	lo_name = "plastic";  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxNumberGetter,The following statement contains a magic number: if (mid >= 2)  	return 2;  else  	return 1;  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxNumberGetter,The following statement contains a magic number: if (mid >= 2)  	return 2;  else  	return 1;  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxNumberGetter,The following statement contains a magic number: return 2;  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxDataWidthGetter,The following statement contains a magic number: switch (mid) {  case 2:  	if (Idx == 0)  		retWidth = 0;  	else if (Idx == 1)  		retWidth = 6;  	break;  default:  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxDataWidthGetter,The following statement contains a magic number: switch (mid) {  case 2:  	if (Idx == 0)  		retWidth = 0;  	else if (Idx == 1)  		retWidth = 6;  	break;  default:  	break;  }  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxDataWidthGetter,The following statement contains a magic number: if (Idx == 0)  	retWidth = 0;  else if (Idx == 1)  	retWidth = 6;  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxDataWidthGetter,The following statement contains a magic number: if (Idx == 1)  	retWidth = 6;  
Magic Number,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileIdxDataWidthGetter,The following statement contains a magic number: retWidth = 6;  
Magic Number,WpfRibbonApplication1.Models,ModelColorGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelColorGenerator.cs,ModelColorGenerator,The following statement contains a magic number: MIN_VALUE = 1000.0;  
Magic Number,WpfRibbonApplication1.Models,ModelColorGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelColorGenerator.cs,ModelColorGenerator,The following statement contains a magic number: MAX_VALUE = -1000.0;  
Magic Number,WpfRibbonApplication1.Models,ModelColorGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelColorGenerator.cs,ResetMinMaxValue,The following statement contains a magic number: MAX_VALUE = -1000.0;  
Magic Number,WpfRibbonApplication1.Models,ModelColorGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelColorGenerator.cs,ResetMinMaxValue,The following statement contains a magic number: MIN_VALUE = 1000.0;  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelColorTableResolver,The following statement contains a magic number: switch (type) {  case 0:  	GetTemperatureColorTable (tower' NODE_ID_TO_ITEM);  	break;  case 1:  	GetDisplacementColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	GetStressColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	GetStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 4:  	GetPlasticStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelColorTableResolver,The following statement contains a magic number: switch (type) {  case 0:  	GetTemperatureColorTable (tower' NODE_ID_TO_ITEM);  	break;  case 1:  	GetDisplacementColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	GetStressColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	GetStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 4:  	GetPlasticStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelColorTableResolver,The following statement contains a magic number: switch (type) {  case 0:  	GetTemperatureColorTable (tower' NODE_ID_TO_ITEM);  	break;  case 1:  	GetDisplacementColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	GetStressColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	GetStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 4:  	GetPlasticStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelParameterResolver,The following statement contains a magic number: switch (type) {  case 0:  	break;  case 1:  	SetDisplacementModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	SetStrainModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	break;  case 4:  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelParameterResolver,The following statement contains a magic number: switch (type) {  case 0:  	break;  case 1:  	SetDisplacementModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	SetStrainModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	break;  case 4:  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelParameterResolver,The following statement contains a magic number: switch (type) {  case 0:  	break;  case 1:  	SetDisplacementModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	SetStrainModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	break;  case 4:  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	//Calculate how many nodes are available?  	int NumberOfAvailableNodes = 0;  	for (int i = 0; i < 8; i++)  		if (NODE_ID_TO_ITEM.ContainsKey (elem.GetElemCorrespondingNodesByIdx (i)))  			NumberOfAvailableNodes++;  	//MessageBox.Show(NumberOfAvailableNodes.ToString());  	if (NumberOfAvailableNodes >= 4) {  		double AVE_TEMP = 0;  		for (int i = 0; i < 8; i++)  			if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i]))  				AVE_TEMP += NODE_ID_TO_ITEM [elem.Elem_Nodes [i]].VAL [0];  		// Remember the cnt could be zero!  		// Here must be a handle function  		AVE_TEMP /= NumberOfAvailableNodes;  		ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	//Calculate how many nodes are available?  	int NumberOfAvailableNodes = 0;  	for (int i = 0; i < 8; i++)  		if (NODE_ID_TO_ITEM.ContainsKey (elem.GetElemCorrespondingNodesByIdx (i)))  			NumberOfAvailableNodes++;  	//MessageBox.Show(NumberOfAvailableNodes.ToString());  	if (NumberOfAvailableNodes >= 4) {  		double AVE_TEMP = 0;  		for (int i = 0; i < 8; i++)  			if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i]))  				AVE_TEMP += NODE_ID_TO_ITEM [elem.Elem_Nodes [i]].VAL [0];  		// Remember the cnt could be zero!  		// Here must be a handle function  		AVE_TEMP /= NumberOfAvailableNodes;  		ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	//Calculate how many nodes are available?  	int NumberOfAvailableNodes = 0;  	for (int i = 0; i < 8; i++)  		if (NODE_ID_TO_ITEM.ContainsKey (elem.GetElemCorrespondingNodesByIdx (i)))  			NumberOfAvailableNodes++;  	//MessageBox.Show(NumberOfAvailableNodes.ToString());  	if (NumberOfAvailableNodes >= 4) {  		double AVE_TEMP = 0;  		for (int i = 0; i < 8; i++)  			if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i]))  				AVE_TEMP += NODE_ID_TO_ITEM [elem.Elem_Nodes [i]].VAL [0];  		// Remember the cnt could be zero!  		// Here must be a handle function  		AVE_TEMP /= NumberOfAvailableNodes;  		ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	if (NODE_ID_TO_ITEM.ContainsKey (elem.GetElemCorrespondingNodesByIdx (i)))  		NumberOfAvailableNodes++;  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,The following statement contains a magic number: if (NumberOfAvailableNodes >= 4) {  	double AVE_TEMP = 0;  	for (int i = 0; i < 8; i++)  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i]))  			AVE_TEMP += NODE_ID_TO_ITEM [elem.Elem_Nodes [i]].VAL [0];  	// Remember the cnt could be zero!  	// Here must be a handle function  	AVE_TEMP /= NumberOfAvailableNodes;  	ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,The following statement contains a magic number: if (NumberOfAvailableNodes >= 4) {  	double AVE_TEMP = 0;  	for (int i = 0; i < 8; i++)  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i]))  			AVE_TEMP += NODE_ID_TO_ITEM [elem.Elem_Nodes [i]].VAL [0];  	// Remember the cnt could be zero!  	// Here must be a handle function  	AVE_TEMP /= NumberOfAvailableNodes;  	ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetTemperatureColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i]))  		AVE_TEMP += NODE_ID_TO_ITEM [elem.Elem_Nodes [i]].VAL [0];  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetStrainColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double AVE_TEMP = 0.0;  	int cnt = 0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			ListNodeBase node = tower.NodeList [tower.NodeElemTable [elem.Elem_Nodes [i]]];  			LISFileItem lisItem = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			AVE_TEMP += lisItem.VAL [TYPE_ID];  			cnt++;  		}  	}  	if (cnt != 0)  		AVE_TEMP /= cnt;  	ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetStrainColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		ListNodeBase node = tower.NodeList [tower.NodeElemTable [elem.Elem_Nodes [i]]];  		LISFileItem lisItem = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		AVE_TEMP += lisItem.VAL [TYPE_ID];  		cnt++;  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: foreach (ListNodeBase node in tower.NodeList) {  	if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  		node.Node_Coord [0] += NODE_ID_TO_ITEM [node.Node_id].VAL [1];  		node.Node_Coord [1] += NODE_ID_TO_ITEM [node.Node_id].VAL [2];  		node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: foreach (ListNodeBase node in tower.NodeList) {  	if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  		node.Node_Coord [0] += NODE_ID_TO_ITEM [node.Node_id].VAL [1];  		node.Node_Coord [1] += NODE_ID_TO_ITEM [node.Node_id].VAL [2];  		node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: foreach (ListNodeBase node in tower.NodeList) {  	if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  		node.Node_Coord [0] += NODE_ID_TO_ITEM [node.Node_id].VAL [1];  		node.Node_Coord [1] += NODE_ID_TO_ITEM [node.Node_id].VAL [2];  		node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  	node.Node_Coord [0] += NODE_ID_TO_ITEM [node.Node_id].VAL [1];  	node.Node_Coord [1] += NODE_ID_TO_ITEM [node.Node_id].VAL [2];  	node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  	node.Node_Coord [0] += NODE_ID_TO_ITEM [node.Node_id].VAL [1];  	node.Node_Coord [1] += NODE_ID_TO_ITEM [node.Node_id].VAL [2];  	node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  	node.Node_Coord [0] += NODE_ID_TO_ITEM [node.Node_id].VAL [1];  	node.Node_Coord [1] += NODE_ID_TO_ITEM [node.Node_id].VAL [2];  	node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: node.Node_Coord [1] += NODE_ID_TO_ITEM [node.Node_id].VAL [2];  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetStrainModelParamters,The following statement contains a magic number: node.Node_Coord [2] += NODE_ID_TO_ITEM [node.Node_id].VAL [3];  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double value_getter = 0.0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			switch (TYPE_ID) {  			case 0:  				value_getter += NodeItemGetter.GetValueListValueByIdx (0);  				break;  			case 1:  				value_getter += NodeItemGetter.GetValueListValueByIdx (1);  				break;  			case 2:  				value_getter += NodeItemGetter.GetValueListValueByIdx (2);  				break;  			case 3:  				value_getter += NodeItemGetter.GetValueListValueByIdx (3);  				break;  			}  			//MessageBox.Show(value_getter.ToString());  		}  	}  	value_getter /= node_use_number;  	ColorGen.AddElemPropertyValue (value_getter' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double value_getter = 0.0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			switch (TYPE_ID) {  			case 0:  				value_getter += NodeItemGetter.GetValueListValueByIdx (0);  				break;  			case 1:  				value_getter += NodeItemGetter.GetValueListValueByIdx (1);  				break;  			case 2:  				value_getter += NodeItemGetter.GetValueListValueByIdx (2);  				break;  			case 3:  				value_getter += NodeItemGetter.GetValueListValueByIdx (3);  				break;  			}  			//MessageBox.Show(value_getter.ToString());  		}  	}  	value_getter /= node_use_number;  	ColorGen.AddElemPropertyValue (value_getter' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double value_getter = 0.0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			switch (TYPE_ID) {  			case 0:  				value_getter += NodeItemGetter.GetValueListValueByIdx (0);  				break;  			case 1:  				value_getter += NodeItemGetter.GetValueListValueByIdx (1);  				break;  			case 2:  				value_getter += NodeItemGetter.GetValueListValueByIdx (2);  				break;  			case 3:  				value_getter += NodeItemGetter.GetValueListValueByIdx (3);  				break;  			}  			//MessageBox.Show(value_getter.ToString());  		}  	}  	value_getter /= node_use_number;  	ColorGen.AddElemPropertyValue (value_getter' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double value_getter = 0.0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			switch (TYPE_ID) {  			case 0:  				value_getter += NodeItemGetter.GetValueListValueByIdx (0);  				break;  			case 1:  				value_getter += NodeItemGetter.GetValueListValueByIdx (1);  				break;  			case 2:  				value_getter += NodeItemGetter.GetValueListValueByIdx (2);  				break;  			case 3:  				value_getter += NodeItemGetter.GetValueListValueByIdx (3);  				break;  			}  			//MessageBox.Show(value_getter.ToString());  		}  	}  	value_getter /= node_use_number;  	ColorGen.AddElemPropertyValue (value_getter' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double value_getter = 0.0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			switch (TYPE_ID) {  			case 0:  				value_getter += NodeItemGetter.GetValueListValueByIdx (0);  				break;  			case 1:  				value_getter += NodeItemGetter.GetValueListValueByIdx (1);  				break;  			case 2:  				value_getter += NodeItemGetter.GetValueListValueByIdx (2);  				break;  			case 3:  				value_getter += NodeItemGetter.GetValueListValueByIdx (3);  				break;  			}  			//MessageBox.Show(value_getter.ToString());  		}  	}  	value_getter /= node_use_number;  	ColorGen.AddElemPropertyValue (value_getter' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		switch (TYPE_ID) {  		case 0:  			value_getter += NodeItemGetter.GetValueListValueByIdx (0);  			break;  		case 1:  			value_getter += NodeItemGetter.GetValueListValueByIdx (1);  			break;  		case 2:  			value_getter += NodeItemGetter.GetValueListValueByIdx (2);  			break;  		case 3:  			value_getter += NodeItemGetter.GetValueListValueByIdx (3);  			break;  		}  		//MessageBox.Show(value_getter.ToString());  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		switch (TYPE_ID) {  		case 0:  			value_getter += NodeItemGetter.GetValueListValueByIdx (0);  			break;  		case 1:  			value_getter += NodeItemGetter.GetValueListValueByIdx (1);  			break;  		case 2:  			value_getter += NodeItemGetter.GetValueListValueByIdx (2);  			break;  		case 3:  			value_getter += NodeItemGetter.GetValueListValueByIdx (3);  			break;  		}  		//MessageBox.Show(value_getter.ToString());  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		switch (TYPE_ID) {  		case 0:  			value_getter += NodeItemGetter.GetValueListValueByIdx (0);  			break;  		case 1:  			value_getter += NodeItemGetter.GetValueListValueByIdx (1);  			break;  		case 2:  			value_getter += NodeItemGetter.GetValueListValueByIdx (2);  			break;  		case 3:  			value_getter += NodeItemGetter.GetValueListValueByIdx (3);  			break;  		}  		//MessageBox.Show(value_getter.ToString());  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		switch (TYPE_ID) {  		case 0:  			value_getter += NodeItemGetter.GetValueListValueByIdx (0);  			break;  		case 1:  			value_getter += NodeItemGetter.GetValueListValueByIdx (1);  			break;  		case 2:  			value_getter += NodeItemGetter.GetValueListValueByIdx (2);  			break;  		case 3:  			value_getter += NodeItemGetter.GetValueListValueByIdx (3);  			break;  		}  		//MessageBox.Show(value_getter.ToString());  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		switch (TYPE_ID) {  		case 0:  			value_getter += NodeItemGetter.GetValueListValueByIdx (0);  			break;  		case 1:  			value_getter += NodeItemGetter.GetValueListValueByIdx (1);  			break;  		case 2:  			value_getter += NodeItemGetter.GetValueListValueByIdx (2);  			break;  		case 3:  			value_getter += NodeItemGetter.GetValueListValueByIdx (3);  			break;  		}  		//MessageBox.Show(value_getter.ToString());  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  	LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  	switch (TYPE_ID) {  	case 0:  		value_getter += NodeItemGetter.GetValueListValueByIdx (0);  		break;  	case 1:  		value_getter += NodeItemGetter.GetValueListValueByIdx (1);  		break;  	case 2:  		value_getter += NodeItemGetter.GetValueListValueByIdx (2);  		break;  	case 3:  		value_getter += NodeItemGetter.GetValueListValueByIdx (3);  		break;  	}  	//MessageBox.Show(value_getter.ToString());  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  	LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  	switch (TYPE_ID) {  	case 0:  		value_getter += NodeItemGetter.GetValueListValueByIdx (0);  		break;  	case 1:  		value_getter += NodeItemGetter.GetValueListValueByIdx (1);  		break;  	case 2:  		value_getter += NodeItemGetter.GetValueListValueByIdx (2);  		break;  	case 3:  		value_getter += NodeItemGetter.GetValueListValueByIdx (3);  		break;  	}  	//MessageBox.Show(value_getter.ToString());  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  	LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  	switch (TYPE_ID) {  	case 0:  		value_getter += NodeItemGetter.GetValueListValueByIdx (0);  		break;  	case 1:  		value_getter += NodeItemGetter.GetValueListValueByIdx (1);  		break;  	case 2:  		value_getter += NodeItemGetter.GetValueListValueByIdx (2);  		break;  	case 3:  		value_getter += NodeItemGetter.GetValueListValueByIdx (3);  		break;  	}  	//MessageBox.Show(value_getter.ToString());  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  	LISFileItem NodeItemGetter = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  	switch (TYPE_ID) {  	case 0:  		value_getter += NodeItemGetter.GetValueListValueByIdx (0);  		break;  	case 1:  		value_getter += NodeItemGetter.GetValueListValueByIdx (1);  		break;  	case 2:  		value_getter += NodeItemGetter.GetValueListValueByIdx (2);  		break;  	case 3:  		value_getter += NodeItemGetter.GetValueListValueByIdx (3);  		break;  	}  	//MessageBox.Show(value_getter.ToString());  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: switch (TYPE_ID) {  case 0:  	value_getter += NodeItemGetter.GetValueListValueByIdx (0);  	break;  case 1:  	value_getter += NodeItemGetter.GetValueListValueByIdx (1);  	break;  case 2:  	value_getter += NodeItemGetter.GetValueListValueByIdx (2);  	break;  case 3:  	value_getter += NodeItemGetter.GetValueListValueByIdx (3);  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: switch (TYPE_ID) {  case 0:  	value_getter += NodeItemGetter.GetValueListValueByIdx (0);  	break;  case 1:  	value_getter += NodeItemGetter.GetValueListValueByIdx (1);  	break;  case 2:  	value_getter += NodeItemGetter.GetValueListValueByIdx (2);  	break;  case 3:  	value_getter += NodeItemGetter.GetValueListValueByIdx (3);  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: switch (TYPE_ID) {  case 0:  	value_getter += NodeItemGetter.GetValueListValueByIdx (0);  	break;  case 1:  	value_getter += NodeItemGetter.GetValueListValueByIdx (1);  	break;  case 2:  	value_getter += NodeItemGetter.GetValueListValueByIdx (2);  	break;  case 3:  	value_getter += NodeItemGetter.GetValueListValueByIdx (3);  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: switch (TYPE_ID) {  case 0:  	value_getter += NodeItemGetter.GetValueListValueByIdx (0);  	break;  case 1:  	value_getter += NodeItemGetter.GetValueListValueByIdx (1);  	break;  case 2:  	value_getter += NodeItemGetter.GetValueListValueByIdx (2);  	break;  case 3:  	value_getter += NodeItemGetter.GetValueListValueByIdx (3);  	break;  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: value_getter += NodeItemGetter.GetValueListValueByIdx (2);  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following statement contains a magic number: value_getter += NodeItemGetter.GetValueListValueByIdx (3);  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: foreach (ListNodeBase node in tower.NodeList) {  	if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  		node.Node_Coord [0] = NODE_ID_TO_ITEM [node.Node_id].VAL [1];  		node.Node_Coord [1] = NODE_ID_TO_ITEM [node.Node_id].VAL [2];  		node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: foreach (ListNodeBase node in tower.NodeList) {  	if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  		node.Node_Coord [0] = NODE_ID_TO_ITEM [node.Node_id].VAL [1];  		node.Node_Coord [1] = NODE_ID_TO_ITEM [node.Node_id].VAL [2];  		node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: foreach (ListNodeBase node in tower.NodeList) {  	if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  		node.Node_Coord [0] = NODE_ID_TO_ITEM [node.Node_id].VAL [1];  		node.Node_Coord [1] = NODE_ID_TO_ITEM [node.Node_id].VAL [2];  		node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  	node.Node_Coord [0] = NODE_ID_TO_ITEM [node.Node_id].VAL [1];  	node.Node_Coord [1] = NODE_ID_TO_ITEM [node.Node_id].VAL [2];  	node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  	node.Node_Coord [0] = NODE_ID_TO_ITEM [node.Node_id].VAL [1];  	node.Node_Coord [1] = NODE_ID_TO_ITEM [node.Node_id].VAL [2];  	node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: if (NODE_ID_TO_ITEM.ContainsKey (node.Node_id)) {  	node.Node_Coord [0] = NODE_ID_TO_ITEM [node.Node_id].VAL [1];  	node.Node_Coord [1] = NODE_ID_TO_ITEM [node.Node_id].VAL [2];  	node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: node.Node_Coord [1] = NODE_ID_TO_ITEM [node.Node_id].VAL [2];  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,SetDisplacementModelParamters,The following statement contains a magic number: node.Node_Coord [2] = NODE_ID_TO_ITEM [node.Node_id].VAL [3];  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetPlasticStrainColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double AVE_TEMP = 0.0;  	int cnt = 0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			ListNodeBase node = tower.NodeList [tower.NodeElemTable [elem.Elem_Nodes [i]]];  			LISFileItem lisItem = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			AVE_TEMP += lisItem.VAL [TYPE_ID];  			cnt++;  		}  	}  	if (cnt != 0)  		AVE_TEMP /= cnt;  	ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetPlasticStrainColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		ListNodeBase node = tower.NodeList [tower.NodeElemTable [elem.Elem_Nodes [i]]];  		LISFileItem lisItem = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		AVE_TEMP += lisItem.VAL [TYPE_ID];  		cnt++;  	}  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetStressColorTable,The following statement contains a magic number: foreach (ListElemBase elem in tower.ElemList) {  	double AVE_TEMP = 0.0;  	int cnt = 0;  	for (int i = 0; i < 8; i++) {  		if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  			ListNodeBase node = tower.NodeList [tower.NodeElemTable [elem.Elem_Nodes [i]]];  			LISFileItem lisItem = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  			AVE_TEMP += lisItem.VAL [TYPE_ID];  			cnt++;  		}  	}  	if (cnt != 0)  		AVE_TEMP /= cnt;  	ColorGen.AddElemPropertyValue (AVE_TEMP' elem.Elem_Number);  }  
Magic Number,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetStressColorTable,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (NODE_ID_TO_ITEM.ContainsKey (elem.Elem_Nodes [i])) {  		ListNodeBase node = tower.NodeList [tower.NodeElemTable [elem.Elem_Nodes [i]]];  		LISFileItem lisItem = NODE_ID_TO_ITEM [elem.Elem_Nodes [i]];  		AVE_TEMP += lisItem.VAL [TYPE_ID];  		cnt++;  	}  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,CSVImporter,The following statement contains a magic number: foreach (DataColumn dbcol in dbtable.Columns) {  	if (dbrow [1] [dbcol].ToString () != "" && dbrow [2] [dbcol].ToString () != "") {  		TowerTopTemperature.Add (System.Convert.ToDouble (dbrow [0] [dbcol]));  		TowerBottomTemperature.Add (System.Convert.ToDouble (dbrow [1] [dbcol]));  		//MessageBox.Show(dbrow[2][dbcol].ToString());  		TimeList.Add (System.Convert.ToInt32 (dbrow [2] [dbcol]));  	}  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,CSVImporter,The following statement contains a magic number: foreach (DataColumn dbcol in dbtable.Columns) {  	if (dbrow [1] [dbcol].ToString () != "" && dbrow [2] [dbcol].ToString () != "") {  		TowerTopTemperature.Add (System.Convert.ToDouble (dbrow [0] [dbcol]));  		TowerBottomTemperature.Add (System.Convert.ToDouble (dbrow [1] [dbcol]));  		//MessageBox.Show(dbrow[2][dbcol].ToString());  		TimeList.Add (System.Convert.ToInt32 (dbrow [2] [dbcol]));  	}  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,CSVImporter,The following statement contains a magic number: if (dbrow [1] [dbcol].ToString () != "" && dbrow [2] [dbcol].ToString () != "") {  	TowerTopTemperature.Add (System.Convert.ToDouble (dbrow [0] [dbcol]));  	TowerBottomTemperature.Add (System.Convert.ToDouble (dbrow [1] [dbcol]));  	//MessageBox.Show(dbrow[2][dbcol].ToString());  	TimeList.Add (System.Convert.ToInt32 (dbrow [2] [dbcol]));  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,CSVImporter,The following statement contains a magic number: if (dbrow [1] [dbcol].ToString () != "" && dbrow [2] [dbcol].ToString () != "") {  	TowerTopTemperature.Add (System.Convert.ToDouble (dbrow [0] [dbcol]));  	TowerBottomTemperature.Add (System.Convert.ToDouble (dbrow [1] [dbcol]));  	//MessageBox.Show(dbrow[2][dbcol].ToString());  	TimeList.Add (System.Convert.ToInt32 (dbrow [2] [dbcol]));  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,CSVImporter,The following statement contains a magic number: TimeList.Add (System.Convert.ToInt32 (dbrow [2] [dbcol]));  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: for (int time = 0; time < 50; time++) {  	point = new DataPoint ();  	point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  	point.XValue = time;  	dataseries.DataPoints.Add (point);  }  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,WorkStatusDataSeriesGenerator,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\WorkStatusDataSeriesGenerator.cs,GetEnterOilReceiveCokeDataSeries,The following statement contains a magic number: point.YValue = (-2.36 * (time / 3600) * (time / 3600) - 49 * time / 9000 + 295.8) * (y + 6.529) / 35.976 + 2.36 * (time / 3600) * (time / 3600) + 49 * time / 9000 + 107.2;  
Magic Number,WpfRibbonApplication1.Models,HeatDoublers,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\HeatDoublers.cs,HeatDoublerBuilder,The following statement contains a magic number: foreach (DataRow dr in dbrow) {  	Models.HeatDoubler hdrow = new Models.HeatDoubler (dr [0].ToString ()' System.Convert.ToDouble (dr [1])' System.Convert.ToDouble (dr [2])' System.Convert.ToDouble (dr [3]));  	this.HeatDoublerAppend (hdrow);  	//MainWindow.storeDB.StoreData_VirtualHeater(hdrow' 0);  }  
Magic Number,WpfRibbonApplication1.Models,HeatDoublers,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\HeatDoublers.cs,HeatDoublerBuilder,The following statement contains a magic number: foreach (DataRow dr in dbrow) {  	Models.HeatDoubler hdrow = new Models.HeatDoubler (dr [0].ToString ()' System.Convert.ToDouble (dr [1])' System.Convert.ToDouble (dr [2])' System.Convert.ToDouble (dr [3]));  	this.HeatDoublerAppend (hdrow);  	//MainWindow.storeDB.StoreData_VirtualHeater(hdrow' 0);  }  
Magic Number,Com.StellmanGreene.CSVReader,CSVReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CSVReader.cs,ReadNextObject,The following statement contains a magic number: while (!foundEnd && i <= len) {  	// Check if we've hit the end of the string  	if ((!quoted && i == len) // non-quoted strings end with a comma or end of line  	|| (!quoted && currentLine.Substring (i' 1) == "'") // quoted strings end with a quote followed by a comma or end of line  	|| (quoted && i == len - 1 && currentLine.EndsWith ("\"")) || (quoted && currentLine.Substring (i' 2) == "\"'"))  		foundEnd = true;  	else  		i++;  }  
Magic Number,Com.StellmanGreene.CSVReader,CSVReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\CSVReader.cs,ReadNextObject,The following statement contains a magic number: if ((!quoted && i == len) // non-quoted strings end with a comma or end of line  || (!quoted && currentLine.Substring (i' 1) == "'") // quoted strings end with a quote followed by a comma or end of line  || (quoted && i == len - 1 && currentLine.EndsWith ("\"")) || (quoted && currentLine.Substring (i' 2) == "\"'"))  	foundEnd = true;  else  	i++;  
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((12' 54)' (62' 104))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 54)' (116' 154)' (66' 104))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 39)' (70' 89)' (120' 139)' (170' 189))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 54)' (170' 204)' (70' 104)' (120' 154))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 43)' (74' 93)' (124' 143)' (174' 193)' (224' 243))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 54)' (224' 254)' (74' 104)' (124' 154)' (174' 204))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((28' 47)' (78' 97)' (128' 147)' (178' 197)' (228' 247)' (278' 297))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((28' 54)' (278' 304)' (78' 104)' (128' 154)' (178' 204)' (228' 254))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 51)' (82' 101)' (132' 151)' (182' 201)' (232' 251)' (282' 301)' (332' 351))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 54)' (332' 354)' (82' 104)' (132' 154)' (182' 204)' (232' 254)' (282' 304))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((408' 442)' (458' 492)' (508' 542))
Duplicate Code,Com.StellmanGreene.CSVReader,StringConverter,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\StringConverter.cs,BuildTypeMap,The method contains a code clone-set at the following line numbers (starting from the method definition): ((458' 496)' (508' 546))
Missing Default,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following switch statement is missing a default case: switch (tmpFileNameSplit [Size - 1]) {  case "Displacement":  	ModelTypeId = 1;  	break;  case "Stress":  	ModelTypeId = 2;  	break;  case "Strain":  	if (tmpFileNameSplit [Size - 2] == "Plastic")  		ModelTypeId = 4;  	else  		ModelTypeId = 3;  	break;  }  
Missing Default,WpfRibbonApplication1.Models,LISFileParams,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,LISFileParams,The following switch statement is missing a default case: switch (tmpFileNameSplit [0]) {  case "X-Component":  	SpecialTypeId = 0;  	break;  case "Y-Component":  	SpecialTypeId = 1;  	break;  case "Z-Component":  	SpecialTypeId = 2;  	break;  }  
Missing Default,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,The following switch statement is missing a default case: switch (param.PhaseId) {  case 0:  	UpperDir = PreHeatDir;  	break;  case 1:  	UpperDir = OilFillingDir;  	break;  case 2:  	UpperDir = StreamCoolingDir;  	break;  case 3:  	UpperDir = WaterCoolingDir;  	break;  }  
Missing Default,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,FileLocator,The following switch statement is missing a default case: switch (param.ModelTypeId) {  case 0:  	LowerDir = "PRNSOL_Temperature.lis";  	break;  case 1:  	LowerDir = "PRNSOL_DOF_ALL.lis";  	break;  case 2:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Stress_ALL.lis";  	else if (fileIdx == 1)  		LowerDir = "PRNSOL_Stress_VonMises.lis";  	else {  		MessageBox.Show ("WRONG: fileIdx number is out of range");  		return null;  	}  	break;  case 3:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_Strain_ALL.lis";  	else  		LowerDir = "PRNSOL_Strain_VonMises.lis";  	break;  case 4:  	if (fileIdx == 0)  		LowerDir = "PRNSOL_PLASTIC_ALL.lis";  	else  		LowerDir = "PRNSOL_PLASTIC_VonMises.lis";  	break;  }  
Missing Default,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,The following switch statement is missing a default case: switch (param.PhaseId) {  case 0:  	hi_name = "preheat";  	break;  case 1:  	hi_name = "oilfilling";  	break;  case 2:  	hi_name = "streamcooling";  	break;  case 3:  	hi_name = "watercooling";  	break;  }  
Missing Default,WpfRibbonApplication1.Models,LISFileReader,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\LISFileReader.cs,TowerNameGetter,The following switch statement is missing a default case: switch (param.ModelTypeId) {  case 0:  	lo_name = "temperature";  	break;  case 1:  	lo_name = "dof";  	break;  case 2:  	lo_name = "stress";  	break;  case 3:  	lo_name = "strain";  	break;  case 4:  	lo_name = "plastic";  	break;  }  
Missing Default,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelColorTableResolver,The following switch statement is missing a default case: switch (type) {  case 0:  	GetTemperatureColorTable (tower' NODE_ID_TO_ITEM);  	break;  case 1:  	GetDisplacementColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	GetStressColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	GetStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 4:  	GetPlasticStrainColorTable (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  }  
Missing Default,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,ModelParameterResolver,The following switch statement is missing a default case: switch (type) {  case 0:  	break;  case 1:  	SetDisplacementModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 2:  	SetStrainModelParamters (tower' NODE_ID_TO_ITEM' TYPE_ID);  	break;  case 3:  	break;  case 4:  	break;  }  
Missing Default,WpfRibbonApplication1.Models,ModelPropertiesResolver,C:\repos\ArthasZRZ_Coke-Tower-Part-time-Work\Models\ModelPropertiesResolver.cs,GetDisplacementColorTable,The following switch statement is missing a default case: switch (TYPE_ID) {  case 0:  	value_getter += NodeItemGetter.GetValueListValueByIdx (0);  	break;  case 1:  	value_getter += NodeItemGetter.GetValueListValueByIdx (1);  	break;  case 2:  	value_getter += NodeItemGetter.GetValueListValueByIdx (2);  	break;  case 3:  	value_getter += NodeItemGetter.GetValueListValueByIdx (3);  	break;  }  
