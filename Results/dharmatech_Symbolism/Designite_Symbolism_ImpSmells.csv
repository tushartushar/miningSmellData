Implementation smell,Namespace,Class,File,Method,Description
Long Method,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The method has 106 lines of code.
Long Method,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The method has 113 lines of code.
Long Method,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The method has 177 lines of code.
Complex Method,Symbolism,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\AlgebraicExpand.cs,CoefficientMonomialGpe,Cyclomatic complexity of the method is 8
Complex Method,Symbolism,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\AlgebraicExpand.cs,CoefficientGpe,Cyclomatic complexity of the method is 8
Complex Method,Symbolism,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\AlgebraicExpand.cs,Substitute,Cyclomatic complexity of the method is 11
Complex Method,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,Cyclomatic complexity of the method is 9
Complex Method,Symbolism,Equation,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,ToBoolean,Cyclomatic complexity of the method is 15
Complex Method,Symbolism,Rational,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,EvaluatePower,Cyclomatic complexity of the method is 8
Complex Method,Symbolism,Rational,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,SimplifyRNERec,Cyclomatic complexity of the method is 17
Complex Method,Symbolism,And,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,AndProc,Cyclomatic complexity of the method is 8
Complex Method,Symbolism,Or,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,OrProc,Cyclomatic complexity of the method is 8
Complex Method,Symbolism,OrderRelation,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Compare,Cyclomatic complexity of the method is 19
Complex Method,Symbolism,Power,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Simplify,Cyclomatic complexity of the method is 12
Complex Method,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,RecursiveSimplify,Cyclomatic complexity of the method is 15
Complex Method,Symbolism,Sum,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,RecursiveSimplify,Cyclomatic complexity of the method is 15
Complex Method,CoefficientGpe,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\CoefficientGpe.cs,CoefficientMonomialGpe,Cyclomatic complexity of the method is 8
Complex Method,CoefficientGpe,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\CoefficientGpe.cs,CoefficientGpe,Cyclomatic complexity of the method is 8
Complex Method,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,Cyclomatic complexity of the method is 35
Complex Method,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,Cyclomatic complexity of the method is 36
Complex Method,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,Cyclomatic complexity of the method is 27
Complex Method,Substitute,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\Substitute.cs,Substitute,Cyclomatic complexity of the method is 11
Long Statement,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The length of the statement  "                    elts.ConvertAll(elt => elt.Precedence() < Precedence() || (elt is Power && (elt as Power).exp != new Integer(1) / 2) ? $"({elt})" : $"{elt}")); " is 143.
Long Statement,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The length of the statement  "            var expr_a_ = expr_a is Sum || (expr_a is Power && (expr_a as Power).exp != new Integer(1) / 2) ? $"({expr_a})" : $"{expr_a}"; " is 126.
Long Statement,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The length of the statement  "            var expr_b_ = expr_b is Sum || expr_b is Product || (expr_b is Power && (expr_b as Power).exp != new Integer(1) / 2) ? $"({expr_b})" : $"{expr_b}"; " is 147.
Long Statement,Symbolism,Sum,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The length of the statement  "                        var elt__ = elt.Const() < 0 && elt_ is Sum || (elt is Power && (elt as Power).exp != new Integer(1) / 2) ? $"({elt_})" : $"{elt_}"; " is 131.
Long Statement,Symbolism.EliminateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\EliminateVariable.cs,CheckVariableEqLs,The length of the statement  "            if (eqs.Any(eq => eq.Operator == Equation.Operators.Equal && eq.a.Numerator() == sym && eq.a.Denominator().FreeOf(sym) && eq.b == 0) && " is 135.
Long Statement,Symbolism.EliminateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\EliminateVariable.cs,EliminateVariableEqLs,The length of the statement  "                elt.IsolateVariableEq(sym).Has(obj => obj is Equation && (obj as Equation).a == sym && (obj as Equation).b.FreeOf(sym))); " is 121.
Long Statement,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The length of the statement  "            if (eq.a is Sum && eq.a.Has(elt => elt is Power && (elt as Power).exp == new Integer(1) / 2 && (elt as Power).bas.Has(sym))) " is 124.
Long Statement,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariable,The length of the statement  "            if (obj is And) return new And() { args = (obj as And).args.Select(elt => elt.IsolateVariable(sym)).ToList() }.Simplify(); " is 122.
Complex Conditional,Symbolism,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\AlgebraicExpand.cs,CoefficientMonomialGpe,The conditional expression  "u is Power &&                      (u as Power).bas == x &&                      (u as Power).exp is Integer &&                      ((u as Power).exp as Integer).val > 1"  is complex.
Complex Conditional,Symbolism,OrderRelation,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Compare,The conditional expression  "u is Product &&                  (v is Power || v is Sum || v is Function || v is Symbol)"  is complex.
Complex Conditional,Symbolism,OrderRelation,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Compare,The conditional expression  "u is Power && (v is Sum || v is Function || v is Symbol)"  is complex.
Complex Conditional,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,RecursiveSimplify,The conditional expression  "(elts[0] is Integer || elts[0] is Fraction)                      &&                      (elts[1] is Integer || elts[1] is Fraction)"  is complex.
Complex Conditional,Symbolism,Sum,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,RecursiveSimplify,The conditional expression  "(elts[0] is Integer || elts[0] is Fraction)                      &&                      (elts[1] is Integer || elts[1] is Fraction)"  is complex.
Complex Conditional,CoefficientGpe,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\CoefficientGpe.cs,CoefficientMonomialGpe,The conditional expression  "u is Power &&                      (u as Power).bas == x &&                      (u as Power).exp is Integer &&                      ((u as Power).exp as Integer).val > 1"  is complex.
Complex Conditional,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The conditional expression  "u is Product &&                  ((u as Product).elts[0] is Integer || (u as Product).elts[0] is Fraction) &&                  (u as Product).elts[0] > half &&                  (u as Product).elts[1] == Pi"  is complex.
Complex Conditional,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The conditional expression  "u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi"  is complex.
Complex Conditional,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The conditional expression  "ls[0] is Product &&                  (                      (ls[0] as Product).elts[0] is Integer ||                      (ls[0] as Product).elts[0] is Fraction                  ) &&                  ((ls[0] as Product).elts[0] as Number) > new Integer(1) / 2 &&                  (ls[0] as Product).elts[1] == Pi"  is complex.
Complex Conditional,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The conditional expression  "ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi"  is complex.
Complex Conditional,Symbolism.EliminateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\EliminateVariable.cs,CheckVariableEqLs,The conditional expression  "eqs.Any(eq => eq.Operator == Equation.Operators.NotEqual && eq.a == sym && eq.b == 0)                  &&                  eqs.Any(eq => eq.Operator == Equation.Operators.NotEqual && eq.a == 1 / sym && eq.b == 0)"  is complex.
Complex Conditional,Symbolism.EliminateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\EliminateVariable.cs,CheckVariableEqLs,The conditional expression  "eqs.Any(eq => eq.Operator == Equation.Operators.Equal && eq.a.Numerator() == sym && eq.a.Denominator().FreeOf(sym) && eq.b == 0) &&                  eqs.Any(eq => eq == (sym != 0))"  is complex.
Complex Conditional,Symbolism.EliminateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\EliminateVariable.cs,CheckVariable,The conditional expression  "expr is Equation &&                  (expr as Equation).Operator == Equation.Operators.Equal &&                  (expr as Equation).b == 0 &&                  (expr as Equation).a.Has(sym) &&                  (expr as Equation).SimplifyEquation() is Equation &&                  ((expr as Equation).SimplifyEquation() as Equation).a is Power &&                  (((expr as Equation).SimplifyEquation() as Equation).a as Power).exp is Integer &&                  ((((expr as Equation).SimplifyEquation() as Equation).a as Power).exp as Integer).val < 0"  is complex.
Complex Conditional,Symbolism.EliminateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\EliminateVariable.cs,EliminateVariableEqLs,The conditional expression  "eqs.Any(elt =>                      elt.Operator == Equation.Operators.Equal &&                      elt.Has(sym) &&                      elt.AlgebraicExpand().Has(sym) &&                      elt.IsolateVariableEq(sym).Has(obj => obj is Equation && (obj as Equation).a == sym && (obj as Equation).b.FreeOf(sym))                      ) == false"  is complex.
Complex Conditional,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The conditional expression  "eq.a is Product && (eq.a as Product).elts.Any(elt => elt == new Sin(sym)) &&                  eq.a is Product && (eq.a as Product).elts.Any(elt => elt == 1 / new Cos(sym))"  is complex.
Complex Conditional,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The conditional expression  "eq.a is Product &&                   (eq.a as Product).elts.Any(elt =>                       (elt == new Sin(sym)) ||                      ((elt is Power) && (elt as Power).bas == new Sin(sym) && (elt as Power).exp is Number)) &&                    eq.b is Product &&                   (eq.b as Product).elts.Any(elt =>                       (elt == new Sin(sym)) ||                       ((elt is Power) && (elt as Power).bas == new Sin(sym) && (elt as Power).exp is Number))"  is complex.
Complex Conditional,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The conditional expression  "eq.a is Product &&                  (eq.a as Product).elts.Any(                      elt =>                          elt is Power &&                          (elt as Power).bas == sym &&                          (elt as Power).exp == -1)"  is complex.
Complex Conditional,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The conditional expression  "eq.a is Sum && eq.a.Has(elt => elt is Power && (elt as Power).exp == new Integer(1) / 2 && (elt as Power).bas.Has(sym))"  is complex.
Complex Conditional,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The conditional expression  "eq.a is Power &&                  (eq.a as Power).bas == sym &&                  (eq.a as Power).exp is Integer &&                  ((eq.a as Power).exp as Integer).val < 0"  is complex.
Complex Conditional,Symbolism.SimplifyEquation,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\SimplifyEquation.cs,SimplifyEquation,The conditional expression  "expr is Equation &&                  (expr as Equation).a is Product &&                  ((expr as Equation).a as Product).elts.Any(elt => elt is Number) &&                  ((expr as Equation).b == 0)"  is complex.
Complex Conditional,Symbolism.SimplifyEquation,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\SimplifyEquation.cs,SimplifyEquation,The conditional expression  "expr is Equation &&                  (expr as Equation).b == 0 &&                  (expr as Equation).a is Power &&                  ((expr as Equation).a as Power).exp is Integer &&                  (((expr as Equation).a as Power).exp as Integer).val > 0"  is complex.
Magic Number,AlgebraicExpand,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\AlgebraicExpand.cs,AlgebraicExpand,The following statement contains a magic number: if (u is Power)                  {                      var bas = (u as Power).bas;                      var exp = (u as Power).exp;                        if (exp is Integer && (exp as Integer).val >= 2)                          return bas.AlgebraicExpand().ExpandPower((exp as Integer).val);                      else                           return u;                  }
Magic Number,Symbolism,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\AlgebraicExpand.cs,AlgebraicExpand,The following statement contains a magic number: if (u is Power)                  {                      var bas = (u as Power).bas;                      var exp = (u as Power).exp;                        if (exp is Integer && (exp as Integer).val >= 2)                          return bas.AlgebraicExpand().ExpandPower((exp as Integer).val);                      else                           return u;                  }
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is Integer) return 1000;
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is DoubleFloat) return 1000;
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is Symbol) return 1000;
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is Function) return 1000;
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is Fraction) return 1000;
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is Power) return 130;
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is Product) return 120;
Magic Number,Symbolism,MathObject,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Precedence,The following statement contains a magic number: if (this is Sum) return 110;
Magic Number,Symbolism,Rational,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,SimplifyRNERec,The following statement contains a magic number: if (u is Sum && ((Sum)u).elts.Count == 2)              {                  var v = SimplifyRNERec(((Sum)u).elts[0]);                  var w = SimplifyRNERec(((Sum)u).elts[1]);                    if (v == new Undefined() || w == new Undefined())                      return new Undefined();                    return EvaluateSum(v' w);              }
Magic Number,Symbolism,Rational,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,SimplifyRNERec,The following statement contains a magic number: if (u is Product && ((Product)u).elts.Count == 2)              {                  var v = SimplifyRNERec(((Product)u).elts[0]);                  var w = SimplifyRNERec(((Product)u).elts[1]);                    if (v == new Undefined() || w == new Undefined())                      return new Undefined();                    return EvaluateProduct(v' w);              }
Magic Number,Symbolism,Rational,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,SimplifyRNERec,The following statement contains a magic number: if (u is Difference && ((Difference)u).elts.Count == 2)              {                  var v = SimplifyRNERec(((Difference)u).elts[0]);                  var w = SimplifyRNERec(((Difference)u).elts[1]);                    if (v == new Undefined() || w == new Undefined())                      return new Undefined();                    return EvaluateDifference(v' w);              }
Magic Number,Symbolism,Power,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The following statement contains a magic number: if (exp == new Integer(1) / new Integer(2)) return $"sqrt({bas})";
Magic Number,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The following statement contains a magic number: if (this.Denominator() == 1)              {                  if (this.Const() < 0 && this / this.Const() is Sum) return $"-({this * -1})";                    if (this.Const() < 0) return $"-{this * -1}";                                    return string.Join(" * "'                       elts.ConvertAll(elt => elt.Precedence() < Precedence() || (elt is Power && (elt as Power).exp != new Integer(1) / 2) ? $"({elt})" : $"{elt}"));              }
Magic Number,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The following statement contains a magic number: var expr_a_ = expr_a is Sum || (expr_a is Power && (expr_a as Power).exp != new Integer(1) / 2) ? $"({expr_a})" : $"{expr_a}";
Magic Number,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The following statement contains a magic number: var expr_b_ = expr_b is Sum || expr_b is Product || (expr_b is Power && (expr_b as Power).exp != new Integer(1) / 2) ? $"({expr_b})" : $"{expr_b}";
Magic Number,Symbolism,Product,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,RecursiveSimplify,The following statement contains a magic number: if (elts.Count == 2)              {                  if (elts[0] is Product && elts[1] is Product)                      return MergeProducts(                          ((Product)elts[0]).elts'                          ((Product)elts[1]).elts);                    if (elts[0] is Product) return MergeProducts(((Product)elts[0]).elts' List(elts[1]));                    if (elts[1] is Product) return MergeProducts(List(elts[0])' ((Product)elts[1]).elts);                    //////////////////////////////////////////////////////////////////////                    if (elts[0] is DoubleFloat && elts[1] is Number)                      return SimplifyDoubleNumberProduct((DoubleFloat)elts[0]' (Number)elts[1]);                    if (elts[0] is Number && elts[1] is DoubleFloat)                      return SimplifyDoubleNumberProduct((DoubleFloat)elts[1]' (Number)elts[0]);                    //////////////////////////////////////////////////////////////////////                    if ((elts[0] is Integer || elts[0] is Fraction)                      &&                      (elts[1] is Integer || elts[1] is Fraction))                  {                      var P = Rational.SimplifyRNE(new Product(elts[0]' elts[1]));                                            if (P == 1) return new List<MathObject>() { };                        return List(P);                  }                    if (elts[0] == 1) return List(elts[1]);                  if (elts[1] == 1) return List(elts[0]);                    var p = elts[0];                  var q = elts[1];                    if (OrderRelation.Base(p) == OrderRelation.Base(q))                  {                      var res = OrderRelation.Base(p) ^ (OrderRelation.Exponent(p) + OrderRelation.Exponent(q));                        if (res == 1) return new List<MathObject>() { };                        return List(res);                  }                    if (OrderRelation.Compare(q' p)) return List(q' p);                    return List(p' q);              }
Magic Number,Symbolism,Sum,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,RecursiveSimplify,The following statement contains a magic number: if (elts.Count == 2)              {                  if (elts[0] is Sum && elts[1] is Sum)                      return MergeSums(                          ((Sum)elts[0]).elts'                          ((Sum)elts[1]).elts);                    if (elts[0] is Sum)                      return MergeSums(                          ((Sum)elts[0]).elts'                          List(elts[1]));                    if (elts[1] is Sum)                      return MergeSums(                          List(elts[0])'                          ((Sum)elts[1]).elts);                    //////////////////////////////////////////////////////////////////////                    if (elts[0] is DoubleFloat && elts[1] is Number)                      return SimplifyDoubleNumberSum((DoubleFloat)elts[0]' (Number)elts[1]);                    if (elts[0] is Number && elts[1] is DoubleFloat)                      return SimplifyDoubleNumberSum((DoubleFloat)elts[1]' (Number)elts[0]);                    //////////////////////////////////////////////////////////////////////                    if ((elts[0] is Integer || elts[0] is Fraction)                      &&                      (elts[1] is Integer || elts[1] is Fraction))                  {                      var P = Rational.SimplifyRNE(new Sum(elts[0]' elts[1]));                        if (P == 0) return new List<MathObject>() { };                        return List(P);                  }                    if (elts[0] == 0) return List(elts[1]);                    if (elts[1] == 0) return List(elts[0]);                                    var p = elts[0];                  var q = elts[1];                    if (p.Term() == q.Term())                  {                      var res = p.Term() * (p.Const() + q.Const());                        if (res == 0) return new List<MathObject>() { };                                            return List(res);                  }                    if (OrderRelation.Compare(q' p)) return List(q' p);                    return List(p' q);              }
Magic Number,Symbolism,Sum,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The following statement contains a magic number: var result = string.Join(" "'                  elts                      .ConvertAll(elt =>                      {                          var elt_ = elt.Const() < 0 ? elt * -1 : elt;                                                                                                                            var elt__ = elt.Const() < 0 && elt_ is Sum || (elt is Power && (elt as Power).exp != new Integer(1) / 2) ? $"({elt_})" : $"{elt_}";                            return elt.Const() < 0 ? $"- {elt__}" : $"+ {elt__}";                      }));
Magic Number,Symbolism,Sum,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,StandardForm,The following statement contains a magic number: if (result.StartsWith("+ ")) return result.Remove(0' 2);
Magic Number,Symbolism,Difference,C:\repos\dharmatech_Symbolism\Symbolism\Symbolism.cs,Simplify,The following statement contains a magic number: if (elts.Count == 2) return elts[0] + -1 * elts[1];
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: var half = new Integer(1) / 2;
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  ((u as Product).elts[0] is Integer || (u as Product).elts[0] is Fraction) &&                  (u as Product).elts[0] > half &&                  (u as Product).elts[1] == Pi)              {                  var n = (u as Product).elts[0];                    if (n > 2) return sin(Mod(n' 2) * Pi);                    if (n > 1) return -sin(n * Pi - Pi);                    if (n > half) return sin((1 - n) * Pi);                    return new Sin(n * Pi);              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  ((u as Product).elts[0] is Integer || (u as Product).elts[0] is Fraction) &&                  (u as Product).elts[0] > half &&                  (u as Product).elts[1] == Pi)              {                  var n = (u as Product).elts[0];                    if (n > 2) return sin(Mod(n' 2) * Pi);                    if (n > 1) return -sin(n * Pi - Pi);                    if (n > half) return sin((1 - n) * Pi);                    return new Sin(n * Pi);              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Product &&                  List<MathObject>(1' 2' 3' 4' 6).Any(elt =>                      elt == (u as Product).elts[0].Denominator()) &&                  (u as Product).elts[0].Numerator() is Integer &&                  (u as Product).elts[1] == Pi)              {                  var k = (u as Product).elts[0].Numerator();                  var n = (u as Product).elts[0].Denominator();                    if (n == 1) return 0;                    if (n == 2)                  {                      if (Mod(k' 4) == 1) return 1;                        if (Mod(k' 4) == 3) return -1;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return (3 ^ half) / 2;                      if (Mod(k' 6) == 2) return (3 ^ half) / 2;                        if (Mod(k' 6) == 4) return -(3 ^ half) / 2;                      if (Mod(k' 6) == 5) return -(3 ^ half) / 2;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 3) return 1 / (2 ^ half);                        if (Mod(k' 8) == 5) return -1 / (2 ^ half);                      if (Mod(k' 8) == 7) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return half;                      if (Mod(k' 12) == 5) return half;                        if (Mod(k' 12) == 7) return -half;                      if (Mod(k' 12) == 11) return -half;                  }              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: Func<MathObject' bool> Product_n_Pi = elt =>                      (elt is Product) &&                      (                          (elt as Product).elts[0] is Integer ||                          (elt as Product).elts[0] is Fraction                      ) &&                      Math.Abs(((elt as Product).elts[0] as Number).ToDouble().val) >= 2.0 &&                        (elt as Product).elts[1] == Pi;
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Sum && (u as Sum).elts.Any(Product_n_Pi))              {                  var pi_elt = (u as Sum).elts.First(Product_n_Pi);                    var n = (pi_elt as Product).elts[0];                    return sin((u - pi_elt) + Mod(n' 2) * Pi);              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: Func<MathObject' bool> Product_n_div_2_Pi = elt =>                  elt is Product &&                  (                      (elt as Product).elts[0] is Integer ||                      (elt as Product).elts[0] is Fraction                  ) &&                  (elt as Product).elts[0].Denominator() == 2 &&                  (elt as Product).elts[1] == Pi;
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Sum && (u as Sum).elts.Any(Product_n_div_2_Pi))              {                  var n_div_2_Pi = (u as Sum).elts.First(Product_n_div_2_Pi);                    var other_elts = u - n_div_2_Pi;                    var n = (n_div_2_Pi as Product).elts[0].Numerator();                    if (Mod(n' 4) == 1) return new Cos(other_elts);                  if (Mod(n' 4) == 3) return -new Cos(other_elts);              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Sum && (u as Sum).elts.Any(Product_n_div_2_Pi))              {                  var n_div_2_Pi = (u as Sum).elts.First(Product_n_div_2_Pi);                    var other_elts = u - n_div_2_Pi;                    var n = (n_div_2_Pi as Product).elts[0].Numerator();                    if (Mod(n' 4) == 1) return new Cos(other_elts);                  if (Mod(n' 4) == 3) return -new Cos(other_elts);              }
Magic Number,Symbolism.Trigonometric,Sin,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,SinProc,The following statement contains a magic number: if (u is Sum && (u as Sum).elts.Any(Product_n_div_2_Pi))              {                  var n_div_2_Pi = (u as Sum).elts.First(Product_n_div_2_Pi);                    var other_elts = u - n_div_2_Pi;                    var n = (n_div_2_Pi as Product).elts[0].Numerator();                    if (Mod(n' 4) == 1) return new Cos(other_elts);                  if (Mod(n' 4) == 3) return -new Cos(other_elts);              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: var half = new Integer(1) / 2;
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                  (                      (ls[0] as Product).elts[0] is Integer ||                      (ls[0] as Product).elts[0] is Fraction                  ) &&                  ((ls[0] as Product).elts[0] as Number) > new Integer(1) / 2 &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var n = (ls[0] as Product).elts[0];                    if (n > 2) return cos(Mod(n' 2) * Pi);                    if (n > 1) return -cos(n * Pi - Pi);                    if (n > half) return -cos(Pi - n * Pi);                    return new Cos(n * Pi);              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                  (                      (ls[0] as Product).elts[0] is Integer ||                      (ls[0] as Product).elts[0] is Fraction                  ) &&                  ((ls[0] as Product).elts[0] as Number) > new Integer(1) / 2 &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var n = (ls[0] as Product).elts[0];                    if (n > 2) return cos(Mod(n' 2) * Pi);                    if (n > 1) return -cos(n * Pi - Pi);                    if (n > half) return -cos(Pi - n * Pi);                    return new Cos(n * Pi);              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                  (                      (ls[0] as Product).elts[0] is Integer ||                      (ls[0] as Product).elts[0] is Fraction                  ) &&                  ((ls[0] as Product).elts[0] as Number) > new Integer(1) / 2 &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var n = (ls[0] as Product).elts[0];                    if (n > 2) return cos(Mod(n' 2) * Pi);                    if (n > 1) return -cos(n * Pi - Pi);                    if (n > half) return -cos(Pi - n * Pi);                    return new Cos(n * Pi);              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Product &&                    List<MathObject>(1' 2' 3' 4' 6)                      .Any(elt => elt == (ls[0] as Product).elts[0].Denominator()) &&                    (ls[0] as Product).elts[0].Numerator() is Integer &&                  (ls[0] as Product).elts[1] == Pi                  )              {                  var k = (ls[0] as Product).elts[0].Numerator();                  var n = (ls[0] as Product).elts[0].Denominator();                    if (n == 1)                  {                      if (Mod(k' 2) == 1) return -1;                      if (Mod(k' 2) == 0) return 1;                  }                    if (n == 2)                  {                      if (Mod(k' 2) == 1) return 0;                  }                    if (n == 3)                  {                      if (Mod(k' 6) == 1) return half;                      if (Mod(k' 6) == 5) return half;                        if (Mod(k' 6) == 2) return -half;                      if (Mod(k' 6) == 4) return -half;                  }                    if (n == 4)                  {                      if (Mod(k' 8) == 1) return 1 / (2 ^ half);                      if (Mod(k' 8) == 7) return 1 / (2 ^ half);                        if (Mod(k' 8) == 3) return -1 / (2 ^ half);                      if (Mod(k' 8) == 5) return -1 / (2 ^ half);                  }                    if (n == 6)                  {                      if (Mod(k' 12) == 1) return (3 ^ half) / 2;                      if (Mod(k' 12) == 11) return (3 ^ half) / 2;                        if (Mod(k' 12) == 5) return -(3 ^ half) / 2;                      if (Mod(k' 12) == 7) return -(3 ^ half) / 2;                  }              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: Func<MathObject' bool> Product_n_Pi = elt =>                      (elt is Product) &&                      (                          (elt as Product).elts[0] is Integer ||                          (elt as Product).elts[0] is Fraction                      ) &&                      Math.Abs(((elt as Product).elts[0] as Number).ToDouble().val) >= 2.0 &&                        (elt as Product).elts[1] == Pi;
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Sum && (ls[0] as Sum).elts.Any(Product_n_Pi))              {                  var pi_elt = (ls[0] as Sum).elts.First(Product_n_Pi);                    var n = (pi_elt as Product).elts[0];                    return cos((ls[0] - pi_elt) + Mod(n' 2) * Pi);              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: Func<MathObject' bool> Product_n_div_2_Pi = elt =>                  elt is Product &&                  (                      (elt as Product).elts[0] is Integer ||                      (elt as Product).elts[0] is Fraction                  ) &&                  (elt as Product).elts[0].Denominator() == 2 &&                  (elt as Product).elts[1] == Pi;
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Sum && (ls[0] as Sum).elts.Any(Product_n_div_2_Pi))              {                  var n_div_2_Pi = (ls[0] as Sum).elts.First(Product_n_div_2_Pi);                    var other_elts = ls[0] - n_div_2_Pi;                    var n = (n_div_2_Pi as Product).elts[0].Numerator();                    if (Mod(n' 4) == 1) return -new Sin(other_elts);                  if (Mod(n' 4) == 3) return new Sin(other_elts);              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Sum && (ls[0] as Sum).elts.Any(Product_n_div_2_Pi))              {                  var n_div_2_Pi = (ls[0] as Sum).elts.First(Product_n_div_2_Pi);                    var other_elts = ls[0] - n_div_2_Pi;                    var n = (n_div_2_Pi as Product).elts[0].Numerator();                    if (Mod(n' 4) == 1) return -new Sin(other_elts);                  if (Mod(n' 4) == 3) return new Sin(other_elts);              }
Magic Number,Symbolism.Trigonometric,Cos,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,CosProc,The following statement contains a magic number: if (ls[0] is Sum && (ls[0] as Sum).elts.Any(Product_n_div_2_Pi))              {                  var n_div_2_Pi = (ls[0] as Sum).elts.First(Product_n_div_2_Pi);                    var other_elts = ls[0] - n_div_2_Pi;                    var n = (n_div_2_Pi as Product).elts[0].Numerator();                    if (Mod(n' 4) == 1) return -new Sin(other_elts);                  if (Mod(n' 4) == 3) return new Sin(other_elts);              }
Magic Number,Symbolism.Trigonometric,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,ToRadians,The following statement contains a magic number: return n * Pi / 180;
Magic Number,Symbolism.Trigonometric,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,ToDegrees,The following statement contains a magic number: return 180 * n / Pi;
Magic Number,Symbolism.Trigonometric,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,ToRadians,The following statement contains a magic number: return new Integer(n) * Pi / 180;
Magic Number,Symbolism.Trigonometric,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\Trigonometric.cs,ToDegrees,The following statement contains a magic number: return 180 * new Integer(n) / Pi;
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a is Power && (eq.a as Power).exp == new Integer(1) / 2)                  return IsolateVariableEq((eq.a ^ 2) == (eq.b ^ 2)' sym);
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a is Power && (eq.a as Power).exp == new Integer(1) / 2)                  return IsolateVariableEq((eq.a ^ 2) == (eq.b ^ 2)' sym);
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a is Power && (eq.a as Power).exp == new Integer(1) / 2)                  return IsolateVariableEq((eq.a ^ 2) == (eq.b ^ 2)' sym);
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a is Power && (eq.a as Power).exp == -new Integer(1) / 2)                  return (eq.a / eq.a == eq.b / eq.a).IsolateVariable(sym);
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2 &&                  eq.b != 0)              {                  return                      (eq.a - eq.b == 0).IsolateVariable(sym);              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a.AlgebraicExpand().DegreeGpe(new List<MathObject>() { sym }) == 2)              {                  var a = eq.a.AlgebraicExpand().CoefficientGpe(sym' 2);                  var b = eq.a.AlgebraicExpand().CoefficientGpe(sym' 1);                  var c = eq.a.AlgebraicExpand().CoefficientGpe(sym' 0);                    if (a == null || b == null || c == null) return eq;                    return new Or(                        new And(                          sym == (-b + (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(                          sym == (-b - (((b ^ 2) - 4 * a * c) ^ (new Integer(1) / 2))) / (2 * a)'                          (a != 0).Simplify()                          ).Simplify()'                        new And(sym == -c / b' a == 0' (b != 0).Simplify()).Simplify()'                        new And(                          (a == 0).Simplify()'                          (b == 0).Simplify()'                          (c == 0).Simplify()                          ).Simplify()                    ).Simplify();              }
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a is Sum && eq.a.Has(sym ^ (new Integer(1) / 2))) return eq;
Magic Number,Symbolism.IsolateVariable,Extensions,C:\repos\dharmatech_Symbolism\Symbolism\IsolateVariable.cs,IsolateVariableEq,The following statement contains a magic number: if (eq.a is Sum && eq.a.Has(elt => elt is Power && (elt as Power).exp == new Integer(1) / 2 && (elt as Power).bas.Has(sym)))                  return eq;
