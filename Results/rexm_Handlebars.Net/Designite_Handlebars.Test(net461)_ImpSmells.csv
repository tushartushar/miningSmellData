Implementation smell,Namespace,Class,File,Method,Description
Long Method,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The method has 168 lines of code.
Long Method,HandlebarsDotNet.Test,IteratorTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\IteratorTests.cs,WithParentIndex,The method has 131 lines of code.
Long Statement,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicPathExpandoObjectIntKeyArray,The length of the statement  "            var data = JsonConvert.DeserializeObject<ExpandoObject>("{ names : [ { \"name\": \"nope!\" }' { \"name\": \"Handlebars.Net\" } ] }"); " is 133.
Long Statement,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,ObjectEnumeration,The length of the statement  "            string source = @"{{#each myObject}}{{#if this.length}}<b>{{@key}}</b>{{#each this}}<li>{{this}}</li>{{/each}}<br>{{/if}}{{/each}}"; " is 132.
Long Statement,HandlebarsDotNet.Test,CustomConfigurationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\CustomConfigurationTests.cs,LowerCamelCaseInputModelNaming,The length of the statement  "            var template = "Hello {{person.name}} {{person.surname}} from {{person.address.homeCountry}}. You're {{{description}}}.";" is 121.
Long Statement,HandlebarsDotNet.Test,CustomConfigurationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\CustomConfigurationTests.cs,UpperCamelCaseInputModelNaming,The length of the statement  "            var template = "Hello {{person.name}} {{person.surname}} from {{person.address.HomeCountry}}. You're {{{description}}}.";" is 121.
Long Statement,HandlebarsDotNet.Test,CustomConfigurationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\CustomConfigurationTests.cs,SnakeCaseInputModelNaming,The length of the statement  "            var template = "Hello {{person.name}} {{person.surname}} from {{person.address.home_Country}}. You're {{{description}}}.";" is 122.
Long Statement,HandlebarsDotNet.Test,DynamicTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\DynamicTests.cs,JsonTestIfTruthy,The length of the statement  "			var model = Newtonsoft.Json.JsonConvert.DeserializeObject<ExpandoObject>("{\"myfield\":\"test1\"'\"truthy\":\"test2\"}");" is 121.
Long Statement,HandlebarsDotNet.Test,DynamicTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\DynamicTests.cs,JsonTestArrays,The length of the statement  "            var model = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>("[{\"Key\": \"Key1\"' \"Value\": \"Val1\"}'{\"Key\": \"Key2\"' \"Value\": \"Val2\"}]");" is 154.
Long Statement,HandlebarsDotNet.Test,DynamicTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\DynamicTests.cs,SystemJsonTestArrays,The length of the statement  "            var model = System.Web.Helpers.Json.Decode("[{\"Key\": \"Key1\"' \"Value\": \"Val1\"}'{\"Key\": \"Key2\"' \"Value\": \"Val2\"}]");" is 130.
Long Statement,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The length of the statement  "            var template = Handlebars.Compile(@"{{#ifCond arg1 '>' arg2}}{{arg1}} is greater than {{arg2}}{{else}}{{arg1}} is less than {{arg2}}{{/ifCond}}");" is 146.
Long Statement,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The length of the statement  "            template = Handlebars.Compile(@"{{#ifCond arg1 '<' arg2}}{{arg1}} is less than {{arg2}}{{else}}{{arg1}} is greater than {{arg2}}{{/ifCond}}");" is 142.
Long Statement,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The length of the statement  "            template = Handlebars.Compile(@"{{#ifCond arg1 '=' arg2}}{{arg1}} is eq to {{arg2}}{{else}}{{arg1}} is not eq to {{arg2}}{{/ifCond}}");" is 135.
Long Statement,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The length of the statement  "            template = Handlebars.Compile(@"{{#ifCond arg1 '!=' arg2}}{{arg1}} is not eq to {{arg2}}{{else}}{{arg1}} is eq to {{arg2}}{{/ifCond}}");" is 136.
Long Statement,HandlebarsDotNet.Test,InlinePartialTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\InlinePartialTests.cs,BasicInlinePartialWithMultipleStringParameters,The length of the statement  "            string source = "{{#*inline \"person\"}}{{first}} {{last}}{{/inline}}Hello' {{>person first='Pete' last=\"Sampras\"}}!";" is 120.
Long Statement,HandlebarsDotNet.Test,InlinePartialTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\InlinePartialTests.cs,BasicInlinePartialWithContextAndStringParameters,The length of the statement  "            string source = "{{#*inline \"person\"}}{{first.name}} {{last}}{{/inline}}Hello' {{>person first=leadDev.marc last='Smith'}}!";" is 127.
Long Statement,HandlebarsDotNet.Test,InlinePartialTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\InlinePartialTests.cs,BlockinlinePartialWithSpecialNamedPartial,The length of the statement  "            string source = "{{#*inline \"myPartial\"}}this is {{> @partial-block }} content{{/inline}}Well' {{#>myPartial}}some test{{/myPartial}} !";" is 139.
Long Statement,HandlebarsDotNet.Test,InlinePartialTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\InlinePartialTests.cs,BlockInlinePartialWithNestedSpecialNamedPartial,The length of the statement  "                          + "{{#*inline \"partial1\"}}this is {{> @partial-block }} content {{#>partial2}}works{{/partial2}} {{lastName}}{{/inline}}"" is 123.
Long Statement,HandlebarsDotNet.Test,IteratorTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\IteratorTests.cs,WithFirst,The length of the statement  "            var source = "Hello'{{#each people}}\n{{@index}}. {{name}} ({{name}} is {{#if @first}}first{{else}}not first{{/if}}){{/each}}";" is 127.
Long Statement,HandlebarsDotNet.Test,IteratorTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\IteratorTests.cs,WithLast,The length of the statement  "            var source = "Hello'{{#each people}}\n{{@index}}. {{name}} ({{name}} is {{#if @last}}last{{else}}not last{{/if}}){{/each}}";" is 124.
Long Statement,HandlebarsDotNet.Test,RawHelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\RawHelperTests.cs,RawBlockHelper,The length of the statement  "            var source = "{{{{rawBlockHelper}}}} {{foo}} {{{foo}}}{{{{otherRawBlockHelper}}}} {{ bar }}{{{bar}}}{{{{/otherRawBlockHelper}}}}{{{{/rawBlockHelper}}}}";" is 153.
Long Statement,HandlebarsDotNet.Test,RawHelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\RawHelperTests.cs,RawBlockHelperWithArguments,The length of the statement  "            var source = "{{{{rawBlockHelper foo bar=bar}}}} {{foo}} {{{foo}}}{{{{otherRawBlockHelper}}}} {{ bar }}{{{bar}}}{{{{/otherRawBlockHelper}}}}{{{{/rawBlockHelper}}}}";" is 165.
Long Statement,HandlebarsDotNet.Test,RawHelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\RawHelperTests.cs,RawBlockHelperWithArguments,The length of the statement  "            Assert.Equal("foo {{foo}} {{{foo}}}{{{{otherRawBlockHelper}}}} {{bar}}{{{bar}}}{{{{/otherRawBlockHelper}}}}outerBar"' output);" is 126.
Long Statement,HandlebarsDotNet.Test,RawHelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\RawHelperTests.cs,RawHelperShouldNotMangleArgumentsInBody,The length of the statement  "            var source = "{{{{rawBlockHelper}}}}{{someHelper fooArg fooHashArg='foo' fooHashArgDoubleQuote=\"foo!\" barHashArg=unquotedValue bazHashArg=@root.baz.nested}}{{{{/rawBlockHelper}}}}";" is 183.
Long Statement,HandlebarsDotNet.Test,RawHelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\RawHelperTests.cs,RawHelperShouldNotMangleArgumentsInBody,The length of the statement  "            Assert.Equal("{{someHelper fooArg fooHashArg='foo' fooHashArgDoubleQuote=\"foo!\" barHashArg=unquotedValue bazHashArg=@root.baz.nested}}"' output);" is 147.
Long Statement,HandlebarsDotNet.Test,RawHelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\RawHelperTests.cs,RawHelperShouldNotMangleArgumentsInBodyIfAnExistingHelperIsReferenced,The length of the statement  "            var source = "{{{{rawBlockHelper}}}}{{someHelper fooArg fooHashArg='foo' fooHashArgDoubleQuote=\"foo!\" barHashArg=unquotedValue bazHashArg=@root.baz.nested}}{{{{/rawBlockHelper}}}}";" is 183.
Long Statement,HandlebarsDotNet.Test,RawHelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\RawHelperTests.cs,RawHelperShouldNotMangleArgumentsInBodyIfAnExistingHelperIsReferenced,The length of the statement  "            Assert.Equal("{{someHelper fooArg fooHashArg='foo' fooHashArgDoubleQuote=\"foo!\" barHashArg=unquotedValue bazHashArg=@root.baz.nested}}"' output);" is 147.
Long Statement,HandlebarsDotNet.Test,TripleStashTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\TripleStashTests.cs,UnencodedEncodedUnencoded,The length of the statement  "            Assert.Equal("<div>There's HTML here</div>...&lt;div&gt;There's HTML here&lt;/div&gt;...<div>There's HTML here</div>!"' result);" is 128.
Long Statement,HandlebarsDotNet.Test,WhitespaceTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\WhitespaceTests.cs,StandaloneEach,The length of the statement  "            var source = "Links:\n {{#each nav}}\n  <a href=\"{{url}}\">\n    {{#if test}}\n    {{title}}\n    {{else}}\n    Empty\n    {{/if}}\n  </a>\n  {{/each}}";" is 154.
Long Statement,HandlebarsDotNet.Test,WhitespaceTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\WhitespaceTests.cs,StandaloneEach,The length of the statement  "            Assert.Equal( "Links:\n  <a href=\"https://google.com\">\n    Google\n  </a>\n  <a href=\"https://bing.com\">\n    Empty\n  </a>\n"' result);" is 141.
Long Statement,HandlebarsDotNet.Test.ViewEngine,CasparTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\ViewEngine\CasparTests.cs,AddHelpers,The length of the statement  "            handlebars.RegisterHelper("excerpt"' (writer' context' arguments) => writer.Write("url:" + string.Join("|"' arguments)));" is 121.
Long Statement,HandlebarsDotNet.Test.ViewEngine,CasparTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\ViewEngine\CasparTests.cs,CanRenderCasparIndexTemplateWithStaticInstance,The length of the statement  "            Handlebars.RegisterHelper("asset"' (writer' context' arguments) => writer.Write("asset:" + string.Join("|"' arguments)));" is 121.
Long Statement,HandlebarsDotNet.Test.ViewEngine,CasparTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\ViewEngine\CasparTests.cs,CanRenderCasparIndexTemplateWithStaticInstance,The length of the statement  "            Handlebars.RegisterHelper("encode"' (writer' context' arguments) => writer.Write("encode:" + string.Join("|"' arguments)));" is 123.
Long Statement,HandlebarsDotNet.Test.ViewEngine,CasparTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\ViewEngine\CasparTests.cs,CanRenderCasparIndexTemplateWithStaticInstance,The length of the statement  "            Handlebars.RegisterHelper("excerpt"' (writer' context' arguments) => writer.Write("url:" + string.Join("|"' arguments)));" is 121.
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicDictionaryEnumeratorWithIntKeys,The following statement contains a magic number: var data = new              {                  enumerateMe = new Dictionary<int' object>                  {                      { 42' "hello" }'                      { 1000000017' "world" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicDictionaryEnumeratorWithIntKeys,The following statement contains a magic number: var data = new              {                  enumerateMe = new Dictionary<int' object>                  {                      { 42' "hello" }'                      { 1000000017' "world" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicDictionaryEnumeratorWithLongKey,The following statement contains a magic number: var data = new              {                  enumerateMe = new Dictionary<long' object>                  {                      { 42L' "hello" }'                      { 100000000000017L' "world" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicDictionaryEnumeratorWithLongKey,The following statement contains a magic number: var data = new              {                  enumerateMe = new Dictionary<long' object>                  {                      { 42L' "hello" }'                      { 100000000000017L' "world" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicPathDictionaryIntKeyNoSquareBrackets,The following statement contains a magic number: var data = new              {                  names = new Dictionary<int' string>                  {                      { 42 ' "Handlebars.Net" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicPathDictionaryLongKeyNoSquareBrackets,The following statement contains a magic number: var data = new              {                  names = new Dictionary<long' string>                  {                      { 42 ' "Handlebars.Net" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicPathDictionaryIntKey,The following statement contains a magic number: var data = new              {                  names = new Dictionary<int' string>                  {                      { 42 ' "Handlebars.Net" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicPathDictionaryLongKey,The following statement contains a magic number: var data = new              {                  names = new Dictionary<long' string>                  {                      { 42 ' "Handlebars.Net" }                  }              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicNumericTruthy,The following statement contains a magic number: var data = new              {                  truthy = -0.1              };
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicDictionary,The following statement contains a magic number: embeded.Add("clientSettings"'                  new                  {                      width = 120'                      height = 80                  });
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,BasicDictionary,The following statement contains a magic number: embeded.Add("clientSettings"'                  new                  {                      width = 120'                      height = 80                  });
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,DictionaryIteration,The following statement contains a magic number: var result = template(new              {                  ADictionary = new Dictionary<string' int>                          {                              { "key5"' 14 }'                              { "key6"' 15 }'                              { "key7"' 16 }'                              { "key8"' 17 }                          }              });
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,DictionaryIteration,The following statement contains a magic number: var result = template(new              {                  ADictionary = new Dictionary<string' int>                          {                              { "key5"' 14 }'                              { "key6"' 15 }'                              { "key7"' 16 }'                              { "key8"' 17 }                          }              });
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,DictionaryIteration,The following statement contains a magic number: var result = template(new              {                  ADictionary = new Dictionary<string' int>                          {                              { "key5"' 14 }'                              { "key6"' 15 }'                              { "key7"' 16 }'                              { "key8"' 17 }                          }              });
Magic Number,HandlebarsDotNet.Test,BasicIntegrationTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\BasicIntegrationTests.cs,DictionaryIteration,The following statement contains a magic number: var result = template(new              {                  ADictionary = new Dictionary<string' int>                          {                              { "key5"' 14 }'                              { "key6"' 15 }'                              { "key7"' 16 }'                              { "key8"' 17 }                          }              });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: Handlebars.RegisterHelper("ifCond"' (writer' options' context' args) => {                 if (args.Length != 3)                 {                     writer.Write("ifCond:Wrong number of arguments");                     return;                 }                 if (args[0] == null || args[0].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[0] undefined");                     return;                 }                 if (args[1] == null || args[1].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[1] undefined");                     return;                 }                 if (args[2] == null || args[2].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[2] undefined");                     return;                 }                 if (args[0].GetType().Name == "String" || args[0].GetType().Name == "JValue")                 {                     var val1 = args[0].ToString();                     var val2 = args[2].ToString();                      switch (args[1].ToString())                     {                         case ">":                             if (val1.Length > val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1.Length < val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }                 else                 {                     var val1 = float.Parse(args[0].ToString());                     var val2 = float.Parse(args[2].ToString());                      switch (args[1].ToString())                     {                         case ">":                             if (val1 > val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1 < val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }             });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: Handlebars.RegisterHelper("ifCond"' (writer' options' context' args) => {                 if (args.Length != 3)                 {                     writer.Write("ifCond:Wrong number of arguments");                     return;                 }                 if (args[0] == null || args[0].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[0] undefined");                     return;                 }                 if (args[1] == null || args[1].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[1] undefined");                     return;                 }                 if (args[2] == null || args[2].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[2] undefined");                     return;                 }                 if (args[0].GetType().Name == "String" || args[0].GetType().Name == "JValue")                 {                     var val1 = args[0].ToString();                     var val2 = args[2].ToString();                      switch (args[1].ToString())                     {                         case ">":                             if (val1.Length > val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1.Length < val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }                 else                 {                     var val1 = float.Parse(args[0].ToString());                     var val2 = float.Parse(args[2].ToString());                      switch (args[1].ToString())                     {                         case ">":                             if (val1 > val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1 < val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }             });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: Handlebars.RegisterHelper("ifCond"' (writer' options' context' args) => {                 if (args.Length != 3)                 {                     writer.Write("ifCond:Wrong number of arguments");                     return;                 }                 if (args[0] == null || args[0].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[0] undefined");                     return;                 }                 if (args[1] == null || args[1].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[1] undefined");                     return;                 }                 if (args[2] == null || args[2].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[2] undefined");                     return;                 }                 if (args[0].GetType().Name == "String" || args[0].GetType().Name == "JValue")                 {                     var val1 = args[0].ToString();                     var val2 = args[2].ToString();                      switch (args[1].ToString())                     {                         case ">":                             if (val1.Length > val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1.Length < val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }                 else                 {                     var val1 = float.Parse(args[0].ToString());                     var val2 = float.Parse(args[2].ToString());                      switch (args[1].ToString())                     {                         case ">":                             if (val1 > val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1 < val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }             });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: Handlebars.RegisterHelper("ifCond"' (writer' options' context' args) => {                 if (args.Length != 3)                 {                     writer.Write("ifCond:Wrong number of arguments");                     return;                 }                 if (args[0] == null || args[0].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[0] undefined");                     return;                 }                 if (args[1] == null || args[1].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[1] undefined");                     return;                 }                 if (args[2] == null || args[2].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[2] undefined");                     return;                 }                 if (args[0].GetType().Name == "String" || args[0].GetType().Name == "JValue")                 {                     var val1 = args[0].ToString();                     var val2 = args[2].ToString();                      switch (args[1].ToString())                     {                         case ">":                             if (val1.Length > val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1.Length < val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }                 else                 {                     var val1 = float.Parse(args[0].ToString());                     var val2 = float.Parse(args[2].ToString());                      switch (args[1].ToString())                     {                         case ">":                             if (val1 > val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1 < val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }             });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: Handlebars.RegisterHelper("ifCond"' (writer' options' context' args) => {                 if (args.Length != 3)                 {                     writer.Write("ifCond:Wrong number of arguments");                     return;                 }                 if (args[0] == null || args[0].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[0] undefined");                     return;                 }                 if (args[1] == null || args[1].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[1] undefined");                     return;                 }                 if (args[2] == null || args[2].GetType().Name == "UndefinedBindingResult")                 {                     writer.Write("ifCond:args[2] undefined");                     return;                 }                 if (args[0].GetType().Name == "String" || args[0].GetType().Name == "JValue")                 {                     var val1 = args[0].ToString();                     var val2 = args[2].ToString();                      switch (args[1].ToString())                     {                         case ">":                             if (val1.Length > val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1.Length < val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }                 else                 {                     var val1 = float.Parse(args[0].ToString());                     var val2 = float.Parse(args[2].ToString());                      switch (args[1].ToString())                     {                         case ">":                             if (val1 > val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1 < val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }                 }             });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: var data = new { arg1 = 2' arg2 = 1 };
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: data = new { arg1 = 1' arg2 = 2 };
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: data = new { arg1 = 2' arg2 = 1 };
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: data = new { arg1 = 1' arg2 = 2 };
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: data = new { arg1 = 2' arg2 = 1 };
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following statement contains a magic number: data = new { arg1 = 2' arg2 = 1 };
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,HelperWithHashArgument,The following statement contains a magic number: Handlebars.RegisterHelper("myHelper"' (writer' context' args) => {                 var hash = args[2] as Dictionary<string' object>;                 foreach(var item in hash)                 {                     writer.Write(" {0}: {1}"' item.Key' item.Value);                 }             });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithSubExpression,The following statement contains a magic number: var outputIsFalse = template(new { arg1 = 1' arg2 = 2 });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,HelperWithLiteralValues,The following statement contains a magic number: Handlebars.RegisterHelper("literalHelper"' (writer' context' arguments) => {                 Assert.IsType<bool>(arguments[0]);                 Assert.IsType<int>(arguments[1]);                 Assert.IsType<string>(arguments[2]);                 writer.Write($"{arguments[0]} {arguments[1]} {arguments[2]}");             });
Magic Number,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,HelperWithLiteralValues,The following statement contains a magic number: Handlebars.RegisterHelper("literalHelper"' (writer' context' arguments) => {                 Assert.IsType<bool>(arguments[0]);                 Assert.IsType<int>(arguments[1]);                 Assert.IsType<string>(arguments[2]);                 writer.Write($"{arguments[0]} {arguments[1]} {arguments[2]}");             });
Magic Number,HandlebarsDotNet.Test,InlinePartialTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\InlinePartialTests.cs,InlinePartialInEach,The following statement contains a magic number: var data = new             {                 items = new[]                 {                     new                     { id = 1 }'                     new { id = 2 }                 }             };
Magic Number,HandlebarsDotNet.Test,PartialTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\PartialTests.cs,DynamicPartialWithHelperArguments,The following statement contains a magic number: Handlebars.RegisterHelper("concat"' (writer' context' args) =>             {                 var hash = args[2] as Dictionary<string' object>;                 writer.WriteSafeString(string.Concat(args[0]' args[1]' hash["item1"]' hash["item2"]));             });
Magic Number,HandlebarsDotNet.Test,WhitespaceTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\WhitespaceTests.cs,StandaloneNesting,The following statement contains a magic number: var data = new {data = new[] {1' 3' 5}};
Magic Number,HandlebarsDotNet.Test,WhitespaceTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\WhitespaceTests.cs,StandaloneNesting,The following statement contains a magic number: var data = new {data = new[] {1' 3' 5}};
Duplicate Code,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 51)' (83' 102))
Duplicate Code,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The method contains a code clone-set at the following line numbers (starting from the method definition): ((53' 73)' (104' 124))
Missing Default,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following switch statement is missing a default case: switch (args[1].ToString())                     {                         case ">":                             if (val1.Length > val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1.Length < val2.Length)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }
Missing Default,HandlebarsDotNet.Test,HelperTests,C:\research\architectureSmells\repos\rexm_Handlebars.Net\source\Handlebars.Test\HelperTests.cs,BlockHelperWithArbitraryInversionAndComplexOperator,The following switch statement is missing a default case: switch (args[1].ToString())                     {                         case ">":                             if (val1 > val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "=":                         case "==":                             if (val1 == val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "<":                             if (val1 < val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                         case "!=":                         case "<>":                             if (val1 != val2)                             {                                 options.Template(writer' (object)context);                             }                             else                             {                                 options.Inverse(writer' (object)context);                             }                             break;                     }
