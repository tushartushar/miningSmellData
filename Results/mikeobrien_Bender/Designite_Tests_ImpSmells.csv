Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,CreateNode,The method has 5 parameters. Parameters: dictionary' options' mode' type' value
Long Parameter List,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,CreateNode,The method has 5 parameters. Parameters: enumerable' options' mode' type' member
Long Parameter List,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,CreateNode,The method has 5 parameters. Parameters: value' options' mode' type' member
Long Parameter List,Tests.Performance,BenchmarkSerializer,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\BenchmarkSerializer.cs,BenchmarkSerializer,The method has 6 parameters. Parameters: name' format' parse' deserializeNodes' serializeNodes' encode
Long Parameter List,Tests,TestExtensions,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\TestExtensions.cs,Add,The method has 5 parameters. Parameters: node' name' type' metadata' modify
Long Parameter List,Tests.Nodes.Object.NodeFactory.Serializable,NodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\NodeFactory\Serializable\NodeTests.cs,node_should_be_in_valid_state,The method has 5 parameters. Parameters: node' object' value' nodeType' specifiedType
Long Parameter List,Tests.Nodes.Object.NodeFactory.Serializable,RootNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\NodeFactory\Serializable\RootNodeTests.cs,should_create_node_from_actual_type_overload,The method has 5 parameters. Parameters: specifiedType' value' specifiedTypeName' actualName' nodeType
Long Parameter List,Tests.Nodes.Object.NodeFactory.Serializable,RootNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\NodeFactory\Serializable\RootNodeTests.cs,should_create_node_from_specified_type_overload,The method has 5 parameters. Parameters: specifiedType' value' specifiedName' actualName' nodeType
Long Parameter List,Tests.Nodes.Object.NodeFactory.Serializable,RootNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\NodeFactory\Serializable\RootNodeTests.cs,node_should_be_in_valid_state,The method has 5 parameters. Parameters: name' node' value' nodeType' specifiedType
Long Identifier,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,,The length of the parameter GenericDictionaryStringKeysCases is 32.
Long Identifier,Tests.Serializer.CharacterSeparated,SaveTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\CharacterSeparated\SaveTests.cs,,The length of the parameter LowerCaseCsvBytesUnicodeByType is 30.
Long Identifier,Tests.Serializer.CharacterSeparated,SaveTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\CharacterSeparated\SaveTests.cs,,The length of the parameter LowerCaseCsvStreamUnicodeByType is 31.
Long Identifier,Tests.Serializer.Json,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\DictionaryTests.cs,,The length of the parameter ComplexTypeDictionaryOfDictionaries is 35.
Long Identifier,Tests.Serializer.Json,SaveTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\SaveTests.cs,,The length of the parameter LowerCaseJsonBytesUnicodeByType is 31.
Long Identifier,Tests.Serializer.Json,SaveTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\SaveTests.cs,,The length of the parameter LowerCaseJsonStreamUnicodeByType is 32.
Long Identifier,Tests.Serializer.Json,SaveTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\SaveTests.cs,,The length of the parameter LowerCaseJsonPathUnicodeByType is 30.
Long Identifier,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,,The length of the parameter ComplexTypeDictionaryOfDictionaries is 35.
Long Identifier,Tests.Serializer.Xml,SaveTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\SaveTests.cs,,The length of the parameter LowerCaseXmlBytesUnicodeByType is 30.
Long Identifier,Tests.Serializer.Xml,SaveTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\SaveTests.cs,,The length of the parameter LowerCaseXmlStreamUnicodeByType is 31.
Long Statement,Tests.Deserializer.CharacterSeparated,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\CharacterSeparated\ArrayTests.cs,should_deserialize_simple_types,The length of the statement  "            var Csv = "\"Value\"\r\n{0}\r\n".ToFormat(type.IsNumeric() || type.IsBoolean() ? value.ToString().ToLower() : "\"" + value + "\""); " is 131.
Long Statement,Tests.Deserializer.CharacterSeparated,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\CharacterSeparated\ArrayTests.cs,should_fail_to_deserialize_generic_enumerable_impls_of_complex_type,The length of the statement  "                "'Tests.Collections.Implementations.GenericEnumerableImpl<Tests.Deserializer.CharacterSeparated.ArrayTests.ComplexType>': " + " is 125.
Long Statement,Tests.Deserializer.CharacterSeparated,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\CharacterSeparated\ArrayTests.cs,should_fail_to_deserialize_generic_enumerable_impls_of_complex_type,The length of the statement  "                "Enumerable 'Tests.Collections.Implementations.GenericEnumerableImpl<Tests.Deserializer.CharacterSeparated.ArrayTests.ComplexType>' " + " is 135.
Long Statement,Tests.Deserializer,FormUrlEncodedTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\FormUrlEncodedTests.cs,should_fail_to_parse_empty_fields,The length of the statement  "            var exception = Assert.Throws<FriendlyMappingException>(() => Deserialize.FormUrlEncoded<SimpleTypeField>(form' options)); " is 122.
Long Statement,Tests.Deserializer,FormUrlEncodedTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\FormUrlEncodedTests.cs,should_fail_to_parse_empty_fields_with_custom_parse_message,The length of the statement  "            var exception = Assert.Throws<FriendlyMappingException>(() => Deserialize.FormUrlEncoded<SimpleTypeField>(form' options)); " is 122.
Long Statement,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_json_nodes,The length of the statement  "            result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 126.
Long Statement,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_json_nodes_when,The length of the statement  "            result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 126.
Long Statement,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_json_nodes_of_type,The length of the statement  "            result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 126.
Long Statement,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_json_nodes_of_type_when,The length of the statement  "            result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 126.
Long Statement,Tests.Deserializer.Json,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\DictionaryTests.cs,should_deserialize_typed_dictionary_entries,The length of the statement  "            var json = "{{ \"item\": {0} }}".ToFormat(type.IsNumeric() || type.IsBoolean() ? value.ToString().ToLower() : "\"" + value + "\""); " is 131.
Long Statement,Tests.Deserializer.Json,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\DictionaryTests.cs,should_deserialize_string_dictionary_entries,The length of the statement  "            var json = "{{ \"item\": \"{0}\" }}".ToFormat(type.IsNumeric() || type.IsBoolean() ? value.ToString().ToLower() : value); " is 121.
Long Statement,Tests.Deserializer.Json,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries_with_custom_parse_message_using_generic_overload,The length of the statement  "                "Generic.Dictionary<System.String' System.Int32>[\"item\"]': Error parsing ''. Input string was not in a correct format."); " is 123.
Long Statement,Tests.Deserializer.Json,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ArrayTests.cs,should_fail_to_parse_empty_array_items_with_custom_parse_message_using_generic_overload,The length of the statement  "            var exception = Assert.Throws<FriendlyMappingException>(() => Deserialize.Json("[ \"\" ]"' typeof(List<int>)' options)); " is 120.
Long Statement,Tests.Deserializer.Json,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ArrayTests.cs,should_fail_to_deserialize_generic_enumerable_impls_of_complex_type,The length of the statement  "                "Enumerable 'Tests.Collections.Implementations.GenericEnumerableImpl<Tests.Deserializer.Json.ArrayTests.ComplexType>' " + " is 121.
Long Statement,Tests.Deserializer.Json,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ObjectTests.cs,should_fail_on_unmapped_members_when_configured,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Could not read json object '$': The following children were expected but not found: 'Property'."); " is 137.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_fail_to_parse_empty_array_items,The length of the statement  "                "Generic.List<{1}>[]': Error parsing ''. ").ToFormat(type.GetUnderlyingNullableType().Name' type.GetFriendlyTypeFullName())); " is 125.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_fail_to_parse_empty_array_items,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Could not read xml element '/ArrayOf{0}/{0}': ".ToFormat(type.GetUnderlyingNullableType().Name) + " is 136.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_fail_to_parse_empty_array_items_with_custom_parse_message,The length of the statement  "                "Generic.List<{1}>[]': Error parsing ''. ").ToFormat(type.GetUnderlyingNullableType().Name' type.GetFriendlyTypeFullName())); " is 125.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_fail_to_parse_empty_array_items_with_custom_parse_message,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Could not read xml element '/ArrayOf{0}/{0}': yada".ToFormat(type.GetUnderlyingNullableType().Name)); " is 140.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_fail_to_deserialize_generic_enumerable_impls_of_complex_type,The length of the statement  "                "Enumerable 'Tests.Collections.Implementations.GenericEnumerableImpl<Tests.Deserializer.Xml.ArrayTests.ComplexType>' " + " is 120.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_deserialize_array_of_arrays,The length of the statement  "            var xml = "<ArrayOfArrayOfComplexType><ArrayOfComplexType><ComplexType><Property>hai</Property></ComplexType></ArrayOfComplexType></ArrayOfArrayOfComplexType>"; " is 160.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_deserialize_array_of_dictionary,The length of the statement  "            var xml = "<ArrayOfDictionaryOfComplexType><DictionaryOfComplexType><item><Property>hai</Property></item></DictionaryOfComplexType></ArrayOfDictionaryOfComplexType>"; " is 166.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_fail_to_deserialize_member_generic_enumerable_impls,The length of the statement  "                "Enumerable 'Tests.Collections.Implementations.GenericEnumerableImpl<Tests.Deserializer.Xml.ArrayTests.ComplexType>' " + " is 120.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_not_treat_enumerable_root_as_object_by_default,The length of the statement  "            var result = Deserialize.Xml<EnumerableImplementation>("<ArrayOfString><String>oh</String><String>hai</String></ArrayOfString>").ToList(); " is 138.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_not_treat_enumerable_member_as_object_by_default,The length of the statement  "            var result = Deserialize.Xml<EnumerableMember>("<EnumerableMember><EnumerableImpl><String>oh</String><String>hai</String></EnumerableImpl></EnumerableMember>").EnumerableImpl.ToList(); " is 184.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_not_treat_enumerable_array_item_as_object_by_default,The length of the statement  "            var result = Deserialize.Xml<List<EnumerableImplementation>>("<ArrayOfArrayOfString><ArrayOfString><String>oh</String><String>hai</String></ArrayOfString></ArrayOfArrayOfString>").First().ToList(); " is 197.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_treat_enumerable_array_item_as_object_when_configured,The length of the statement  "                "<ArrayOfEnumerableImplementation><EnumerableImplementation><Property>oh</Property><Field>hai</Field></EnumerableImplementation></ArrayOfEnumerableImplementation>"' " is 164.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_not_treat_enumerable_dictionary_entry_as_object_by_default,The length of the statement  "                "<DictionaryOfArrayOfString><item><String>oh</String><String>hai</String></item></DictionaryOfArrayOfString>")["item"].ToList(); " is 128.
Long Statement,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_treat_enumerable_dictionary_entry_as_object_when_configured,The length of the statement  "                "<DictionaryOfEnumerableImplementation><item><Property>oh</Property><Field>hai</Field></item></DictionaryOfEnumerableImplementation>"' " is 134.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_deserialize_null_value_type_dictionary_entries,The length of the statement  "            var exception = Assert.Throws<FriendlyMappingException>(() => Deserialize.Xml("<DictionaryOf{0}><item/></DictionaryOf{0}>" " is 122.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries,The length of the statement  "            var exception = Assert.Throws<FriendlyMappingException>(() => Deserialize.Xml("<DictionaryOf{0}><item></item></DictionaryOf{0}>" " is 128.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries,The length of the statement  "                "Generic.Dictionary<System.String' {1}>[\"item\"]': Error parsing ''. ").ToFormat(type.GetUnderlyingNullableType().Name' type.GetFriendlyTypeFullName())); " is 154.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Could not read xml element '/DictionaryOf{0}/item': ".ToFormat(type.GetUnderlyingNullableType().Name) + " is 142.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries_with_custom_parse_message,The length of the statement  "            var exception = Assert.Throws<FriendlyMappingException>(() => Deserialize.Xml("<DictionaryOf{0}><item></item></DictionaryOf{0}>" " is 128.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries_with_custom_parse_message,The length of the statement  "                "Generic.Dictionary<System.String' {1}>[\"item\"]': Error parsing ''. ").ToFormat(type.GetUnderlyingNullableType().Name' type.GetFriendlyTypeFullName())); " is 154.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries_with_custom_parse_message,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Could not read xml element '/DictionaryOf{0}/item': yada".ToFormat(type.GetUnderlyingNullableType().Name)); " is 146.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_fail_to_parse_empty_dictionary_entries_with_custom_parse_message_using_generic_overload,The length of the statement  "                "Generic.Dictionary<System.String' System.Int32>[\"item\"]': Error parsing ''. Input string was not in a correct format."); " is 123.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_deserialize_dictionary_of_dictionary,The length of the statement  "            var xml = "<DictionaryOfArrayOfComplexType><item><ComplexType><Property>hai</Property></ComplexType></item></DictionaryOfArrayOfComplexType>"; " is 142.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_deserialize_dictionary_of_array,The length of the statement  "            var xml = "<DictionaryOfDictionaryOfComplexType><item1><item2><Property>hai</Property></item2></item1></DictionaryOfDictionaryOfComplexType>"; " is 142.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_not_treat_dictionary_member_as_object_by_default,The length of the statement  "                "<DictionaryMember><DictionaryImpl><item1>oh</item1><item2>hai</item2></DictionaryImpl></DictionaryMember>").DictionaryImpl; " is 124.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_not_treat_dictionary_array_item_as_object_by_default,The length of the statement  "                "<ArrayOfDictionaryOfString><DictionaryOfString><item1>oh</item1><item2>hai</item2></DictionaryOfString></ArrayOfDictionaryOfString>").First(); " is 143.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_treat_dictionary_array_item_as_object_when_configured,The length of the statement  "                "<ArrayOfDictionaryImplementation><DictionaryImplementation><Property>oh</Property><Field>hai</Field></DictionaryImplementation></ArrayOfDictionaryImplementation>"' " is 164.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_not_treat_dictionary_dictionary_entry_as_object_by_default,The length of the statement  "                "<DictionaryOfDictionaryOfString><item><item1>oh</item1><item2>hai</item2></item></DictionaryOfDictionaryOfString>")["item"]; " is 125.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_treat_dictionary_dictionary_entry_as_object_when_configured,The length of the statement  "                "<DictionaryOfDictionaryImplementation><item><Property>oh</Property><Field>hai</Field></item></DictionaryOfDictionaryImplementation>"' " is 134.
Long Statement,Tests.Deserializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\DictionaryTests.cs,should_ignore_attributes_when_configured,The length of the statement  "            var result = Deserialize.Xml<Dictionary<string' string>>(FilterAttributesXml' x => x.Deserialization(y => y.IgnoreXmlAttributes())); " is 132.
Long Statement,Tests.Deserializer.Xml,LoadTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\LoadTests.cs,should_fail_when_xml_is_not_valid,The length of the statement  "            message.ShouldEqual("Unable to parse xml: The 'sdfsdf' start tag on line 1 position 8 does not match the end tag of 'yada'. Line 1' position 17."); " is 147.
Long Statement,Tests.Deserializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ObjectTests.cs,should_fail_to_parse_empty_fields_with_custom_parse_message_using_generic_overload,The length of the statement  "            exception.Message.ShouldEqual("Error deserializing xml element '/SimpleTypeField/Int32Property' to 'Tests.Deserializer." + " is 122.
Long Statement,Tests.Deserializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ObjectTests.cs,should_override_field_name_with_xml_array_attribute,The length of the statement  "            Deserialize.Xml<XmlAttributes>("<XmlAttributes><ArrayNameOverride><String>hai</String></ArrayNameOverride></XmlAttributes>") " is 124.
Long Statement,Tests.Deserializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ObjectTests.cs,should_fail_on_unmapped_elements_when_configured,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Could not read xml element '/UnmappedElements/yada': Element 'yada' is not recognized."); " is 128.
Long Statement,Tests.Deserializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ObjectTests.cs,should_fail_on_unmapped_members_when_configured,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Could not read xml element '/UnmappedMembers': The following children were expected but not found: 'Property'."); " is 152.
Long Statement,Tests.Deserializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ObjectTests.cs,should_ignore_attributes_when_configured,The length of the statement  "            var result = Deserialize.Xml<FilterAttributes>(FilterAttributesXml' x => x.Deserialization(y => y.IgnoreXmlAttributes())); " is 122.
Long Statement,Tests.Deserializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ObjectTests.cs,should_apply_field_name_modification_convention_conditionally,The length of the statement  "                "<NamingConventions><_PropertyValue2>oh</_PropertyValue2>'<_FieldValue>hai</_FieldValue><_FieldValue2>there</_FieldValue2></NamingConventions>"' " is 144.
Long Statement,Tests.Deserializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ObjectTests.cs,should_apply_property_name_modification_convention_conditionally,The length of the statement  "                "<NamingConventions><_PropertyValue>oh</_PropertyValue>'<_FieldValue2>hai</_FieldValue2><_PropertyValue2>there</_PropertyValue2></NamingConventions>"' " is 150.
Long Statement,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_datetime_as_local,The length of the statement  "            var result = Deserialize.Xml<DateTimeConversion>("<DateTimeConversion><DateTime>{0}</DateTime></DateTimeConversion>".ToFormat(datetime)' " is 136.
Long Statement,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_nullable_datetime_as_local,The length of the statement  "            var @object = Deserialize.Xml<NullableDateTimeConversion>("<NullableDateTimeConversion>{0}</NullableDateTimeConversion>".ToFormat(datetime)' " is 140.
Long Statement,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_xml_nodes,The length of the statement  "            var result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 130.
Long Statement,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_xml_nodes_when,The length of the statement  "            var result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 130.
Long Statement,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_xml_nodes_of_type,The length of the statement  "            var result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 130.
Long Statement,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_xml_nodes_of_type_when,The length of the statement  "            var result = Deserialize.Xml<Model>("<Model><Property1>oh</Property1><Child><Property1>hai</Property1></Child></Model>"' options); " is 130.
Long Statement,Tests.Extensions,FuncExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\FuncExtensionTests.cs,should_when_else_action,The length of the statement  "            var do3 = Substitute.For<Action<string' string' string>>(); var else3 = Substitute.For<Action<string' string' string>>(); " is 121.
Long Statement,Tests.Extensions,FuncExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\FuncExtensionTests.cs,should_when_else_action,The length of the statement  "            var do4 = Substitute.For<Action<string' string' string' string>>(); var else4 = Substitute.For<Action<string' string' string' string>>(); " is 137.
Long Statement,Tests.Extensions,FuncExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\FuncExtensionTests.cs,should_then_do,The length of the statement  "            var do3 = Substitute.For<Action<string' string' string>>(); var then3 = Substitute.For<Action<string' string' string>>(); " is 121.
Long Statement,Tests.Extensions,FuncExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\FuncExtensionTests.cs,should_then_do,The length of the statement  "            var do4 = Substitute.For<Action<string' string' string' string>>(); var then4 = Substitute.For<Action<string' string' string' string>>(); " is 137.
Long Statement,Tests.Extensions,FuncExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\FuncExtensionTests.cs,should_then_do_conditionally,The length of the statement  "            var do3 = Substitute.For<Action<string' string' string>>(); var then3 = Substitute.For<Action<string' string' string>>(); " is 121.
Long Statement,Tests.Extensions,FuncExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\FuncExtensionTests.cs,should_then_do_conditionally,The length of the statement  "            var do4 = Substitute.For<Action<string' string' string' string>>(); var then4 = Substitute.For<Action<string' string' string' string>>(); " is 137.
Long Statement,Tests.Nodes,ExceptionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\ExceptionTests.cs,should_use_serialization_friendly_mapping_exception_message,The length of the statement  "            var exception = new FriendlyMappingException(new FriendlyBenderException("exception message"' "friendly message")' new Node("object")' " is 134.
Long Statement,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_fail_on_unclosed_outer_object,The length of the statement  "            exception.FriendlyMessage.ShouldEqual("Unable to parse json: Unexpected end of file. Following elements are not closed: root."); " is 128.
Long Statement,Tests.Nodes.Object,ObjectFactoryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectFactoryTests.cs,should_fail_to_create_simple_types,The length of the statement  "                .Message.ShouldEqual(SimpleTypeInstantiationNotSupportedException.MessageFormat.ToFormat(type.GetFriendlyTypeFullName())); " is 122.
Long Statement,Tests.Nodes.Object,ObjectFactoryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectFactoryTests.cs,should_fail_create_complex_type_with_unresolvable_dependency,The length of the statement  "            Assert.Throws<ObjectCreationException>(() => ObjectFactory.CreateInstance(typeof(ComplexType).ToCachedType()' null' null)) " is 122.
Long Statement,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_fail_to_add_case_sensitive_nodes_by_default,The length of the statement  "            var exception = Assert.Throws<InvalidItemNameDeserializationException>(() => CreateNode(new SimpleValue(new List<String>()' " is 123.
Long Statement,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_add_named_nodes_with_custom_array_item_name_convention,The length of the statement  "            var exception = Assert.Throws<InvalidItemNameDeserializationException>(() => CreateNodeOfType(new List<string>()' options) " is 122.
Long Statement,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_add_named_nodes_with_custom_type_name_convention,The length of the statement  "            var exception = Assert.Throws<InvalidItemNameDeserializationException>(() => CreateNodeOfType(new List<string>()' options) " is 122.
Long Statement,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_return_object_from_inner_value,The length of the statement  "            var node = CreateAccessModifierNode(value: new SimpleValue(@object' typeof(MemberAccessModifierEnumeration).ToCachedType())); " is 125.
Long Statement,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_members_with_xml_ignore_attribute_applied,The length of the statement  "            var nodes = CreateAccessModifierNode(value: new SimpleValue(new ExcludedMember()' typeof(ExcludedMember).ToCachedType())).ToList(); " is 131.
Long Statement,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_fail_to_get_node_by_name_when_case_does_no_match,The length of the statement  "            CreateAccessModifierNode(value: new SimpleValue(@object' @object.GetType().ToCachedType())).GetNode("oh").ShouldBeNull(); " is 121.
Long Statement,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The length of the statement  "            report.AppendLine("            -------------------------------------------------------------------------------------------"); " is 125.
Long Statement,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The length of the statement  "            report.AppendLine("            |                    Cold                    |                    Warm                    |"); " is 125.
Long Statement,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The length of the statement  "            report.AppendLine("            | Parse -> Deserialize | Serialize -> Encode | Parse -> Deserialize | Serialize -> Encode |"); " is 125.
Long Statement,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The length of the statement  "            report.AppendLine("-------------------------------------------------------------------------------------------------------"); " is 125.
Long Statement,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The length of the statement  "            GetResults().Where(x => !x.Summary).OrderBy(x => x.Name).ForEach(x => report.AppendLine("{0} | {1} | {2} | {3} | {4} |".ToFormat( " is 129.
Long Statement,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The length of the statement  "            report.AppendLine("-------------------------------------------------------------------------------------------------------"); " is 125.
Long Statement,Tests.Serializer,FormUrlEncodedTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\FormUrlEncodedTests.cs,should_serialize_fields,The length of the statement  "            var result = Serialize.FormUrlEncoded(@object' x => x.IncludePublicFields().IncludeMembersWhen((m' o) => m.Name == memberName)); " is 128.
Long Statement,Tests.Reflection,CachedTypeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\CachedTypeTests.cs,should_return_friendly_full_name,The length of the statement  "            new CachedType(typeof(KeyValuePair<string' int>)).FriendlyFullName.ShouldEqual("System.Collections.Generic.KeyValuePair<System.String' System.Int32>"); " is 151.
Long Statement,Tests.Reflection,CollectionExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\CollectionExtensionTests.cs,should_create_a_generic_dictionary,The length of the statement  "            typeof(IDictionary<string' int>).ToCachedType().CreateGenericDictionaryInstance().ShouldBeType<Dictionary<string' int>>(); " is 122.
Long Statement,Tests.NamingConventions,TypeConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\TypeConventionsTests.cs,GetTypeName,The length of the statement  "            return convention.GetName(new TypeContext(ModelType.ToCachedType()' new Context(Options' Mode.Deserialize' "xml")' true)); " is 122.
Long Statement,Tests.NamingConventions,TypeNamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\DefaultTypeConventionTests.cs,GetName,The length of the statement  "                .GetName(new TypeContext(type.ToCachedType()' new Context(options ?? Options.Create()' Mode.Deserialize' "xml")' isRoot)); " is 122.
Long Statement,Tests.Nodes.Object.NodeFactory.Deserializable,NodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\NodeFactory\Deserializable\NodeTests.cs,should_pass_member_info_to_array_nodes,The length of the statement  "            var exception = Assert.Throws<InvalidItemNameDeserializationException>(() => node.Add(NodeName' NodeType.Value' Metadata.Empty' x => { })); " is 139.
Long Statement,Tests.Nodes.Object.NodeFactory.Deserializable,RootNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\NodeFactory\Deserializable\RootNodeTests.cs,should_create_root_node_case_insensitively_name,The length of the statement  "                "sometypeofstring"' typeof(SomeType<string>).ToCachedType()' "xml"' Options.Create(x => x.Deserialization(y => y.IgnoreNameCase()))); " is 133.
Long Statement,Tests.Nodes.Xml,ElementNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Xml\ElementNodeTests.cs,should_set_attribute_value_when_a_value_and_configured,The length of the statement  "            var node = ElementNode.Create("Oh"' Metadata.Empty' Options.Create(x => x.Serialization(y => y.XmlValuesAsAttributes()))); " is 122.
Long Statement,Tests.Nodes.Xml,ElementNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Xml\ElementNodeTests.cs,should_not_set_attribute_value_when_not_a_value_and_configured,The length of the statement  "            var node = ElementNode.Create("Oh"' Metadata.Empty' Options.Create(x => x.Serialization(y => y.XmlValuesAsAttributes()))); " is 122.
Long Statement,Tests.Serializer.Json,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\ArrayTests.cs,should_treat_enumerable_member_as_object_when_configured,The length of the statement  "            Serialize.Json(new EnumerableMember { EnumerableImpl = new EnumerableImplementation { Property = "oh"' Field = "hai" } }' " is 121.
Long Statement,Tests.Serializer.Json,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\ObjectTests.cs,should_allow_multiple_naming_conventions_to_be_applied,The length of the statement  "            Serialize.Json(new NamingConventions { PropertyValue = "oh"' PropertyValue2 = "hai"' FieldValue = "o"' FieldValue2 = "rly" }' " is 125.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_serialize_list_of_complex_type,The length of the statement  "            Serialize.Xml(list' type).ShouldEqual(Xml.Declaration + "<ArrayOf{0}><ComplexType><Property>hai</Property></ComplexType></ArrayOf{0}>" " is 134.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_serialize_array_of_arrays,The length of the statement  "            Serialize.Xml(list' type).ShouldEqual(Xml.Declaration + "<ArrayOf{0}{1}><ArrayOf{1}><ComplexType><Property>hai</Property></ComplexType></ArrayOf{1}></ArrayOf{0}{1}>" " is 165.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_serialize_member_array_of_complex_type,The length of the statement  "            Serialize.Xml(model).ShouldEqual(Xml.Declaration + "<Model><{0}><ComplexType><Property>hai</Property></ComplexType></{0}></Model>".ToFormat(name)); " is 147.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_serialize_specified_type_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<ArrayOfISpecifiedType><ISpecifiedType><Specified>hai</Specified></ISpecifiedType></ArrayOfISpecifiedType>"); " is 141.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_serialize_actual_type_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<ArrayOfISpecifiedType><ActualType><Actual>oh</Actual><Specified>hai</Specified></ActualType></ArrayOfISpecifiedType>"); " is 152.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_serialize_member_specified_type_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<MemberSpecifiedType><Specified><ISpecifiedType><Specified>hai</Specified></ISpecifiedType></Specified></MemberSpecifiedType>"); " is 160.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_serialize_member_actual_type_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<MemberSpecifiedType><Specified><ActualType><Actual>oh</Actual><Specified>hai</Specified></ActualType></Specified></MemberSpecifiedType>"); " is 171.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_treat_enumerable_root_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<EnumerableImplementation><Property>oh</Property><Field>hai</Field></EnumerableImplementation>"); " is 129.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_not_treat_enumerable_member_as_object_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<EnumerableMember><EnumerableImpl><String>oh</String><String>hai</String></EnumerableImpl></EnumerableMember>"); " is 144.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_treat_enumerable_member_as_object_when_configured,The length of the statement  "            Serialize.Xml(new EnumerableMember { EnumerableImpl = new EnumerableImplementation { Property = "oh"' Field = "hai" } }' " is 120.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_treat_enumerable_member_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<EnumerableMember><EnumerableImpl><Property>oh</Property><Field>hai</Field></EnumerableImpl></EnumerableMember>"); " is 146.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_not_treat_enumerable_array_item_as_object_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<ArrayOfArrayOfString><ArrayOfString><String>oh</String><String>hai</String></ArrayOfString></ArrayOfArrayOfString>"); " is 150.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_treat_enumerable_array_item_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<ArrayOfEnumerableImplementation><EnumerableImplementation><Property>oh</Property><Field>hai</Field></EnumerableImplementation></ArrayOfEnumerableImplementation>"); " is 196.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_not_treat_enumerable_dictionary_entry_as_object_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryOfArrayOfString><item><String>oh</String><String>hai</String></item></DictionaryOfArrayOfString>"); " is 142.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_treat_enumerable_dictionary_entry_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryOfEnumerableImplementation><item><Property>oh</Property><Field>hai</Field></item></DictionaryOfEnumerableImplementation>"); " is 166.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_not_allow_circular_references,The length of the statement  "            Serialize.Xml(graph).ShouldEqual(Xml.Declaration + "<CircularReference><Value><Value1>hai</Value1><Value2 /></Value></CircularReference>"); " is 139.
Long Statement,Tests.Serializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ArrayTests.cs,should_add_namespace_prefix,The length of the statement  "                x => x.Serialization(y => y.AddXmlNamespace("abc"' "urn:yada").AddXmlVisitor<string>((s' t' o) => t.SetNamespacePrefix("abc")))) " is 128.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_serialize_dictionary_of_dictionary,The length of the statement  "            Serialize.Xml(dictionary' type).ShouldEqual(Xml.Declaration + "<DictionaryOfArrayOfComplexType><item><ComplexType><Property>hai</Property></ComplexType></item></DictionaryOfArrayOfComplexType>"); " is 195.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_serialize_specified_type_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryOfISpecifiedType><item><Specified>hai</Specified></item></DictionaryOfISpecifiedType>"); " is 131.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_serialize_actual_type_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryOfISpecifiedType><item><Actual>oh</Actual><Specified>hai</Specified></item></DictionaryOfISpecifiedType>"); " is 150.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_serialize_member_specified_type_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<MemberSpecifiedType><Specified><item><Specified>hai</Specified></item></Specified></MemberSpecifiedType>"); " is 140.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_serialize_member_actual_type_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<MemberSpecifiedType><Specified><item><Actual>oh</Actual><Specified>hai</Specified></item></Specified></MemberSpecifiedType>"); " is 159.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_treat_dictionary_root_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryImplementation><Property>oh</Property><Field>hai</Field></DictionaryImplementation>"); " is 129.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_not_treat_dictionary_member_as_object_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryMember><DictionaryImpl><item1>oh</item1><item2>hai</item2></DictionaryImpl></DictionaryMember>"); " is 140.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_treat_dictionary_member_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryMember><DictionaryImpl><Property>oh</Property><Field>hai</Field></DictionaryImpl></DictionaryMember>"); " is 146.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_not_treat_dictionary_array_item_as_object_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<ArrayOfDictionaryOfString><DictionaryOfString><item1>oh</item1><item2>hai</item2></DictionaryOfString></ArrayOfDictionaryOfString>"); " is 166.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_treat_dictionary_array_item_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<ArrayOfDictionaryImplementation><DictionaryImplementation><Property>oh</Property><Field>hai</Field></DictionaryImplementation></ArrayOfDictionaryImplementation>"); " is 196.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_not_treat_dictionary_dictionary_entry_as_object_by_default,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryOfDictionaryOfString><item><item1>oh</item1><item2>hai</item2></item></DictionaryOfDictionaryOfString>"); " is 148.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_treat_dictionary_dictionary_entry_as_object_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryOfDictionaryImplementation><item><Property>oh</Property><Field>hai</Field></item></DictionaryOfDictionaryImplementation>"); " is 166.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_not_allow_circular_references,The length of the statement  "            Serialize.Xml(graph).ShouldEqual(Xml.Declaration + "<CircularReference><Value><Value1>hai</Value1><Value2 /></Value></CircularReference>"); " is 139.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_add_namespace_prefix,The length of the statement  "                x => x.Serialization(y => y.AddXmlNamespace("abc"' "urn:yada").AddXmlVisitor<string>((s' t' o) => t.SetNamespacePrefix("abc")))) " is 128.
Long Statement,Tests.Serializer.Xml,DictionaryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\DictionaryTests.cs,should_add_namespace_prefix,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DictionaryOfString xmlns:abc=\"urn:yada\"><abc:item>hai</abc:item></DictionaryOfString>"); " is 123.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_not_allow_circular_references,The length of the statement  "            Serialize.Xml(graph).ShouldEqual(Xml.Declaration + "<CircularReference><Value><Value1>hai</Value1></Value></CircularReference>"); " is 129.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_use_snake_case_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<naming_conventions><property_value>oh</property_value><field_value>hai</field_value></naming_conventions>"); " is 141.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_use_camel_case_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<namingConventions><propertyValue>oh</propertyValue><fieldValue>hai</fieldValue></namingConventions>"); " is 135.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_use_xml_only_spinal_case_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<naming-conventions><property-value>oh</property-value><field-value>hai</field-value></naming-conventions>"); " is 141.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_use_xml_only_train_case_when_configured,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<Naming-Conventions><Property-Value>oh</Property-Value><Field-Value>hai</Field-Value></Naming-Conventions>"); " is 141.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_apply_global_naming_convention,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<_NamingConventions><_PropertyValue>oh</_PropertyValue><_FieldValue>hai</_FieldValue></_NamingConventions>"); " is 141.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_use_conditional_global_naming_convention_conditionally,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NamingConventions><_PropertyValue>oh</_PropertyValue><FieldValue>hai</FieldValue></NamingConventions>"); " is 137.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_apply_member_name_modification_convention,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NamingConventions><_PropertyValue>oh</_PropertyValue><_FieldValue>hai</_FieldValue></NamingConventions>"); " is 139.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_apply_member_name_modification_convention_conditionally,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NamingConventions><_PropertyValue>oh</_PropertyValue><FieldValue>hai</FieldValue></NamingConventions>"); " is 137.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_apply_field_name_modification_convention,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NamingConventions><PropertyValue>oh</PropertyValue><_FieldValue>hai</_FieldValue></NamingConventions>"); " is 137.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_apply_field_name_modification_convention_conditionally,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NamingConventions><PropertyValue2>oh</PropertyValue2><FieldValue>hai</FieldValue><_FieldValue2>there</_FieldValue2></NamingConventions>"); " is 171.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_apply_property_name_modification_convention,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NamingConventions><_PropertyValue>oh</_PropertyValue><FieldValue>hai</FieldValue></NamingConventions>"); " is 137.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_apply_property_name_modification_convention_conditionally,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NamingConventions><PropertyValue>oh</PropertyValue><_PropertyValue2>there</_PropertyValue2><FieldValue2>hai</FieldValue2></NamingConventions>"); " is 177.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_allow_multiple_naming_conventions_to_be_applied,The length of the statement  "            Serialize.Xml(new NamingConventions { PropertyValue = "oh"' PropertyValue2 = "hai"' FieldValue = "o"' FieldValue2 = "rly" }' " is 124.
Long Statement,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,should_add_namespace_prefix_to_element,The length of the statement  "                x => x.Serialization(y => y.AddXmlNamespace("abc"' "urn:yada").AddXmlVisitor<string>((s' t' o) => t.SetNamespacePrefix("abc")))) " is 128.
Long Statement,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_utc_iso8601,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></DateTimeConversion>"); " is 125.
Long Statement,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></NullableDateTimeConversion>"); " is 141.
Long Statement,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The length of the statement  "                .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>/Date(499152060000)/</DateTime></NullableDateTimeConversion>"); " is 133.
Magic Number,Tests.Collections,ArrayAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\ArrayAdapterTests.cs,should_return_count,The following statement contains a magic number: _adapter.Count.ShouldEqual(2);
Magic Number,Tests.Collections,ArrayAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\ArrayAdapterTests.cs,should_add_item,The following statement contains a magic number: _adapter.Add("yo").ShouldEqual(2);
Magic Number,Tests.Collections,ArrayAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\ArrayAdapterTests.cs,should_add_item,The following statement contains a magic number: array.Length.ShouldEqual(3);
Magic Number,Tests.Collections,ArrayAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\ArrayAdapterTests.cs,should_add_item,The following statement contains a magic number: array[2].ShouldEqual("yo");
Magic Number,Tests.Collections,ArrayAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\ArrayAdapterTests.cs,should_insert_item,The following statement contains a magic number: array.Length.ShouldEqual(3);
Magic Number,Tests.Collections,ArrayAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\ArrayAdapterTests.cs,should_copy_to_array,The following statement contains a magic number: var array = new object[2];
Magic Number,Tests.Collections,GenericListAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericListAdapterTests.cs,should_return_count,The following statement contains a magic number: _adapter.Count.ShouldEqual(2);
Magic Number,Tests.Collections,GenericListAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericListAdapterTests.cs,should_add_item,The following statement contains a magic number: _adapter.Add("yo").ShouldEqual(2);
Magic Number,Tests.Collections,GenericListAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericListAdapterTests.cs,should_add_item,The following statement contains a magic number: _list.Count.ShouldEqual(3);
Magic Number,Tests.Collections,GenericListAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericListAdapterTests.cs,should_add_item,The following statement contains a magic number: _list[2].ShouldEqual("yo");
Magic Number,Tests.Collections,GenericListAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericListAdapterTests.cs,should_insert_item,The following statement contains a magic number: _list.Count.ShouldEqual(3);
Magic Number,Tests.Collections,GenericListAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericListAdapterTests.cs,should_copy_to_array,The following statement contains a magic number: var array = new object[2];
Magic Number,Tests.Collections,GenericDictionaryAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericDictionaryAdapterTests.cs,should_return_keys,The following statement contains a magic number: keys.ShouldTotal(2);
Magic Number,Tests.Collections,GenericDictionaryAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericDictionaryAdapterTests.cs,should_return_values,The following statement contains a magic number: values.ShouldTotal(2);
Magic Number,Tests.Collections,GenericDictionaryAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericDictionaryAdapterTests.cs,should_return_count,The following statement contains a magic number: _adapter.Count.ShouldEqual(2);
Magic Number,Tests.Collections,GenericDictionaryAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericDictionaryAdapterTests.cs,should_add_item,The following statement contains a magic number: _dictionary.Count.ShouldEqual(3);
Magic Number,Tests.Collections,GenericDictionaryAdapterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Collections\GenericDictionaryAdapterTests.cs,should_copy_to_array,The following statement contains a magic number: var array = new DictionaryEntry[2];
Magic Number,Tests.Deserializer.CharacterSeparated,CharacterSeparated,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\CharacterSeparated\Tests.cs,should_deserialize_csv,The following statement contains a magic number: results.Count.ShouldEqual(2);
Magic Number,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_non_nullable_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2)));
Magic Number,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_non_nullable_nodes_of_type,The following statement contains a magic number: result.NonNullable.ShouldEqual(2);
Magic Number,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2' includeNullable)));
Magic Number,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_non_nullable_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => (decimal)s.Value == match)));
Magic Number,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => (decimal)s.Value == match' includeNullable)));
Magic Number,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: var options = Options.Create(                  x => x.Deserialization(y => y.AddJsonVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => (decimal)s.Value == match)));
Magic Number,Tests.Deserializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: var options = Options.Create(                  x => x.Deserialization(y => y.AddJsonVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => (decimal)s.Value == match' includeNullable)));
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_nullable_and_non_nullable_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddReader<int>(                      (s' t' o) => t.Value = 2' includeNullable)));
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddReader<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => (decimal)s.Value == match' includeNullable)));
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_nullable_and_non_nullable_value_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddReader<int>(                      (v' s' t' o) => 2' includeNullable)));
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_all_nullable_and_non_nullable_value_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Json<Model>("{ \"NonNullable\": 1' \"Nullable\": 1 }"'                  x => x.Deserialization(y => y.AddReader<int>(                      (v' s' t' o) => 2'                      (v' s' t' o) => (decimal)s.Value == match' includeNullable)));
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Json,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Json\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_serialize_simple_type_array_items_as_siblings_when_xml_sibling_attribute_applied,The following statement contains a magic number: result.SimpleTypeSiblings.Count.ShouldEqual(2);
Magic Number,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_serialize_object_array_items_as_siblings_when_xml_sibling_attribute_applied,The following statement contains a magic number: result.ObjectSiblings.Count.ShouldEqual(2);
Magic Number,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_serialize_object_array_items_as_siblings_when_xml_sibling_attribute_applied,The following statement contains a magic number: sibling.ObjectSiblings.Count.ShouldEqual(2);
Magic Number,Tests.Deserializer.Xml,ArrayTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ArrayTests.cs,should_serialize_object_array_items_as_siblings_when_xml_sibling_attribute_applied,The following statement contains a magic number: sibling.ObjectSiblings.Count.ShouldEqual(2);
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_nullable_and_non_nullable_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddReader<int>(                      (s' t' o) => t.Value = 2' includeNullable)));
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddReader<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => int.Parse(s.Value.ToString()) == match' includeNullable)));
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_nullable_and_non_nullable_value_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddReader<int>(                      (v' s' t' o) => 2' includeNullable)));
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_all_nullable_and_non_nullable_value_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddReader<int>(                      (v' s' t' o) => 2'                      (v' s' t' o) => int.Parse(s.Value.ToString()) == match' includeNullable)));
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Xml,ReaderTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\ReaderTests.cs,should_read_datetime_as_local,The following statement contains a magic number: result.DateTime.ShouldEqual(new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset());
Magic Number,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_non_nullable_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2)));
Magic Number,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_non_nullable_nodes_of_type,The following statement contains a magic number: result.NonNullable.ShouldEqual(2);
Magic Number,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2' includeNullable)));
Magic Number,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_non_nullable_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => int.Parse(s.Value.ToString()) == match)));
Magic Number,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: var result = Deserialize.Xml<Model>("<Model><NonNullable>1</NonNullable><Nullable>1</Nullable></Model>"'                  x => x.Deserialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => int.Parse(s.Value.ToString()) == match' includeNullable)));
Magic Number,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_non_nullable_xml_nodes_of_type_when,The following statement contains a magic number: var options = Options.Create(                  x => x.Deserialization(y => y.AddXmlVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => int.Parse(s.Value.ToString()) == match)));
Magic Number,Tests.Deserializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Deserializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_xml_nodes_of_type_when,The following statement contains a magic number: var options = Options.Create(                  x => x.Deserialization(y => y.AddXmlVisitor<int>(                      (s' t' o) => t.Value = 2'                      (s' t' o) => int.Parse(s.Value.ToString()) == match' includeNullable)));
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_convert_name_value_collection_to_dictionary,The following statement contains a magic number: results.ShouldTotal(2);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_conditionally_pipe_values,The following statement contains a magic number: "yada".PipeWhen(x => x.Length == 4).ShouldEqual("yada");
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_conditionally_pipe_values,The following statement contains a magic number: "yada".PipeWhen(x => x.Length == 5).ShouldBeNull();
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_conditionally_pipe_values,The following statement contains a magic number: "yada".PipeWhen(x => x.Length == 5' "").ShouldEqual("");
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_conditionally_pipe_values,The following statement contains a magic number: "yada".PipeWhen(x => x + "yada"' x => x.Length == 5).ShouldEqual("yada");
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_conditionally_pipe_values,The following statement contains a magic number: "yada".PipeWhen(x => x + "yada"' x => x.Length == 4).ShouldEqual("yadayada");
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_conditionally_pipe_values,The following statement contains a magic number: "yada".PipeWhen(x => { result3 = x; }' x => x.Length == 5);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_conditionally_pipe_values,The following statement contains a magic number: "yada".PipeWhen(x => { result4 = x; }' x => x.Length == 4);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_values,The following statement contains a magic number: "yada".Map(x => x.Length).ShouldEqual(4);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_values,The following statement contains a magic number: "yada".MapOrDefault(x => x.Length).ShouldEqual(4);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_values,The following statement contains a magic number: ((string)null).MapOrDefault(x => x.Substring(2)).ShouldBeNull();
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_values,The following statement contains a magic number: "yada".MapOrDefault(x => x.Substring(2)).ShouldEqual("da");
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_values,The following statement contains a magic number: ((string)null).MapOrDefault(x => x.Substring(2)' "").ShouldEqual("");
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_values,The following statement contains a magic number: "yada".MapOrDefault(x => x.Substring(2)' "").ShouldEqual("da");
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_foreach_on_ienumerable,The following statement contains a magic number: new [] { 1' 2 }.ForEach(x => count += x);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_foreach_on_ienumerable,The following statement contains a magic number: count.ShouldEqual(3);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_exclude_matching_results,The following statement contains a magic number: new [] { 1' 2' 3 }.Exclude(new [] { 2 }' (s' c) => s == c).ShouldEqual(new [] { 1' 3 });
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_exclude_matching_results,The following statement contains a magic number: new [] { 1' 2' 3 }.Exclude(new [] { 2 }' (s' c) => s == c).ShouldEqual(new [] { 1' 3 });
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_exclude_matching_results,The following statement contains a magic number: new [] { 1' 2' 3 }.Exclude(new [] { 2 }' (s' c) => s == c).ShouldEqual(new [] { 1' 3 });
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_exclude_matching_results,The following statement contains a magic number: new [] { 1' 2' 3 }.Exclude(new [] { 2 }' (s' c) => s == c).ShouldEqual(new [] { 1' 3 });
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_walk,The following statement contains a magic number: result.ShouldTotal(3);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_walk,The following statement contains a magic number: result[2].ShouldEqual(node1);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_non_generic_dictionary_to_generic_enumerable_of_dictionary_entry,The following statement contains a magic number: var results = new Dictionary<string' object>                   {{"oh"' 1}' {"hai"' 2}}.As<IDictionary>().AsEnumerable();
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_non_generic_dictionary_to_generic_enumerable_of_dictionary_entry,The following statement contains a magic number: results.ShouldTotal(2);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_map_non_generic_dictionary_to_generic_enumerable_of_dictionary_entry,The following statement contains a magic number: result.Value.ShouldEqual(2);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_filter_results_when_predicate_is_not_null,The following statement contains a magic number: WhereData.Where(x => x.Value1' x => x.Value2' (x1' x2) => x1 > 1 && x2 != "c")                  .ShouldAllMatch(x => x.Value1 == 2);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_not_filter_results_when_predicate_is_null,The following statement contains a magic number: WhereData.Where(x => x.Value1' null).ShouldTotal(3);
Magic Number,Tests.Extensions,LinqExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\LinqExtensionTests.cs,should_not_filter_results_when_predicate_is_null,The following statement contains a magic number: WhereData.Where(x => x.Value1' x => x.Value2' null).ShouldTotal(3);
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,should_indicate_if_string_cast_as_object_is_null_or_empty,The following statement contains a magic number: new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset()                  .ToMicrosoftJsonDateFormat().ShouldEqual("/Date(499152060000)/");
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,should_indicate_if_string_cast_as_object_is_null_or_empty,The following statement contains a magic number: new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset()                  .ToMicrosoftJsonDateFormat().ShouldEqual("/Date(499152060000)/");
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,should_indicate_if_string_cast_as_object_is_null_or_empty,The following statement contains a magic number: new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset()                  .ToMicrosoftJsonDateFormat().ShouldEqual("/Date(499152060000)/");
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,should_indicate_if_string_cast_as_object_is_null_or_empty,The following statement contains a magic number: new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset()                  .ToMicrosoftJsonDateFormat().ShouldEqual("/Date(499152060000)/");
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,should_indicate_if_string_cast_as_object_is_null_or_empty,The following statement contains a magic number: new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset()                  .ToMicrosoftJsonDateFormat().ShouldEqual("/Date(499152060000)/");
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".TryParseMicrosoftJsonDateFormat()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21' DateTimeKind.Local));
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".TryParseMicrosoftJsonDateFormat()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21' DateTimeKind.Local));
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".TryParseMicrosoftJsonDateFormat()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21' DateTimeKind.Local));
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".TryParseMicrosoftJsonDateFormat()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21' DateTimeKind.Local));
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".TryParseMicrosoftJsonDateFormat()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21' DateTimeKind.Local));
Magic Number,Tests.Extensions,DateTimeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\DateTimeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".TryParseMicrosoftJsonDateFormat()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21' DateTimeKind.Local));
Magic Number,Tests.Extensions,StringExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Extensions\StringExtensionTests.cs,should_truncate,The following statement contains a magic number: source.Truncate(5).ShouldEqual(truncated);
Magic Number,Tests.Nodes,CharacterSeparatedTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\CharacterSeparatedTests.cs,should_parse_csv,The following statement contains a magic number: rowValues.Count.ShouldEqual(3);
Magic Number,Tests.Nodes,CharacterSeparatedTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\CharacterSeparatedTests.cs,should_parse_csv,The following statement contains a magic number: rowValue = rowValues[2];
Magic Number,Tests.Nodes,FormUrlEncodedTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\FormUrlEncodedTests.cs,should_parse_form,The following statement contains a magic number: values.Count.ShouldEqual(2);
Magic Number,Tests.Nodes,MetadataTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MetadataTests.cs,should_add_multiple_and_get_all_metadata,The following statement contains a magic number: results.ShouldTotal(2);
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _conventions                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 5;                      }' (s' t' o) =>                       {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 5;                      })                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 6;                      }' (s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 6;                      });
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _conventions                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 5;                      }' (s' t' o) =>                       {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 5;                      })                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 6;                      }' (s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 6;                      });
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _conventions                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 5;                      }' (s' t' o) =>                       {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 5;                      })                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 6;                      }' (s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 6;                      });
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _conventions                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 5;                      }' (s' t' o) =>                       {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 5;                      })                  .Add((s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          t.Value = 6;                      }' (s' t' o) =>                      {                          s.ShouldBeSameAs(_source);                          t.ShouldBeSameAs(_target);                          o.ShouldBeSameAs(_options);                          return ((int)s.Value) > 6;                      });
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _source.Value = 7;
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _target.Value.ShouldEqual(6);
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _source.Value = 6;
Magic Number,Tests.Nodes,MapConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\MapConventionsTests.cs,should_map_nodes_in_the_order_the_map_was_added,The following statement contains a magic number: _target.Value.ShouldEqual(5);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_get_field_number_value,The following statement contains a magic number: children[0].Value.ShouldEqual(42.0m);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field1"' NodeType.Value' Metadata.Empty' x => x.Value = (decimal)1.1);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field2"' NodeType.Value' Metadata.Empty' x => x.Value = (float)2.2);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field3"' NodeType.Value' Metadata.Empty' x => x.Value = (double)3.3);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field4"' NodeType.Value' Metadata.Empty' x => x.Value = (sbyte)4);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field5"' NodeType.Value' Metadata.Empty' x => x.Value = (byte)5);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field6"' NodeType.Value' Metadata.Empty' x => x.Value = (short)6);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field7"' NodeType.Value' Metadata.Empty' x => x.Value = (ushort)7);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field8"' NodeType.Value' Metadata.Empty' x => x.Value = (int)8);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field9"' NodeType.Value' Metadata.Empty' x => x.Value = (uint)9);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field10"' NodeType.Value' Metadata.Empty' x => x.Value = (long)10);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_field_number_value,The following statement contains a magic number: node.Add("field11"' NodeType.Value' Metadata.Empty' x => x.Value = (ulong)11);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_get_array_number_value,The following statement contains a magic number: children[0].Value.ShouldEqual(42.0m);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (decimal)1.1);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (float)2.2);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (double)3.3);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (sbyte)4);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (byte)5);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (short)6);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (ushort)7);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (int)8);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (uint)9);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (long)10);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_set_array_number_value,The following statement contains a magic number: node.Add(NodeType.Value' Metadata.Empty' x => x.Value = (ulong)11);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_get_multiple_fields,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_get_multiple_array_items,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_read_fields_with_whitespace,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes,JsonNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\JsonNodeTests.cs,should_read_array_items_with_whitespace,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_pass_ancestors_to_children_in_serialize_mode,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_add_nodes,The following statement contains a magic number: backingDictionary.Count.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_enumerate_nodes_backed_by_hashtable,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_enumerate_nodes_backed_by_generic_dictionary,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_enumerate_node_instances,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_enuerate_actual_type_when_configured_and_backed_by_a_specified_generic_dictionary,The following statement contains a magic number: members.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_enumerate_actual_type_when_backed_by_a_specified_non_generic_dictionary,The following statement contains a magic number: members.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_exclude_type,The following statement contains a magic number: var children = CreateNode(                      new Hashtable { { "item1"' new Tuple<string>("") }' { "item2"' 5 } }'                      Options.Create(x => x.ExcludeType<Tuple<string>>())'                      Mode.Serialize)                  .Cast<NodeBase>().ToList();
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_exclude_type_by_filter,The following statement contains a magic number: var children = CreateNode(                      new Hashtable { { "item1"' new Tuple<string>("") }' { "item2"' 5 } }'                      Options.Create(x => x.ExcludeTypesWhen((t' o) =>                      {                          o.ShouldNotBeNull();                          return t.Type == typeof(Tuple<string>);                      }))'                      Mode.Serialize)                  .Cast<NodeBase>().ToList();
Magic Number,Tests.Nodes.Object,DictionaryNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\DictionaryNodeTests.cs,should_include_type_by_filter,The following statement contains a magic number: var children = CreateNode(                      new Hashtable { { "item1"' new Tuple<string>("") }' { "item2"' 5 } }'                      Options.Create(x => x.IncludeTypesWhen((t' o) =>                      {                          o.ShouldNotBeNull();                          return t.Type == typeof(Tuple<string>);                      }))'                      Mode.Serialize)                  .Cast<NodeBase>().ToList();
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_object,The following statement contains a magic number: childNodes.Skip(2).First().Path.ShouldEqual(baseName + ".EnumerableNode[2]");
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_object,The following statement contains a magic number: childNodes.Skip(3).First().Path.ShouldEqual(baseName + ".EnumerableNode[3]");
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_array,The following statement contains a magic number: childNodes.Skip(2).First().Path.ShouldEqual(baseName + "[1][2]");
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_array,The following statement contains a magic number: childNodes.Skip(3).First().Path.ShouldEqual(baseName + "[1][3]");
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_array,The following statement contains a magic number: var dictionaryNode = nodes.Skip(2).First();
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_array,The following statement contains a magic number: var objectNode = nodes.Skip(3).First();
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_dictionary,The following statement contains a magic number: childNodes.Skip(2).First().Path.ShouldEqual(baseName + "[\"two\"][2]");
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_dictionary,The following statement contains a magic number: childNodes.Skip(3).First().Path.ShouldEqual(baseName + "[\"two\"][3]");
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_dictionary,The following statement contains a magic number: var dictionaryNode = nodes.Skip(2).First();
Magic Number,Tests.Nodes.Object,ObjectNodeBaseTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeBaseTests.cs,should_return_path_for_dictionary,The following statement contains a magic number: var objectNode = nodes.Skip(3).First();
Magic Number,Tests.Nodes.Object,WriterConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\WriterConventionTests.cs,should_add_visitor_and_visit,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,WriterConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\WriterConventionTests.cs,should_add_visitor_and_visit_when_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,WriterConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\WriterConventionTests.cs,should_add_visitor_and_visit_when_type_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,WriterConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\WriterConventionTests.cs,should_add_visitor_and_visit_when_type_and_predicate_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,ReaderConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ReaderConventionTests.cs,should_add_visitor_and_visit,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,ReaderConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ReaderConventionTests.cs,should_add_visitor_and_visit_when_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,ReaderConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ReaderConventionTests.cs,should_add_visitor_and_visit_when_type_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,ReaderConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ReaderConventionTests.cs,should_add_visitor_and_visit_when_nullable_type_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,ReaderConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ReaderConventionTests.cs,should_add_visitor_and_visit_when_type_and_predicate_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,ReaderConventionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ReaderConventionTests.cs,should_add_visitor_and_visit_when_non_nullable_type_and_predicate_matches,The following statement contains a magic number: _target.Value.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,ValueNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ValueNodeTests.cs,should_set_decimal_enum_type,The following statement contains a magic number: new ValueNode(CreateContext(Mode.Deserialize)' null' result' null' null).Value = 3.0;
Magic Number,Tests.Nodes.Object,ValueNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ValueNodeTests.cs,should_get_enum_numeric_value,The following statement contains a magic number: new ValueNode(CreateContext(Mode.Serialize' Options.Create(x =>                   x.Serialization(y => y.EnumValuesAsNumeric())))' null' result'                  null' null).Value.ShouldEqual(3);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_pass_ancestors_to_children_in_serialize_mode,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_add_nodes,The following statement contains a magic number: list.Count.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_add_named_nodes,The following statement contains a magic number: list.Count.ShouldEqual(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_enumerate_nodes_backed_by_array_list,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_enumerate_nodes_backed_by_generic_list,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_enumerate_node_instances,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_enuerate_actual_type_when_configured_and_backed_by_a_specified_generic_enumerable,The following statement contains a magic number: members.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_enumerate_actual_type_when_backed_by_a_specified_non_generic_enumerable,The following statement contains a magic number: members.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_exclude_type,The following statement contains a magic number: var children = CreateNode(                      new ArrayList { new Tuple<string>("")' 5 }'                      Options.Create(x => x.ExcludeType<Tuple<string>>())'                       Mode.Serialize)                  .Cast<NodeBase>().ToList();
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_exclude_type_by_filter,The following statement contains a magic number: var children = CreateNode(                      new ArrayList { new Tuple<string>("")' 5 }'                      Options.Create(x => x.ExcludeTypesWhen((t' o) =>                      {                          o.ShouldNotBeNull();                          return t.Type == typeof (Tuple<string>);                      }))'                      Mode.Serialize)                  .Cast<NodeBase>().ToList();
Magic Number,Tests.Nodes.Object,EnumerableNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\EnumerableNodeTests.cs,should_include_type_by_filter,The following statement contains a magic number: var children = CreateNode(                      new ArrayList { new Tuple<string>("")' 5 }'                      Options.Create(x => x.IncludeTypesWhen((t' o) =>                      {                          o.ShouldNotBeNull();                          return t.Type == typeof(Tuple<string>);                      }))'                      Mode.Serialize)                  .Cast<NodeBase>().ToList();
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_enumerate_all_properties_when_configured,The following statement contains a magic number: nodes.ShouldTotal(3);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_enumerate_public_properties_and_public_fields_when_configured,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_enumerate_public_properties_and_non_public_fields_when_configured,The following statement contains a magic number: nodes.ShouldTotal(3);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_enumerate_all_properties_and_fields_when_configured,The following statement contains a magic number: nodes.ShouldTotal(6);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_include_members_with_a_custom_filter,The following statement contains a magic number: var nodes = CreateAccessModifierNode(Options.Create(x =>                   x.IncludeMembersWhen((m' o) => m.Name.Length == 14)                   .IncludeNonPublicFields())).ToList();
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_include_members_with_a_custom_filter,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_indexers,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_idictionary_members,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_generic_idictionary_members,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_ienumerable_members,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_generic_ienumerable_members,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_ilist_members,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_exclude_generic_ilist_members,The following statement contains a magic number: nodes.ShouldTotal(2);
Magic Number,Tests.Nodes.Object,ObjectNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\ObjectNodeTests.cs,should_enumerate_member_actual_type_in_serialize_mode_when_configured,The following statement contains a magic number: nodes.GetNode(name).ShouldTotal(2);
Magic Number,Tests.Performance,Profiling,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Profiling.cs,Setup,The following statement contains a magic number: Enumerable.Range(0' 10).ForEach(x =>              {                  _object = Bender.Deserializer.Create().Deserialize(_jsonNode' typeof(Model<string>));                  Bender.Serializer.Create().SerializeNodes(_object' (n' o) =>                      new JsonNode(n.NodeType' new Options())' JsonNode.NodeFormat);              });
Magic Number,Tests.Performance,Profiling,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Profiling.cs,Setup,The following statement contains a magic number: Enumerable.Range(0' 10).ForEach(x =>              {                  _object = Bender.Deserializer.Create().Deserialize(_xmlNode' typeof(Model<string>));                  Bender.Serializer.Create().SerializeNodes(_object' (n' o) =>                      ElementNode.Create(n.Name' Metadata.Empty' Options.Create())' XmlNodeBase.NodeFormat);              });
Magic Number,Tests.Performance,BenchmarkChart,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\BenchmarkChart.cs,SaveSummary,The following statement contains a magic number: var chart = new Chart              {                  Size = new Size(800' 400)              };
Magic Number,Tests.Performance,BenchmarkChart,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\BenchmarkChart.cs,SaveSummary,The following statement contains a magic number: var chart = new Chart              {                  Size = new Size(800' 400)              };
Magic Number,Tests.Performance,BenchmarkChart,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\BenchmarkChart.cs,SaveSummary,The following statement contains a magic number: chart.ChartAreas.Add(new ChartArea              {                  Position =                  {                      X = 1'                      Y = 1'                      Width = 100'                      Height = 93                  }'                  AxisY =                  {                      Enabled = AxisEnabled.False'                      MajorGrid = { Enabled = false }                  }'                  AxisX =                  {                      LabelStyle = { Interval = 1 }'                      LineWidth = 0'                      LineColor = Color.White'                      MajorTickMark = { Enabled = false }'                      MajorGrid = { Enabled = false }                  }              });
Magic Number,Tests.Performance,BenchmarkChart,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\BenchmarkChart.cs,SaveSummary,The following statement contains a magic number: chart.ChartAreas.Add(new ChartArea              {                  Position =                  {                      X = 1'                      Y = 1'                      Width = 100'                      Height = 93                  }'                  AxisY =                  {                      Enabled = AxisEnabled.False'                      MajorGrid = { Enabled = false }                  }'                  AxisX =                  {                      LabelStyle = { Interval = 1 }'                      LineWidth = 0'                      LineColor = Color.White'                      MajorTickMark = { Enabled = false }'                      MajorGrid = { Enabled = false }                  }              });
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,Run,The following statement contains a magic number: var types = new Stack<Type>(AppDomain.CurrentDomain.GenerateTypes(200)                  .Select(x => type.MakeGenericType(x)));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,Run,The following statement contains a magic number: Func<string> generateSource = () => Enumerable.Range(1' 100).Select(x => "%" + x)                   .Aggregate(source' (a' i) => a.Replace(i' Guid.NewGuid().ToString().Substring(0' random.Next(10' 32))));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,Run,The following statement contains a magic number: Func<string> generateSource = () => Enumerable.Range(1' 100).Select(x => "%" + x)                   .Aggregate(source' (a' i) => a.Replace(i' Guid.NewGuid().ToString().Substring(0' random.Next(10' 32))));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,Run,The following statement contains a magic number: Func<string> generateSource = () => Enumerable.Range(1' 100).Select(x => "%" + x)                   .Aggregate(source' (a' i) => a.Replace(i' Guid.NewGuid().ToString().Substring(0' random.Next(10' 32))));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,Run,The following statement contains a magic number: Enumerable.Range(1' 20).ForEach(x => benchmarks.ForEach(y =>              {                  var newType = types.Pop();                  dummyRun(y);                  y.Run(newType' generateSource()); // Cold                  Enumerable.Range(1' 20).ForEach(z =>                  {                      dummyRun(y);                      y.Run(newType' generateSource()' true); // Warm                  });               }));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,Run,The following statement contains a magic number: Enumerable.Range(1' 20).ForEach(x => benchmarks.ForEach(y =>              {                  var newType = types.Pop();                  dummyRun(y);                  y.Run(newType' generateSource()); // Cold                  Enumerable.Range(1' 20).ForEach(z =>                  {                      dummyRun(y);                      y.Run(newType' generateSource()' true); // Warm                  });               }));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextSummaryReport,The following statement contains a magic number: var results = GetResults().OrderBy(x => x.WarmDeserialize + x.WarmParse + x.WarmEncode + x.WarmSerialize).Select(x =>                   new { x.Format' Results = "{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(31)'                  (x.ColdDeserialize + x.ColdParse).ToString("#'###").PadLeft(11)'                  (x.ColdSerialize + x.ColdEncode).ToString("#'###").PadLeft(11)'                  (x.WarmDeserialize + x.WarmParse).ToString("#'###").PadLeft(11)'                  (x.WarmSerialize + x.WarmEncode).ToString("#'###").PadLeft(11))});
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextSummaryReport,The following statement contains a magic number: var results = GetResults().OrderBy(x => x.WarmDeserialize + x.WarmParse + x.WarmEncode + x.WarmSerialize).Select(x =>                   new { x.Format' Results = "{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(31)'                  (x.ColdDeserialize + x.ColdParse).ToString("#'###").PadLeft(11)'                  (x.ColdSerialize + x.ColdEncode).ToString("#'###").PadLeft(11)'                  (x.WarmDeserialize + x.WarmParse).ToString("#'###").PadLeft(11)'                  (x.WarmSerialize + x.WarmEncode).ToString("#'###").PadLeft(11))});
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextSummaryReport,The following statement contains a magic number: var results = GetResults().OrderBy(x => x.WarmDeserialize + x.WarmParse + x.WarmEncode + x.WarmSerialize).Select(x =>                   new { x.Format' Results = "{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(31)'                  (x.ColdDeserialize + x.ColdParse).ToString("#'###").PadLeft(11)'                  (x.ColdSerialize + x.ColdEncode).ToString("#'###").PadLeft(11)'                  (x.WarmDeserialize + x.WarmParse).ToString("#'###").PadLeft(11)'                  (x.WarmSerialize + x.WarmEncode).ToString("#'###").PadLeft(11))});
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextSummaryReport,The following statement contains a magic number: var results = GetResults().OrderBy(x => x.WarmDeserialize + x.WarmParse + x.WarmEncode + x.WarmSerialize).Select(x =>                   new { x.Format' Results = "{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(31)'                  (x.ColdDeserialize + x.ColdParse).ToString("#'###").PadLeft(11)'                  (x.ColdSerialize + x.ColdEncode).ToString("#'###").PadLeft(11)'                  (x.WarmDeserialize + x.WarmParse).ToString("#'###").PadLeft(11)'                  (x.WarmSerialize + x.WarmEncode).ToString("#'###").PadLeft(11))});
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextSummaryReport,The following statement contains a magic number: var results = GetResults().OrderBy(x => x.WarmDeserialize + x.WarmParse + x.WarmEncode + x.WarmSerialize).Select(x =>                   new { x.Format' Results = "{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(31)'                  (x.ColdDeserialize + x.ColdParse).ToString("#'###").PadLeft(11)'                  (x.ColdSerialize + x.ColdEncode).ToString("#'###").PadLeft(11)'                  (x.WarmDeserialize + x.WarmParse).ToString("#'###").PadLeft(11)'                  (x.WarmSerialize + x.WarmEncode).ToString("#'###").PadLeft(11))});
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The following statement contains a magic number: GetResults().Where(x => !x.Summary).OrderBy(x => x.Name).ForEach(x => report.AppendLine("{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(11)'                  detailFormat.ToFormat(x.ColdParse' x.ColdDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.ColdSerialize' x.ColdEncode).PadLeft(19)'                  detailFormat.ToFormat(x.WarmParse' x.WarmDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.WarmSerialize' x.WarmEncode).PadLeft(19))));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The following statement contains a magic number: GetResults().Where(x => !x.Summary).OrderBy(x => x.Name).ForEach(x => report.AppendLine("{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(11)'                  detailFormat.ToFormat(x.ColdParse' x.ColdDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.ColdSerialize' x.ColdEncode).PadLeft(19)'                  detailFormat.ToFormat(x.WarmParse' x.WarmDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.WarmSerialize' x.WarmEncode).PadLeft(19))));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The following statement contains a magic number: GetResults().Where(x => !x.Summary).OrderBy(x => x.Name).ForEach(x => report.AppendLine("{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(11)'                  detailFormat.ToFormat(x.ColdParse' x.ColdDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.ColdSerialize' x.ColdEncode).PadLeft(19)'                  detailFormat.ToFormat(x.WarmParse' x.WarmDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.WarmSerialize' x.WarmEncode).PadLeft(19))));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The following statement contains a magic number: GetResults().Where(x => !x.Summary).OrderBy(x => x.Name).ForEach(x => report.AppendLine("{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(11)'                  detailFormat.ToFormat(x.ColdParse' x.ColdDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.ColdSerialize' x.ColdEncode).PadLeft(19)'                  detailFormat.ToFormat(x.WarmParse' x.WarmDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.WarmSerialize' x.WarmEncode).PadLeft(19))));
Magic Number,Tests.Performance,Benchmarks,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Performance\Benchmarks.cs,GetTextDetailReport,The following statement contains a magic number: GetResults().Where(x => !x.Summary).OrderBy(x => x.Name).ForEach(x => report.AppendLine("{0} | {1} | {2} | {3} | {4} |".ToFormat(                  "{0} {1}".ToFormat(x.Name' x.Format).PadRight(11)'                  detailFormat.ToFormat(x.ColdParse' x.ColdDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.ColdSerialize' x.ColdEncode).PadLeft(19)'                  detailFormat.ToFormat(x.WarmParse' x.WarmDeserialize).PadLeft(20)'                  detailFormat.ToFormat(x.WarmSerialize' x.WarmEncode).PadLeft(19))));
Magic Number,Tests.Serializer.CharacterSeparated,CharacterSeparated,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\CharacterSeparated\Tests.cs,GetData,The following statement contains a magic number: typeof(Model).GetProperties(BindingFlags.Instance | BindingFlags.Public)                  .ForEach(x => x.SetValue(model' new string('*'' 30)));
Magic Number,Tests.Serializer.CharacterSeparated,CharacterSeparated,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\CharacterSeparated\Tests.cs,GetData,The following statement contains a magic number: i < 1000000
Magic Number,Tests,ShouldExtensions,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\ShouldExtensions.cs,ShouldBeWithinSeconds,The following statement contains a magic number: datetime.ShouldBeInRange(expected.AddSeconds(-5)' expected.AddSeconds(5));
Magic Number,Tests,ShouldExtensions,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\ShouldExtensions.cs,ShouldBeWithinSeconds,The following statement contains a magic number: datetime.ShouldBeInRange(expected.AddSeconds(-5)' expected.AddSeconds(5));
Magic Number,Tests.Reflection,CachedTypeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\CachedTypeTests.cs,should_return_members,The following statement contains a magic number: members.ShouldTotal(2);
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,should_indicate_if_object_has_a_matching_constructor_by_parameter_instance,The following statement contains a magic number: typeof(CtorWithArgs).HasMatchingConstructor(                  new object[] { ""' 5 }).ShouldBeTrue();
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,should_indicate_if_object_does_not_have_a_matching_constructor_by_parameter_instance,The following statement contains a magic number: var signature = new object[] { ""' 5 };
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,should_indicate_if_object_does_not_have_a_matching_constructor_by_parameter_instance,The following statement contains a magic number: typeof(CtorWithNoArgs).HasMatchingConstructor(                  new object[] { ""' 5 }).ShouldBeFalse();
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".ParseSimpleType(typeof(DateTime).ToCachedType()).As<DateTime>()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21));
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".ParseSimpleType(typeof(DateTime).ToCachedType()).As<DateTime>()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21));
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".ParseSimpleType(typeof(DateTime).ToCachedType()).As<DateTime>()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21));
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".ParseSimpleType(typeof(DateTime).ToCachedType()).As<DateTime>()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21));
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".ParseSimpleType(typeof(DateTime).ToCachedType()).As<DateTime>()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21));
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,Should_parse_microsoft_json_datetime,The following statement contains a magic number: "/Date(499800861000)/".ParseSimpleType(typeof(DateTime).ToCachedType()).As<DateTime>()                  .ShouldBeWithinSeconds(new DateTime(1985' 11' 2' 12' 34' 21));
Magic Number,Tests.Reflection,TypeExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\TypeExtensionTests.cs,should_convert_decimal_to_enum,The following statement contains a magic number: 3.0m.ConvertToEnum(typeof(UriFormat)).ShouldEqual(UriFormat.SafeUnescaped);
Magic Number,Tests.Reflection,MemberExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\MemberExtensionTests.cs,should_create_action_delegate_with_two_parameters,The following statement contains a magic number: typeof(Delegates).CreateActionDelegate("Action"'                       new [] { typeof(string)' typeof(int) })                  (delegates' new object[] { "hai"' 5 });
Magic Number,Tests.Reflection,MemberExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\MemberExtensionTests.cs,should_create_action_delegate_with_two_parameters,The following statement contains a magic number: delegates.Received().Action("hai"' 5);
Magic Number,Tests.Reflection,MemberExtensionTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Reflection\MemberExtensionTests.cs,should_create_func_delegate_with_two_parameters,The following statement contains a magic number: typeof(Delegates).CreateFuncDelegate("Func"'                      new[] { typeof(string)' typeof(int) })                  (new Delegates()' new object[] { "hai"' 5 }).ShouldEqual("hai5");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_get_default_convention,The following statement contains a magic number: GetConventions().GetName(5).ShouldEqual("5");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_override_source_if_added_before,The following statement contains a magic number: var conventions = GetConventions()                  .Add(n => n + "*")                  .Add((n' c) => (c * c).ToString()' (n' c) => c > 4);
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_override_source_if_added_before,The following statement contains a magic number: conventions.GetName(4).ShouldEqual("4*");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_override_source_if_added_before,The following statement contains a magic number: conventions.GetName(5).ShouldEqual("25");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_override_source_if_added_after,The following statement contains a magic number: var conventions = GetConventions()                  .Add((n' c) => (c * c).ToString()' (n' c) => c > 4)                  .Add(n => n += "*");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_override_source_if_added_after,The following statement contains a magic number: conventions.GetName(4).ShouldEqual("4*");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_override_source_if_added_after,The following statement contains a magic number: conventions.GetName(5).ShouldEqual("25*");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_overrides_in_the_order_they_were_added,The following statement contains a magic number: GetConventions()                  .Add(n => n += "-1")                  .Add(n => n += "-2"' n => true)                  .Add((n' c) => n += "-3" + c)                  .Add((n' c) => n += "-4" + c' (n' c) => true)                  .GetName(5).ShouldEqual("5-1-2-35-45");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_apply_overrides_conditionally,The following statement contains a magic number: GetConventions()                  .Add(n => n += "-1"' n => true)                  .Add(n => n += "-2"' n => false)                  .Add((n' c) => n += "-3" + c' (n' c) => true)                  .Add((n' c) => n += "-4" + c' (n' c) => false)                  .GetName(5).ShouldEqual("5-1-35");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_evaluate_last_added_sources_first,The following statement contains a magic number: var conventions = GetConventions()                  .Add((n' c) => "1" + c' (n' c) => c > 4)                  .Add((n' c) => "2" + c' (n' c) => c > 5)                  .Add((n' c) => "3" + c' (n' c) => c > 6);
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_evaluate_last_added_sources_first,The following statement contains a magic number: var conventions = GetConventions()                  .Add((n' c) => "1" + c' (n' c) => c > 4)                  .Add((n' c) => "2" + c' (n' c) => c > 5)                  .Add((n' c) => "3" + c' (n' c) => c > 6);
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_evaluate_last_added_sources_first,The following statement contains a magic number: var conventions = GetConventions()                  .Add((n' c) => "1" + c' (n' c) => c > 4)                  .Add((n' c) => "2" + c' (n' c) => c > 5)                  .Add((n' c) => "3" + c' (n' c) => c > 6);
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_evaluate_last_added_sources_first,The following statement contains a magic number: conventions.GetName(4).ShouldEqual("4");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_evaluate_last_added_sources_first,The following statement contains a magic number: conventions.GetName(5).ShouldEqual("15");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_evaluate_last_added_sources_first,The following statement contains a magic number: conventions.GetName(6).ShouldEqual("26");
Magic Number,Tests.NamingConventions,NamingConventionsTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\NamingConventions\NamingConventionsTests.cs,should_evaluate_last_added_sources_first,The following statement contains a magic number: conventions.GetName(7).ShouldEqual("37");
Magic Number,Tests.Nodes.Object.Values,LazyValueTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\Values\LazyValueTests.cs,should_lazily_init_value,The following statement contains a magic number: i < 5
Magic Number,Tests.Nodes.Object.Values,LazyValueTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\Values\LazyValueTests.cs,should_deterministically_create_value,The following statement contains a magic number: i < 5
Magic Number,Tests.Nodes.Object.Values,LazyValueTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\Values\LazyValueTests.cs,should_allow_value_override,The following statement contains a magic number: i < 5
Magic Number,Tests.Nodes.Object.Values,ValueFactoryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\Values\ValueFactoryTests.cs,should_create_simple_value_and_use_actual_type_when_specified_type_is_object,The following statement contains a magic number: var value = ValueFactory.Create(5' typeof(object).ToCachedType()' Options.Create());
Magic Number,Tests.Nodes.Object.Values,ValueFactoryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\Values\ValueFactoryTests.cs,should_create_simple_value_and_use_actual_type_when_specified_type_is_object,The following statement contains a magic number: value.Instance.ShouldEqual(5);
Magic Number,Tests.Nodes.Object.Values,ValueFactoryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\Values\ValueFactoryTests.cs,should_create_lazy_value,The following statement contains a magic number: var value = ValueFactory.Create(backingValue' () => 5);
Magic Number,Tests.Nodes.Object.Values,ValueFactoryTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Object\Values\ValueFactoryTests.cs,should_create_lazy_value,The following statement contains a magic number: value.Instance.ShouldEqual(5);
Magic Number,Tests.Nodes.Xml,ElementNodeTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Nodes\Xml\ElementNodeTests.cs,should_parse_and_return_children,The following statement contains a magic number: children.ShouldTotal(2);
Magic Number,Tests.Serializer.Json,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Json,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Json,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Json,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_nullable_and_non_nullable_nodes_of_type,The following statement contains a magic number: Serialize.Json(new NullableModel { NonNullable = 1' Nullable = 1 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2)))                  .ShouldEqual("{\"NonNullable\":2'\"Nullable\":2}");
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: var options = Options.Create(                  x => x.Serialization(y => y.AddJsonVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: var model = new NullableModel { Nullable = 1' NonNullable = 2 };
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(model' options)                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(model' options)                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(model' options)                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Json(model' options)                  .ShouldEqual("{{\"NonNullable\":{0}'\"Nullable\":{1}}}".ToFormat(match == 2 ? 3 : 2' match == 1 ? 3 : 1));
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual("{\"DateTime\":\"1985-10-26T05:21:00.0000000Z\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Json,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Json\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Json(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual("{\"DateTime\":\"\\/Date(499152060000)\\/\"}");
Magic Number,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Xml,ObjectTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\ObjectTests.cs,Should_serialize_optional_values,The following statement contains a magic number: var model = new OptionalValues              {                  OptionalReferenceTypeProperty = "fark"'                  OptionalValueTypeProperty = 5'                  OptionalNullableTypeProperty = 6'                  OptionalReferenceTypeField = "farker"'                  OptionalValueTypeField = 7'                  OptionalNullableTypeField = 8              };
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_nullable_and_non_nullable_nodes_of_type,The following statement contains a magic number: Serialize.Xml(new NullableModel { NonNullable = 1' Nullable = 1 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 2)))                  .ShouldEqual(Xml.Declaration + "<NullableModel><NonNullable>2</NonNullable><Nullable>2</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual(Xml.Declaration +                       $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual(Xml.Declaration +                       $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual(Xml.Declaration +                       $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual(Xml.Declaration +                       $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual(Xml.Declaration +                       $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(new NullableModel { Nullable = 1' NonNullable = 2 }'                  x => x.Serialization(y => y.AddVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)))                  .ShouldEqual(Xml.Declaration +                       $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: var options = Options.Create(                  x => x.Serialization(y => y.AddXmlVisitor<int>(                      (s' t' o) => t.Value = 3'                      (s' t' o) => (int)s.Value == match)));
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: var model = new NullableModel { Nullable = 1' NonNullable = 2 };
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(model' options)                  .ShouldEqual(Xml.Declaration +                      $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(model' options)                  .ShouldEqual(Xml.Declaration +                      $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(model' options)                  .ShouldEqual(Xml.Declaration +                      $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,VisitorTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\VisitorTests.cs,should_visit_all_nullable_and_non_nullable_json_nodes_of_type_when,The following statement contains a magic number: Serialize.Xml(model' options)                  .ShouldEqual(Xml.Declaration +                      $"<NullableModel><NonNullable>{(match == 2 ? 3 : 2)}</NonNullable>" +                       $"<Nullable>{(match == 1 ? 3 : 1)}</Nullable></NullableModel>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_utc_iso8601,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteDateTimeAsUtcIso8601()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>1985-10-26T05:21:00.0000000Z</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>/Date(499152060000)/</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>/Date(499152060000)/</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>/Date(499152060000)/</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>/Date(499152060000)/</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new DateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<DateTimeConversion><DateTime>/Date(499152060000)/</DateTime></DateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>/Date(499152060000)/</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>/Date(499152060000)/</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>/Date(499152060000)/</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>/Date(499152060000)/</DateTime></NullableDateTimeConversion>");
Magic Number,Tests.Serializer.Xml,WriterTests,D:\research\architectureSmells\repos\mikeobrien_Bender\src\Tests\Serializer\Xml\WriterTests.cs,should_write_nullable_datetime_as_microsoft_datetime,The following statement contains a magic number: Serialize.Xml(new NullableDateTimeConversion { DateTime = new DateTime(1985' 10' 26' 5' 21' 0).SubtractUtcOffset() }'                  x => x.Serialization(y => y.WriteMicrosoftJsonDateTime()))                  .ShouldEqual(Xml.Declaration + "<NullableDateTimeConversion><DateTime>/Date(499152060000)/</DateTime></NullableDateTimeConversion>");
