Implementation smell,Namespace,Class,File,Method,Description
Long Method,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The method has 227 lines of code.
Long Method,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The method has 85 lines of code.
Complex Method,InfoCaster.Umbraco.UrlTracker.Extensions,INodeExtensions,D:\newReposJune17\kipusoep_UrlTracker\Extensions\INodeExtensions.cs,GetDomainRootNode,Cyclomatic complexity of the method is 7
Complex Method,InfoCaster.Umbraco.UrlTracker.UI.Installer,UrlTrackerInstallerService,D:\newReposJune17\kipusoep_UrlTracker\UI\Installer\UrlTrackerInstallerService.asmx.cs,InstallDashboard,Cyclomatic complexity of the method is 12
Complex Method,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,Cyclomatic complexity of the method is 7
Complex Method,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,GridView_RowDataBound,Cyclomatic complexity of the method is 7
Complex Method,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,GetActiveView,Cyclomatic complexity of the method is 12
Complex Method,InfoCaster.Umbraco.UrlTracker,UrlTrackerApplicationEventHandler,D:\newReposJune17\kipusoep_UrlTracker\UrlTrackerApplicationEventHandler.cs,ContentService_Publishing,Cyclomatic complexity of the method is 12
Complex Method,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,Cyclomatic complexity of the method is 53
Complex Method,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,Cyclomatic complexity of the method is 10
Complex Method,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,Cyclomatic complexity of the method is 8
Complex Method,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlMapping,Cyclomatic complexity of the method is 19
Complex Method,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,Cyclomatic complexity of the method is 40
Complex Method,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,Cyclomatic complexity of the method is 18
Complex Method,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,UpdateUrlTrackerTable,Cyclomatic complexity of the method is 8
Complex Method,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,Cyclomatic complexity of the method is 12
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Models,UrlTrackerModel,D:\newReposJune17\kipusoep_UrlTracker\Models\UrlTrackerModel.cs,UrlTrackerModel,The method has 10 parameters.
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Models,UrlTrackerModel,D:\newReposJune17\kipusoep_UrlTracker\Models\UrlTrackerModel.cs,UrlTrackerModel,The method has 14 parameters.
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The method has 8 parameters.
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The method has 8 parameters.
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlMapping,The method has 5 parameters.
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The method has 10 parameters.
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The method has 4 parameters.
Long Parameter List,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The method has 5 parameters.
Long Identifier,InfoCaster.Umbraco.UrlTracker.Models,UrlTrackerModel,D:\newReposJune17\kipusoep_UrlTracker\Models\UrlTrackerModel.cs,UrlTrackerModel,The length of the parameter redirectPassThroughQueryString is 30.
Long Identifier,InfoCaster.Umbraco.UrlTracker.Models,UrlTrackerModel,D:\newReposJune17\kipusoep_UrlTracker\Models\UrlTrackerModel.cs,UrlTrackerModel,The length of the parameter redirectPassThroughQueryString is 30.
Long Identifier,InfoCaster.Umbraco.UrlTracker.UI.Installer,UrlTrackerInstallerService,D:\newReposJune17\kipusoep_UrlTracker\UI\Installer\UrlTrackerInstallerService.asmx.cs,InstallDashboard,The length of the parameter startupDashboardSectionElement is 30.
Long Identifier,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the parameter redirectPassThroughQueryString is 30.
Long Identifier,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the parameter ignoreNotFoundBasedOnRegexPatterns is 34.
Long Identifier,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the parameter redirectPassThroughQueryString is 30.
Long Identifier,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The length of the parameter redirectPassThroughQueryString is 30.
Long Statement,InfoCaster.Umbraco.UrlTracker.Helpers,UmbracoHelper,D:\newReposJune17\kipusoep_UrlTracker\Helpers\UmbracoHelper.cs,IsReservedPathOrUrl,The length of the statement  "	// * If it doesn't contain an '.' in the path then we assume it is a path based URL' if that is the case we should add an trailing '/' because all of our reservedPaths use a trailing '/' " is 186.
Long Statement,InfoCaster.Umbraco.UrlTracker.Helpers,UmbracoHelper,D:\newReposJune17\kipusoep_UrlTracker\Helpers\UmbracoHelper.cs,GetDomains,The length of the statement  "					_urlTrackerDomains.Add (new UrlTrackerDomain (dr.GetInt ("id")' dr.GetInt ("domainRootStructureID")' dr.GetString ("domainName"))); " is 131.
Long Statement,InfoCaster.Umbraco.UrlTracker.Helpers,UmbracoHelper,D:\newReposJune17\kipusoep_UrlTracker\Helpers\UmbracoHelper.cs,GetDomains,The length of the statement  "						_urlTrackerDomains.Add (new UrlTrackerDomain (dr.GetInt ("id")' dr.GetInt ("domainRootStructureID")' dr.GetString ("domainName"))); " is 131.
Long Statement,InfoCaster.Umbraco.UrlTracker.Helpers,UrlTrackerHelper,D:\newReposJune17\kipusoep_UrlTracker\Helpers\UrlTrackerHelper.cs,GetName,The length of the statement  "		var result = string.Format ("{0}"' domain.Node.Parent == null ? domain.Node.Name : domain.Node.Parent.Name + "/" + domain.Node.Name); " is 133.
Long Statement,InfoCaster.Umbraco.UrlTracker.Extensions,INodeExtensions,D:\newReposJune17\kipusoep_UrlTracker\Extensions\INodeExtensions.cs,GetDomainRootNode,The length of the statement  "	// I don't know what the purpose is' but it contains a bug (https://github.com/kipusoep/UrlTracker/issues/69) - Stefan Kip " is 122.
Long Statement,InfoCaster.Umbraco.UrlTracker.Providers,EmbeddedResourceVirtualFile,D:\newReposJune17\kipusoep_UrlTracker\Providers\EmbeddedResourcesVirtualPathProvider.cs,Open,The length of the statement  "	resourceName = assembly.GetManifestResourceNames ().SingleOrDefault (x => x.Equals (resourceName' StringComparison.OrdinalIgnoreCase)); " is 135.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.Installer,UrlTrackerInstallerService,D:\newReposJune17\kipusoep_UrlTracker\UI\Installer\UrlTrackerInstallerService.asmx.cs,InstallDashboard,The length of the statement  "		XElement startupDashboardSectionElement = sectionElements.SingleOrDefault (x => x.Attribute ("alias") != null && x.Attribute ("alias").Value == "StartupDashboardSection"); " is 171.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.Installer,UrlTrackerInstallerService,D:\newReposJune17\kipusoep_UrlTracker\UI\Installer\UrlTrackerInstallerService.asmx.cs,InstallDashboard,The length of the statement  "				if (urlTrackerTabControls.Any (x => x.Value == "~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UrlTrackerManagerWrapper.ascx")) " is 134.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.Installer,UrlTrackerInstallerService,D:\newReposJune17\kipusoep_UrlTracker\UI\Installer\UrlTrackerInstallerService.asmx.cs,CheckHttpModule,The length of the statement  "		WebRequest request = WebRequest.Create (string.Format ("{0}://{1}:{2}?{3}=1"' currentUri.Scheme' currentUri.Host' currentUri.Port' UrlTrackerSettings.HttpModuleCheck)); " is 168.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,scriptManager_AsyncPostBackError,The length of the statement  "			scriptManager.AsyncPostBackErrorMessage = string.Concat (scriptManager.AsyncPostBackErrorMessage' " | (inner exception: "' e.Exception.InnerException.InnerException.Message' ")"); " is 179.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The length of the statement  "			ltlError.Text = string.Format (UrlTrackerResources.ErrorMessageOldUrlAndOldRegexEmpty' string.Join ("' "' invalidRowIds)); " is 122.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The length of the statement  "			icAutoView = (AutoView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AutoView.ascx"); " is 120.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The length of the statement  "			icCustomView = (CustomView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CustomView.ascx"); " is 126.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The length of the statement  "			icNotFoundView = (NotFoundView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.NotFoundView.ascx"); " is 132.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The length of the statement  "			icAdvancedView = (AdvancedView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AdvancedView.ascx"); " is 132.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The length of the statement  "			icCreateView = (CreateView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CreateView.ascx"); " is 126.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,GridView_RowDataBound,The length of the statement  "			cells [i].Attributes ["onclick"] = Page.ClientScript.GetPostBackEventReference (gridView' "Select$" + e.Row.RowIndex.ToString ()); " is 130.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,GridView_RowDataBound,The length of the statement  "		lbSelect.ImageUrl = Page.ClientScript.GetWebResourceUrl (typeof(UrlTrackerResources)' "InfoCaster.Umbraco.UrlTracker.UI.res.img.edit.png"); " is 139.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,GridView_RowDataBound,The length of the statement  "		lbDelete.ImageUrl = Page.ClientScript.GetWebResourceUrl (typeof(UrlTrackerResources)' "InfoCaster.Umbraco.UrlTracker.UI.res.img.trash.png"); " is 140.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,Filter,The length of the statement  "	Parameter showAutoEntriesParameter = new Parameter ("showAutoEntries"' DbType.Boolean' cbShowAutoEntries.Checked.ToString ()); " is 126.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,Filter,The length of the statement  "	Parameter showCustomEntriesParameter = new Parameter ("showCustomEntries"' DbType.Boolean' cbShowCustomEntries.Checked.ToString ()); " is 132.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,Filter,The length of the statement  "	Parameter showRegexEntriesParameter = new Parameter ("showRegexEntries"' DbType.Boolean' cbShowRegexEntries.Checked.ToString ()); " is 129.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,lbDeleteSelected_Click,The length of the statement  "	foreach (GridViewRow row in activeGridView.Rows.OfType<GridViewRow> ().Where (x => x.RowType == DataControlRowType.DataRow)) { " is 126.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AutoView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AutoView.ascx.cs,LoadView,The length of the statement  "		lnkRootNode.NavigateUrl = string.Format ("javascript:parent.UmbClientMgr.mainTree().syncTree('{0}'' false);"' redirectRootNode.Path); " is 133.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AutoView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AutoView.ascx.cs,LoadView,The length of the statement  "	lnkRedirectNode.NavigateUrl = string.Format ("javascript:parent.UmbClientMgr.mainTree().syncTree('{0}'' false);"' redirectNode.Path); " is 133.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AdvancedView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AdvancedView.ascx.cs,Save,The length of the statement  "	UrlTrackerModel.RedirectRootNodeId = domains.Count > 1 ? int.Parse (ddlRootNode.SelectedValue) : domains.Any () ? domains.Single ().NodeId : new Node (-1).ChildrenAsList.First ().Id; " is 182.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,OnLoad,The length of the statement  "	if (ddlRootNode.Items.Count == 1 && domains.Count > 1 || (domains.Count == 1 && new Uri (domains [0].UrlWithDomain).AbsolutePath != "/")) { " is 139.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,OnLoad,The length of the statement  "			// if there is only one site' but it is not with a root domain (ie: www.site.com but instead www.site.com/corporate) then also show the dropdown " is 144.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,CreateNew,The length of the statement  "	int siteId = domains.Count > 1 || (domains.Count == 1 && new Uri (domains [0].UrlWithDomain).AbsolutePath != "/") ? int.Parse (ddlRootNode.SelectedValue) : domains.Any () ? domains.Single ().NodeId : new Node (-1).ChildrenAsList.First ().Id; " is 241.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,CreateNew,The length of the statement  "	UrlTrackerRepository.AddUrlTrackerEntry (new UrlTrackerModel (UrlTrackerHelper.ResolveShortestUrl (tbOldUrl.Text)' tbOldUrlQueryString.Text' tbOldRegex.Text' siteId' !string.IsNullOrEmpty (cpRedirectNode.Value) ? (int?)int.Parse (cpRedirectNode.Value) : null' tbRedirectUrl.Text' rbPermanent.Checked ? 301 : 302' cbRedirectPassthroughQueryString.Checked' cbForceRedirect.Checked' tbNotes.Text)); " is 395.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,CreateNew,The length of the statement  "	tbOldUrl.Text = tbOldUrlQueryString.Text = tbOldRegex.Text = cpRedirectNode.Value = tbRedirectUrl.Text = tbNotes.Text = string.Empty; " is 133.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,NotFoundView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\NotFoundView.ascx.cs,LoadView,The length of the statement  "		lnkRootNode.NavigateUrl = string.Format ("javascript:parent.UmbClientMgr.mainTree().syncTree('{1}'' false);"' redirectRootNode.Id' redirectRootNode.Path); " is 154.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,NotFoundView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\NotFoundView.ascx.cs,LoadView,The length of the statement  "	lnkOldUrl.Text = string.Format ("{0} <i class=\"icon-share\"></i>"' oldUri.AbsolutePath.StartsWith ("/") ? oldUri.AbsolutePath.Substring (1) : oldUri.AbsolutePath); " is 164.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,LoadView,The length of the statement  "	if (ddlRootNode.Items.Count == 1 && domains.Count > 1 || (domains.Count == 1 && new Uri (domains [0].UrlWithDomain).AbsolutePath != "/")) { " is 139.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,LoadView,The length of the statement  "		// if there is only one site' but it is not with a root domain (ie: www.site.com but instead www.site.com/corporate) then also show the dropdown " is 144.
Long Statement,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,Save,The length of the statement  "	UrlTrackerModel.RedirectRootNodeId = domains.Count > 1 || (domains.Count == 1 && new Uri (domains [0].UrlWithDomain).AbsolutePath != "/") ? int.Parse (ddlRootNode.SelectedValue) : domains.Any () ? domains.Single ().NodeId : new Node (-1).ChildrenAsList.First ().Id; " is 265.
Long Statement,InfoCaster.Umbraco.UrlTracker,UrlTrackerApplicationEventHandler,D:\newReposJune17\kipusoep_UrlTracker\UrlTrackerApplicationEventHandler.cs,ContentService_Publishing,The length of the statement  "				string contentUmbracoUrlNameValue = content.GetValue ("umbracoUrlName") != null ? content.GetValue ("umbracoUrlName").ToString () : string.Empty; " is 145.
Long Statement,InfoCaster.Umbraco.UrlTracker,UrlTrackerApplicationEventHandler,D:\newReposJune17\kipusoep_UrlTracker\UrlTrackerApplicationEventHandler.cs,ContentService_Publishing,The length of the statement  "				string nodeUmbracoUrlNameValue = node.GetProperty ("umbracoUrlName") != null ? node.GetProperty ("umbracoUrlName").Value : string.Empty; " is 136.
Long Statement,InfoCaster.Umbraco.UrlTracker,UrlTrackerApplicationEventHandler,D:\newReposJune17\kipusoep_UrlTracker\UrlTrackerApplicationEventHandler.cs,ContentService_Publishing,The length of the statement  "					UrlTrackerRepository.AddUrlMapping (content' node.GetDomainRootNode ().Id' node.NiceUrl' AutoTrackingTypes.UrlOverwritten); " is 123.
Long Statement,InfoCaster.Umbraco.UrlTracker,UrlTrackerApplicationEventHandler,D:\newReposJune17\kipusoep_UrlTracker\UrlTrackerApplicationEventHandler.cs,ContentService_Publishing,The length of the statement  "				string contentSEOMetadataValue = content.GetValue (UrlTrackerSettings.SEOMetadataPropertyName) != null ? content.GetValue (UrlTrackerSettings.SEOMetadataPropertyName).ToString () : string.Empty; " is 194.
Long Statement,InfoCaster.Umbraco.UrlTracker,UrlTrackerApplicationEventHandler,D:\newReposJune17\kipusoep_UrlTracker\UrlTrackerApplicationEventHandler.cs,ContentService_Publishing,The length of the statement  "				string nodeSEOMetadataValue = node.GetProperty (UrlTrackerSettings.SEOMetadataPropertyName) != null ? node.GetProperty (UrlTrackerSettings.SEOMetadataPropertyName).Value : string.Empty; " is 185.
Long Statement,InfoCaster.Umbraco.UrlTracker,UrlTrackerApplicationEventHandler,D:\newReposJune17\kipusoep_UrlTracker\UrlTrackerApplicationEventHandler.cs,ContentService_Publishing,The length of the statement  "						UrlTrackerRepository.AddUrlMapping (content' node.GetDomainRootNode ().Id' node.NiceUrl' AutoTrackingTypes.UrlOverwrittenSEOMetadata); " is 134.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "			LoggingHelper.LogInformation ("UrlTracker HttpModule | Checking for forced redirects (AcquireRequestState)' continue URL matching"); " is 132.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "			fullRawUrl = previousFullRawUrlTest = fullRawUrlTest = string.Format ("{0}{1}{2}{3}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.RawUrl); " is 161.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "					urlTrackerDomain = domains.FirstOrDefault (x => (x.UrlWithDomain == fullRawUrlTest) || (x.UrlWithDomain == fullRawUrlTest + "/")); " is 130.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				// could not get full url for path' so we keep / as the root... (no other way to check' happens for favicon.ico for example) " is 124.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "			var rootFolder = rootUrl != @"/" ? new Uri (HttpContext.Current.Request.Url' rootUrl).AbsolutePath.TrimStart ('/') : string.Empty; " is 130.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "			LoadUrlTrackerMatchesFromDatabase (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString); " is 186.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "			LoadUrlTrackerMatchesFromCache (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString); " is 183.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				query = "SELECT * FROM icUrlTracker WHERE Is404 = 0 AND ForceRedirect = @forceRedirect AND (RedirectRootNodeId = @redirectRootNodeId OR RedirectRootNodeId = -1) AND OldRegex IS NOT NULL ORDER BY Inserted DESC"; " is 210.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				using (IRecordsReader reader = _sqlHelper.ExecuteReader (query' _sqlHelper.CreateParameter ("forceRedirect"' ignoreHttpStatusCode ? 1 : 0)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId))) { " is 205.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "									LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0"); " is 121.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "									LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl); " is 135.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				List<UrlTrackerModel> forcedRedirects = UrlTrackerRepository.GetForcedRedirects ().Where (x => !string.IsNullOrEmpty (x.OldRegex)).ToList (); " is 141.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				foreach (var match in forcedRedirects.Where (x => x.RedirectRootNodeId == -1 || x.RedirectRootNodeId == rootNodeId).Select (x => new { " is 134.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' match.UrlTrackerModel.RedirectNodeId.Value); " is 123.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0"); " is 121.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl); " is 135.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl)); " is 407.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "					redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty)); " is 498.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) { " is 324.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "			if (!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1") { " is 245.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "					_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("oldUrlQueryString"' request.QueryString.ToString ())' _sqlHelper.CreateParameter ("referrer"' request.UrlReferrer != null && !request.UrlReferrer.ToString ().Contains (UrlTrackerSettings.ReferrerToIgnore) ? (object)request.UrlReferrer.ToString () : DBNull.Value)); " is 453.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is configured to be ignored: {0}"' urlWithoutQueryString); " is 133.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because it's an umbraco reserved URL or path: {0}"' urlWithoutQueryString); " is 161.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The length of the statement  "				LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because the 'X-UrlTracker-Ignore404' header was set to '1'. URL: {0}"' urlWithoutQueryString); " is 180.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the statement  "	string query = "SELECT * FROM icUrlTracker WHERE Is404 = 0 AND ForceRedirect = 0 AND (RedirectRootNodeId = @redirectRootNodeId OR RedirectRootNodeId IS NULL OR RedirectRootNodeId = -1) AND (OldUrl = @url OR OldUrl = @shortestUrl) ORDER BY CASE WHEN RedirectHttpCode = 410 THEN 2 ELSE 1 END' OldUrlQueryString DESC"; " is 315.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the statement  "	using (IRecordsReader reader = _sqlHelper.ExecuteReader (query' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("url"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("shortestUrl"' shortestUrl))) { " is 245.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the statement  "					redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl); " is 365.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the statement  "					LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0"); " is 121.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the statement  "			LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is {0}"' redirectPassThroughQueryString ? "enabled" : "disabled"); " is 144.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the statement  "				LoggingHelper.LogInformation ("UrlTracker HttpModule | Old URL query string set to: {0}"' oldUrlQueryString.ToQueryString ()); " is 126.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The length of the statement  "			if ((urlHasQueryString || oldUrlQueryString != null) && (oldUrlQueryString != null && !request.QueryString.CollectionEquals (oldUrlQueryString))) { " is 147.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,GetCorrectedUrl,The length of the statement  "		// if site runs on other domain then current' check if the current domain is already a domain for that site (prevent unnessecary redirect to primary domain) " is 156.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The length of the statement  "	var redirects = forcedRedirects.Where (x => !x.Is404 && (x.RedirectRootNodeId == rootNodeId || x.RedirectRootNodeId == -1) && (string.Equals (x.OldUrl' urlWithoutQueryString' StringComparison.CurrentCultureIgnoreCase) || string.Equals (x.OldUrl' shortestUrl' StringComparison.CurrentCultureIgnoreCase))).OrderBy (x => x.RedirectHttpCode == 410 ? 2 : 1).ThenByDescending (x => x.OldUrlQueryString).ToArray (); " is 408.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The length of the statement  "				redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl); " is 365.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The length of the statement  "				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0"); " is 121.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The length of the statement  "		LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is {0}"' redirectPassThroughQueryString ? "enabled" : "disabled"); " is 144.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The length of the statement  "			LoggingHelper.LogInformation ("UrlTracker HttpModule | Old URL query string set to: {0}"' oldUrlQueryString.ToQueryString ()); " is 126.
Long Statement,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The length of the statement  "		if ((urlHasQueryString || oldUrlQueryString != null) && (oldUrlQueryString != null && !request.QueryString.CollectionEquals (oldUrlQueryString))) { " is 147.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlMapping,The length of the statement  "			int exists = _sqlHelper.ExecuteScalar<int> (query' _sqlHelper.CreateParameter ("nodeId"' content.Id)' _sqlHelper.CreateStringParameter ("url"' url)); " is 149.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlMapping,The length of the statement  "				query = "INSERT INTO icUrlTracker (RedirectRootNodeId' RedirectNodeId' OldUrl' Notes) VALUES (@rootNodeId' @nodeId' @url' @notes)"; " is 131.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlMapping,The length of the statement  "				_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("rootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("nodeId"' content.Id)' _sqlHelper.CreateStringParameter ("url"' url)' _sqlHelper.CreateStringParameter ("notes"' notes)); " is 239.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlTrackerEntry,The length of the statement  "	string query = "INSERT INTO icUrlTracker (OldUrl' OldUrlQueryString' OldRegex' RedirectRootNodeId' RedirectNodeId' RedirectUrl' RedirectHttpCode' RedirectPassThroughQueryString' ForceRedirect' Notes) VALUES (@oldUrl' @oldUrlQueryString' @oldRegex' @redirectRootNodeId' @redirectNodeId' @redirectUrl' @redirectHttpCode' @redirectPassThroughQueryString' @forceRedirect' @notes)"; " is 377.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlTrackerEntry,The length of the statement  "	_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateStringParameter ("oldUrl"' urlTrackerModel.OldUrl)' _sqlHelper.CreateStringParameter ("oldUrlQueryString"' urlTrackerModel.OldUrlQueryString)' _sqlHelper.CreateStringParameter ("oldRegex"' urlTrackerModel.OldRegex)' _sqlHelper.CreateParameter ("redirectRootNodeId"' urlTrackerModel.RedirectRootNodeId)' _sqlHelper.CreateNullableParameter ("redirectNodeId"' urlTrackerModel.RedirectNodeId)' _sqlHelper.CreateStringParameter ("redirectUrl"' urlTrackerModel.RedirectUrl)' _sqlHelper.CreateParameter ("redirectHttpCode"' urlTrackerModel.RedirectHttpCode)' _sqlHelper.CreateParameter ("redirectPassThroughQueryString"' urlTrackerModel.RedirectPassThroughQueryString)' _sqlHelper.CreateParameter ("forceRedirect"' urlTrackerModel.ForceRedirect)' _sqlHelper.CreateStringParameter ("notes"' urlTrackerModel.Notes)); " is 859.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddGoneEntryByNodeId,The length of the statement  "	string query = "SELECT 1 FROM icUrlTracker WHERE RedirectNodeId = @redirectNodeId AND OldUrl = @oldUrl AND RedirectHttpCode = 410"; " is 131.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddGoneEntryByNodeId,The length of the statement  "	int exists = _sqlHelper.ExecuteScalar<int> (query' _sqlHelper.CreateParameter ("redirectNodeId"' nodeId)' _sqlHelper.CreateStringParameter ("oldUrl"' url)); " is 156.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddGoneEntryByNodeId,The length of the statement  "		query = "INSERT INTO icUrlTracker (RedirectNodeId' OldUrl' RedirectHttpCode' Notes) VALUES (@redirectNodeId' @oldUrl' 410' @notes)"; " is 132.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddGoneEntryByNodeId,The length of the statement  "		_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("redirectNodeId"' nodeId)' _sqlHelper.CreateStringParameter ("oldUrl"' url)' _sqlHelper.CreateStringParameter ("notes"' "Node removed")); " is 200.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddGoneEntryByNodeId,The length of the statement  "		LoggingHelper.LogInformation ("UrlTracker Repository | Skipping 410 Gone mapping for node with id: {0} (already exists)"' nodeId); " is 130.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,DeleteNotFoundEntriesByRootAndOldUrl,The length of the statement  "	_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' oldUrl)' _sqlHelper.CreateParameter ("rootId"' redirectRootNodeId)); " is 141.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntryById,The length of the statement  "			return new UrlTrackerModel (reader.GetInt ("Id")' reader.GetString ("OldUrl")' reader.GetString ("OldUrlQueryString")' reader.GetString ("OldRegex")' reader.GetInt ("RedirectRootNodeId")' reader.Get<int?> ("RedirectNodeId")' reader.GetString ("RedirectUrl")' reader.GetInt ("RedirectHttpCode")' reader.GetBoolean ("RedirectPassThroughQueryString")' reader.GetBoolean ("ForceRedirect")' reader.GetString ("Notes")' reader.GetBoolean ("Is404")' reader.GetString ("Referrer")' reader.GetDateTime ("Inserted")); " is 507.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntryByRootAndUrl,The length of the statement  "	return GetNotFoundEntries ().Single (x => x.OldUrl.ToLower () == url.ToLower () && x.RedirectRootNodeId == redirectRootNodeId); " is 127.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "		query = string.Concat (query' " AND (OldUrl LIKE @keyword OR OldUrlQueryString LIKE @keyword OR OldRegex LIKE @keyword OR RedirectUrl LIKE @keyword OR Notes LIKE @keyword"); " is 173.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries.Add (new UrlTrackerModel (reader.GetInt ("Id")' reader.GetString ("OldUrl")' reader.GetString ("OldUrlQueryString")' reader.GetString ("OldRegex")' reader.GetInt ("RedirectRootNodeId")' reader.Get<int?> ("RedirectNodeId")' reader.GetString ("RedirectUrl")' reader.GetInt ("RedirectHttpCode")' reader.GetBoolean ("RedirectPassThroughQueryString")' reader.GetBoolean ("ForceRedirect")' reader.GetString ("Notes")' reader.GetBoolean ("Is404")' reader.GetString ("Referrer")' reader.GetDateTime ("Inserted"))); " is 524.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			filteredUrlTrackerEntries = filteredUrlTrackerEntries.Where (x => x.ViewType != UrlTrackerViewTypes.Custom || (showRegexEntries ? string.IsNullOrEmpty (x.OldUrl) : false)); " is 172.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.RedirectRootNodeName) : urlTrackerEntries.OrderBy (x => x.RedirectRootNodeName)).ToList (); " is 171.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.CalculatedOldUrl) : urlTrackerEntries.OrderBy (x => x.CalculatedOldUrl)).ToList (); " is 163.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.CalculatedRedirectUrl) : urlTrackerEntries.OrderBy (x => x.CalculatedRedirectUrl)).ToList (); " is 173.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.RedirectHttpCode) : urlTrackerEntries.OrderBy (x => x.RedirectHttpCode)).ToList (); " is 163.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.Referrer) : urlTrackerEntries.OrderBy (x => x.Referrer)).ToList (); " is 147.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.NotFoundCount) : urlTrackerEntries.OrderBy (x => x.NotFoundCount)).ToList (); " is 157.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.Notes) : urlTrackerEntries.OrderBy (x => x.Notes)).ToList (); " is 141.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "			urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.Inserted) : urlTrackerEntries.OrderBy (x => x.Inserted)).ToList (); " is 147.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The length of the statement  "	List<UrlTrackerModel> urlTrackerEntries = GetUrlTrackerEntries (maximumRows' startRowIndex' sortExpression' true' keyword: keyword); " is 132.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The length of the statement  "		Referrer = x.Select (y => y.Referrer).Any (y => !string.IsNullOrEmpty (y)) ? x.Select (y => y.Referrer).Where (y => !string.IsNullOrEmpty (y)).GroupBy (y => y).OrderByDescending (y => y.Count ()).First ().Select (z => z).First () : string.Empty' " is 245.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The length of the statement  "			notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.CalculatedOldUrl) : notFoundEntries.OrderBy (x => x.CalculatedOldUrl)).ToList (); " is 157.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The length of the statement  "			notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.Referrer) : notFoundEntries.OrderBy (x => x.Referrer)).ToList (); " is 141.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The length of the statement  "			notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.NotFoundCount) : notFoundEntries.OrderBy (x => x.NotFoundCount)).ToList (); " is 151.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The length of the statement  "			notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.Inserted) : notFoundEntries.OrderBy (x => x.Inserted)).ToList (); " is 141.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The length of the statement  "	return GetUrlTrackerEntries (null' null' sortExpression' showAutoEntries: showAutoEntries' showCustomEntries: showCustomEntries' showRegexEntries: showRegexEntries' keyword: keyword); " is 183.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,UpdateUrlTrackerEntry,The length of the statement  "	string query = "UPDATE icUrlTracker SET OldUrl = @oldUrl' OldUrlQueryString = @oldUrlQueryString' OldRegex = @oldRegex' RedirectRootNodeId = @redirectRootNodeId' RedirectNodeId = @redirectNodeId' RedirectUrl = @redirectUrl' RedirectHttpCode = @redirectHttpCode' RedirectPassThroughQueryString = @redirectPassThroughQueryString' ForceRedirect = @forceRedirect' Notes = @notes' Is404 = @is404 WHERE Id = @id"; " is 407.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,UpdateUrlTrackerEntry,The length of the statement  "	_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateStringParameter ("oldUrl"' urlTrackerModel.OldUrl)' _sqlHelper.CreateStringParameter ("oldUrlQueryString"' urlTrackerModel.OldUrlQueryString)' _sqlHelper.CreateStringParameter ("oldRegex"' urlTrackerModel.OldRegex)' _sqlHelper.CreateParameter ("redirectRootNodeId"' urlTrackerModel.RedirectRootNodeId)' _sqlHelper.CreateNullableParameter<int?> ("redirectNodeId"' urlTrackerModel.RedirectNodeId)' _sqlHelper.CreateStringParameter ("redirectUrl"' urlTrackerModel.RedirectUrl)' _sqlHelper.CreateParameter ("redirectHttpCode"' urlTrackerModel.RedirectHttpCode)' _sqlHelper.CreateParameter ("redirectPassThroughQueryString"' urlTrackerModel.RedirectPassThroughQueryString)' _sqlHelper.CreateParameter ("forceRedirect"' urlTrackerModel.ForceRedirect)' _sqlHelper.CreateStringParameter ("notes"' urlTrackerModel.Notes)' _sqlHelper.CreateParameter ("is404"' urlTrackerModel.Is404)' _sqlHelper.CreateParameter ("id"' urlTrackerModel.Id)); " is 981.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerTableExists,The length of the statement  "	return _sqlHelper.ExecuteScalar<int> (query' _sqlHelper.CreateParameter ("tableName"' UrlTrackerSettings.TableName)) == 1; " is 122.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackeOldTableExists,The length of the statement  "	return _sqlHelper.ExecuteScalar<int> (query' _sqlHelper.CreateParameter ("tableName"' UrlTrackerSettings.OldTableName)) == 1; " is 125.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The length of the statement  "			UrlTrackerModel newUrlTrackerEntry = new UrlTrackerModel (!oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' oldUri != null ? !string.IsNullOrEmpty (oldUri.Query) && oldUri.Query.StartsWith ("?") ? oldUri.Query.Substring (1) : oldUri.Query : string.Empty' oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' node.GetDomainRootNode ().Id' oldUrlTrackerEntry.NodeId' string.Empty' 301' true' false' oldUrlTrackerEntry.Message); " is 427.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetForcedRedirects,The length of the statement  "	} else if (UrlTrackerSettings.ForcedRedirectCacheTimeoutEnabled && LastForcedRedirectCacheRefreshTime.AddSeconds (UrlTrackerSettings.ForcedRedirectCacheTimeoutSeconds) < DateTime.UtcNow) { " is 188.
Long Statement,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetForcedRedirects,The length of the statement  "				if (LastForcedRedirectCacheRefreshTime.AddSeconds (UrlTrackerSettings.ForcedRedirectCacheTimeoutSeconds) < DateTime.UtcNow) { " is 125.
Complex Conditional,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,OnLoad,The conditional expression  "ddlRootNode.Items.Count == 1 && domains.Count > 1 || (domains.Count == 1 && new Uri (domains [0].UrlWithDomain).AbsolutePath != "/")"  is complex.
Complex Conditional,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,LoadView,The conditional expression  "ddlRootNode.Items.Count == 1 && domains.Count > 1 || (domains.Count == 1 && new Uri (domains [0].UrlWithDomain).AbsolutePath != "/")"  is complex.
Complex Conditional,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The conditional expression  "!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1""  is complex.
Complex Conditional,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The conditional expression  "(urlHasQueryString || oldUrlQueryString != null) && (oldUrlQueryString != null && !request.QueryString.CollectionEquals (oldUrlQueryString))"  is complex.
Complex Conditional,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The conditional expression  "(urlHasQueryString || oldUrlQueryString != null) && (oldUrlQueryString != null && !request.QueryString.CollectionEquals (oldUrlQueryString))"  is complex.
Complex Conditional,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The conditional expression  "!showAutoEntries || !showCustomEntries || !showRegexEntries || !string.IsNullOrEmpty (keyword)"  is complex.
Complex Conditional,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The conditional expression  "(node.Id > 0 || true) && !string.IsNullOrEmpty (oldUrlTrackerEntry.OldUrl) && oldUrlTrackerEntry.OldUrl != "#""  is complex.
Empty Catch Block,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,CheckUrlTrackerInstalled,The method has an empty catch block.
Empty Catch Block,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The method has an empty catch block.
Magic Number,InfoCaster.Umbraco.UrlTracker.Helpers,UmbracoHelper,D:\newReposJune17\kipusoep_UrlTracker\Helpers\UmbracoHelper.cs,IsReservedPathOrUrl,The following statement contains a magic number: if (_reservedUrlsCache == null) {  	lock (_locker) {  		if (_reservedUrlsCache == null) {  			// store references to strings to determine changes  			_reservedPathsCache = GlobalSettings.ReservedPaths;  			_reservedUrlsCache = GlobalSettings.ReservedUrls;  			// add URLs and paths to a new list  			#pragma  			StartsWithContainer _newReservedList = new StartsWithContainer ();  			#pragma  			foreach (string reservedUrl in _reservedUrlsCache.Split (new[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries)) {  				//resolves the url to support tilde chars  				string reservedUrlTrimmed = IOHelper.ResolveUrl (reservedUrl).Trim ().ToLower ();  				if (reservedUrlTrimmed.Length > 0)  					_newReservedList.Add (reservedUrlTrimmed);  			}  			foreach (string reservedPath in _reservedPathsCache.Split (new[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries)) {  				bool trimEnd = !reservedPath.EndsWith ("/");  				//resolves the url to support tilde chars  				string reservedPathTrimmed = IOHelper.ResolveUrl (reservedPath).Trim ().ToLower ();  				if (reservedPathTrimmed.Length > 0)  					_newReservedList.Add (reservedPathTrimmed + (reservedPathTrimmed.EndsWith ("/") ? "" : "/"));  			}  			// use the new list from now on  			_reservedList = _newReservedList;  		}  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Helpers,UmbracoHelper,D:\newReposJune17\kipusoep_UrlTracker\Helpers\UmbracoHelper.cs,IsReservedPathOrUrl,The following statement contains a magic number: lock (_locker) {  	if (_reservedUrlsCache == null) {  		// store references to strings to determine changes  		_reservedPathsCache = GlobalSettings.ReservedPaths;  		_reservedUrlsCache = GlobalSettings.ReservedUrls;  		// add URLs and paths to a new list  		#pragma  		StartsWithContainer _newReservedList = new StartsWithContainer ();  		#pragma  		foreach (string reservedUrl in _reservedUrlsCache.Split (new[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries)) {  			//resolves the url to support tilde chars  			string reservedUrlTrimmed = IOHelper.ResolveUrl (reservedUrl).Trim ().ToLower ();  			if (reservedUrlTrimmed.Length > 0)  				_newReservedList.Add (reservedUrlTrimmed);  		}  		foreach (string reservedPath in _reservedPathsCache.Split (new[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries)) {  			bool trimEnd = !reservedPath.EndsWith ("/");  			//resolves the url to support tilde chars  			string reservedPathTrimmed = IOHelper.ResolveUrl (reservedPath).Trim ().ToLower ();  			if (reservedPathTrimmed.Length > 0)  				_newReservedList.Add (reservedPathTrimmed + (reservedPathTrimmed.EndsWith ("/") ? "" : "/"));  		}  		// use the new list from now on  		_reservedList = _newReservedList;  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Helpers,UmbracoHelper,D:\newReposJune17\kipusoep_UrlTracker\Helpers\UmbracoHelper.cs,IsReservedPathOrUrl,The following statement contains a magic number: if (_reservedUrlsCache == null) {  	// store references to strings to determine changes  	_reservedPathsCache = GlobalSettings.ReservedPaths;  	_reservedUrlsCache = GlobalSettings.ReservedUrls;  	// add URLs and paths to a new list  	#pragma  	StartsWithContainer _newReservedList = new StartsWithContainer ();  	#pragma  	foreach (string reservedUrl in _reservedUrlsCache.Split (new[] {  		"'"  	}' StringSplitOptions.RemoveEmptyEntries)) {  		//resolves the url to support tilde chars  		string reservedUrlTrimmed = IOHelper.ResolveUrl (reservedUrl).Trim ().ToLower ();  		if (reservedUrlTrimmed.Length > 0)  			_newReservedList.Add (reservedUrlTrimmed);  	}  	foreach (string reservedPath in _reservedPathsCache.Split (new[] {  		"'"  	}' StringSplitOptions.RemoveEmptyEntries)) {  		bool trimEnd = !reservedPath.EndsWith ("/");  		//resolves the url to support tilde chars  		string reservedPathTrimmed = IOHelper.ResolveUrl (reservedPath).Trim ().ToLower ();  		if (reservedPathTrimmed.Length > 0)  			_newReservedList.Add (reservedPathTrimmed + (reservedPathTrimmed.EndsWith ("/") ? "" : "/"));  	}  	// use the new list from now on  	_reservedList = _newReservedList;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.Installer,UrlTrackerInstallerService,D:\newReposJune17\kipusoep_UrlTracker\UI\Installer\UrlTrackerInstallerService.asmx.cs,Wait,The following statement contains a magic number: if (!DontWait)  	Thread.Sleep (1000);  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.Installer,UrlTrackerInstallerService,D:\newReposJune17\kipusoep_UrlTracker\UI\Installer\UrlTrackerInstallerService.asmx.cs,Wait,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The following statement contains a magic number: if (!_earlyErrorDetected) {  	pnlBreadcrumb.Visible = false;  	if (icAutoView == null) {  		icAutoView = (AutoView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AutoView.ascx");  		icCustomView = (CustomView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CustomView.ascx");  		icNotFoundView = (NotFoundView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.NotFoundView.ascx");  		icAdvancedView = (AdvancedView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AdvancedView.ascx");  		icCreateView = (CreateView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CreateView.ascx");  		pnlEditValidationGroup.Controls.AddAt (0' icAutoView);  		pnlEditValidationGroup.Controls.AddAt (1' icCustomView);  		pnlEditValidationGroup.Controls.AddAt (2' icNotFoundView);  		pnlEditValidationGroup.Controls.AddAt (3' icAdvancedView);  		pnlCreateValidationGroup.Controls.AddAt (0' icCreateView);  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The following statement contains a magic number: if (!_earlyErrorDetected) {  	pnlBreadcrumb.Visible = false;  	if (icAutoView == null) {  		icAutoView = (AutoView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AutoView.ascx");  		icCustomView = (CustomView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CustomView.ascx");  		icNotFoundView = (NotFoundView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.NotFoundView.ascx");  		icAdvancedView = (AdvancedView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AdvancedView.ascx");  		icCreateView = (CreateView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CreateView.ascx");  		pnlEditValidationGroup.Controls.AddAt (0' icAutoView);  		pnlEditValidationGroup.Controls.AddAt (1' icCustomView);  		pnlEditValidationGroup.Controls.AddAt (2' icNotFoundView);  		pnlEditValidationGroup.Controls.AddAt (3' icAdvancedView);  		pnlCreateValidationGroup.Controls.AddAt (0' icCreateView);  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The following statement contains a magic number: if (icAutoView == null) {  	icAutoView = (AutoView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AutoView.ascx");  	icCustomView = (CustomView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CustomView.ascx");  	icNotFoundView = (NotFoundView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.NotFoundView.ascx");  	icAdvancedView = (AdvancedView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AdvancedView.ascx");  	icCreateView = (CreateView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CreateView.ascx");  	pnlEditValidationGroup.Controls.AddAt (0' icAutoView);  	pnlEditValidationGroup.Controls.AddAt (1' icCustomView);  	pnlEditValidationGroup.Controls.AddAt (2' icNotFoundView);  	pnlEditValidationGroup.Controls.AddAt (3' icAdvancedView);  	pnlCreateValidationGroup.Controls.AddAt (0' icCreateView);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The following statement contains a magic number: if (icAutoView == null) {  	icAutoView = (AutoView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AutoView.ascx");  	icCustomView = (CustomView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CustomView.ascx");  	icNotFoundView = (NotFoundView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.NotFoundView.ascx");  	icAdvancedView = (AdvancedView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.AdvancedView.ascx");  	icCreateView = (CreateView)LoadControl ("~/Umbraco/UrlTracker/InfoCaster.Umbraco.UrlTracker.UI.UserControls.CreateView.ascx");  	pnlEditValidationGroup.Controls.AddAt (0' icAutoView);  	pnlEditValidationGroup.Controls.AddAt (1' icCustomView);  	pnlEditValidationGroup.Controls.AddAt (2' icNotFoundView);  	pnlEditValidationGroup.Controls.AddAt (3' icAdvancedView);  	pnlCreateValidationGroup.Controls.AddAt (0' icCreateView);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The following statement contains a magic number: pnlEditValidationGroup.Controls.AddAt (2' icNotFoundView);  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,OnInit,The following statement contains a magic number: pnlEditValidationGroup.Controls.AddAt (3' icAdvancedView);  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,GridView_RowDataBound,The following statement contains a magic number: if (e.Row.RowType == DataControlRowType.DataRow) {  	GridView gridView = (GridView)sender;  	UrlTrackerModel urlTrackerModel = (UrlTrackerModel)e.Row.DataItem;  	List<TableCell> cells = e.Row.Cells.Cast<TableCell> ().ToList ();  	for (int i = 1; i < cells.Count - 2; i++) {  		cells [i].Attributes ["onclick"] = Page.ClientScript.GetPostBackEventReference (gridView' "Select$" + e.Row.RowIndex.ToString ());  		cells [i].CssClass += " clickable";  		DataControlFieldCell dataControlFieldCell = cells [i] as DataControlFieldCell;  		if (dataControlFieldCell != null) {  			BoundField boundField = dataControlFieldCell.ContainingField as BoundField;  			if (boundField != null && boundField.DataField == "Referrer")  				cells [i].CssClass += " max";  		}  	}  	ImageButton lbSelect = (ImageButton)cells.Last ().FindControl ("lbSelect");  	lbSelect.ImageUrl = Page.ClientScript.GetWebResourceUrl (typeof(UrlTrackerResources)' "InfoCaster.Umbraco.UrlTracker.UI.res.img.edit.png");  	ImageButton lbDelete = (ImageButton)cells.Last ().FindControl ("lbDelete");  	lbDelete.ImageUrl = Page.ClientScript.GetWebResourceUrl (typeof(UrlTrackerResources)' "InfoCaster.Umbraco.UrlTracker.UI.res.img.trash.png");  	HiddenField hfId = e.Row.FindControl ("hfId") as HiddenField;  	if (hfId != null)  		hfId.Value = urlTrackerModel.Id.ToString ();  	HiddenField hfOldUrl = e.Row.FindControl ("hfOldUrl") as HiddenField;  	if (hfOldUrl != null)  		hfOldUrl.Value = urlTrackerModel.OldUrl;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI,UrlTrackerManager,D:\newReposJune17\kipusoep_UrlTracker\UI\UrlTrackerManager.aspx.cs,GridView_RowDataBound,The following statement contains a magic number: for (int i = 1; i < cells.Count - 2; i++) {  	cells [i].Attributes ["onclick"] = Page.ClientScript.GetPostBackEventReference (gridView' "Select$" + e.Row.RowIndex.ToString ());  	cells [i].CssClass += " clickable";  	DataControlFieldCell dataControlFieldCell = cells [i] as DataControlFieldCell;  	if (dataControlFieldCell != null) {  		BoundField boundField = dataControlFieldCell.ContainingField as BoundField;  		if (boundField != null && boundField.DataField == "Referrer")  			cells [i].CssClass += " max";  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AutoView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AutoView.ascx.cs,LoadView,The following statement contains a magic number: if (UrlTrackerModel.RedirectHttpCode == 301)  	rbPermanent.Checked = true;  else if (UrlTrackerModel.RedirectHttpCode == 302)  	rbTemporary.Checked = true;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AutoView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AutoView.ascx.cs,LoadView,The following statement contains a magic number: if (UrlTrackerModel.RedirectHttpCode == 301)  	rbPermanent.Checked = true;  else if (UrlTrackerModel.RedirectHttpCode == 302)  	rbTemporary.Checked = true;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AutoView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AutoView.ascx.cs,LoadView,The following statement contains a magic number: if (UrlTrackerModel.RedirectHttpCode == 302)  	rbTemporary.Checked = true;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AutoView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AutoView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AutoView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AutoView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AdvancedView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AdvancedView.ascx.cs,LoadView,The following statement contains a magic number: rbPermanent.Checked = UrlTrackerModel.RedirectHttpCode == 301;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AdvancedView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AdvancedView.ascx.cs,LoadView,The following statement contains a magic number: rbTemporary.Checked = UrlTrackerModel.RedirectHttpCode == 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AdvancedView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AdvancedView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,AdvancedView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\AdvancedView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,CreateNew,The following statement contains a magic number: UrlTrackerRepository.AddUrlTrackerEntry (new UrlTrackerModel (UrlTrackerHelper.ResolveShortestUrl (tbOldUrl.Text)' tbOldUrlQueryString.Text' tbOldRegex.Text' siteId' !string.IsNullOrEmpty (cpRedirectNode.Value) ? (int?)int.Parse (cpRedirectNode.Value) : null' tbRedirectUrl.Text' rbPermanent.Checked ? 301 : 302' cbRedirectPassthroughQueryString.Checked' cbForceRedirect.Checked' tbNotes.Text));  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CreateView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CreateView.ascx.designer.cs,CreateNew,The following statement contains a magic number: UrlTrackerRepository.AddUrlTrackerEntry (new UrlTrackerModel (UrlTrackerHelper.ResolveShortestUrl (tbOldUrl.Text)' tbOldUrlQueryString.Text' tbOldRegex.Text' siteId' !string.IsNullOrEmpty (cpRedirectNode.Value) ? (int?)int.Parse (cpRedirectNode.Value) : null' tbRedirectUrl.Text' rbPermanent.Checked ? 301 : 302' cbRedirectPassthroughQueryString.Checked' cbForceRedirect.Checked' tbNotes.Text));  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,NotFoundView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\NotFoundView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,NotFoundView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\NotFoundView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,LoadView,The following statement contains a magic number: rbPermanent.Checked = UrlTrackerModel.RedirectHttpCode == 301;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,LoadView,The following statement contains a magic number: rbTemporary.Checked = UrlTrackerModel.RedirectHttpCode == 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.UI.UserControls,CustomView,D:\newReposJune17\kipusoep_UrlTracker\UI\UserControls\CustomView.ascx.cs,Save,The following statement contains a magic number: UrlTrackerModel.RedirectHttpCode = rbPermanent.Checked ? 301 : 302;  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (!string.IsNullOrEmpty (request.QueryString [UrlTrackerSettings.HttpModuleCheck])) {  	response.Clear ();  	response.Write (UrlTrackerSettings.HttpModuleCheck);  	response.StatusCode = 200;  	response.End ();  	return;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: response.StatusCode = 200;  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (_urlTrackerInstalled && (response.StatusCode == (int)HttpStatusCode.NotFound || ignoreHttpStatusCode)) {  	if (response.StatusCode == (int)HttpStatusCode.NotFound)  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statusCode is 404' continue URL matching");  	else  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Checking for forced redirects (AcquireRequestState)' continue URL matching");  	string urlWithoutQueryString = url;  	if (InfoCaster.Umbraco.UrlTracker.Helpers.UmbracoHelper.IsReservedPathOrUrl (url)) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | URL is an umbraco reserved path or url' ignore request");  		return;  	}  	//bool urlHasQueryString = request.QueryString.HasKeys() && url.Contains('?');  	bool urlHasQueryString = url.Contains ('?');  	// invalid querystring (?xxx) without = sign must also be stripped...  	if (urlHasQueryString)  		urlWithoutQueryString = url.Substring (0' url.IndexOf ('?'));  	string shortestUrl = UrlTrackerHelper.ResolveShortestUrl (urlWithoutQueryString);  	int rootNodeId = -1;  	var domains = UmbracoHelper.GetDomains ().ToArray ();  	if (domains.Any ()) {  		string fullRawUrl;  		string previousFullRawUrlTest;  		string fullRawUrlTest;  		fullRawUrl = previousFullRawUrlTest = fullRawUrlTest = string.Format ("{0}{1}{2}{3}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.RawUrl);  		UrlTrackerDomain urlTrackerDomain;  		do {  			if (previousFullRawUrlTest.EndsWith ("/")) {  				urlTrackerDomain = domains.FirstOrDefault (x => (x.UrlWithDomain == fullRawUrlTest) || (x.UrlWithDomain == fullRawUrlTest + "/"));  				if (urlTrackerDomain != null) {  					rootNodeId = urlTrackerDomain.NodeId;  					urlWithoutQueryString = fullRawUrl.Replace (fullRawUrlTest' string.Empty);  					if (urlWithoutQueryString.StartsWith ("/"))  						urlWithoutQueryString = urlWithoutQueryString.Substring (1);  					if (urlWithoutQueryString.EndsWith ("/"))  						urlWithoutQueryString = urlWithoutQueryString.Substring (0' urlWithoutQueryString.Length - 1);  					break;  				}  			}  			previousFullRawUrlTest = fullRawUrlTest;  			fullRawUrlTest = fullRawUrlTest.Substring (0' fullRawUrlTest.Length - 1);  		} while (fullRawUrlTest.Length > 0);  	}  	if (rootNodeId == -1) {  		var children = new Node (rootNodeId).ChildrenAsList.ToArray ();  		if (children != null && children.Any ())  			rootNodeId = children.First ().Id;  	} else {  		var rootUrl = "/";  		try {  			rootUrl = new Node (rootNodeId).Url;  		} catch (ArgumentNullException) {  			// could not get full url for path' so we keep / as the root... (no other way to check' happens for favicon.ico for example)  		}  		var rootFolder = rootUrl != @"/" ? new Uri (HttpContext.Current.Request.Url' rootUrl).AbsolutePath.TrimStart ('/') : string.Empty;  		if (shortestUrl.StartsWith (rootFolder' StringComparison.OrdinalIgnoreCase)) {  			shortestUrl = shortestUrl.Substring (rootFolder.Length);  		}  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Current request's rootNodeId: {0}"' rootNodeId);  	string redirectUrl = null;  	int? redirectHttpCode = null;  	bool redirectPassThroughQueryString = true;  	if (!ignoreHttpStatusCode) {  		// Normal matching (database)  		LoadUrlTrackerMatchesFromDatabase (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString);  	} else {  		// Forced matching (cache)  		LoadUrlTrackerMatchesFromCache (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString);  	}  	string query;  	if (!redirectHttpCode.HasValue) {  		if (!ignoreHttpStatusCode) {  			// Normal matching (database)  			// Regex matching  			query = "SELECT * FROM icUrlTracker WHERE Is404 = 0 AND ForceRedirect = @forceRedirect AND (RedirectRootNodeId = @redirectRootNodeId OR RedirectRootNodeId = -1) AND OldRegex IS NOT NULL ORDER BY Inserted DESC";  			using (IRecordsReader reader = _sqlHelper.ExecuteReader (query' _sqlHelper.CreateParameter ("forceRedirect"' ignoreHttpStatusCode ? 1 : 0)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId))) {  				Regex regex;  				while (reader.Read ()) {  					regex = new Regex (reader.GetString ("OldRegex"));  					if (regex.IsMatch (url)) {  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Regex match found");  						if (!reader.IsNull ("RedirectNodeId")) {  							int redirectNodeId = reader.GetInt ("RedirectNodeId");  							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' redirectNodeId);  							Node n = new Node (redirectNodeId);  							if (n != null && n.Name != null && n.Id > 0) {  								redirectUrl = UmbracoHelper.GetUrl (redirectNodeId);  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  							} else  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  						} else if (!reader.IsNull ("RedirectUrl")) {  							redirectUrl = reader.GetString ("RedirectUrl");  							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  							if (_capturingGroupsRegex.IsMatch (redirectUrl)) {  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Found regex capturing groups in the redirect url");  								redirectUrl = regex.Replace (url' redirectUrl);  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl);  							}  						}  						redirectPassThroughQueryString = reader.GetBoolean ("RedirectPassThroughQueryString");  						LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is enabled");  						redirectHttpCode = reader.GetInt ("RedirectHttpCode");  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  					}  				}  			}  		} else {  			// Forced matching (cache)  			List<UrlTrackerModel> forcedRedirects = UrlTrackerRepository.GetForcedRedirects ().Where (x => !string.IsNullOrEmpty (x.OldRegex)).ToList ();  			if (forcedRedirects == null || !forcedRedirects.Any ())  				return;  			foreach (var match in forcedRedirects.Where (x => x.RedirectRootNodeId == -1 || x.RedirectRootNodeId == rootNodeId).Select (x => new {  				UrlTrackerModel = x'  				Regex = new Regex (x.OldRegex)  			}).Where (x => x.Regex.IsMatch (url))) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Regex match found");  				if (match.UrlTrackerModel.RedirectNodeId.HasValue) {  					LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' match.UrlTrackerModel.RedirectNodeId.Value);  					Node n = new Node (match.UrlTrackerModel.RedirectNodeId.Value);  					if (n != null && n.Name != null && n.Id > 0) {  						redirectUrl = UmbracoHelper.GetUrl (match.UrlTrackerModel.RedirectNodeId.Value);  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  					} else  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  				} else if (!string.IsNullOrEmpty (match.UrlTrackerModel.RedirectUrl)) {  					redirectUrl = match.UrlTrackerModel.RedirectUrl;  					LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  					if (_capturingGroupsRegex.IsMatch (redirectUrl)) {  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Found regex capturing groups in the redirect url");  						redirectUrl = match.Regex.Replace (url' redirectUrl);  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl);  					}  				}  				redirectPassThroughQueryString = match.UrlTrackerModel.RedirectPassThroughQueryString;  				LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is enabled");  				redirectHttpCode = match.UrlTrackerModel.RedirectHttpCode;  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  			}  		}  	}  	if (redirectHttpCode.HasValue) {  		string redirectLocation = string.Empty;  		if (!string.IsNullOrEmpty (redirectUrl)) {  			if (redirectUrl == "/")  				redirectUrl = string.Empty;  			Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  			if (redirectPassThroughQueryString) {  				NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  				NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  				if (redirectQueryString.HasKeys ())  					newQueryString = newQueryString.Merge (redirectQueryString);  				string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  				redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  			}  			if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  				return;  			}  			if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  				redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  			} else {  				redirectLocation = redirectUri.AbsoluteUri;  			}  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  		}  		response.Clear ();  		response.StatusCode = redirectHttpCode.Value;  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode set to: {0}"' response.StatusCode);  		if (!string.IsNullOrEmpty (redirectLocation)) {  			response.RedirectLocation = redirectLocation;  		}  		response.End ();  	} else if (!ignoreHttpStatusCode) {  		// Log 404  		if (!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1") {  			bool ignoreNotFoundBasedOnRegexPatterns = false;  			foreach (Regex regexNotFoundUrlToIgnore in UrlTrackerSettings.RegexNotFoundUrlsToIgnore) {  				if (regexNotFoundUrlToIgnore.IsMatch (urlWithoutQueryString)) {  					ignoreNotFoundBasedOnRegexPatterns = true;  					break;  				}  			}  			if (!ignoreNotFoundBasedOnRegexPatterns) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' logging as 404 not found");  				query = "INSERT INTO icUrlTracker (OldUrl' RedirectRootNodeId' ";  				if (urlHasQueryString)  					query += "OldUrlQueryString' ";  				query += "Is404' Referrer) VALUES (@oldUrl' @redirectRootNodeId' ";  				if (urlHasQueryString)  					query += "@oldUrlQueryString' ";  				query += "1' @referrer)";  				_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("oldUrlQueryString"' request.QueryString.ToString ())' _sqlHelper.CreateParameter ("referrer"' request.UrlReferrer != null && !request.UrlReferrer.ToString ().Contains (UrlTrackerSettings.ReferrerToIgnore) ? (object)request.UrlReferrer.ToString () : DBNull.Value));  			}  		}  		if (UrlTrackerSettings.IsNotFoundTrackingDisabled)  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found and not found (404) tracking is disabled");  		if (UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString))  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is configured to be ignored: {0}"' urlWithoutQueryString);  		else if (UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString))  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because it's an umbraco reserved URL or path: {0}"' urlWithoutQueryString);  		else if (request.Headers ["X-UrlTracker-Ignore404"] == "1")  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because the 'X-UrlTracker-Ignore404' header was set to '1'. URL: {0}"' urlWithoutQueryString);  	} else  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found in {0}"' callingEventName);  } else  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode is not 404' UrlTracker won't do anything");  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (_urlTrackerInstalled && (response.StatusCode == (int)HttpStatusCode.NotFound || ignoreHttpStatusCode)) {  	if (response.StatusCode == (int)HttpStatusCode.NotFound)  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statusCode is 404' continue URL matching");  	else  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Checking for forced redirects (AcquireRequestState)' continue URL matching");  	string urlWithoutQueryString = url;  	if (InfoCaster.Umbraco.UrlTracker.Helpers.UmbracoHelper.IsReservedPathOrUrl (url)) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | URL is an umbraco reserved path or url' ignore request");  		return;  	}  	//bool urlHasQueryString = request.QueryString.HasKeys() && url.Contains('?');  	bool urlHasQueryString = url.Contains ('?');  	// invalid querystring (?xxx) without = sign must also be stripped...  	if (urlHasQueryString)  		urlWithoutQueryString = url.Substring (0' url.IndexOf ('?'));  	string shortestUrl = UrlTrackerHelper.ResolveShortestUrl (urlWithoutQueryString);  	int rootNodeId = -1;  	var domains = UmbracoHelper.GetDomains ().ToArray ();  	if (domains.Any ()) {  		string fullRawUrl;  		string previousFullRawUrlTest;  		string fullRawUrlTest;  		fullRawUrl = previousFullRawUrlTest = fullRawUrlTest = string.Format ("{0}{1}{2}{3}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.RawUrl);  		UrlTrackerDomain urlTrackerDomain;  		do {  			if (previousFullRawUrlTest.EndsWith ("/")) {  				urlTrackerDomain = domains.FirstOrDefault (x => (x.UrlWithDomain == fullRawUrlTest) || (x.UrlWithDomain == fullRawUrlTest + "/"));  				if (urlTrackerDomain != null) {  					rootNodeId = urlTrackerDomain.NodeId;  					urlWithoutQueryString = fullRawUrl.Replace (fullRawUrlTest' string.Empty);  					if (urlWithoutQueryString.StartsWith ("/"))  						urlWithoutQueryString = urlWithoutQueryString.Substring (1);  					if (urlWithoutQueryString.EndsWith ("/"))  						urlWithoutQueryString = urlWithoutQueryString.Substring (0' urlWithoutQueryString.Length - 1);  					break;  				}  			}  			previousFullRawUrlTest = fullRawUrlTest;  			fullRawUrlTest = fullRawUrlTest.Substring (0' fullRawUrlTest.Length - 1);  		} while (fullRawUrlTest.Length > 0);  	}  	if (rootNodeId == -1) {  		var children = new Node (rootNodeId).ChildrenAsList.ToArray ();  		if (children != null && children.Any ())  			rootNodeId = children.First ().Id;  	} else {  		var rootUrl = "/";  		try {  			rootUrl = new Node (rootNodeId).Url;  		} catch (ArgumentNullException) {  			// could not get full url for path' so we keep / as the root... (no other way to check' happens for favicon.ico for example)  		}  		var rootFolder = rootUrl != @"/" ? new Uri (HttpContext.Current.Request.Url' rootUrl).AbsolutePath.TrimStart ('/') : string.Empty;  		if (shortestUrl.StartsWith (rootFolder' StringComparison.OrdinalIgnoreCase)) {  			shortestUrl = shortestUrl.Substring (rootFolder.Length);  		}  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Current request's rootNodeId: {0}"' rootNodeId);  	string redirectUrl = null;  	int? redirectHttpCode = null;  	bool redirectPassThroughQueryString = true;  	if (!ignoreHttpStatusCode) {  		// Normal matching (database)  		LoadUrlTrackerMatchesFromDatabase (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString);  	} else {  		// Forced matching (cache)  		LoadUrlTrackerMatchesFromCache (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString);  	}  	string query;  	if (!redirectHttpCode.HasValue) {  		if (!ignoreHttpStatusCode) {  			// Normal matching (database)  			// Regex matching  			query = "SELECT * FROM icUrlTracker WHERE Is404 = 0 AND ForceRedirect = @forceRedirect AND (RedirectRootNodeId = @redirectRootNodeId OR RedirectRootNodeId = -1) AND OldRegex IS NOT NULL ORDER BY Inserted DESC";  			using (IRecordsReader reader = _sqlHelper.ExecuteReader (query' _sqlHelper.CreateParameter ("forceRedirect"' ignoreHttpStatusCode ? 1 : 0)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId))) {  				Regex regex;  				while (reader.Read ()) {  					regex = new Regex (reader.GetString ("OldRegex"));  					if (regex.IsMatch (url)) {  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Regex match found");  						if (!reader.IsNull ("RedirectNodeId")) {  							int redirectNodeId = reader.GetInt ("RedirectNodeId");  							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' redirectNodeId);  							Node n = new Node (redirectNodeId);  							if (n != null && n.Name != null && n.Id > 0) {  								redirectUrl = UmbracoHelper.GetUrl (redirectNodeId);  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  							} else  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  						} else if (!reader.IsNull ("RedirectUrl")) {  							redirectUrl = reader.GetString ("RedirectUrl");  							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  							if (_capturingGroupsRegex.IsMatch (redirectUrl)) {  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Found regex capturing groups in the redirect url");  								redirectUrl = regex.Replace (url' redirectUrl);  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl);  							}  						}  						redirectPassThroughQueryString = reader.GetBoolean ("RedirectPassThroughQueryString");  						LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is enabled");  						redirectHttpCode = reader.GetInt ("RedirectHttpCode");  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  					}  				}  			}  		} else {  			// Forced matching (cache)  			List<UrlTrackerModel> forcedRedirects = UrlTrackerRepository.GetForcedRedirects ().Where (x => !string.IsNullOrEmpty (x.OldRegex)).ToList ();  			if (forcedRedirects == null || !forcedRedirects.Any ())  				return;  			foreach (var match in forcedRedirects.Where (x => x.RedirectRootNodeId == -1 || x.RedirectRootNodeId == rootNodeId).Select (x => new {  				UrlTrackerModel = x'  				Regex = new Regex (x.OldRegex)  			}).Where (x => x.Regex.IsMatch (url))) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Regex match found");  				if (match.UrlTrackerModel.RedirectNodeId.HasValue) {  					LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' match.UrlTrackerModel.RedirectNodeId.Value);  					Node n = new Node (match.UrlTrackerModel.RedirectNodeId.Value);  					if (n != null && n.Name != null && n.Id > 0) {  						redirectUrl = UmbracoHelper.GetUrl (match.UrlTrackerModel.RedirectNodeId.Value);  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  					} else  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  				} else if (!string.IsNullOrEmpty (match.UrlTrackerModel.RedirectUrl)) {  					redirectUrl = match.UrlTrackerModel.RedirectUrl;  					LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  					if (_capturingGroupsRegex.IsMatch (redirectUrl)) {  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Found regex capturing groups in the redirect url");  						redirectUrl = match.Regex.Replace (url' redirectUrl);  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl);  					}  				}  				redirectPassThroughQueryString = match.UrlTrackerModel.RedirectPassThroughQueryString;  				LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is enabled");  				redirectHttpCode = match.UrlTrackerModel.RedirectHttpCode;  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  			}  		}  	}  	if (redirectHttpCode.HasValue) {  		string redirectLocation = string.Empty;  		if (!string.IsNullOrEmpty (redirectUrl)) {  			if (redirectUrl == "/")  				redirectUrl = string.Empty;  			Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  			if (redirectPassThroughQueryString) {  				NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  				NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  				if (redirectQueryString.HasKeys ())  					newQueryString = newQueryString.Merge (redirectQueryString);  				string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  				redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  			}  			if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  				return;  			}  			if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  				redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  			} else {  				redirectLocation = redirectUri.AbsoluteUri;  			}  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  		}  		response.Clear ();  		response.StatusCode = redirectHttpCode.Value;  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode set to: {0}"' response.StatusCode);  		if (!string.IsNullOrEmpty (redirectLocation)) {  			response.RedirectLocation = redirectLocation;  		}  		response.End ();  	} else if (!ignoreHttpStatusCode) {  		// Log 404  		if (!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1") {  			bool ignoreNotFoundBasedOnRegexPatterns = false;  			foreach (Regex regexNotFoundUrlToIgnore in UrlTrackerSettings.RegexNotFoundUrlsToIgnore) {  				if (regexNotFoundUrlToIgnore.IsMatch (urlWithoutQueryString)) {  					ignoreNotFoundBasedOnRegexPatterns = true;  					break;  				}  			}  			if (!ignoreNotFoundBasedOnRegexPatterns) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' logging as 404 not found");  				query = "INSERT INTO icUrlTracker (OldUrl' RedirectRootNodeId' ";  				if (urlHasQueryString)  					query += "OldUrlQueryString' ";  				query += "Is404' Referrer) VALUES (@oldUrl' @redirectRootNodeId' ";  				if (urlHasQueryString)  					query += "@oldUrlQueryString' ";  				query += "1' @referrer)";  				_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("oldUrlQueryString"' request.QueryString.ToString ())' _sqlHelper.CreateParameter ("referrer"' request.UrlReferrer != null && !request.UrlReferrer.ToString ().Contains (UrlTrackerSettings.ReferrerToIgnore) ? (object)request.UrlReferrer.ToString () : DBNull.Value));  			}  		}  		if (UrlTrackerSettings.IsNotFoundTrackingDisabled)  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found and not found (404) tracking is disabled");  		if (UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString))  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is configured to be ignored: {0}"' urlWithoutQueryString);  		else if (UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString))  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because it's an umbraco reserved URL or path: {0}"' urlWithoutQueryString);  		else if (request.Headers ["X-UrlTracker-Ignore404"] == "1")  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because the 'X-UrlTracker-Ignore404' header was set to '1'. URL: {0}"' urlWithoutQueryString);  	} else  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found in {0}"' callingEventName);  } else  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode is not 404' UrlTracker won't do anything");  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (_urlTrackerInstalled && (response.StatusCode == (int)HttpStatusCode.NotFound || ignoreHttpStatusCode)) {  	if (response.StatusCode == (int)HttpStatusCode.NotFound)  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statusCode is 404' continue URL matching");  	else  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Checking for forced redirects (AcquireRequestState)' continue URL matching");  	string urlWithoutQueryString = url;  	if (InfoCaster.Umbraco.UrlTracker.Helpers.UmbracoHelper.IsReservedPathOrUrl (url)) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | URL is an umbraco reserved path or url' ignore request");  		return;  	}  	//bool urlHasQueryString = request.QueryString.HasKeys() && url.Contains('?');  	bool urlHasQueryString = url.Contains ('?');  	// invalid querystring (?xxx) without = sign must also be stripped...  	if (urlHasQueryString)  		urlWithoutQueryString = url.Substring (0' url.IndexOf ('?'));  	string shortestUrl = UrlTrackerHelper.ResolveShortestUrl (urlWithoutQueryString);  	int rootNodeId = -1;  	var domains = UmbracoHelper.GetDomains ().ToArray ();  	if (domains.Any ()) {  		string fullRawUrl;  		string previousFullRawUrlTest;  		string fullRawUrlTest;  		fullRawUrl = previousFullRawUrlTest = fullRawUrlTest = string.Format ("{0}{1}{2}{3}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.RawUrl);  		UrlTrackerDomain urlTrackerDomain;  		do {  			if (previousFullRawUrlTest.EndsWith ("/")) {  				urlTrackerDomain = domains.FirstOrDefault (x => (x.UrlWithDomain == fullRawUrlTest) || (x.UrlWithDomain == fullRawUrlTest + "/"));  				if (urlTrackerDomain != null) {  					rootNodeId = urlTrackerDomain.NodeId;  					urlWithoutQueryString = fullRawUrl.Replace (fullRawUrlTest' string.Empty);  					if (urlWithoutQueryString.StartsWith ("/"))  						urlWithoutQueryString = urlWithoutQueryString.Substring (1);  					if (urlWithoutQueryString.EndsWith ("/"))  						urlWithoutQueryString = urlWithoutQueryString.Substring (0' urlWithoutQueryString.Length - 1);  					break;  				}  			}  			previousFullRawUrlTest = fullRawUrlTest;  			fullRawUrlTest = fullRawUrlTest.Substring (0' fullRawUrlTest.Length - 1);  		} while (fullRawUrlTest.Length > 0);  	}  	if (rootNodeId == -1) {  		var children = new Node (rootNodeId).ChildrenAsList.ToArray ();  		if (children != null && children.Any ())  			rootNodeId = children.First ().Id;  	} else {  		var rootUrl = "/";  		try {  			rootUrl = new Node (rootNodeId).Url;  		} catch (ArgumentNullException) {  			// could not get full url for path' so we keep / as the root... (no other way to check' happens for favicon.ico for example)  		}  		var rootFolder = rootUrl != @"/" ? new Uri (HttpContext.Current.Request.Url' rootUrl).AbsolutePath.TrimStart ('/') : string.Empty;  		if (shortestUrl.StartsWith (rootFolder' StringComparison.OrdinalIgnoreCase)) {  			shortestUrl = shortestUrl.Substring (rootFolder.Length);  		}  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Current request's rootNodeId: {0}"' rootNodeId);  	string redirectUrl = null;  	int? redirectHttpCode = null;  	bool redirectPassThroughQueryString = true;  	if (!ignoreHttpStatusCode) {  		// Normal matching (database)  		LoadUrlTrackerMatchesFromDatabase (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString);  	} else {  		// Forced matching (cache)  		LoadUrlTrackerMatchesFromCache (request' urlWithoutQueryString' urlHasQueryString' shortestUrl' rootNodeId' ref redirectUrl' ref redirectHttpCode' ref redirectPassThroughQueryString);  	}  	string query;  	if (!redirectHttpCode.HasValue) {  		if (!ignoreHttpStatusCode) {  			// Normal matching (database)  			// Regex matching  			query = "SELECT * FROM icUrlTracker WHERE Is404 = 0 AND ForceRedirect = @forceRedirect AND (RedirectRootNodeId = @redirectRootNodeId OR RedirectRootNodeId = -1) AND OldRegex IS NOT NULL ORDER BY Inserted DESC";  			using (IRecordsReader reader = _sqlHelper.ExecuteReader (query' _sqlHelper.CreateParameter ("forceRedirect"' ignoreHttpStatusCode ? 1 : 0)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId))) {  				Regex regex;  				while (reader.Read ()) {  					regex = new Regex (reader.GetString ("OldRegex"));  					if (regex.IsMatch (url)) {  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Regex match found");  						if (!reader.IsNull ("RedirectNodeId")) {  							int redirectNodeId = reader.GetInt ("RedirectNodeId");  							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' redirectNodeId);  							Node n = new Node (redirectNodeId);  							if (n != null && n.Name != null && n.Id > 0) {  								redirectUrl = UmbracoHelper.GetUrl (redirectNodeId);  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  							} else  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  						} else if (!reader.IsNull ("RedirectUrl")) {  							redirectUrl = reader.GetString ("RedirectUrl");  							LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  							if (_capturingGroupsRegex.IsMatch (redirectUrl)) {  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Found regex capturing groups in the redirect url");  								redirectUrl = regex.Replace (url' redirectUrl);  								LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl);  							}  						}  						redirectPassThroughQueryString = reader.GetBoolean ("RedirectPassThroughQueryString");  						LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is enabled");  						redirectHttpCode = reader.GetInt ("RedirectHttpCode");  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  					}  				}  			}  		} else {  			// Forced matching (cache)  			List<UrlTrackerModel> forcedRedirects = UrlTrackerRepository.GetForcedRedirects ().Where (x => !string.IsNullOrEmpty (x.OldRegex)).ToList ();  			if (forcedRedirects == null || !forcedRedirects.Any ())  				return;  			foreach (var match in forcedRedirects.Where (x => x.RedirectRootNodeId == -1 || x.RedirectRootNodeId == rootNodeId).Select (x => new {  				UrlTrackerModel = x'  				Regex = new Regex (x.OldRegex)  			}).Where (x => x.Regex.IsMatch (url))) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Regex match found");  				if (match.UrlTrackerModel.RedirectNodeId.HasValue) {  					LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' match.UrlTrackerModel.RedirectNodeId.Value);  					Node n = new Node (match.UrlTrackerModel.RedirectNodeId.Value);  					if (n != null && n.Name != null && n.Id > 0) {  						redirectUrl = UmbracoHelper.GetUrl (match.UrlTrackerModel.RedirectNodeId.Value);  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  					} else  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  				} else if (!string.IsNullOrEmpty (match.UrlTrackerModel.RedirectUrl)) {  					redirectUrl = match.UrlTrackerModel.RedirectUrl;  					LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  					if (_capturingGroupsRegex.IsMatch (redirectUrl)) {  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Found regex capturing groups in the redirect url");  						redirectUrl = match.Regex.Replace (url' redirectUrl);  						LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url changed to: {0} (because of regex capturing groups)"' redirectUrl);  					}  				}  				redirectPassThroughQueryString = match.UrlTrackerModel.RedirectPassThroughQueryString;  				LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is enabled");  				redirectHttpCode = match.UrlTrackerModel.RedirectHttpCode;  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  			}  		}  	}  	if (redirectHttpCode.HasValue) {  		string redirectLocation = string.Empty;  		if (!string.IsNullOrEmpty (redirectUrl)) {  			if (redirectUrl == "/")  				redirectUrl = string.Empty;  			Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  			if (redirectPassThroughQueryString) {  				NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  				NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  				if (redirectQueryString.HasKeys ())  					newQueryString = newQueryString.Merge (redirectQueryString);  				string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  				redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  			}  			if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  				return;  			}  			if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  				redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  			} else {  				redirectLocation = redirectUri.AbsoluteUri;  			}  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  		}  		response.Clear ();  		response.StatusCode = redirectHttpCode.Value;  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode set to: {0}"' response.StatusCode);  		if (!string.IsNullOrEmpty (redirectLocation)) {  			response.RedirectLocation = redirectLocation;  		}  		response.End ();  	} else if (!ignoreHttpStatusCode) {  		// Log 404  		if (!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1") {  			bool ignoreNotFoundBasedOnRegexPatterns = false;  			foreach (Regex regexNotFoundUrlToIgnore in UrlTrackerSettings.RegexNotFoundUrlsToIgnore) {  				if (regexNotFoundUrlToIgnore.IsMatch (urlWithoutQueryString)) {  					ignoreNotFoundBasedOnRegexPatterns = true;  					break;  				}  			}  			if (!ignoreNotFoundBasedOnRegexPatterns) {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' logging as 404 not found");  				query = "INSERT INTO icUrlTracker (OldUrl' RedirectRootNodeId' ";  				if (urlHasQueryString)  					query += "OldUrlQueryString' ";  				query += "Is404' Referrer) VALUES (@oldUrl' @redirectRootNodeId' ";  				if (urlHasQueryString)  					query += "@oldUrlQueryString' ";  				query += "1' @referrer)";  				_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("oldUrlQueryString"' request.QueryString.ToString ())' _sqlHelper.CreateParameter ("referrer"' request.UrlReferrer != null && !request.UrlReferrer.ToString ().Contains (UrlTrackerSettings.ReferrerToIgnore) ? (object)request.UrlReferrer.ToString () : DBNull.Value));  			}  		}  		if (UrlTrackerSettings.IsNotFoundTrackingDisabled)  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found and not found (404) tracking is disabled");  		if (UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString))  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is configured to be ignored: {0}"' urlWithoutQueryString);  		else if (UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString))  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because it's an umbraco reserved URL or path: {0}"' urlWithoutQueryString);  		else if (request.Headers ["X-UrlTracker-Ignore404"] == "1")  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because the 'X-UrlTracker-Ignore404' header was set to '1'. URL: {0}"' urlWithoutQueryString);  	} else  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found in {0}"' callingEventName);  } else  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode is not 404' UrlTracker won't do anything");  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (redirectHttpCode.HasValue) {  	string redirectLocation = string.Empty;  	if (!string.IsNullOrEmpty (redirectUrl)) {  		if (redirectUrl == "/")  			redirectUrl = string.Empty;  		Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  		if (redirectPassThroughQueryString) {  			NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  			NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  			if (redirectQueryString.HasKeys ())  				newQueryString = newQueryString.Merge (redirectQueryString);  			string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  			redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  		}  		if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  			return;  		}  		if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  			redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  		} else {  			redirectLocation = redirectUri.AbsoluteUri;  		}  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  	}  	response.Clear ();  	response.StatusCode = redirectHttpCode.Value;  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode set to: {0}"' response.StatusCode);  	if (!string.IsNullOrEmpty (redirectLocation)) {  		response.RedirectLocation = redirectLocation;  	}  	response.End ();  } else if (!ignoreHttpStatusCode) {  	// Log 404  	if (!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1") {  		bool ignoreNotFoundBasedOnRegexPatterns = false;  		foreach (Regex regexNotFoundUrlToIgnore in UrlTrackerSettings.RegexNotFoundUrlsToIgnore) {  			if (regexNotFoundUrlToIgnore.IsMatch (urlWithoutQueryString)) {  				ignoreNotFoundBasedOnRegexPatterns = true;  				break;  			}  		}  		if (!ignoreNotFoundBasedOnRegexPatterns) {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' logging as 404 not found");  			query = "INSERT INTO icUrlTracker (OldUrl' RedirectRootNodeId' ";  			if (urlHasQueryString)  				query += "OldUrlQueryString' ";  			query += "Is404' Referrer) VALUES (@oldUrl' @redirectRootNodeId' ";  			if (urlHasQueryString)  				query += "@oldUrlQueryString' ";  			query += "1' @referrer)";  			_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("oldUrlQueryString"' request.QueryString.ToString ())' _sqlHelper.CreateParameter ("referrer"' request.UrlReferrer != null && !request.UrlReferrer.ToString ().Contains (UrlTrackerSettings.ReferrerToIgnore) ? (object)request.UrlReferrer.ToString () : DBNull.Value));  		}  	}  	if (UrlTrackerSettings.IsNotFoundTrackingDisabled)  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found and not found (404) tracking is disabled");  	if (UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString))  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is configured to be ignored: {0}"' urlWithoutQueryString);  	else if (UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString))  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because it's an umbraco reserved URL or path: {0}"' urlWithoutQueryString);  	else if (request.Headers ["X-UrlTracker-Ignore404"] == "1")  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because the 'X-UrlTracker-Ignore404' header was set to '1'. URL: {0}"' urlWithoutQueryString);  } else  	LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found in {0}"' callingEventName);  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (redirectHttpCode.HasValue) {  	string redirectLocation = string.Empty;  	if (!string.IsNullOrEmpty (redirectUrl)) {  		if (redirectUrl == "/")  			redirectUrl = string.Empty;  		Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  		if (redirectPassThroughQueryString) {  			NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  			NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  			if (redirectQueryString.HasKeys ())  				newQueryString = newQueryString.Merge (redirectQueryString);  			string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  			redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  		}  		if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  			return;  		}  		if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  			redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  		} else {  			redirectLocation = redirectUri.AbsoluteUri;  		}  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  	}  	response.Clear ();  	response.StatusCode = redirectHttpCode.Value;  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode set to: {0}"' response.StatusCode);  	if (!string.IsNullOrEmpty (redirectLocation)) {  		response.RedirectLocation = redirectLocation;  	}  	response.End ();  } else if (!ignoreHttpStatusCode) {  	// Log 404  	if (!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1") {  		bool ignoreNotFoundBasedOnRegexPatterns = false;  		foreach (Regex regexNotFoundUrlToIgnore in UrlTrackerSettings.RegexNotFoundUrlsToIgnore) {  			if (regexNotFoundUrlToIgnore.IsMatch (urlWithoutQueryString)) {  				ignoreNotFoundBasedOnRegexPatterns = true;  				break;  			}  		}  		if (!ignoreNotFoundBasedOnRegexPatterns) {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' logging as 404 not found");  			query = "INSERT INTO icUrlTracker (OldUrl' RedirectRootNodeId' ";  			if (urlHasQueryString)  				query += "OldUrlQueryString' ";  			query += "Is404' Referrer) VALUES (@oldUrl' @redirectRootNodeId' ";  			if (urlHasQueryString)  				query += "@oldUrlQueryString' ";  			query += "1' @referrer)";  			_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("oldUrlQueryString"' request.QueryString.ToString ())' _sqlHelper.CreateParameter ("referrer"' request.UrlReferrer != null && !request.UrlReferrer.ToString ().Contains (UrlTrackerSettings.ReferrerToIgnore) ? (object)request.UrlReferrer.ToString () : DBNull.Value));  		}  	}  	if (UrlTrackerSettings.IsNotFoundTrackingDisabled)  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found and not found (404) tracking is disabled");  	if (UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString))  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is configured to be ignored: {0}"' urlWithoutQueryString);  	else if (UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString))  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because it's an umbraco reserved URL or path: {0}"' urlWithoutQueryString);  	else if (request.Headers ["X-UrlTracker-Ignore404"] == "1")  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because the 'X-UrlTracker-Ignore404' header was set to '1'. URL: {0}"' urlWithoutQueryString);  } else  	LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found in {0}"' callingEventName);  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (redirectHttpCode.HasValue) {  	string redirectLocation = string.Empty;  	if (!string.IsNullOrEmpty (redirectUrl)) {  		if (redirectUrl == "/")  			redirectUrl = string.Empty;  		Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  		if (redirectPassThroughQueryString) {  			NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  			NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  			if (redirectQueryString.HasKeys ())  				newQueryString = newQueryString.Merge (redirectQueryString);  			string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  			redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  		}  		if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  			return;  		}  		if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  			redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  		} else {  			redirectLocation = redirectUri.AbsoluteUri;  		}  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  	}  	response.Clear ();  	response.StatusCode = redirectHttpCode.Value;  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response statuscode set to: {0}"' response.StatusCode);  	if (!string.IsNullOrEmpty (redirectLocation)) {  		response.RedirectLocation = redirectLocation;  	}  	response.End ();  } else if (!ignoreHttpStatusCode) {  	// Log 404  	if (!UrlTrackerSettings.IsNotFoundTrackingDisabled && !UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString) && !UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString) && request.Headers ["X-UrlTracker-Ignore404"] != "1") {  		bool ignoreNotFoundBasedOnRegexPatterns = false;  		foreach (Regex regexNotFoundUrlToIgnore in UrlTrackerSettings.RegexNotFoundUrlsToIgnore) {  			if (regexNotFoundUrlToIgnore.IsMatch (urlWithoutQueryString)) {  				ignoreNotFoundBasedOnRegexPatterns = true;  				break;  			}  		}  		if (!ignoreNotFoundBasedOnRegexPatterns) {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' logging as 404 not found");  			query = "INSERT INTO icUrlTracker (OldUrl' RedirectRootNodeId' ";  			if (urlHasQueryString)  				query += "OldUrlQueryString' ";  			query += "Is404' Referrer) VALUES (@oldUrl' @redirectRootNodeId' ";  			if (urlHasQueryString)  				query += "@oldUrlQueryString' ";  			query += "1' @referrer)";  			_sqlHelper.ExecuteNonQuery (query' _sqlHelper.CreateParameter ("oldUrl"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("oldUrlQueryString"' request.QueryString.ToString ())' _sqlHelper.CreateParameter ("referrer"' request.UrlReferrer != null && !request.UrlReferrer.ToString ().Contains (UrlTrackerSettings.ReferrerToIgnore) ? (object)request.UrlReferrer.ToString () : DBNull.Value));  		}  	}  	if (UrlTrackerSettings.IsNotFoundTrackingDisabled)  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found and not found (404) tracking is disabled");  	if (UrlTrackerSettings.NotFoundUrlsToIgnore.Contains (urlWithoutQueryString))  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is configured to be ignored: {0}"' urlWithoutQueryString);  	else if (UmbracoHelper.IsReservedPathOrUrl (urlWithoutQueryString))  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because it's an umbraco reserved URL or path: {0}"' urlWithoutQueryString);  	else if (request.Headers ["X-UrlTracker-Ignore404"] == "1")  		LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found' url is ignored because the 'X-UrlTracker-Ignore404' header was set to '1'. URL: {0}"' urlWithoutQueryString);  } else  	LoggingHelper.LogInformation ("UrlTracker HttpModule | No match found in {0}"' callingEventName);  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (!string.IsNullOrEmpty (redirectUrl)) {  	if (redirectUrl == "/")  		redirectUrl = string.Empty;  	Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  	if (redirectPassThroughQueryString) {  		NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  		NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  		if (redirectQueryString.HasKeys ())  			newQueryString = newQueryString.Merge (redirectQueryString);  		string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  		redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  	}  	if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  		return;  	}  	if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  		redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  	} else {  		redirectLocation = redirectUri.AbsoluteUri;  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (!string.IsNullOrEmpty (redirectUrl)) {  	if (redirectUrl == "/")  		redirectUrl = string.Empty;  	Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  	if (redirectPassThroughQueryString) {  		NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  		NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  		if (redirectQueryString.HasKeys ())  			newQueryString = newQueryString.Merge (redirectQueryString);  		string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  		redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  	}  	if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  		return;  	}  	if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  		redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  	} else {  		redirectLocation = redirectUri.AbsoluteUri;  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (!string.IsNullOrEmpty (redirectUrl)) {  	if (redirectUrl == "/")  		redirectUrl = string.Empty;  	Uri redirectUri = new Uri (redirectUrl.StartsWith (Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) ? redirectUrl : string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' redirectUrl.StartsWith ("/") ? redirectUrl.Substring (1) : redirectUrl));  	if (redirectPassThroughQueryString) {  		NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  		NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  		if (redirectQueryString.HasKeys ())  			newQueryString = newQueryString.Merge (redirectQueryString);  		string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  		redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  	}  	if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  		return;  	}  	if (request.Url.Host.Equals (redirectUri.Host' StringComparison.OrdinalIgnoreCase)) {  		redirectLocation = redirectUri.PathAndQuery + redirectUri.Fragment;  	} else {  		redirectLocation = redirectUri.AbsoluteUri;  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Response redirectlocation set to: {0}"' redirectLocation);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (redirectPassThroughQueryString) {  	NameValueCollection redirectQueryString = HttpUtility.ParseQueryString (redirectUri.Query);  	NameValueCollection newQueryString = HttpUtility.ParseQueryString (request.Url.Query);  	if (redirectQueryString.HasKeys ())  		newQueryString = newQueryString.Merge (redirectQueryString);  	string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  	redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: redirectUri = new Uri (string.Format ("{0}{1}{2}{3}/{4}{5}"' redirectUri.Scheme' Uri.SchemeDelimiter' redirectUri.Host' redirectUri.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' redirectUri.Port) : string.Empty' pathAndQuery.Contains ('?') ? pathAndQuery.Substring (0' pathAndQuery.IndexOf ('?')) : pathAndQuery.StartsWith ("/") ? pathAndQuery.Substring (1) : pathAndQuery' newQueryString.HasKeys () ? string.Concat ("?"' newQueryString.ToQueryString ()) : string.Empty));  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,UrlTrackerDo,The following statement contains a magic number: if (redirectUri == new Uri (string.Format ("{0}{1}{2}{3}/{4}"' request.Url.Scheme' Uri.SchemeDelimiter' request.Url.Host' request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' request.Url.Port) : string.Empty' request.RawUrl.StartsWith ("/") ? request.RawUrl.Substring (1) : request.RawUrl))) {  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect URL is the same as Request.RawUrl; don't redirect");  	return;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The following statement contains a magic number: using (IRecordsReader reader = _sqlHelper.ExecuteReader (query' _sqlHelper.CreateParameter ("redirectRootNodeId"' rootNodeId)' _sqlHelper.CreateParameter ("url"' urlWithoutQueryString)' _sqlHelper.CreateParameter ("shortestUrl"' shortestUrl))) {  	while (reader.Read ()) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | URL match found");  		if (!reader.IsNull ("RedirectNodeId") && reader.GetInt ("RedirectHttpCode") != (int)HttpStatusCode.Gone) {  			int redirectNodeId = reader.GetInt ("RedirectNodeId");  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' redirectNodeId);  			Node n = new Node (redirectNodeId);  			if (n != null && n.Name != null && n.Id > 0) {  				string tempUrl = UmbracoHelper.GetUrl (redirectNodeId);  				redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  				if (redirectUrl.StartsWith (Uri.UriSchemeHttp)) {  					Uri redirectUri = new Uri (redirectUrl);  					string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  					/*redirectUrl = pathAndQuery.StartsWith("/") && pathAndQuery != "/" ? pathAndQuery.Substring(1) : pathAndQuery;                                  if (redirectUri.Host != HttpContext.Current.Request.Url.Host)                                 {                                     redirectUrl = new Uri(redirectUri' pathAndQuery).AbsoluteUri;                                 }*/redirectUrl = GetCorrectedUrl (redirectUri' rootNodeId' pathAndQuery);  				}  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  			} else {  				LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  				continue;  			}  		} else if (!reader.IsNull ("RedirectUrl")) {  			redirectUrl = reader.GetString ("RedirectUrl");  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  		}  		redirectPassThroughQueryString = reader.GetBoolean ("RedirectPassThroughQueryString");  		LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is {0}"' redirectPassThroughQueryString ? "enabled" : "disabled");  		NameValueCollection oldUrlQueryString = null;  		if (!reader.IsNull ("OldUrlQueryString")) {  			oldUrlQueryString = HttpUtility.ParseQueryString (reader.GetString ("OldUrlQueryString"));  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Old URL query string set to: {0}"' oldUrlQueryString.ToQueryString ());  		}  		if ((urlHasQueryString || oldUrlQueryString != null) && (oldUrlQueryString != null && !request.QueryString.CollectionEquals (oldUrlQueryString))) {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Aborting; query strings don't match");  			continue;  		}  		redirectHttpCode = reader.GetInt ("RedirectHttpCode");  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  		break;  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The following statement contains a magic number: while (reader.Read ()) {  	LoggingHelper.LogInformation ("UrlTracker HttpModule | URL match found");  	if (!reader.IsNull ("RedirectNodeId") && reader.GetInt ("RedirectHttpCode") != (int)HttpStatusCode.Gone) {  		int redirectNodeId = reader.GetInt ("RedirectNodeId");  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' redirectNodeId);  		Node n = new Node (redirectNodeId);  		if (n != null && n.Name != null && n.Id > 0) {  			string tempUrl = UmbracoHelper.GetUrl (redirectNodeId);  			redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  			if (redirectUrl.StartsWith (Uri.UriSchemeHttp)) {  				Uri redirectUri = new Uri (redirectUrl);  				string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  				/*redirectUrl = pathAndQuery.StartsWith("/") && pathAndQuery != "/" ? pathAndQuery.Substring(1) : pathAndQuery;                                  if (redirectUri.Host != HttpContext.Current.Request.Url.Host)                                 {                                     redirectUrl = new Uri(redirectUri' pathAndQuery).AbsoluteUri;                                 }*/redirectUrl = GetCorrectedUrl (redirectUri' rootNodeId' pathAndQuery);  			}  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  		} else {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  			continue;  		}  	} else if (!reader.IsNull ("RedirectUrl")) {  		redirectUrl = reader.GetString ("RedirectUrl");  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  	}  	redirectPassThroughQueryString = reader.GetBoolean ("RedirectPassThroughQueryString");  	LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is {0}"' redirectPassThroughQueryString ? "enabled" : "disabled");  	NameValueCollection oldUrlQueryString = null;  	if (!reader.IsNull ("OldUrlQueryString")) {  		oldUrlQueryString = HttpUtility.ParseQueryString (reader.GetString ("OldUrlQueryString"));  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Old URL query string set to: {0}"' oldUrlQueryString.ToQueryString ());  	}  	if ((urlHasQueryString || oldUrlQueryString != null) && (oldUrlQueryString != null && !request.QueryString.CollectionEquals (oldUrlQueryString))) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Aborting; query strings don't match");  		continue;  	}  	redirectHttpCode = reader.GetInt ("RedirectHttpCode");  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  	break;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The following statement contains a magic number: if (!reader.IsNull ("RedirectNodeId") && reader.GetInt ("RedirectHttpCode") != (int)HttpStatusCode.Gone) {  	int redirectNodeId = reader.GetInt ("RedirectNodeId");  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' redirectNodeId);  	Node n = new Node (redirectNodeId);  	if (n != null && n.Name != null && n.Id > 0) {  		string tempUrl = UmbracoHelper.GetUrl (redirectNodeId);  		redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  		if (redirectUrl.StartsWith (Uri.UriSchemeHttp)) {  			Uri redirectUri = new Uri (redirectUrl);  			string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  			/*redirectUrl = pathAndQuery.StartsWith("/") && pathAndQuery != "/" ? pathAndQuery.Substring(1) : pathAndQuery;                                  if (redirectUri.Host != HttpContext.Current.Request.Url.Host)                                 {                                     redirectUrl = new Uri(redirectUri' pathAndQuery).AbsoluteUri;                                 }*/redirectUrl = GetCorrectedUrl (redirectUri' rootNodeId' pathAndQuery);  		}  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  	} else {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  		continue;  	}  } else if (!reader.IsNull ("RedirectUrl")) {  	redirectUrl = reader.GetString ("RedirectUrl");  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The following statement contains a magic number: if (n != null && n.Name != null && n.Id > 0) {  	string tempUrl = UmbracoHelper.GetUrl (redirectNodeId);  	redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  	if (redirectUrl.StartsWith (Uri.UriSchemeHttp)) {  		Uri redirectUri = new Uri (redirectUrl);  		string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery) + redirectUri.Fragment;  		/*redirectUrl = pathAndQuery.StartsWith("/") && pathAndQuery != "/" ? pathAndQuery.Substring(1) : pathAndQuery;                                  if (redirectUri.Host != HttpContext.Current.Request.Url.Host)                                 {                                     redirectUrl = new Uri(redirectUri' pathAndQuery).AbsoluteUri;                                 }*/redirectUrl = GetCorrectedUrl (redirectUri' rootNodeId' pathAndQuery);  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  } else {  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  	continue;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromDatabase,The following statement contains a magic number: redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The following statement contains a magic number: foreach (UrlTrackerModel forcedRedirect in redirects) {  	LoggingHelper.LogInformation ("UrlTracker HttpModule | URL match found");  	if (forcedRedirect.RedirectNodeId.HasValue && forcedRedirect.RedirectHttpCode != (int)HttpStatusCode.Gone) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' forcedRedirect.RedirectNodeId.Value);  		Node n = new Node (forcedRedirect.RedirectNodeId.Value);  		if (n != null && n.Name != null && n.Id > 0) {  			string tempUrl = UmbracoHelper.GetUrl (forcedRedirect.RedirectNodeId.Value);  			redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  			if (redirectUrl.StartsWith (Uri.UriSchemeHttp)) {  				Uri redirectUri = new Uri (redirectUrl);  				string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery);  				//redirectUrl = pathAndQuery.StartsWith("/") && pathAndQuery != "/" ? pathAndQuery.Substring(1) : pathAndQuery;  				redirectUrl = GetCorrectedUrl (redirectUri' forcedRedirect.RedirectRootNodeId' pathAndQuery);  			}  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  		} else {  			LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  			continue;  		}  	} else if (!string.IsNullOrEmpty (forcedRedirect.RedirectUrl)) {  		redirectUrl = forcedRedirect.RedirectUrl;  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  	}  	redirectPassThroughQueryString = forcedRedirect.RedirectPassThroughQueryString;  	LoggingHelper.LogInformation ("UrlTracker HttpModule | PassThroughQueryString is {0}"' redirectPassThroughQueryString ? "enabled" : "disabled");  	NameValueCollection oldUrlQueryString = null;  	if (!string.IsNullOrEmpty (forcedRedirect.OldUrlQueryString)) {  		oldUrlQueryString = HttpUtility.ParseQueryString (forcedRedirect.OldUrlQueryString);  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Old URL query string set to: {0}"' oldUrlQueryString.ToQueryString ());  	}  	if ((urlHasQueryString || oldUrlQueryString != null) && (oldUrlQueryString != null && !request.QueryString.CollectionEquals (oldUrlQueryString))) {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Aborting; query strings don't match");  		continue;  	}  	redirectHttpCode = forcedRedirect.RedirectHttpCode;  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect http code set to: {0}"' redirectHttpCode);  	break;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The following statement contains a magic number: if (forcedRedirect.RedirectNodeId.HasValue && forcedRedirect.RedirectHttpCode != (int)HttpStatusCode.Gone) {  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node id: {0}"' forcedRedirect.RedirectNodeId.Value);  	Node n = new Node (forcedRedirect.RedirectNodeId.Value);  	if (n != null && n.Name != null && n.Id > 0) {  		string tempUrl = UmbracoHelper.GetUrl (forcedRedirect.RedirectNodeId.Value);  		redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  		if (redirectUrl.StartsWith (Uri.UriSchemeHttp)) {  			Uri redirectUri = new Uri (redirectUrl);  			string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery);  			//redirectUrl = pathAndQuery.StartsWith("/") && pathAndQuery != "/" ? pathAndQuery.Substring(1) : pathAndQuery;  			redirectUrl = GetCorrectedUrl (redirectUri' forcedRedirect.RedirectRootNodeId' pathAndQuery);  		}  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  	} else {  		LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  		continue;  	}  } else if (!string.IsNullOrEmpty (forcedRedirect.RedirectUrl)) {  	redirectUrl = forcedRedirect.RedirectUrl;  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The following statement contains a magic number: if (n != null && n.Name != null && n.Id > 0) {  	string tempUrl = UmbracoHelper.GetUrl (forcedRedirect.RedirectNodeId.Value);  	redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  	if (redirectUrl.StartsWith (Uri.UriSchemeHttp)) {  		Uri redirectUri = new Uri (redirectUrl);  		string pathAndQuery = Uri.UnescapeDataString (redirectUri.PathAndQuery);  		//redirectUrl = pathAndQuery.StartsWith("/") && pathAndQuery != "/" ? pathAndQuery.Substring(1) : pathAndQuery;  		redirectUrl = GetCorrectedUrl (redirectUri' forcedRedirect.RedirectRootNodeId' pathAndQuery);  	}  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect url set to: {0}"' redirectUrl);  } else {  	LoggingHelper.LogInformation ("UrlTracker HttpModule | Redirect node is invalid; node is null' name is null or id <= 0");  	continue;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Modules,UrlTrackerModule,D:\newReposJune17\kipusoep_UrlTracker\Modules\UrlTrackerModule.cs,LoadUrlTrackerMatchesFromCache,The following statement contains a magic number: redirectUrl = tempUrl.StartsWith (Uri.UriSchemeHttp) ? tempUrl : string.Format ("{0}{1}{2}{3}{4}"' HttpContext.Current.Request.Url.Scheme' Uri.SchemeDelimiter' HttpContext.Current.Request.Url.Host' HttpContext.Current.Request.Url.Port != 80 && UrlTrackerSettings.AppendPortNumber ? string.Concat (":"' HttpContext.Current.Request.Url.Port) : string.Empty' tempUrl);  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,UpdateUrlTrackerTable,The following statement contains a magic number: if (UrlTrackerRepository.GetUrlTrackerTableExists ()) {  	var folderName = GetFolderName ();  	for (var i = 1; i <= 3; i++) {  		var alreadyAdded = false;  		if (DatabaseProvider == DatabaseProviders.SqlServerCE) {  			//Check if columns exists  			var query = EmbeddedResourcesHelper.GetString (string.Concat (folderName' "check-table-" + i + ".sql"));  			if (!string.IsNullOrEmpty (query)) {  				var reader = _sqlHelper.ExecuteReader (query);  				while (reader.Read ()) {  					alreadyAdded = true;  				}  			}  		}  		if (!alreadyAdded) {  			var query = EmbeddedResourcesHelper.GetString (string.Concat (folderName' "update-table-" + i + ".sql"));  			if (!string.IsNullOrEmpty (query))  				_sqlHelper.ExecuteNonQuery (query);  		}  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,UpdateUrlTrackerTable,The following statement contains a magic number: for (var i = 1; i <= 3; i++) {  	var alreadyAdded = false;  	if (DatabaseProvider == DatabaseProviders.SqlServerCE) {  		//Check if columns exists  		var query = EmbeddedResourcesHelper.GetString (string.Concat (folderName' "check-table-" + i + ".sql"));  		if (!string.IsNullOrEmpty (query)) {  			var reader = _sqlHelper.ExecuteReader (query);  			while (reader.Read ()) {  				alreadyAdded = true;  			}  		}  	}  	if (!alreadyAdded) {  		var query = EmbeddedResourcesHelper.GetString (string.Concat (folderName' "update-table-" + i + ".sql"));  		if (!string.IsNullOrEmpty (query))  			_sqlHelper.ExecuteNonQuery (query);  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: foreach (OldUrlTrackerModel oldUrlTrackerEntry in oldUrlTrackerEntries) {  	Node node = new Node (oldUrlTrackerEntry.NodeId);  	if ((node.Id > 0 || true) && !string.IsNullOrEmpty (oldUrlTrackerEntry.OldUrl) && oldUrlTrackerEntry.OldUrl != "#") {  		string oldUrl = oldUrlTrackerEntry.OldUrl;  		Uri oldUri = null;  		if (!oldUrlTrackerEntry.IsRegex) {  			if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  				oldUri = new Uri (_baseUri' oldUrl);  			else  				oldUri = new Uri (oldUrl);  			oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  		} else {  			if (oldUrl.StartsWith ("^/"))  				oldUrl = string.Concat ("^"' oldUrl.Substring (2));  			if (oldUrl.StartsWith ("/"))  				oldUrl = oldUrl.Substring (1);  			if (oldUrl.EndsWith ("/$"))  				oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  			if (oldUrl.EndsWith ("/"))  				oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  		}  		UrlTrackerModel newUrlTrackerEntry = new UrlTrackerModel (!oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' oldUri != null ? !string.IsNullOrEmpty (oldUri.Query) && oldUri.Query.StartsWith ("?") ? oldUri.Query.Substring (1) : oldUri.Query : string.Empty' oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' node.GetDomainRootNode ().Id' oldUrlTrackerEntry.NodeId' string.Empty' 301' true' false' oldUrlTrackerEntry.Message);  		newUrlTrackerEntry.Inserted = oldUrlTrackerEntry.Inserted;  		AddUrlTrackerEntry (newUrlTrackerEntry);  		newUrlTrackerEntriesCount++;  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: foreach (OldUrlTrackerModel oldUrlTrackerEntry in oldUrlTrackerEntries) {  	Node node = new Node (oldUrlTrackerEntry.NodeId);  	if ((node.Id > 0 || true) && !string.IsNullOrEmpty (oldUrlTrackerEntry.OldUrl) && oldUrlTrackerEntry.OldUrl != "#") {  		string oldUrl = oldUrlTrackerEntry.OldUrl;  		Uri oldUri = null;  		if (!oldUrlTrackerEntry.IsRegex) {  			if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  				oldUri = new Uri (_baseUri' oldUrl);  			else  				oldUri = new Uri (oldUrl);  			oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  		} else {  			if (oldUrl.StartsWith ("^/"))  				oldUrl = string.Concat ("^"' oldUrl.Substring (2));  			if (oldUrl.StartsWith ("/"))  				oldUrl = oldUrl.Substring (1);  			if (oldUrl.EndsWith ("/$"))  				oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  			if (oldUrl.EndsWith ("/"))  				oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  		}  		UrlTrackerModel newUrlTrackerEntry = new UrlTrackerModel (!oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' oldUri != null ? !string.IsNullOrEmpty (oldUri.Query) && oldUri.Query.StartsWith ("?") ? oldUri.Query.Substring (1) : oldUri.Query : string.Empty' oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' node.GetDomainRootNode ().Id' oldUrlTrackerEntry.NodeId' string.Empty' 301' true' false' oldUrlTrackerEntry.Message);  		newUrlTrackerEntry.Inserted = oldUrlTrackerEntry.Inserted;  		AddUrlTrackerEntry (newUrlTrackerEntry);  		newUrlTrackerEntriesCount++;  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: foreach (OldUrlTrackerModel oldUrlTrackerEntry in oldUrlTrackerEntries) {  	Node node = new Node (oldUrlTrackerEntry.NodeId);  	if ((node.Id > 0 || true) && !string.IsNullOrEmpty (oldUrlTrackerEntry.OldUrl) && oldUrlTrackerEntry.OldUrl != "#") {  		string oldUrl = oldUrlTrackerEntry.OldUrl;  		Uri oldUri = null;  		if (!oldUrlTrackerEntry.IsRegex) {  			if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  				oldUri = new Uri (_baseUri' oldUrl);  			else  				oldUri = new Uri (oldUrl);  			oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  		} else {  			if (oldUrl.StartsWith ("^/"))  				oldUrl = string.Concat ("^"' oldUrl.Substring (2));  			if (oldUrl.StartsWith ("/"))  				oldUrl = oldUrl.Substring (1);  			if (oldUrl.EndsWith ("/$"))  				oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  			if (oldUrl.EndsWith ("/"))  				oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  		}  		UrlTrackerModel newUrlTrackerEntry = new UrlTrackerModel (!oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' oldUri != null ? !string.IsNullOrEmpty (oldUri.Query) && oldUri.Query.StartsWith ("?") ? oldUri.Query.Substring (1) : oldUri.Query : string.Empty' oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' node.GetDomainRootNode ().Id' oldUrlTrackerEntry.NodeId' string.Empty' 301' true' false' oldUrlTrackerEntry.Message);  		newUrlTrackerEntry.Inserted = oldUrlTrackerEntry.Inserted;  		AddUrlTrackerEntry (newUrlTrackerEntry);  		newUrlTrackerEntriesCount++;  	}  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: if ((node.Id > 0 || true) && !string.IsNullOrEmpty (oldUrlTrackerEntry.OldUrl) && oldUrlTrackerEntry.OldUrl != "#") {  	string oldUrl = oldUrlTrackerEntry.OldUrl;  	Uri oldUri = null;  	if (!oldUrlTrackerEntry.IsRegex) {  		if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  			oldUri = new Uri (_baseUri' oldUrl);  		else  			oldUri = new Uri (oldUrl);  		oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  	} else {  		if (oldUrl.StartsWith ("^/"))  			oldUrl = string.Concat ("^"' oldUrl.Substring (2));  		if (oldUrl.StartsWith ("/"))  			oldUrl = oldUrl.Substring (1);  		if (oldUrl.EndsWith ("/$"))  			oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  		if (oldUrl.EndsWith ("/"))  			oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  	}  	UrlTrackerModel newUrlTrackerEntry = new UrlTrackerModel (!oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' oldUri != null ? !string.IsNullOrEmpty (oldUri.Query) && oldUri.Query.StartsWith ("?") ? oldUri.Query.Substring (1) : oldUri.Query : string.Empty' oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' node.GetDomainRootNode ().Id' oldUrlTrackerEntry.NodeId' string.Empty' 301' true' false' oldUrlTrackerEntry.Message);  	newUrlTrackerEntry.Inserted = oldUrlTrackerEntry.Inserted;  	AddUrlTrackerEntry (newUrlTrackerEntry);  	newUrlTrackerEntriesCount++;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: if ((node.Id > 0 || true) && !string.IsNullOrEmpty (oldUrlTrackerEntry.OldUrl) && oldUrlTrackerEntry.OldUrl != "#") {  	string oldUrl = oldUrlTrackerEntry.OldUrl;  	Uri oldUri = null;  	if (!oldUrlTrackerEntry.IsRegex) {  		if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  			oldUri = new Uri (_baseUri' oldUrl);  		else  			oldUri = new Uri (oldUrl);  		oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  	} else {  		if (oldUrl.StartsWith ("^/"))  			oldUrl = string.Concat ("^"' oldUrl.Substring (2));  		if (oldUrl.StartsWith ("/"))  			oldUrl = oldUrl.Substring (1);  		if (oldUrl.EndsWith ("/$"))  			oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  		if (oldUrl.EndsWith ("/"))  			oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  	}  	UrlTrackerModel newUrlTrackerEntry = new UrlTrackerModel (!oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' oldUri != null ? !string.IsNullOrEmpty (oldUri.Query) && oldUri.Query.StartsWith ("?") ? oldUri.Query.Substring (1) : oldUri.Query : string.Empty' oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' node.GetDomainRootNode ().Id' oldUrlTrackerEntry.NodeId' string.Empty' 301' true' false' oldUrlTrackerEntry.Message);  	newUrlTrackerEntry.Inserted = oldUrlTrackerEntry.Inserted;  	AddUrlTrackerEntry (newUrlTrackerEntry);  	newUrlTrackerEntriesCount++;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: if ((node.Id > 0 || true) && !string.IsNullOrEmpty (oldUrlTrackerEntry.OldUrl) && oldUrlTrackerEntry.OldUrl != "#") {  	string oldUrl = oldUrlTrackerEntry.OldUrl;  	Uri oldUri = null;  	if (!oldUrlTrackerEntry.IsRegex) {  		if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  			oldUri = new Uri (_baseUri' oldUrl);  		else  			oldUri = new Uri (oldUrl);  		oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  	} else {  		if (oldUrl.StartsWith ("^/"))  			oldUrl = string.Concat ("^"' oldUrl.Substring (2));  		if (oldUrl.StartsWith ("/"))  			oldUrl = oldUrl.Substring (1);  		if (oldUrl.EndsWith ("/$"))  			oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  		if (oldUrl.EndsWith ("/"))  			oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  	}  	UrlTrackerModel newUrlTrackerEntry = new UrlTrackerModel (!oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' oldUri != null ? !string.IsNullOrEmpty (oldUri.Query) && oldUri.Query.StartsWith ("?") ? oldUri.Query.Substring (1) : oldUri.Query : string.Empty' oldUrlTrackerEntry.IsRegex ? oldUrl : string.Empty' node.GetDomainRootNode ().Id' oldUrlTrackerEntry.NodeId' string.Empty' 301' true' false' oldUrlTrackerEntry.Message);  	newUrlTrackerEntry.Inserted = oldUrlTrackerEntry.Inserted;  	AddUrlTrackerEntry (newUrlTrackerEntry);  	newUrlTrackerEntriesCount++;  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: if (!oldUrlTrackerEntry.IsRegex) {  	if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  		oldUri = new Uri (_baseUri' oldUrl);  	else  		oldUri = new Uri (oldUrl);  	oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  } else {  	if (oldUrl.StartsWith ("^/"))  		oldUrl = string.Concat ("^"' oldUrl.Substring (2));  	if (oldUrl.StartsWith ("/"))  		oldUrl = oldUrl.Substring (1);  	if (oldUrl.EndsWith ("/$"))  		oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  	if (oldUrl.EndsWith ("/"))  		oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: if (!oldUrlTrackerEntry.IsRegex) {  	if (!oldUrl.StartsWith (Uri.UriSchemeHttp))  		oldUri = new Uri (_baseUri' oldUrl);  	else  		oldUri = new Uri (oldUrl);  	oldUrl = UrlTrackerHelper.ResolveShortestUrl (oldUri.AbsolutePath);  } else {  	if (oldUrl.StartsWith ("^/"))  		oldUrl = string.Concat ("^"' oldUrl.Substring (2));  	if (oldUrl.StartsWith ("/"))  		oldUrl = oldUrl.Substring (1);  	if (oldUrl.EndsWith ("/$"))  		oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  	if (oldUrl.EndsWith ("/"))  		oldUrl = oldUrl.Substring (0' oldUrl.Length - 1);  }  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: if (oldUrl.StartsWith ("^/"))  	oldUrl = string.Concat ("^"' oldUrl.Substring (2));  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: oldUrl = string.Concat ("^"' oldUrl.Substring (2));  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: if (oldUrl.EndsWith ("/$"))  	oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  
Magic Number,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,MigrateData,The following statement contains a magic number: oldUrl = string.Concat (oldUrl.Substring (0' oldUrl.Length - 2)' "$");  
Missing Default,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,AddUrlMapping,The following switch statement is missing a default case: switch (type) {  case AutoTrackingTypes.Moved:  	notes += " was moved";  	break;  case AutoTrackingTypes.Renamed:  	notes += " was renamed";  	break;  case AutoTrackingTypes.UrlOverwritten:  	notes += "'s property 'umbracoUrlName' changed";  	break;  case AutoTrackingTypes.UrlOverwrittenSEOMetadata:  	notes += string.Format ("'s property '{0}' changed"' UrlTrackerSettings.SEOMetadataPropertyName);  	break;  }  
Missing Default,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetUrlTrackerEntries,The following switch statement is missing a default case: switch (sortBy) {  case "RedirectRootNodeName":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.RedirectRootNodeName) : urlTrackerEntries.OrderBy (x => x.RedirectRootNodeName)).ToList ();  	break;  case "CalculatedOldUrl":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.CalculatedOldUrl) : urlTrackerEntries.OrderBy (x => x.CalculatedOldUrl)).ToList ();  	break;  case "CalculatedRedirectUrl":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.CalculatedRedirectUrl) : urlTrackerEntries.OrderBy (x => x.CalculatedRedirectUrl)).ToList ();  	break;  case "RedirectHttpCode":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.RedirectHttpCode) : urlTrackerEntries.OrderBy (x => x.RedirectHttpCode)).ToList ();  	break;  case "Referrer":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.Referrer) : urlTrackerEntries.OrderBy (x => x.Referrer)).ToList ();  	break;  case "NotFoundCount":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.NotFoundCount) : urlTrackerEntries.OrderBy (x => x.NotFoundCount)).ToList ();  	break;  case "Notes":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.Notes) : urlTrackerEntries.OrderBy (x => x.Notes)).ToList ();  	break;  case "Inserted":  	urlTrackerEntries = (isDescending ? urlTrackerEntries.OrderByDescending (x => x.Inserted) : urlTrackerEntries.OrderBy (x => x.Inserted)).ToList ();  	break;  }  
Missing Default,InfoCaster.Umbraco.UrlTracker.Repositories,UrlTrackerRepository,D:\newReposJune17\kipusoep_UrlTracker\Repositories\UrlTrackerRepository.cs,GetNotFoundEntries,The following switch statement is missing a default case: switch (sortBy) {  case "CalculatedOldUrl":  	notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.CalculatedOldUrl) : notFoundEntries.OrderBy (x => x.CalculatedOldUrl)).ToList ();  	break;  case "Referrer":  	notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.Referrer) : notFoundEntries.OrderBy (x => x.Referrer)).ToList ();  	break;  case "NotFoundCount":  	notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.NotFoundCount) : notFoundEntries.OrderBy (x => x.NotFoundCount)).ToList ();  	break;  case "Inserted":  	notFoundEntries = (isDescending ? notFoundEntries.OrderByDescending (x => x.Inserted) : notFoundEntries.OrderBy (x => x.Inserted)).ToList ();  	break;  }  
