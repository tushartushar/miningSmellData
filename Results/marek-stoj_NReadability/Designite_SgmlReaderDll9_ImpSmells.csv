Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,Read,The method has 134 lines of code.
Long Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseStartTag,The method has 107 lines of code.
Long Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseCData,The method has 154 lines of code.
Complex Method,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ScanToEnd,Cyclomatic complexity of the method is 8
Complex Method,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SniffMeta,Cyclomatic complexity of the method is 11
Complex Method,Sgml,Group,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,CanContain,Cyclomatic complexity of the method is 10
Complex Method,Sgml,SgmlDtd,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ParseElementDecl,Cyclomatic complexity of the method is 11
Complex Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseStartTag,Cyclomatic complexity of the method is 15
Complex Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseDocType,Cyclomatic complexity of the method is 9
Complex Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseCData,Cyclomatic complexity of the method is 10
Complex Method,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ValidateContent,Cyclomatic complexity of the method is 10
Long Parameter List,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Parameter List,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Parameter List,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Parameter List,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Parameter List,Sgml,ElementDecl,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ElementDecl,The method has 6 parameters. Parameters: name' sto' eto' cm' inclusions' exclusions
Long Parameter List,Sgml,SgmlDtd,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,Parse,The method has 7 parameters. Parameters: baseUri' name' pubid' url' subset' proxy' nt
Long Parameter List,Sgml,SgmlDtd,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,Parse,The method has 6 parameters. Parameters: baseUri' name' input' subset' proxy' nt
Long Statement,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,Context,The length of the statement  "                    msg = string.Format(CultureInfo.InvariantCulture' "\nReferenced on line {0}' position {1} of internal entity '{2}'"' p.m_line' p.LinePosition' p.m_name); " is 153.
Long Statement,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,Context,The length of the statement  "                    msg = string.Format(CultureInfo.InvariantCulture' "\nReferenced on line {0}' position {1} of '{2}' entity at [{3}]"' p.m_line' p.LinePosition' p.m_name' p.ResolvedUri.AbsolutePath); " is 181.
Long Statement,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The length of the statement  "                uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3]; " is 128.
Long Statement,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The length of the statement  "                    throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code)); " is 121.
Long Statement,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The length of the statement  "                        throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code)); " is 121.
Long Statement,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The length of the statement  "                    throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code)); " is 121.
Long Statement,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The length of the statement  "                        throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code)); " is 121.
Long Statement,Sgml,ContentModel,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SetDeclaredContent,The length of the statement  "                    throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Declared content type '{0}' is not supported"' dc)); " is 126.
Long Statement,Sgml,Group,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AddConnector,The length of the statement  "                throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Connector '{0}' is inconsistent with {1} group."' c' m_groupType.ToString())); " is 152.
Long Statement,Sgml,AttDef,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SetEnumeratedType,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.CurrentUICulture' "AttributeType {0} is not valid for an attribute definition with an enumerated value."' type)); " is 167.
Long Statement,Sgml,AttDef,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SetType,The length of the statement  "                    throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Attribute type '{0}' is not supported"' type)); " is 121.
Long Statement,Sgml,AttDef,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SetPresence,The length of the statement  "                throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Attribute value '{0}' not supported"' token)); " is 120.
Long Statement,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,LazyLoadDtd,The length of the statement  "                    this.m_dtd = SgmlDtd.Parse(baseUri' this.m_docType' this.m_pubid' baseUri.AbsoluteUri' this.m_subset' this.m_proxy' null); " is 122.
Long Statement,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,Log,The length of the statement  "                    ErrorLog.WriteLine("### Error in {0}#{1}' line {2}' position {3}: {4}"' path' this.m_current.Name' this.m_current.Line' this.m_current.LinePosition' err); " is 154.
Long Statement,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,Read,The length of the statement  "                if (foundnode && this.m_node.NodeType == XmlNodeType.Whitespace && this.m_whitespaceHandling == WhitespaceHandling.None) " is 120.
Long Statement,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ValidateContent,The length of the statement  "                            if ((i == 2) && string.Equals(f.Name' "BODY"' StringComparison.OrdinalIgnoreCase)) // NOTE (steveb): never close the BODY tag too early " is 135.
Complex Conditional,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SkipWhitespace,The conditional expression  "ch != Entity.EOF && (ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')"  is complex.
Complex Conditional,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ScanToken,The conditional expression  "!nmtoken || ch == '_' || ch == '.' || ch == '-' || ch == ':' || char.IsLetterOrDigit(ch)"  is complex.
Complex Conditional,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SniffWhitespace,The conditional expression  "ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n'"  is complex.
Complex Conditional,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SniffWhitespace,The conditional expression  "ch != ' ' && ch != '\t' && ch != '\r' && ch != '\n'"  is complex.
Complex Conditional,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SniffName,The conditional expression  "pos < used - 1 && (char.IsLetterOrDigit(ch) || ch == '-' || ch == '_' || ch == ':')"  is complex.
Complex Conditional,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SkipWhitespace,The conditional expression  "pos < used - 1 && (ch == ' ' || ch == '\r' || ch == '\n')"  is complex.
Complex Conditional,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,Read,The conditional expression  "!m_foundRoot && (this.NodeType == XmlNodeType.Element ||                      this.NodeType == XmlNodeType.Text ||                      this.NodeType == XmlNodeType.CDATA)"  is complex.
Complex Conditional,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseStartTag,The conditional expression  "string.Equals(aname' "'"' StringComparison.OrdinalIgnoreCase) ||                      string.Equals(aname' "="' StringComparison.OrdinalIgnoreCase) ||                      string.Equals(aname' ":"' StringComparison.OrdinalIgnoreCase) ||                      string.Equals(aname' ";"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseText,The conditional expression  "ch == '/' || ch == '!' || ch == '?' || char.IsLetter(ch)"  is complex.
Complex Conditional,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ExpandEntity,The conditional expression  "ch != Entity.EOF &&                      (char.IsLetter(ch) || ch == '_' || ch == '-') || ((this.m_name.Length > 0) && char.IsDigit(ch))"  is complex.
Empty Catch Block,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,Open,The method has an empty catch block.
Empty Catch Block,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SniffEncoding,The method has an empty catch block.
Empty Catch Block,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SniffMeta,The method has an empty catch block.
Magic Number,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,Open,The following statement contains a magic number: if (m_isInternal)              {                  if (this.m_literal != null)                      this.m_stm = new StringReader(this.m_literal);              }               else if (this.m_uri == null)              {                  this.Error("Unresolvable entity '{0}'"' this.m_name);              }              else              {                  if (baseUri != null)                  {                      this.m_resolvedUri = new Uri(baseUri' this.m_uri);                  }                  else                  {                      this.m_resolvedUri = new Uri(this.m_uri);                  }                    Stream stream = null;                  Encoding e = Encoding.Default;                  switch (this.m_resolvedUri.Scheme)                  {                      case "file":                          {                              string path = this.m_resolvedUri.LocalPath;                              stream = new FileStream(path' FileMode.Open' FileAccess.Read);                          }                          break;                      default:                          //Console.WriteLine("Fetching:" + ResolvedUri.AbsoluteUri);                          HttpWebRequest wr = (HttpWebRequest)WebRequest.Create(ResolvedUri);                          wr.UserAgent = "Mozilla/4.0 (compatible;);";                          wr.Timeout = 10000; // in case this is running in an ASPX page.                          if (m_proxy != null)                              wr.Proxy = new WebProxy(m_proxy);                          wr.PreAuthenticate = false;                           // Pass the credentials of the process.                           wr.Credentials = CredentialCache.DefaultCredentials;                             WebResponse resp = wr.GetResponse();                          Uri actual = resp.ResponseUri;                          if (!string.Equals(actual.AbsoluteUri' this.m_resolvedUri.AbsoluteUri' StringComparison.OrdinalIgnoreCase))                          {                              this.m_resolvedUri = actual;                          }                          string contentType = resp.ContentType.ToLowerInvariant();                          string mimeType = contentType;                          int i = contentType.IndexOf(';');                          if (i >= 0)                          {                              mimeType = contentType.Substring(0' i);                          }                            if (StringUtilities.EqualsIgnoreCase(mimeType' "text/html"))                          {                              this.m_isHtml = true;                          }                            i = contentType.IndexOf("charset");                          e = Encoding.Default;                          if (i >= 0)                          {                                                              int j = contentType.IndexOf("="' i);                              int k = contentType.IndexOf(";"' j);                              if (k < 0)                                  k = contentType.Length;                                if (j > 0)                              {                                  j++;                                  string charset = contentType.Substring(j' k - j).Trim();                                  try                                  {                                      e = Encoding.GetEncoding(charset);                                  }                                  catch (ArgumentException)                                  {                                  }                              }                          }                            stream = resp.GetResponseStream();                          break;                  }                    this.m_weOwnTheStream = true;                  HtmlStream html = new HtmlStream(stream' e);                  this.m_encoding = html.Encoding;                  this.m_stm = html;              }
Magic Number,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x')              {                  ch = ReadChar();                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      int p = 0;                      if (ch >= '0' && ch <= '9')                      {                          p = (int)(ch - '0');                      }                       else if (ch >= 'a' && ch <= 'f')                      {                          p = (int)(ch-'a')+10;                      }                       else if (ch >= 'A' && ch <= 'F')                      {                          p = (int)(ch-'A')+10;                      }                      else                      {                          break;//we must be done!                          //Error("Hex digit out of range '{0}'"' (int)ch);                      }                        v = (v * 16) + p;                  }              }               else              {                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      if (ch >= '0' && ch <= '9')                      {                          v = (v * 10) + (int)(ch - '0');                      }                       else                      {                          break; // we must be done!                          //Error("Decimal digit out of range '{0}'"' (int)ch);                      }                  }              }
Magic Number,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x')              {                  ch = ReadChar();                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      int p = 0;                      if (ch >= '0' && ch <= '9')                      {                          p = (int)(ch - '0');                      }                       else if (ch >= 'a' && ch <= 'f')                      {                          p = (int)(ch-'a')+10;                      }                       else if (ch >= 'A' && ch <= 'F')                      {                          p = (int)(ch-'A')+10;                      }                      else                      {                          break;//we must be done!                          //Error("Hex digit out of range '{0}'"' (int)ch);                      }                        v = (v * 16) + p;                  }              }               else              {                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      if (ch >= '0' && ch <= '9')                      {                          v = (v * 10) + (int)(ch - '0');                      }                       else                      {                          break; // we must be done!                          //Error("Decimal digit out of range '{0}'"' (int)ch);                      }                  }              }
Magic Number,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x')              {                  ch = ReadChar();                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      int p = 0;                      if (ch >= '0' && ch <= '9')                      {                          p = (int)(ch - '0');                      }                       else if (ch >= 'a' && ch <= 'f')                      {                          p = (int)(ch-'a')+10;                      }                       else if (ch >= 'A' && ch <= 'F')                      {                          p = (int)(ch-'A')+10;                      }                      else                      {                          break;//we must be done!                          //Error("Hex digit out of range '{0}'"' (int)ch);                      }                        v = (v * 16) + p;                  }              }               else              {                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      if (ch >= '0' && ch <= '9')                      {                          v = (v * 10) + (int)(ch - '0');                      }                       else                      {                          break; // we must be done!                          //Error("Decimal digit out of range '{0}'"' (int)ch);                      }                  }              }
Magic Number,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x')              {                  ch = ReadChar();                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      int p = 0;                      if (ch >= '0' && ch <= '9')                      {                          p = (int)(ch - '0');                      }                       else if (ch >= 'a' && ch <= 'f')                      {                          p = (int)(ch-'a')+10;                      }                       else if (ch >= 'A' && ch <= 'F')                      {                          p = (int)(ch-'A')+10;                      }                      else                      {                          break;//we must be done!                          //Error("Hex digit out of range '{0}'"' (int)ch);                      }                        v = (v * 16) + p;                  }              }               else              {                  for (; ch != Entity.EOF && ch != ';'; ch = ReadChar())                  {                      if (ch >= '0' && ch <= '9')                      {                          v = (v * 10) + (int)(ch - '0');                      }                       else                      {                          break; // we must be done!                          //Error("Decimal digit out of range '{0}'"' (int)ch);                      }                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: rawUsed = stm.Read(rawBuffer' 0' 4);
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: if (this.m_decoder == null)              {                  this.m_decoder = defaultEncoding.GetDecoder();                  rawUsed += stm.Read(rawBuffer' 4' BUFSIZE-4);                                  DecodeBlock();                  // Now sniff to see if there is an XML declaration or HTML <META> tag.                  Decoder sd = SniffEncoding();                  if (sd != null) {                      this.m_decoder = sd;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: if (this.m_decoder == null)              {                  this.m_decoder = defaultEncoding.GetDecoder();                  rawUsed += stm.Read(rawBuffer' 4' BUFSIZE-4);                                  DecodeBlock();                  // Now sniff to see if there is an XML declaration or HTML <META> tag.                  Decoder sd = SniffEncoding();                  if (sd != null) {                      this.m_decoder = sd;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,CopyToMemoryStream,The following statement contains a magic number: int size = 100000;
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {                  uint w = (uint)buffer[index + 0] << 24 | (uint)buffer[index + 1] << 16 | (uint)buffer[index + 2] << 8 | (uint)buffer[index + 3];                  // see if it's a 4-byte encoding                  switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }                  w >>= 8;                  if (w == 0xefbbbf) {                      index += 3;                      return Encoding.UTF8.GetDecoder();                  }                  w >>= 8;                  switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }              }
Magic Number,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,ReadToEnd,The following statement contains a magic number: char[] buffer = new char[100000];
Magic Number,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetCharCount,The following statement contains a magic number: return (count + tempBytes) / 4;
Magic Number,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetChars,The following statement contains a magic number: if (tempBytes > 0) {                  for (; i < 4; i++) {                      temp[i] = bytes[byteIndex];                      byteIndex++;                      byteCount--;                  }                  i = 1;                  GetFullChars(temp' 0' 4' chars' charIndex);                  charIndex++;              } else                  i = 0;
Magic Number,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetChars,The following statement contains a magic number: if (tempBytes > 0) {                  for (; i < 4; i++) {                      temp[i] = bytes[byteIndex];                      byteIndex++;                      byteCount--;                  }                  i = 1;                  GetFullChars(temp' 0' 4' chars' charIndex);                  charIndex++;              } else                  i = 0;
Magic Number,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetChars,The following statement contains a magic number: int j = (tempBytes + byteCount) % 4;
Magic Number,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,UnicodeToUTF16,The following statement contains a magic number: lowerByte = (byte)(0xD7C0 + (code >> 10));
Magic Number,Sgml,Ucs4Decoder,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,UnicodeToUTF16,The following statement contains a magic number: return ((char)((higherByte << 8) | lowerByte));
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i + 3]) << 24) | (bytes[i + 2] << 16) | (bytes[i + 1] << 8) | (bytes[i]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i + 3]) << 24) | (bytes[i + 2] << 16) | (bytes[i + 1] << 8) | (bytes[i]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i + 3]) << 24) | (bytes[i + 2] << 16) | (bytes[i + 1] << 8) | (bytes[i]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i + 3]) << 24) | (bytes[i + 2] << 16) | (bytes[i + 1] << 8) | (bytes[i]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i + 3]) << 24) | (bytes[i + 2] << 16) | (bytes[i + 1] << 8) | (bytes[i]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i + 3]) << 24) | (bytes[i + 2] << 16) | (bytes[i + 1] << 8) | (bytes[i]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i + 3]) << 24) | (bytes[i + 2] << 16) | (bytes[i + 1] << 8) | (bytes[i]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i]) << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | (bytes[i + 3]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i]) << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | (bytes[i + 3]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i]) << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | (bytes[i + 3]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i]) << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | (bytes[i + 3]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i]) << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | (bytes[i + 3]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i]) << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | (bytes[i + 3]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount; ) {                  code = (UInt32)(((bytes[i]) << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | (bytes[i + 3]));                  if (code > 0x10FFFF) {                      throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                  } else if (code > 0xFFFF) {                      chars[j] = UnicodeToUTF16(code);                      j++;                  } else {                      if (code >= 0xD800 && code <= 0xDFFF) {                          throw new SgmlParseException(string.Format(CultureInfo.CurrentUICulture' "Invalid character 0x{0:x} in encoding"' code));                      } else {                          chars[j] = (char)code;                      }                  }                  j++;                  i += 4;              }
Magic Number,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,Init,The following statement contains a magic number: this.m_stack = new HWStack(10);
Magic Number,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseComment,The following statement contains a magic number: while (i >= 0)              {                  int j = i + 2;                  while (j < value.Length && value[j] == '-')                      j++;                    if (i > 0)                  {                      value = value.Substring(0' i - 1) + "-" + value.Substring(j);                  }                   else                  {                      value = "-" + value.Substring(j);                  }                    i = value.IndexOf("--");              }
Magic Number,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ValidateContent,The following statement contains a magic number: if (this.m_dtd != null)              {                  // See if this element is allowed inside the current element.                  // If it isn't' then auto-close elements until we find one                  // that it is allowed to be in.                                                    string name = node.Name.ToUpperInvariant(); // DTD is in upper case                  int i = 0;                  int top = this.m_stack.Count - 2;                  if (node.DtdType != null) {                       // it is a known element' let's see if it's allowed in the                      // current context.                      for (i = top; i > 0; i--)                      {                          Node n = (Node)this.m_stack[i];                          if (n.IsEmpty)                              continue; // we'll have to pop this one                          ElementDecl f = n.DtdType;                          if (f != null)                          {                              if ((i == 2) && string.Equals(f.Name' "BODY"' StringComparison.OrdinalIgnoreCase)) // NOTE (steveb): never close the BODY tag too early                                  break;                              else if (string.Equals(f.Name' this.m_dtd.Name' StringComparison.OrdinalIgnoreCase))                                  break; // can't pop the root element.                              else if (f.CanContain(name' this.m_dtd))                              {                                  break;                              }                              else if (!f.EndTagOptional)                              {                                  // If the end tag is not optional then we can't                                  // auto-close it.  We'll just have to live with the                                  // junk we've found and move on.                                  break;                              }                          }                           else                          {                              // Since we don't understand this tag anyway'                              // we might as well allow this content!                              break;                          }                      }                  }                    if (i == 0)                  {                      // Tag was not found or is not allowed anywhere' ignore it and                       // continue on.                      return;                  }                  else if (i < top)                  {                      Node n = (Node)this.m_stack[top];                      if (i == top - 1 && string.Equals(name' n.Name' StringComparison.OrdinalIgnoreCase))                      {                          // e.g. p not allowed inside p' not an interesting error.                      }                      else                      {  #if DEBUG                          string closing = "";                          for (int k = top; k >= i+1; k--) {                              if (closing != "") closing += "'";                              Node n2 = (Node)this.m_stack[k];                              closing += "<" + n2.Name + ">";                          }                          Log("Element '{0}' not allowed inside '{1}'' closing {2}."' name' n.Name' closing);  #endif                      }                        this.m_state = State.AutoClose;                      this.m_newnode = node;                      Pop(); // save this new node until we pop the others                      this.m_poptodepth = i + 1;                  }              }
Magic Number,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ValidateContent,The following statement contains a magic number: if (this.m_dtd != null)              {                  // See if this element is allowed inside the current element.                  // If it isn't' then auto-close elements until we find one                  // that it is allowed to be in.                                                    string name = node.Name.ToUpperInvariant(); // DTD is in upper case                  int i = 0;                  int top = this.m_stack.Count - 2;                  if (node.DtdType != null) {                       // it is a known element' let's see if it's allowed in the                      // current context.                      for (i = top; i > 0; i--)                      {                          Node n = (Node)this.m_stack[i];                          if (n.IsEmpty)                              continue; // we'll have to pop this one                          ElementDecl f = n.DtdType;                          if (f != null)                          {                              if ((i == 2) && string.Equals(f.Name' "BODY"' StringComparison.OrdinalIgnoreCase)) // NOTE (steveb): never close the BODY tag too early                                  break;                              else if (string.Equals(f.Name' this.m_dtd.Name' StringComparison.OrdinalIgnoreCase))                                  break; // can't pop the root element.                              else if (f.CanContain(name' this.m_dtd))                              {                                  break;                              }                              else if (!f.EndTagOptional)                              {                                  // If the end tag is not optional then we can't                                  // auto-close it.  We'll just have to live with the                                  // junk we've found and move on.                                  break;                              }                          }                           else                          {                              // Since we don't understand this tag anyway'                              // we might as well allow this content!                              break;                          }                      }                  }                    if (i == 0)                  {                      // Tag was not found or is not allowed anywhere' ignore it and                       // continue on.                      return;                  }                  else if (i < top)                  {                      Node n = (Node)this.m_stack[top];                      if (i == top - 1 && string.Equals(name' n.Name' StringComparison.OrdinalIgnoreCase))                      {                          // e.g. p not allowed inside p' not an interesting error.                      }                      else                      {  #if DEBUG                          string closing = "";                          for (int k = top; k >= i+1; k--) {                              if (closing != "") closing += "'";                              Node n2 = (Node)this.m_stack[k];                              closing += "<" + n2.Name + ">";                          }                          Log("Element '{0}' not allowed inside '{1}'' closing {2}."' name' n.Name' closing);  #endif                      }                        this.m_state = State.AutoClose;                      this.m_newnode = node;                      Pop(); // save this new node until we pop the others                      this.m_poptodepth = i + 1;                  }              }
Missing Default,Sgml,Entity,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,SetLiteralType,The following switch statement is missing a default case: switch (token)              {                  case "CDATA":                      this.m_literalType = LiteralType.CDATA;                      break;                  case "SDATA":                      this.m_literalType = LiteralType.SDATA;                      break;                  case "PI":                      this.m_literalType = LiteralType.PI;                      break;              }
Missing Default,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following switch statement is missing a default case: switch (w) {                      case 0xfefffeff:                           index += 4;                           return new Ucs4DecoderBigEngian();                        case 0xfffefffe:                           index += 4;                           return new Ucs4DecoderLittleEndian();                        case 0x3c000000:                           goto case 0xfefffeff;                        case 0x0000003c:                           goto case 0xfffefffe;                  }
Missing Default,Sgml,HtmlStream,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following switch statement is missing a default case: switch (w) {                      case 0xfeff:                           index += 2;                           return UnicodeEncoding.BigEndianUnicode.GetDecoder();                        case 0xfffe:                           index += 2;                           return new UnicodeEncoding(false' false).GetDecoder();                        case 0x3c00:                           goto case 0xfeff;                        case 0x003c:                           goto case 0xfffe;                  }
Missing Default,Sgml,Group,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AddConnector,The following switch statement is missing a default case: switch (c)               {                  case ''':                       gt = GroupType.Sequence;                      break;                  case '|':                      gt = GroupType.Or;                      break;                  case '&':                      gt = GroupType.And;                      break;              }
Missing Default,Sgml,Group,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlParser.cs,AddOccurrence,The following switch statement is missing a default case: switch (c)               {                  case '?':                       o = Occurrence.Optional;                      break;                  case '+':                      o = Occurrence.OneOrMore;                      break;                  case '*':                      o = Occurrence.ZeroOrMore;                      break;              }
Missing Default,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,Read,The following switch statement is missing a default case: switch (this.m_state)                  {                      case State.Initial:                          this.m_state = State.Markup;                          this.m_current.ReadChar();                          goto case State.Markup;                      case State.Eof:                          if (this.m_current.Parent != null)                          {                              this.m_current.Close();                              this.m_current = this.m_current.Parent;                          }                          else                          {                                                         return false;                          }                          break;                      case State.EndTag:                          if (string.Equals(this.m_endTag' this.m_node.Name' StringComparison.OrdinalIgnoreCase))                          {                              Pop(); // we're done!                              this.m_state = State.Markup;                              goto case State.Markup;                          }                                               Pop(); // close one element                          foundnode = true;// return another end element.                          break;                      case State.Markup:                          if (this.m_node.IsEmpty)                          {                              Pop();                          }                          Node n = this.m_node;                          foundnode = ParseMarkup();                          break;                      case State.PartialTag:                          Pop(); // remove text node.                          this.m_state = State.Markup;                          foundnode = ParseTag(this.m_partial);                          break;                      case State.PseudoStartTag:                          foundnode = ParseStartTag('<');                                                  break;                      case State.AutoClose:                          Pop(); // close next node.                          if (this.m_stack.Count <= this.m_poptodepth)                          {                              this.m_state = State.Markup;                              if (this.m_newnode != null)                              {                                  Push(this.m_newnode); // now we're ready to start the new node.                                  this.m_newnode = null;                                  this.m_state = State.Markup;                              }                              else if (this.m_node.NodeType == XmlNodeType.Document)                              {                                  this.m_state = State.Eof;                                  goto case State.Eof;                              }                          }                           foundnode = true;                          break;                      case State.CData:                          foundnode = ParseCData();                          break;                      case State.Attr:                          goto case State.AttrValue;                      case State.AttrValue:                          this.m_state = State.Markup;                          goto case State.Markup;                      case State.Text:                          Pop();                          goto case State.Markup;                      case State.PartialText:                          if (ParseText(this.m_current.Lastchar' false))                          {                              this.m_node.NodeType = XmlNodeType.Whitespace;                          }                            foundnode = true;                          break;                  }
Missing Default,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ScanName,The following switch statement is missing a default case: switch (this.m_folding)              {                  case CaseFolding.ToUpper:                      name = name.ToUpperInvariant();                      break;                  case CaseFolding.ToLower:                      name = name.ToLowerInvariant();                      break;              }
Missing Default,Sgml,SgmlReader,C:\repos\marek-stoj_NReadability\Src\SgmlReader 1.8.7\sgmlreaderdll\SgmlReader.cs,ParseCData,The following switch statement is missing a default case: switch (this.m_partial)                  {                      case '!':                          this.m_partial = ' '; // and pop the comment next time around                          return ParseComment();                      case '?':                          this.m_partial = ' '; // and pop the PI next time around                          return ParsePI();                      case '/':                          this.m_state = State.EndTag;                          return true;    // we are done!                      case ' ':                          break; // means we just needed to pop the Comment' PI or CDATA.                  }
