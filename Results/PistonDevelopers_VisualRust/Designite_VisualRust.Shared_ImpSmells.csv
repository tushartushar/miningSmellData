Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,Cyclomatic complexity of the method is 8
Long Parameter List,VisualRust.Shared.Message,RustcMessageHuman,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHuman.cs,RustcMessageHuman,The method has 8 parameters. Parameters: type' message' errorCode' file' lineNumber' columnNumber' endLineNumber' endColumnNumber
Long Statement,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The length of the statement  "                    // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea) " is 121.
Long Statement,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The length of the statement  "                        // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same " is 127.
Long Statement,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The length of the statement  "                    string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0)); " is 142.
Complex Conditional,VisualRust.Shared.Message,RustcMessageHuman,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHuman.cs,TryMergeWithFollowing,The conditional expression  "(other.Type == RustcMessageType.Note || other.Type == RustcMessageType.Help)                  && other.File == this.File && other.LineNumber == this.LineNumber && other.ColumnNumber == this.ColumnNumber &&                  other.EndLineNumber == this.EndLineNumber && other.EndColumnNumber == this.EndColumnNumber"  is complex.
Magic Number,VisualRust.Shared,Cargo,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Cargo.cs,FindSupportedInstallation,The following statement contains a magic number: var installPath = Environment.GetAllInstallPaths()                  .Select(p => Path.Combine(Path.Combine(p' "bin")' "cargo.exe"))                  .FirstOrDefault(p => {                      if (!File.Exists(p)) return false;                      var version = GetCargoVersion(p);                      return version.HasValue && version.Value.Date >= new DateTime(2016' 10' 06);                  });
Magic Number,VisualRust.Shared,Cargo,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Cargo.cs,FindSupportedInstallation,The following statement contains a magic number: var installPath = Environment.GetAllInstallPaths()                  .Select(p => Path.Combine(Path.Combine(p' "bin")' "cargo.exe"))                  .FirstOrDefault(p => {                      if (!File.Exists(p)) return false;                      var version = GetCargoVersion(p);                      return version.HasValue && version.Value.Date >= new DateTime(2016' 10' 06);                  });
Magic Number,VisualRust.Shared,Cargo,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Cargo.cs,FindSupportedInstallation,The following statement contains a magic number: var installPath = Environment.GetAllInstallPaths()                  .Select(p => Path.Combine(Path.Combine(p' "bin")' "cargo.exe"))                  .FirstOrDefault(p => {                      if (!File.Exists(p)) return false;                      var version = GetCargoVersion(p);                      return version.HasValue && version.Value.Date >= new DateTime(2016' 10' 06);                  });
Magic Number,VisualRust.Shared,Cargo,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Cargo.cs,GetHostTargetTripleAsync,The following statement contains a magic number: if (hostMatch.Groups.Count < 2)                  return null;
Magic Number,VisualRust.Shared,CommandHelper,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\CommandHelper.cs,EscapeArguments,The following statement contains a magic number: for (int carg = 0; args != null && carg < args.Length; carg++)              {                  if (args[carg] == null) { throw new ArgumentNullException("args[" + carg + "]"); }                  if (escapeInvalidChar.IsMatch(args[carg])) { throw new ArgumentOutOfRangeException("args[" + carg + "]"); }                  if (args[carg] == String.Empty) { arguments.Append("\"\""); }                  else if (!escapeNeedsQuotes.IsMatch(args[carg])) { arguments.Append(args[carg]); }                  else                  {                      arguments.Append('"');                      arguments.Append(escapeEscapeQuote.Replace(args[carg]' m =>                      m.Groups[1].Value + m.Groups[1].Value +                      (m.Groups[2].Value == "\"" ? "\\\"" : "")                      ));                      arguments.Append('"');                  }                  if (carg + 1 < args.Length)                      arguments.Append(' ');              }
Magic Number,VisualRust.Shared,TargetTriple,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\TargetTriple.cs,Create,The following statement contains a magic number: if (parts.Length < 3)                  return null;              else if (parts.Length < 4)                  abi = "";              else if (parts.Length == 4)                  abi = parts[3];              else                  return null;
Magic Number,VisualRust.Shared,TargetTriple,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\TargetTriple.cs,Create,The following statement contains a magic number: if (parts.Length < 3)                  return null;              else if (parts.Length < 4)                  abi = "";              else if (parts.Length == 4)                  abi = parts[3];              else                  return null;
Magic Number,VisualRust.Shared,TargetTriple,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\TargetTriple.cs,Create,The following statement contains a magic number: if (parts.Length < 3)                  return null;              else if (parts.Length < 4)                  abi = "";              else if (parts.Length == 4)                  abi = parts[3];              else                  return null;
Magic Number,VisualRust.Shared,TargetTriple,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\TargetTriple.cs,Create,The following statement contains a magic number: if (parts.Length < 3)                  return null;              else if (parts.Length < 4)                  abi = "";              else if (parts.Length == 4)                  abi = parts[3];              else                  return null;
Magic Number,VisualRust.Shared,TargetTriple,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\TargetTriple.cs,Create,The following statement contains a magic number: return new TargetTriple(parts[0]' parts[1]' parts[2]' abi);
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: if (!uint.TryParse(match.Groups[2].Value' out major)) return null;
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: if (!uint.TryParse(match.Groups[3].Value' out minor)) return null;
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: if (!uint.TryParse(match.Groups[4].Value' out patch)) return null;
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: string preRelease = match.Groups[6].Value;
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: string gitHash = match.Groups[7].Value;
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: if (!int.TryParse(match.Groups[8].Value' out year)) return null;
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: if (!int.TryParse(match.Groups[9].Value' out month)) return null;
Magic Number,VisualRust.Shared,ToolVersion,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\ToolVersion.cs,Parse,The following statement contains a magic number: if (!int.TryParse(match.Groups[10].Value' out day)) return null;
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
Magic Number,VisualRust.Shared.Message,RustcMessageHumanParser,C:\repos\PistonDevelopers_VisualRust\src\VisualRust.Shared\Message\RustcMessageHumanParser.cs,Parse,The following statement contains a magic number: foreach (Match match in errorMatches)              {                  string remainingMsg = match.Groups[6].Value.Trim();                  Match errorMatch = errorCodeRegex.Match(remainingMsg);                  string errorCode = errorMatch.Success ? errorMatch.Groups[1].Value : null;                  int line = Int32.Parse(match.Groups[2].Value' NumberStyles.None);                  int col = Int32.Parse(match.Groups[3].Value' NumberStyles.None);                  int endLine = Int32.Parse(match.Groups[4].Value' NumberStyles.None);                  int endCol = Int32.Parse(match.Groups[5].Value' NumberStyles.None);                    if (remainingMsg.StartsWith("warning: "))                  {                      string msg = match.Groups[6].Value.Substring(9' match.Groups[6].Value.Length - 9 - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Warning' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }                  else if (remainingMsg.StartsWith("note: ") || remainingMsg.StartsWith("help: "))                  {                      if (remainingMsg.StartsWith("help: pass `--explain ") && previous != null)                      {                          previous.CanExplain = true;                          continue;                      }                        // NOTE: "note: " and "help: " are both 6 characters long (though hardcoding this is probably still not a very good idea)                      string msg = remainingMsg.Substring(6' remainingMsg.Length - 6 - (errorCode != null ? 8 : 0));                      var type = remainingMsg.StartsWith("note: ") ? RustcMessageType.Note : RustcMessageType.Help;                      RustcMessageHuman note = new RustcMessageHuman(type' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                        if (previous != null)                      {                          // try to merge notes and help messages with a previous message (warning or error where it belongs to)' if the span is the same                          if (previous.TryMergeWithFollowing(note))                          {                              continue; // skip setting new previous' because we successfully merged the new note into the previous message                          }                          else                          {                              yield return previous;                          }                      }                      previous = note;                  }                  else                  {                      bool startsWithError = remainingMsg.StartsWith("error: ");                      string msg = remainingMsg.Substring((startsWithError ? 7 : 0)' remainingMsg.Length - (startsWithError ? 7 : 0) - (errorCode != null ? 8 : 0));                      if (previous != null) yield return previous;                      previous = new RustcMessageHuman(RustcMessageType.Error' msg' errorCode' match.Groups[1].Value'                          line' col' endLine' endCol);                  }              }
