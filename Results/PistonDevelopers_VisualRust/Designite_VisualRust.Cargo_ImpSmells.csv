Implementation smell,Namespace,Class,File,Method,Description
Long Statement,VisualRust.Cargo,Manifest,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\Manifest.cs,GetString,The length of the statement  "                    using (StringQueryResult ffiResult = Rust.Call(SafeNativeMethods.get_string' manifest' new RawSlice(arr' buffers.Length))) " is 122.
Long Statement,VisualRust.Cargo,Manifest,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\Manifest.cs,GetStringArray,The length of the statement  "                    using (StringArrayQueryResult ffiResult = Rust.Call(SafeNativeMethods.get_string_array' manifest' new RawSlice(arr' buffers.Length))) " is 133.
Magic Number,VisualRust.Cargo,Manifest,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\Manifest.cs,Validate,The following statement contains a magic number: List<FieldMalformedError> errors = new List<FieldMalformedError>(2);
Missing Default,VisualRust.Cargo,OutputTargetTypeExtensions,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\OutputTargetType.cs,FromString,The following switch statement is missing a default case: switch(type)              {                  case "lib":                      return OutputTargetType.Library;                  case "bin":                      return OutputTargetType.Binary;                  case "bench":                      return OutputTargetType.Benchmark;                  case "test":                      return OutputTargetType.Test;                  case "example":                      return OutputTargetType.Example;              }
Missing Default,VisualRust.Cargo,OutputTargetTypeExtensions,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\OutputTargetType.cs,ToTypeString,The following switch statement is missing a default case: switch(type)              {                  case OutputTargetType.Library:                      return "lib";                  case OutputTargetType.Binary:                      return "bin";                  case OutputTargetType.Benchmark:                      return "bench";                  case OutputTargetType.Test:                      return "test";                  case OutputTargetType.Example:                      return "example";              }
Missing Default,VisualRust.Cargo,OutputTargetTypeExtensions,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\OutputTargetType.cs,DefaultPath,The following switch statement is missing a default case: switch(type)              {                  case OutputTargetType.Library:                      return String.Format(@"src\{0}.rs"' name);                  case OutputTargetType.Binary:                      return String.Format(@"src\{0}.rs"' name);                  case OutputTargetType.Benchmark:                      return String.Format(@"benches\{0}.rs"' name);                  case OutputTargetType.Test:                      return String.Format(@"tests\{0}.rs"' name);                  case OutputTargetType.Example:                      return String.Format(@"examples\{0}.rs"' name);              }
Missing Default,VisualRust.Cargo,TrileanExtensions,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\Trilean.cs,ToBool,The following switch statement is missing a default case: switch(value)              {                  case Trilean.False:                      return false;                  case Trilean.True:                      return true;                  case Trilean.Unknown:                      return null;              }
Missing Default,VisualRust.Cargo,TrileanExtensions,C:\research\architectureSmells\repos\PistonDevelopers_VisualRust\src\VisualRust.Cargo\Trilean.cs,ToTrilean,The following switch statement is missing a default case: switch(value)              {                  case false:                      return Trilean.False;                  case true:                      return Trilean.True;                  case null:                      return Trilean.Unknown;              }
