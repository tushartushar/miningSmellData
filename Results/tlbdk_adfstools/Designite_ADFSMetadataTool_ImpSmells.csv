Implementation smell,Namespace,Class,File,Method,Description
Long Method,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The method has 103 lines of code.
Complex Method,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,Cyclomatic complexity of the method is 14
Complex Method,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ImportADFSMetadata,Cyclomatic complexity of the method is 9
Complex Method,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,Cyclomatic complexity of the method is 17
Complex Method,NDesk.Options,Option,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,Option,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Complex Method,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,GetLines,Cyclomatic complexity of the method is 8
Complex Method,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,GetLineEnd,Cyclomatic complexity of the method is 11
Long Parameter List,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,GetOptionParts,The method has 5 parameters.
Long Statement,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The length of the statement  "	string samplespath = Path.GetFullPath (Path.GetDirectoryName (Assembly.GetExecutingAssembly ().Location) + "../../../samples"); " is 127.
Long Statement,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ImportADFSMetadata,The length of the statement  "	addRelyingPartyTrustCommand.IssuanceAuthorizationRules = "@RuleTemplate = \"AllowAllAuthzRule\"\r\n" + " => issue(Type = \"http://schemas.microsoft.com/authorization/claims/permit\"' Value = \"true\");"; " is 203.
Long Statement,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The length of the statement  "			metadata.Extensions = new EntityDescriptorExtensions (rp.Name' rp.IssuanceTransformRules.Trim ()' rp.IssuanceAuthorizationRules.Trim ()); " is 137.
Long Statement,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The length of the statement  "				match = Regex.Match (rp.OrganizationInfo' @"\s*Technical Contact:\s+Name:\s*(.+?)\s*Emails:\s+(.+?)\s+Telephones:\s+(.+?)\s+"' RegexOptions.Singleline); " is 152.
Long Statement,NDesk.Options,OptionValueCollection,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,NDesk.Options,Option,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' typeof(T).Name' c.OptionName)' c.OptionName' e); " is 192.
Long Statement,NDesk.Options,Option,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,NDesk.Options,Option,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' StringSplitOptions.None) : new string[] { " is 137.
Long Statement,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Complex Conditional,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The conditional expression  "show_help || (command == "import" && arguments.Count == 0) || (command == "export" && arguments.Count != 1)"  is complex.
Complex Conditional,NDesk.Options,Option,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length > 1) {  		command = args [0];  		args = ArrayRemoveAt (args' 0);  		// shift one value for the array  		arguments = p.Parse (args);  	}  	else {  		p.Parse (args);  	}  	if (show_help || (command == "import" && arguments.Count == 0) || (command == "export" && arguments.Count != 1)) {  		ShowHelp (p);  		return 255;  	}  }  catch (OptionException e) {  	Console.WriteLine ("Unknown options or missing command");  	return 255;  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length > 1) {  		command = args [0];  		args = ArrayRemoveAt (args' 0);  		// shift one value for the array  		arguments = p.Parse (args);  	}  	else {  		p.Parse (args);  	}  	if (show_help || (command == "import" && arguments.Count == 0) || (command == "export" && arguments.Count != 1)) {  		ShowHelp (p);  		return 255;  	}  }  catch (OptionException e) {  	Console.WriteLine ("Unknown options or missing command");  	return 255;  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The following statement contains a magic number: if (show_help || (command == "import" && arguments.Count == 0) || (command == "export" && arguments.Count != 1)) {  	ShowHelp (p);  	return 255;  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The following statement contains a magic number: return 255;  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The following statement contains a magic number: return 255;  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The following statement contains a magic number: switch (command) {  case "import":  	foreach (var argument in arguments) {  		if (File.Exists (argument)) {  			Console.WriteLine ("{0}"' argument);  			ImportADFSMetadata (argument);  		}  		else if (Directory.Exists (argument)) {  			string[] files = Directory.GetFiles (argument' "*.xml"' SearchOption.AllDirectories);  			foreach (var file in files) {  				Console.WriteLine ("{0}"' file);  				ImportADFSMetadata (file);  			}  		}  		else {  			Console.WriteLine ("Could not open directory {0}"' argument);  		}  	}  	return 0;  case "export":  	ExportADFSMetadata (arguments [0]);  	return 0;  default:  	Console.WriteLine ("Unknown command");  	ShowHelp (p);  	return 255;  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,Main,The following statement contains a magic number: return 255;  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: foreach (object obj in result) {  	var rp = obj as RelyingPartyTrust;  	foreach (var id in rp.Identifier) {  		// Skip if disabled  		if (!rp.Enabled) {  			continue;  		}  		var filename = MakeSafeFilename ("metadata-" + id.Replace ("https://"' "").Replace ("http://"' "").TrimEnd (new[] {  			'/'  		})' '-') + ".xml";  		Console.WriteLine ("Exporting " + rp.Name + " to " + filename);  		var metadata = new ADFSMetadata ("abcd1"' id);  		metadata.Extensions = new EntityDescriptorExtensions (rp.Name' rp.IssuanceTransformRules.Trim ()' rp.IssuanceAuthorizationRules.Trim ());  		metadata.Extensions.signatureAlgorithm = rp.SignatureAlgorithm;  		if (rp.SamlEndpoints.Length > 0) {  			metadata.SPSSODescriptor = new EntityDescriptorSPSSODescriptor ();  			metadata.SPSSODescriptor.NameIDFormat = new string[] {  				"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"'  				"urn:oasis:names:tc:SAML:2.0:nameid-format:transient"'  				"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"'  				"urn:oasis:names:tc:SAML:1.1:nameid-format:persistent"'  				"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"  			};  			var consumers = new List<EntityDescriptorSPSSODescriptorAssertionConsumerService> ();  			var logouts = new List<EntityDescriptorSPSSODescriptorSingleLogoutService> ();  			for (int i = 0; i < rp.SamlEndpoints.Length; i++) {  				if (rp.SamlEndpoints [i].Protocol == "SAMLAssertionConsumer") {  					consumers.Add (new EntityDescriptorSPSSODescriptorAssertionConsumerService () {  						Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  						index = rp.SamlEndpoints [i].Index'  						isDefault = rp.SamlEndpoints [i].IsDefault'  						Location = rp.SamlEndpoints [i].Location.ToString ()  					});  				}  				else if (rp.SamlEndpoints [i].Protocol == "SAMLLogout") {  					logouts.Add (new EntityDescriptorSPSSODescriptorSingleLogoutService () {  						Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  						Location = rp.SamlEndpoints [i].Location.ToString ()  					});  				}  			}  			metadata.SPSSODescriptor.AssertionConsumerService = consumers.ToArray ();  			metadata.SPSSODescriptor.SingleLogoutService = logouts.ToArray ();  		}  		// TODO: Export RequestSigningCertificate  		if (rp.RequestSigningCertificate.Count > 0) {  			//Convert.ToBase64String(rp.RequestSigningCertificate[0].RawData);  		}  		if (rp.WSFedEndpoint != null) {  			metadata.RoleDescriptor = new WSFederationApplicationServiceTypeRoleDescriptor ();  			metadata.RoleDescriptor.TargetScopes = new TargetScope[1] {  				new TargetScope (rp.WSFedEndpoint.ToString ())  			};  			metadata.RoleDescriptor.PassiveRequestorEndpoint = new PassiveRequestorEndpoint (rp.WSFedEndpoint.ToString ());  		}  		if (!String.IsNullOrEmpty (rp.OrganizationInfo)) {  			string orgname = null;  			string orgurl = null;  			string techname = null;  			string techemail = null;  			string techphone = null;  			var match = Regex.Match (rp.OrganizationInfo' @"\s*Organization Names:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  			if (match.Success) {  				orgname = match.Groups [1].Value;  			}  			match = Regex.Match (rp.OrganizationInfo' @"\s*Organization URLs:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  			if (match.Success) {  				orgurl = match.Groups [1].Value;  			}  			if (!String.IsNullOrEmpty (orgname)) {  				metadata.Organization = new EntityDescriptorOrganization (orgname' orgname' orgurl);  			}  			else {  				metadata.Organization = new EntityDescriptorOrganization (rp.OrganizationInfo' " "' orgurl);  			}  			match = Regex.Match (rp.OrganizationInfo' @"\s*Technical Contact:\s+Name:\s*(.+?)\s*Emails:\s+(.+?)\s+Telephones:\s+(.+?)\s+"' RegexOptions.Singleline);  			if (match.Success) {  				techname = match.Groups [1].Value;  				techemail = match.Groups [2].Value;  				techphone = match.Groups [3].Value;  			}  			if (!String.IsNullOrEmpty (techname)) {  				metadata.ContactPerson = new EntityDescriptorContactPerson ();  				metadata.ContactPerson.GivenName = techname;  				metadata.ContactPerson.TelephoneNumber = techphone;  				metadata.ContactPerson.EmailAddress = techemail;  				metadata.ContactPerson.contactType = "technical";  			}  		}  		metadata.SerializeToFile (Path.Combine (outdir' filename));  	}  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: foreach (object obj in result) {  	var rp = obj as RelyingPartyTrust;  	foreach (var id in rp.Identifier) {  		// Skip if disabled  		if (!rp.Enabled) {  			continue;  		}  		var filename = MakeSafeFilename ("metadata-" + id.Replace ("https://"' "").Replace ("http://"' "").TrimEnd (new[] {  			'/'  		})' '-') + ".xml";  		Console.WriteLine ("Exporting " + rp.Name + " to " + filename);  		var metadata = new ADFSMetadata ("abcd1"' id);  		metadata.Extensions = new EntityDescriptorExtensions (rp.Name' rp.IssuanceTransformRules.Trim ()' rp.IssuanceAuthorizationRules.Trim ());  		metadata.Extensions.signatureAlgorithm = rp.SignatureAlgorithm;  		if (rp.SamlEndpoints.Length > 0) {  			metadata.SPSSODescriptor = new EntityDescriptorSPSSODescriptor ();  			metadata.SPSSODescriptor.NameIDFormat = new string[] {  				"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"'  				"urn:oasis:names:tc:SAML:2.0:nameid-format:transient"'  				"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"'  				"urn:oasis:names:tc:SAML:1.1:nameid-format:persistent"'  				"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"  			};  			var consumers = new List<EntityDescriptorSPSSODescriptorAssertionConsumerService> ();  			var logouts = new List<EntityDescriptorSPSSODescriptorSingleLogoutService> ();  			for (int i = 0; i < rp.SamlEndpoints.Length; i++) {  				if (rp.SamlEndpoints [i].Protocol == "SAMLAssertionConsumer") {  					consumers.Add (new EntityDescriptorSPSSODescriptorAssertionConsumerService () {  						Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  						index = rp.SamlEndpoints [i].Index'  						isDefault = rp.SamlEndpoints [i].IsDefault'  						Location = rp.SamlEndpoints [i].Location.ToString ()  					});  				}  				else if (rp.SamlEndpoints [i].Protocol == "SAMLLogout") {  					logouts.Add (new EntityDescriptorSPSSODescriptorSingleLogoutService () {  						Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  						Location = rp.SamlEndpoints [i].Location.ToString ()  					});  				}  			}  			metadata.SPSSODescriptor.AssertionConsumerService = consumers.ToArray ();  			metadata.SPSSODescriptor.SingleLogoutService = logouts.ToArray ();  		}  		// TODO: Export RequestSigningCertificate  		if (rp.RequestSigningCertificate.Count > 0) {  			//Convert.ToBase64String(rp.RequestSigningCertificate[0].RawData);  		}  		if (rp.WSFedEndpoint != null) {  			metadata.RoleDescriptor = new WSFederationApplicationServiceTypeRoleDescriptor ();  			metadata.RoleDescriptor.TargetScopes = new TargetScope[1] {  				new TargetScope (rp.WSFedEndpoint.ToString ())  			};  			metadata.RoleDescriptor.PassiveRequestorEndpoint = new PassiveRequestorEndpoint (rp.WSFedEndpoint.ToString ());  		}  		if (!String.IsNullOrEmpty (rp.OrganizationInfo)) {  			string orgname = null;  			string orgurl = null;  			string techname = null;  			string techemail = null;  			string techphone = null;  			var match = Regex.Match (rp.OrganizationInfo' @"\s*Organization Names:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  			if (match.Success) {  				orgname = match.Groups [1].Value;  			}  			match = Regex.Match (rp.OrganizationInfo' @"\s*Organization URLs:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  			if (match.Success) {  				orgurl = match.Groups [1].Value;  			}  			if (!String.IsNullOrEmpty (orgname)) {  				metadata.Organization = new EntityDescriptorOrganization (orgname' orgname' orgurl);  			}  			else {  				metadata.Organization = new EntityDescriptorOrganization (rp.OrganizationInfo' " "' orgurl);  			}  			match = Regex.Match (rp.OrganizationInfo' @"\s*Technical Contact:\s+Name:\s*(.+?)\s*Emails:\s+(.+?)\s+Telephones:\s+(.+?)\s+"' RegexOptions.Singleline);  			if (match.Success) {  				techname = match.Groups [1].Value;  				techemail = match.Groups [2].Value;  				techphone = match.Groups [3].Value;  			}  			if (!String.IsNullOrEmpty (techname)) {  				metadata.ContactPerson = new EntityDescriptorContactPerson ();  				metadata.ContactPerson.GivenName = techname;  				metadata.ContactPerson.TelephoneNumber = techphone;  				metadata.ContactPerson.EmailAddress = techemail;  				metadata.ContactPerson.contactType = "technical";  			}  		}  		metadata.SerializeToFile (Path.Combine (outdir' filename));  	}  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: foreach (var id in rp.Identifier) {  	// Skip if disabled  	if (!rp.Enabled) {  		continue;  	}  	var filename = MakeSafeFilename ("metadata-" + id.Replace ("https://"' "").Replace ("http://"' "").TrimEnd (new[] {  		'/'  	})' '-') + ".xml";  	Console.WriteLine ("Exporting " + rp.Name + " to " + filename);  	var metadata = new ADFSMetadata ("abcd1"' id);  	metadata.Extensions = new EntityDescriptorExtensions (rp.Name' rp.IssuanceTransformRules.Trim ()' rp.IssuanceAuthorizationRules.Trim ());  	metadata.Extensions.signatureAlgorithm = rp.SignatureAlgorithm;  	if (rp.SamlEndpoints.Length > 0) {  		metadata.SPSSODescriptor = new EntityDescriptorSPSSODescriptor ();  		metadata.SPSSODescriptor.NameIDFormat = new string[] {  			"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"'  			"urn:oasis:names:tc:SAML:2.0:nameid-format:transient"'  			"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"'  			"urn:oasis:names:tc:SAML:1.1:nameid-format:persistent"'  			"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"  		};  		var consumers = new List<EntityDescriptorSPSSODescriptorAssertionConsumerService> ();  		var logouts = new List<EntityDescriptorSPSSODescriptorSingleLogoutService> ();  		for (int i = 0; i < rp.SamlEndpoints.Length; i++) {  			if (rp.SamlEndpoints [i].Protocol == "SAMLAssertionConsumer") {  				consumers.Add (new EntityDescriptorSPSSODescriptorAssertionConsumerService () {  					Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  					index = rp.SamlEndpoints [i].Index'  					isDefault = rp.SamlEndpoints [i].IsDefault'  					Location = rp.SamlEndpoints [i].Location.ToString ()  				});  			}  			else if (rp.SamlEndpoints [i].Protocol == "SAMLLogout") {  				logouts.Add (new EntityDescriptorSPSSODescriptorSingleLogoutService () {  					Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  					Location = rp.SamlEndpoints [i].Location.ToString ()  				});  			}  		}  		metadata.SPSSODescriptor.AssertionConsumerService = consumers.ToArray ();  		metadata.SPSSODescriptor.SingleLogoutService = logouts.ToArray ();  	}  	// TODO: Export RequestSigningCertificate  	if (rp.RequestSigningCertificate.Count > 0) {  		//Convert.ToBase64String(rp.RequestSigningCertificate[0].RawData);  	}  	if (rp.WSFedEndpoint != null) {  		metadata.RoleDescriptor = new WSFederationApplicationServiceTypeRoleDescriptor ();  		metadata.RoleDescriptor.TargetScopes = new TargetScope[1] {  			new TargetScope (rp.WSFedEndpoint.ToString ())  		};  		metadata.RoleDescriptor.PassiveRequestorEndpoint = new PassiveRequestorEndpoint (rp.WSFedEndpoint.ToString ());  	}  	if (!String.IsNullOrEmpty (rp.OrganizationInfo)) {  		string orgname = null;  		string orgurl = null;  		string techname = null;  		string techemail = null;  		string techphone = null;  		var match = Regex.Match (rp.OrganizationInfo' @"\s*Organization Names:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  		if (match.Success) {  			orgname = match.Groups [1].Value;  		}  		match = Regex.Match (rp.OrganizationInfo' @"\s*Organization URLs:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  		if (match.Success) {  			orgurl = match.Groups [1].Value;  		}  		if (!String.IsNullOrEmpty (orgname)) {  			metadata.Organization = new EntityDescriptorOrganization (orgname' orgname' orgurl);  		}  		else {  			metadata.Organization = new EntityDescriptorOrganization (rp.OrganizationInfo' " "' orgurl);  		}  		match = Regex.Match (rp.OrganizationInfo' @"\s*Technical Contact:\s+Name:\s*(.+?)\s*Emails:\s+(.+?)\s+Telephones:\s+(.+?)\s+"' RegexOptions.Singleline);  		if (match.Success) {  			techname = match.Groups [1].Value;  			techemail = match.Groups [2].Value;  			techphone = match.Groups [3].Value;  		}  		if (!String.IsNullOrEmpty (techname)) {  			metadata.ContactPerson = new EntityDescriptorContactPerson ();  			metadata.ContactPerson.GivenName = techname;  			metadata.ContactPerson.TelephoneNumber = techphone;  			metadata.ContactPerson.EmailAddress = techemail;  			metadata.ContactPerson.contactType = "technical";  		}  	}  	metadata.SerializeToFile (Path.Combine (outdir' filename));  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: foreach (var id in rp.Identifier) {  	// Skip if disabled  	if (!rp.Enabled) {  		continue;  	}  	var filename = MakeSafeFilename ("metadata-" + id.Replace ("https://"' "").Replace ("http://"' "").TrimEnd (new[] {  		'/'  	})' '-') + ".xml";  	Console.WriteLine ("Exporting " + rp.Name + " to " + filename);  	var metadata = new ADFSMetadata ("abcd1"' id);  	metadata.Extensions = new EntityDescriptorExtensions (rp.Name' rp.IssuanceTransformRules.Trim ()' rp.IssuanceAuthorizationRules.Trim ());  	metadata.Extensions.signatureAlgorithm = rp.SignatureAlgorithm;  	if (rp.SamlEndpoints.Length > 0) {  		metadata.SPSSODescriptor = new EntityDescriptorSPSSODescriptor ();  		metadata.SPSSODescriptor.NameIDFormat = new string[] {  			"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"'  			"urn:oasis:names:tc:SAML:2.0:nameid-format:transient"'  			"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"'  			"urn:oasis:names:tc:SAML:1.1:nameid-format:persistent"'  			"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"  		};  		var consumers = new List<EntityDescriptorSPSSODescriptorAssertionConsumerService> ();  		var logouts = new List<EntityDescriptorSPSSODescriptorSingleLogoutService> ();  		for (int i = 0; i < rp.SamlEndpoints.Length; i++) {  			if (rp.SamlEndpoints [i].Protocol == "SAMLAssertionConsumer") {  				consumers.Add (new EntityDescriptorSPSSODescriptorAssertionConsumerService () {  					Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  					index = rp.SamlEndpoints [i].Index'  					isDefault = rp.SamlEndpoints [i].IsDefault'  					Location = rp.SamlEndpoints [i].Location.ToString ()  				});  			}  			else if (rp.SamlEndpoints [i].Protocol == "SAMLLogout") {  				logouts.Add (new EntityDescriptorSPSSODescriptorSingleLogoutService () {  					Binding = rp.SamlEndpoints [i].BindingUri.ToString ()'  					Location = rp.SamlEndpoints [i].Location.ToString ()  				});  			}  		}  		metadata.SPSSODescriptor.AssertionConsumerService = consumers.ToArray ();  		metadata.SPSSODescriptor.SingleLogoutService = logouts.ToArray ();  	}  	// TODO: Export RequestSigningCertificate  	if (rp.RequestSigningCertificate.Count > 0) {  		//Convert.ToBase64String(rp.RequestSigningCertificate[0].RawData);  	}  	if (rp.WSFedEndpoint != null) {  		metadata.RoleDescriptor = new WSFederationApplicationServiceTypeRoleDescriptor ();  		metadata.RoleDescriptor.TargetScopes = new TargetScope[1] {  			new TargetScope (rp.WSFedEndpoint.ToString ())  		};  		metadata.RoleDescriptor.PassiveRequestorEndpoint = new PassiveRequestorEndpoint (rp.WSFedEndpoint.ToString ());  	}  	if (!String.IsNullOrEmpty (rp.OrganizationInfo)) {  		string orgname = null;  		string orgurl = null;  		string techname = null;  		string techemail = null;  		string techphone = null;  		var match = Regex.Match (rp.OrganizationInfo' @"\s*Organization Names:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  		if (match.Success) {  			orgname = match.Groups [1].Value;  		}  		match = Regex.Match (rp.OrganizationInfo' @"\s*Organization URLs:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  		if (match.Success) {  			orgurl = match.Groups [1].Value;  		}  		if (!String.IsNullOrEmpty (orgname)) {  			metadata.Organization = new EntityDescriptorOrganization (orgname' orgname' orgurl);  		}  		else {  			metadata.Organization = new EntityDescriptorOrganization (rp.OrganizationInfo' " "' orgurl);  		}  		match = Regex.Match (rp.OrganizationInfo' @"\s*Technical Contact:\s+Name:\s*(.+?)\s*Emails:\s+(.+?)\s+Telephones:\s+(.+?)\s+"' RegexOptions.Singleline);  		if (match.Success) {  			techname = match.Groups [1].Value;  			techemail = match.Groups [2].Value;  			techphone = match.Groups [3].Value;  		}  		if (!String.IsNullOrEmpty (techname)) {  			metadata.ContactPerson = new EntityDescriptorContactPerson ();  			metadata.ContactPerson.GivenName = techname;  			metadata.ContactPerson.TelephoneNumber = techphone;  			metadata.ContactPerson.EmailAddress = techemail;  			metadata.ContactPerson.contactType = "technical";  		}  	}  	metadata.SerializeToFile (Path.Combine (outdir' filename));  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: if (!String.IsNullOrEmpty (rp.OrganizationInfo)) {  	string orgname = null;  	string orgurl = null;  	string techname = null;  	string techemail = null;  	string techphone = null;  	var match = Regex.Match (rp.OrganizationInfo' @"\s*Organization Names:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  	if (match.Success) {  		orgname = match.Groups [1].Value;  	}  	match = Regex.Match (rp.OrganizationInfo' @"\s*Organization URLs:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  	if (match.Success) {  		orgurl = match.Groups [1].Value;  	}  	if (!String.IsNullOrEmpty (orgname)) {  		metadata.Organization = new EntityDescriptorOrganization (orgname' orgname' orgurl);  	}  	else {  		metadata.Organization = new EntityDescriptorOrganization (rp.OrganizationInfo' " "' orgurl);  	}  	match = Regex.Match (rp.OrganizationInfo' @"\s*Technical Contact:\s+Name:\s*(.+?)\s*Emails:\s+(.+?)\s+Telephones:\s+(.+?)\s+"' RegexOptions.Singleline);  	if (match.Success) {  		techname = match.Groups [1].Value;  		techemail = match.Groups [2].Value;  		techphone = match.Groups [3].Value;  	}  	if (!String.IsNullOrEmpty (techname)) {  		metadata.ContactPerson = new EntityDescriptorContactPerson ();  		metadata.ContactPerson.GivenName = techname;  		metadata.ContactPerson.TelephoneNumber = techphone;  		metadata.ContactPerson.EmailAddress = techemail;  		metadata.ContactPerson.contactType = "technical";  	}  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: if (!String.IsNullOrEmpty (rp.OrganizationInfo)) {  	string orgname = null;  	string orgurl = null;  	string techname = null;  	string techemail = null;  	string techphone = null;  	var match = Regex.Match (rp.OrganizationInfo' @"\s*Organization Names:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  	if (match.Success) {  		orgname = match.Groups [1].Value;  	}  	match = Regex.Match (rp.OrganizationInfo' @"\s*Organization URLs:\s+(.+?)\s*\r?\n\r?\n"' RegexOptions.Singleline);  	if (match.Success) {  		orgurl = match.Groups [1].Value;  	}  	if (!String.IsNullOrEmpty (orgname)) {  		metadata.Organization = new EntityDescriptorOrganization (orgname' orgname' orgurl);  	}  	else {  		metadata.Organization = new EntityDescriptorOrganization (rp.OrganizationInfo' " "' orgurl);  	}  	match = Regex.Match (rp.OrganizationInfo' @"\s*Technical Contact:\s+Name:\s*(.+?)\s*Emails:\s+(.+?)\s+Telephones:\s+(.+?)\s+"' RegexOptions.Singleline);  	if (match.Success) {  		techname = match.Groups [1].Value;  		techemail = match.Groups [2].Value;  		techphone = match.Groups [3].Value;  	}  	if (!String.IsNullOrEmpty (techname)) {  		metadata.ContactPerson = new EntityDescriptorContactPerson ();  		metadata.ContactPerson.GivenName = techname;  		metadata.ContactPerson.TelephoneNumber = techphone;  		metadata.ContactPerson.EmailAddress = techemail;  		metadata.ContactPerson.contactType = "technical";  	}  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: if (match.Success) {  	techname = match.Groups [1].Value;  	techemail = match.Groups [2].Value;  	techphone = match.Groups [3].Value;  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: if (match.Success) {  	techname = match.Groups [1].Value;  	techemail = match.Groups [2].Value;  	techphone = match.Groups [3].Value;  }  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: techemail = match.Groups [2].Value;  
Magic Number,ADFSMetadataTool,Program,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Program.cs,ExportADFSMetadata,The following statement contains a magic number: techphone = match.Groups [3].Value;  
Magic Number,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	List<string> lines = GetLines (localizer (GetDescription (p.Description)));  	o.WriteLine (lines [0]);  	string prefix = new string (' '' OptionWidth + 2);  	for (int i = 1; i < lines.Count; ++i) {  		o.Write (prefix);  		o.WriteLine (lines [i]);  	}  }  
Missing Default,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
Missing Default,NDesk.Options,OptionSet,C:\repos\tlbdk_adfstools\ADFSMetadataTool\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description [i]) {  case ' ':  case '\t':  case '\v':  case '-':  case ''':  case '.':  case ';':  	sep = i;  	break;  case '\n':  	return i;  }  
