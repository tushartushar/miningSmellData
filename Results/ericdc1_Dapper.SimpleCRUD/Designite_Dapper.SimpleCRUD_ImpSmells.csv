Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,Insert,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,InsertAsync,Cyclomatic complexity of the method is 8
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetList,The method has 5 parameters. Parameters: connection' conditions' parameters' transaction' commandTimeout
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetListPaged,The method has 8 parameters. Parameters: connection' pageNumber' rowsPerPage' conditions' orderby' parameters' transaction' commandTimeout
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,DeleteList,The method has 5 parameters. Parameters: connection' conditions' parameters' transaction' commandTimeout
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,RecordCount,The method has 5 parameters. Parameters: connection' conditions' parameters' transaction' commandTimeout
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetListAsync,The method has 5 parameters. Parameters: connection' conditions' parameters' transaction' commandTimeout
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetListPagedAsync,The method has 8 parameters. Parameters: connection' pageNumber' rowsPerPage' conditions' orderby' parameters' transaction' commandTimeout
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,UpdateAsync,The method has 5 parameters. Parameters: connection' entityToUpdate' transaction' commandTimeout' token
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,DeleteListAsync,The method has 5 parameters. Parameters: connection' conditions' parameters' transaction' commandTimeout
Long Parameter List,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,RecordCountAsync,The method has 5 parameters. Parameters: connection' conditions' parameters' transaction' commandTimeout
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SetDialect,The length of the statement  "                    _getPagedListSql = "Select {SelectColumns} from {TableName} {WhereClause} Order By {OrderBy} LIMIT {RowsPerPage} OFFSET (({PageNumber}-1) * {RowsPerPage})"; " is 156.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SetDialect,The length of the statement  "                    _getPagedListSql = "Select {SelectColumns} from {TableName} {WhereClause} Order By {OrderBy} LIMIT {RowsPerPage} OFFSET (({PageNumber}-1) * {RowsPerPage})"; " is 156.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SetDialect,The length of the statement  "                    _getPagedListSql = "Select {SelectColumns} from {TableName} {WhereClause} Order By {OrderBy} LIMIT {Offset}'{RowsPerPage}"; " is 123.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SetDialect,The length of the statement  "                    _getPagedListSql = "SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY {OrderBy}) AS PagedNumber' {SelectColumns} FROM {TableName} {WhereClause}) AS u WHERE PagedNumber BETWEEN (({PageNumber}-1) * {RowsPerPage} + 1) AND ({PageNumber} * {RowsPerPage})"; " is 250.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,Insert,The length of the statement  "            if (keytype != typeof(int) && keytype != typeof(uint) && keytype != typeof(long) && keytype != typeof(ulong) && keytype != typeof(short) && keytype != typeof(ushort) && keytype != typeof(Guid) && keytype != typeof(string)) " is 222.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,Insert,The length of the statement  "            if ((keytype == typeof(int) || keytype == typeof(long)) && Convert.ToInt64(idProps.First().GetValue(entityToInsert' null)) == 0) " is 128.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildSelect,The length of the statement  "                    if (property.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(IgnoreSelectAttribute).Name || attr.GetType().Name == typeof(NotMappedAttribute).Name)) continue; " is 178.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildSelect,The length of the statement  "                    if (property.GetCustomAttributes(true).SingleOrDefault(attr => attr.GetType().Name == typeof(ColumnAttribute).Name) != null) " is 124.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildWhere,The length of the statement  "                //the anonymous object used for search doesn't have the custom attributes attached to them so this allows us to build the correct where clause " is 142.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildWhere,The length of the statement  "                        if (whereConditions != null && propertyToUse.CanRead && (propertyToUse.GetValue(whereConditions' null) == null || propertyToUse.GetValue(whereConditions' null) == DBNull.Value)) " is 177.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertValues,The length of the statement  "                    if (property.Name.Equals("Id"' StringComparison.OrdinalIgnoreCase) && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name) && property.PropertyType != typeof(Guid)) continue; " is 223.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertParameters,The length of the statement  "                    if (property.Name.Equals("Id"' StringComparison.OrdinalIgnoreCase) && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name) && property.PropertyType != typeof(Guid)) continue; " is 223.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetScaffoldableProperties,The length of the statement  "            props = props.Where(p => p.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(EditableAttribute).Name && !IsEditable(p)) == false); " is 148.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetUpdateableProperties,The length of the statement  "            updateableProperties = updateableProperties.Where(p => p.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name) == false); " is 155.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetUpdateableProperties,The length of the statement  "            updateableProperties = updateableProperties.Where(p => p.GetCustomAttributes(true).Any(attr => (attr.GetType().Name == typeof(ReadOnlyAttribute).Name) && IsReadOnly(p)) == false); " is 179.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetUpdateableProperties,The length of the statement  "            updateableProperties = updateableProperties.Where(p => p.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(IgnoreUpdateAttribute).Name) == false); " is 164.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetUpdateableProperties,The length of the statement  "            updateableProperties = updateableProperties.Where(p => p.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(NotMappedAttribute).Name) == false); " is 161.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,GetIdProperties,The length of the statement  "            var tp = type.GetProperties().Where(p => p.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name)).ToList(); " is 141.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,InsertAsync,The length of the statement  "            if (keytype != typeof(int) && keytype != typeof(uint) && keytype != typeof(long) && keytype != typeof(ulong) && keytype != typeof(short) && keytype != typeof(ushort) && keytype != typeof(Guid) && keytype != typeof(string)) " is 222.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,InsertAsync,The length of the statement  "            if ((keytype == typeof(int) || keytype == typeof(long)) && Convert.ToInt64(idProps.First().GetValue(entityToInsert' null)) == 0) " is 128.
Long Statement,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,UpdateAsync,The length of the statement  "            return connection.ExecuteAsync(new CommandDefinition(sb.ToString()' entityToUpdate' transaction' commandTimeout' cancellationToken: cancelToken)); " is 146.
Long Statement,Dapper,TableNameResolver,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,ResolveTableName,The length of the statement  "                var tableattr = type.GetCustomAttributes(true).SingleOrDefault(attr => attr.GetType().Name == typeof(TableAttribute).Name) as dynamic; " is 134.
Long Statement,Dapper,ColumnNameResolver,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,ResolveColumnName,The length of the statement  "                var columnattr = propertyInfo.GetCustomAttributes(true).SingleOrDefault(attr => attr.GetType().Name == typeof(ColumnAttribute).Name) as dynamic; " is 144.
Complex Conditional,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,Insert,The conditional expression  "keytype != typeof(int) && keytype != typeof(uint) && keytype != typeof(long) && keytype != typeof(ulong) && keytype != typeof(short) && keytype != typeof(ushort) && keytype != typeof(Guid) && keytype != typeof(string)"  is complex.
Complex Conditional,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildWhere,The conditional expression  "whereConditions != null && propertyToUse.CanRead && (propertyToUse.GetValue(whereConditions' null) == null || propertyToUse.GetValue(whereConditions' null) == DBNull.Value)"  is complex.
Complex Conditional,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertValues,The conditional expression  "property.PropertyType != typeof(Guid) && property.PropertyType != typeof(string)                            && property.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name)                            && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name)"  is complex.
Complex Conditional,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertValues,The conditional expression  "property.GetCustomAttributes(true).Any(attr =>                          attr.GetType().Name == typeof(IgnoreInsertAttribute).Name ||                          attr.GetType().Name == typeof(NotMappedAttribute).Name ||                          attr.GetType().Name == typeof(ReadOnlyAttribute).Name && IsReadOnly(property))"  is complex.
Complex Conditional,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertParameters,The conditional expression  "property.PropertyType != typeof(Guid) && property.PropertyType != typeof(string)                            && property.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name)                            && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name)"  is complex.
Complex Conditional,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertParameters,The conditional expression  "property.GetCustomAttributes(true).Any(attr =>                          attr.GetType().Name == typeof(IgnoreInsertAttribute).Name ||                          attr.GetType().Name == typeof(NotMappedAttribute).Name ||                          attr.GetType().Name == typeof(ReadOnlyAttribute).Name && IsReadOnly(property))"  is complex.
Complex Conditional,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,InsertAsync,The conditional expression  "keytype != typeof(int) && keytype != typeof(uint) && keytype != typeof(long) && keytype != typeof(ulong) && keytype != typeof(short) && keytype != typeof(ushort) && keytype != typeof(Guid) && keytype != typeof(string)"  is complex.
Empty Catch Block,Dapper,TableNameResolver,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,ResolveTableName,The method has an empty catch block.
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertValues,The following statement contains a magic number: StringBuilderCache(masterSb' $"{typeof(T).FullName}_BuildInsertValues"' sb =>              {                    var props = GetScaffoldableProperties<T>().ToArray();                  for (var i = 0; i < props.Count(); i++)                  {                      var property = props.ElementAt(i);                      if (property.PropertyType != typeof(Guid) && property.PropertyType != typeof(string)                            && property.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name)                            && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name))                          continue;                      if (property.GetCustomAttributes(true).Any(attr =>                          attr.GetType().Name == typeof(IgnoreInsertAttribute).Name ||                          attr.GetType().Name == typeof(NotMappedAttribute).Name ||                          attr.GetType().Name == typeof(ReadOnlyAttribute).Name && IsReadOnly(property))                      ) continue;                        if (property.Name.Equals("Id"' StringComparison.OrdinalIgnoreCase) && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name) && property.PropertyType != typeof(Guid)) continue;                        sb.AppendFormat("@{0}"' property.Name);                      if (i < props.Count() - 1)                          sb.Append("' ");                  }                  if (sb.ToString().EndsWith("' "))                      sb.Remove(sb.Length - 2' 2);              });
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertValues,The following statement contains a magic number: StringBuilderCache(masterSb' $"{typeof(T).FullName}_BuildInsertValues"' sb =>              {                    var props = GetScaffoldableProperties<T>().ToArray();                  for (var i = 0; i < props.Count(); i++)                  {                      var property = props.ElementAt(i);                      if (property.PropertyType != typeof(Guid) && property.PropertyType != typeof(string)                            && property.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name)                            && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name))                          continue;                      if (property.GetCustomAttributes(true).Any(attr =>                          attr.GetType().Name == typeof(IgnoreInsertAttribute).Name ||                          attr.GetType().Name == typeof(NotMappedAttribute).Name ||                          attr.GetType().Name == typeof(ReadOnlyAttribute).Name && IsReadOnly(property))                      ) continue;                        if (property.Name.Equals("Id"' StringComparison.OrdinalIgnoreCase) && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name) && property.PropertyType != typeof(Guid)) continue;                        sb.AppendFormat("@{0}"' property.Name);                      if (i < props.Count() - 1)                          sb.Append("' ");                  }                  if (sb.ToString().EndsWith("' "))                      sb.Remove(sb.Length - 2' 2);              });
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertParameters,The following statement contains a magic number: StringBuilderCache(masterSb' $"{typeof(T).FullName}_BuildInsertParameters"' sb =>              {                  var props = GetScaffoldableProperties<T>().ToArray();                    for (var i = 0; i < props.Count(); i++)                  {                      var property = props.ElementAt(i);                      if (property.PropertyType != typeof(Guid) && property.PropertyType != typeof(string)                            && property.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name)                            && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name))                          continue;                      if (property.GetCustomAttributes(true).Any(attr =>                          attr.GetType().Name == typeof(IgnoreInsertAttribute).Name ||                          attr.GetType().Name == typeof(NotMappedAttribute).Name ||                          attr.GetType().Name == typeof(ReadOnlyAttribute).Name && IsReadOnly(property))) continue;                        if (property.Name.Equals("Id"' StringComparison.OrdinalIgnoreCase) && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name) && property.PropertyType != typeof(Guid)) continue;                        sb.Append(GetColumnName(property));                      if (i < props.Count() - 1)                          sb.Append("' ");                  }                  if (sb.ToString().EndsWith("' "))                      sb.Remove(sb.Length - 2' 2);              });
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,BuildInsertParameters,The following statement contains a magic number: StringBuilderCache(masterSb' $"{typeof(T).FullName}_BuildInsertParameters"' sb =>              {                  var props = GetScaffoldableProperties<T>().ToArray();                    for (var i = 0; i < props.Count(); i++)                  {                      var property = props.ElementAt(i);                      if (property.PropertyType != typeof(Guid) && property.PropertyType != typeof(string)                            && property.GetCustomAttributes(true).Any(attr => attr.GetType().Name == typeof(KeyAttribute).Name)                            && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name))                          continue;                      if (property.GetCustomAttributes(true).Any(attr =>                          attr.GetType().Name == typeof(IgnoreInsertAttribute).Name ||                          attr.GetType().Name == typeof(NotMappedAttribute).Name ||                          attr.GetType().Name == typeof(ReadOnlyAttribute).Name && IsReadOnly(property))) continue;                        if (property.Name.Equals("Id"' StringComparison.OrdinalIgnoreCase) && property.GetCustomAttributes(true).All(attr => attr.GetType().Name != typeof(RequiredAttribute).Name) && property.PropertyType != typeof(Guid)) continue;                        sb.Append(GetColumnName(property));                      if (i < props.Count() - 1)                          sb.Append("' ");                  }                  if (sb.ToString().EndsWith("' "))                      sb.Remove(sb.Length - 2' 2);              });
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SequentialGuid,The following statement contains a magic number: bytes[3] = (byte)time.Year;
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SequentialGuid,The following statement contains a magic number: bytes[2] = (byte)time.Month;
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SequentialGuid,The following statement contains a magic number: bytes[5] = (byte)time.Minute;
Magic Number,Dapper,SimpleCRUD,D:\research\architectureSmells\repos\ericdc1_Dapper.SimpleCRUD\Dapper.SimpleCRUD\SimpleCRUD.cs,SequentialGuid,The following statement contains a magic number: bytes[4] = (byte)time.Second;
