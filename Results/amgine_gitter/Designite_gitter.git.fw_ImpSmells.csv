Implementation smell,Namespace,Class,File,Method,Description
Complex Method,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,CompareTo,Cyclomatic complexity of the method is 9
Long Parameter List,gitter,Argument,C:\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter,Argument,C:\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter.Git,BlameCommit,C:\repos\amgine_gitter\gitter.git.fw.prj\Blame\BlameCommit.cs,BlameCommit,The method has 12 parameters. Parameters: hash' author' authorEmail' authorDate' authorTimeZone' committer' committerEmail' commitDate' committerTimeZone' summary' isBoundary' previous
Long Parameter List,gitter.Git,DiffFile,C:\repos\amgine_gitter\gitter.git.fw.prj\Diff\DiffFile.cs,DiffFile,The method has 10 parameters. Parameters: oldIndex' newIndex' oldMode' newMode' sourceFile' targetFile' status' hunks' isBinary' stats
Long Parameter List,gitter.Git,DiffLine,C:\repos\amgine_gitter\gitter.git.fw.prj\Diff\DiffLine.cs,DiffLine,The method has 5 parameters. Parameters: state' states' nums' text' ending
Long Parameter List,gitter.Git,TreeDirectoryData,C:\repos\amgine_gitter\gitter.git.fw.prj\Data\TreeDirectoryData.cs,TreeDirectoryData,The method has 5 parameters. Parameters: name' shortName' parent' fileStatus' stagedStatus
Long Parameter List,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The method has 5 parameters. Parameters: part0' part1' part2' part3' part4
Long Parameter List,gitter.Git.AccessLayer,ObjectCountData,C:\repos\amgine_gitter\gitter.git.fw.prj\Data\ObjectCountData.cs,ObjectCountData,The method has 7 parameters. Parameters: count' size' inPack' packs' sizePack' prunePackable' garbage
Long Parameter List,gitter.Git.AccessLayer,BranchData,C:\repos\amgine_gitter\gitter.git.fw.prj\Data\BranchData.cs,BranchData,The method has 5 parameters. Parameters: name' sha1' isFake' isRemote' isCurrent
Long Parameter List,gitter.Git.AccessLayer,StatusData,C:\repos\amgine_gitter\gitter.git.fw.prj\Data\StatusData.cs,StatusData,The method has 9 parameters. Parameters: stagedFiles' unstagedFiles' unstagedUntrackedCount' unstagedRemovedCount' unstagedModifiedCount' unmergedCount' stagedAddedCount' stagedModifiedCount' stagedRemovedCount
Long Parameter List,gitter.Git.AccessLayer,CreateBranchParameters,C:\repos\amgine_gitter\gitter.git.fw.prj\Parameters\Branch\CreateBranchParameters.cs,CreateBranchParameters,The method has 6 parameters. Parameters: branchName' startingRevision' checkout' orphan' createReflog' trackingMode
Complex Conditional,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The conditional expression  "TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4)"  is complex.
Complex Conditional,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The conditional expression  "TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4)"  is complex.
Complex Conditional,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The conditional expression  "TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4)"  is complex.
Complex Conditional,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The conditional expression  "TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4)"  is complex.
Magic Number,gitter.Git,DiffHunk,C:\repos\amgine_gitter\gitter.git.fw.prj\Diff\DiffHunk.cs,Cut,The following statement contains a magic number: if(from == 1 && to == _lines.Count - 1)  			{  				// copy whole hunk  				var lines = new List<DiffLine>(_lines.Count);  				lines.AddRange(_lines);  				return new DiffHunk(_headers' lines' _stats.Clone()' _isBinary);  			}  			else  			{  				var lines = new List<DiffLine>(to - from + 2);  				// prepare new header  				int rf = _lines[from].Nums[0];  				int af = _lines[from].Nums[1];  				int rc = 0;  				int ac = 0;  				for(int i = from; i <= to; ++i)  				{  					switch(_lines[i].State)  					{  						case DiffLineState.Removed:  							++rc;  							break;  						case DiffLineState.Added:  							++ac;  							break;  						case DiffLineState.Context:  							++rc;  							++ac;  							break;  					}  				}  				var culture = System.Globalization.CultureInfo.InvariantCulture;  				var header = new DiffLine(  					DiffLineState.Header'  					new [] { DiffLineState.Header' DiffLineState.Header }'  					new [] { 0' 0 }'  					string.Format(culture' "@@ -{0}'{1} +{2}'{3} @@"' rf' rc' af' ac)'  					LineEnding.Lf);  				lines.Add(header);  				var stats = new DiffStats();  				stats.Increment(header.State);  				// copy lines  				for(int i = from; i <= to; ++i)  				{  					var line = _lines[i];  					lines.Add(line);  					stats.Increment(line.State);  				}  				return new DiffHunk(new[]  					{  						new DiffColumnHeader(DiffColumnAction.Remove' rf' rc)'  						new DiffColumnHeader(DiffColumnAction.Add' af' ac)  					}' lines' stats' _isBinary);  			}
Magic Number,gitter.Git,GitUtils,C:\repos\amgine_gitter\gitter.git.fw.prj\GitUtils.cs,IsValidSHA1,The following statement contains a magic number: if(hash.Length != 40) return false;
Magic Number,gitter.Git,GitUtils,C:\repos\amgine_gitter\gitter.git.fw.prj\GitUtils.cs,IsValidSHA1,The following statement contains a magic number: for(int i = 0; i < 40; ++i)  			{  				if(!Uri.IsHexDigit(hash[i])) return false;  			}
Magic Number,gitter.Git,GitUtils,C:\repos\amgine_gitter\gitter.git.fw.prj\GitUtils.cs,IsValidPartialSHA1,The following statement contains a magic number: if(hash.Length > 40) return false;
Magic Number,gitter.Git,GitUtils,C:\repos\amgine_gitter\gitter.git.fw.prj\GitUtils.cs,GetHumanishName,The following statement contains a magic number: if(".git".Equals(str))  			{  				return strArray2[strArray2.Length - 2];  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParseCharToHexDigit,The following statement contains a magic number: if(digit < 0 || digit > 9)  			{  				digit = ch - 'a';  				if(digit >= 0 && digit <= 5)  				{  					digit += 10;  				}  				else  				{  					digit = ch - 'A';  					if(digit >= 0 && digit <= 5)  					{  						digit += 10;  					}  					else  					{  						return -1;  					}  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParseCharToHexDigit,The following statement contains a magic number: if(digit < 0 || digit > 9)  			{  				digit = ch - 'a';  				if(digit >= 0 && digit <= 5)  				{  					digit += 10;  				}  				else  				{  					digit = ch - 'A';  					if(digit >= 0 && digit <= 5)  					{  						digit += 10;  					}  					else  					{  						return -1;  					}  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParseCharToHexDigit,The following statement contains a magic number: if(digit < 0 || digit > 9)  			{  				digit = ch - 'a';  				if(digit >= 0 && digit <= 5)  				{  					digit += 10;  				}  				else  				{  					digit = ch - 'A';  					if(digit >= 0 && digit <= 5)  					{  						digit += 10;  					}  					else  					{  						return -1;  					}  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParseCharToHexDigit,The following statement contains a magic number: if(digit < 0 || digit > 9)  			{  				digit = ch - 'a';  				if(digit >= 0 && digit <= 5)  				{  					digit += 10;  				}  				else  				{  					digit = ch - 'A';  					if(digit >= 0 && digit <= 5)  					{  						digit += 10;  					}  					else  					{  						return -1;  					}  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParseCharToHexDigit,The following statement contains a magic number: if(digit < 0 || digit > 9)  			{  				digit = ch - 'a';  				if(digit >= 0 && digit <= 5)  				{  					digit += 10;  				}  				else  				{  					digit = ch - 'A';  					if(digit >= 0 && digit <= 5)  					{  						digit += 10;  					}  					else  					{  						return -1;  					}  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					return false;  				}  				part = (part << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					return false;  				}  				part = (part << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					return false;  				}  				part = (part << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					return false;  				}  				part = (part << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					throw new ArgumentException("Argument must contain hexadecimal string representation of the hash."' "hash");  				}  				result = (result << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					throw new ArgumentException("Argument must contain hexadecimal string representation of the hash."' "hash");  				}  				result = (result << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					throw new ArgumentException("Argument must contain hexadecimal string representation of the hash."' "hash");  				}  				result = (result << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ParsePart,The following statement contains a magic number: for(int i = 0; i < 8; ++i)  			{  				int digit = TryParseCharToHexDigit(hash[offset + i]);  				if(digit < 0)  				{  					throw new ArgumentException("Argument must contain hexadecimal string representation of the hash."' "hash");  				}  				result = (result << 4) + (uint)digit;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ParsePart,The following statement contains a magic number: for(int i = 0; i < 4; ++i)  			{  				result = (result << 8) + (uint)hash[offset++];  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ParsePart,The following statement contains a magic number: for(int i = 0; i < 4; ++i)  			{  				result = (result << 8) + (uint)hash[offset++];  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 28) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[0] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[0] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 24) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[1] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[1] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 20) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[2] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[2] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[2] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 16) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[3] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[3] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[3] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 12) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[4] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[4] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[4] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >>  8) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[5] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[5] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[5] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >>  4) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[6] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[6] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[6] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[7] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[7] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[7] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 28) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[0] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[0] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 24) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[1] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[1] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 20) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[2] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[2] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[2] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 16) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[3] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[3] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[3] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >> 12) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[4] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[4] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[4] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >>  8) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[5] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[5] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[5] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: digit = (part >>  4) & 0x0f;
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[6] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[6] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[6] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[7] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[7] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: buffer[7] = digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0; i -= 4)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0; i -= 4)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0; i -= 4)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0; i -= 4)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0 && length > 0; i -= 4' --length)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0 && length > 0; i -= 4' --length)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0 && length > 0; i -= 4' --length)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,DumpPart,The following statement contains a magic number: for(int i = 28; i >= 0 && length > 0; i -= 4' --length)  			{  				uint digit = (part >> i) & 0x0f;  				stringBuilder.Append(digit > 9 ? (char)('a' + digit - 10) : (char)('0' + digit));  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if(str == null || str.Length < 40)  			{  				hash = default(Hash);  				return false;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if(str == null || offset < 0 || str.Length - offset < 40)  			{  				hash = default(Hash);  				return false;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if(str == null || str.Length < 40)  			{  				hash = default(Hash);  				return false;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0' out part0) &&  				TryParsePart(str'  8' out part1) &&  				TryParsePart(str' 16' out part2) &&  				TryParsePart(str' 24' out part3) &&  				TryParsePart(str' 32' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if(str == null || offset < 0 || str.Length - offset < 40)  			{  				hash = default(Hash);  				return false;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,TryParse,The following statement contains a magic number: if (TryParsePart(str'  0 + offset' out part0) &&  				TryParsePart(str'  8 + offset' out part1) &&  				TryParsePart(str' 16 + offset' out part2) &&  				TryParsePart(str' 24 + offset' out part3) &&  				TryParsePart(str' 32 + offset' out part4))  			{  				hash = new Hash(part0' part1' part2' part3' part4);  				return true;  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: Verify.Argument.IsTrue(hash.Length >= 20' "hash"' "Hash must be at least 20 bytes long.");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part1 = ParsePart(hash'  4);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part2 = ParsePart(hash'  8);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part3 = ParsePart(hash' 12);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part4 = ParsePart(hash' 16);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: Verify.Argument.IsInRange(0' offset' hash.Length - 20' "hash"' "Hash must be at least 20 bytes long after offset.");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part1 = ParsePart(hash'  4 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part2 = ParsePart(hash'  8 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part3 = ParsePart(hash' 12 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part4 = ParsePart(hash' 16 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: Verify.Argument.IsTrue(hash.Length >= 40' "hash"' "Hash must be at least 40 characters long.");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part1 = ParsePart(hash'  8);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part2 = ParsePart(hash' 16);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part3 = ParsePart(hash' 24);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part4 = ParsePart(hash' 32);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: Verify.Argument.IsInRange(0' offset' hash.Length - 40' "hash"' "Hash must be at least 40 characters long after offset.");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part1 = ParsePart(hash'  8 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part2 = ParsePart(hash' 16 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part3 = ParsePart(hash' 24 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part4 = ParsePart(hash' 32 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: Verify.Argument.IsTrue(hash.Length >= 40' "hash"' "Hash must be at least 40 characters long.");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part1 = ParsePart(hash'  8);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part2 = ParsePart(hash' 16);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part3 = ParsePart(hash' 24);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part4 = ParsePart(hash' 32);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: Verify.Argument.IsInRange(0' offset' hash.Length - 40' "hash"' "Hash must be at least 40 characters long after offset.");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part1 = ParsePart(hash'  8 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part2 = ParsePart(hash' 16 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part3 = ParsePart(hash' 24 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,Hash,The following statement contains a magic number: _part4 = ParsePart(hash' 32 + offset);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: var buffer = new byte[20];
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = buffer)  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = buffer)  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = buffer)  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = buffer)  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: Verify.Argument.IsInRange(0' offset' buffer.Length - 20' "offset");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = &buffer[offset])  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = &buffer[offset])  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = &buffer[offset])  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToByteArray,The following statement contains a magic number: unsafe  			{  				fixed(byte* ptr = &buffer[offset])  				{  					*(uint*)(ptr +  0) = _part0;  					*(uint*)(ptr +  4) = _part1;  					*(uint*)(ptr +  8) = _part2;  					*(uint*)(ptr + 12) = _part3;  					*(uint*)(ptr + 16) = _part4;  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: var str = Utility.FastAllocateString(40);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0);  					DumpPart(_part1' buffer +  8);  					DumpPart(_part2' buffer + 16);  					DumpPart(_part3' buffer + 24);  					DumpPart(_part4' buffer + 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0);  					DumpPart(_part1' buffer +  8);  					DumpPart(_part2' buffer + 16);  					DumpPart(_part3' buffer + 24);  					DumpPart(_part4' buffer + 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0);  					DumpPart(_part1' buffer +  8);  					DumpPart(_part2' buffer + 16);  					DumpPart(_part3' buffer + 24);  					DumpPart(_part4' buffer + 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0);  					DumpPart(_part1' buffer +  8);  					DumpPart(_part2' buffer + 16);  					DumpPart(_part3' buffer + 24);  					DumpPart(_part4' buffer + 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: Verify.Argument.IsInRange(0' length' 40' "length");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: if(length == 40)  			{  				return ToString();  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: unsafe  			{  				fixed(char* buffer = str)  				{  					DumpPart(_part0' buffer +  0' length -  0);  					DumpPart(_part1' buffer +  8' length -  8);  					DumpPart(_part2' buffer + 16' length - 16);  					DumpPart(_part3' buffer + 24' length - 24);  					DumpPart(_part4' buffer + 32' length - 32);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: Verify.Argument.IsInRange(0' length' 40' "length");
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: DumpPart(_part1' stringBuilder' length -= 8);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: DumpPart(_part2' stringBuilder' length -= 8);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: DumpPart(_part3' stringBuilder' length -= 8);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: DumpPart(_part4' stringBuilder' length -= 8);
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: if(string.IsNullOrWhiteSpace(format))  			{  				return ToString();  			}  			else  			{  				int length;  				if(!int.TryParse(format' NumberStyles.Integer' CultureInfo.InvariantCulture' out length))  				{  					throw new FormatException("Unable to parse hash length.");  				}  				if(length < 0 || length > 40)  				{  					throw new FormatException("Length must be in [0; 40] range.");  				}  				if(length == 40)  				{  					return ToString();  				}  				else  				{  					return ToString(length);  				}  			}
Magic Number,gitter.Git,Hash,C:\repos\amgine_gitter\gitter.git.fw.prj\Hash.cs,ToString,The following statement contains a magic number: if(string.IsNullOrWhiteSpace(format))  			{  				return ToString();  			}  			else  			{  				int length;  				if(!int.TryParse(format' NumberStyles.Integer' CultureInfo.InvariantCulture' out length))  				{  					throw new FormatException("Unable to parse hash length.");  				}  				if(length < 0 || length > 40)  				{  					throw new FormatException("Length must be in [0; 40] range.");  				}  				if(length == 40)  				{  					return ToString();  				}  				else  				{  					return ToString(length);  				}  			}
Magic Number,gitter.Git,HashStringCache,C:\repos\amgine_gitter\gitter.git.fw.prj\HashStringCache.cs,CreateString,The following statement contains a magic number: var value = length == 40 ? hash.ToString() : hash.ToString(length);
Missing Default,gitter.Git,DiffHunk,C:\repos\amgine_gitter\gitter.git.fw.prj\Diff\DiffHunk.cs,Cut,The following switch statement is missing a default case: switch(_lines[i].State)  					{  						case DiffLineState.Removed:  							++rc;  							break;  						case DiffLineState.Added:  							++ac;  							break;  						case DiffLineState.Context:  							++rc;  							++ac;  							break;  					}
