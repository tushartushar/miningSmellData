Implementation smell,Namespace,Class,File,Method,Description
Long Method,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The method has 112 lines of code.
Long Method,gitter.Git,RemoteReferencesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemoteReferencesCollection.cs,OnFetchCompleted,The method has 117 lines of code.
Long Method,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnGitDirDeleted,The method has 111 lines of code.
Complex Method,gitter.Git,ObjectFactories,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\ObjectFactories.cs,UpdateRevision,Cyclomatic complexity of the method is 19
Complex Method,gitter.Git,ObjectFactories,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\ObjectFactories.cs,CreateRevision,Cyclomatic complexity of the method is 11
Complex Method,gitter.Git,IndexChangesDiffSource,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Diff\IndexChangesDiffSource.cs,Equals,Cyclomatic complexity of the method is 11
Complex Method,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,Cyclomatic complexity of the method is 17
Complex Method,gitter.Git,RemoteReferencesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemoteReferencesCollection.cs,OnFetchCompleted,Cyclomatic complexity of the method is 22
Complex Method,gitter.Git,BranchChangedNotification,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\Notifications.cs,Apply,Cyclomatic complexity of the method is 10
Complex Method,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,DelayProc,Cyclomatic complexity of the method is 11
Complex Method,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnGitDirDeleted,Cyclomatic complexity of the method is 20
Complex Method,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnGitDirRenamed,Cyclomatic complexity of the method is 10
Complex Method,gitter.Git,StashedStatesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Stash\StashedStatesCollection.cs,Refresh,Cyclomatic complexity of the method is 11
Complex Method,gitter.Git,SubmodulesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Submodules\SubmodulesCollection.cs,Refresh,Cyclomatic complexity of the method is 12
Complex Method,gitter.Git,Status,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\Status.cs,Update,Cyclomatic complexity of the method is 17
Long Parameter List,gitter,Argument,D:\research\architectureSmells\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter,Argument,D:\research\architectureSmells\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter.Git,ReferenceChange,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\RefrenceChange.cs,ReferenceChange,The method has 6 parameters. Parameters: referenceType' fullName' name' oldHash' newHash' changeType
Long Parameter List,gitter.Git,RemotesUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesUtility.cs,FetchOrPullAsync,The method has 5 parameters. Parameters: repository' remote' pull' progress' cancellationToken
Long Parameter List,gitter.Git,RemotesUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesUtility.cs,GetPushParameters,The method has 5 parameters. Parameters: remoteRepository' branches' forceOverwrite' thinPack' sendTags
Long Parameter List,gitter.Git,RemotesUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesUtility.cs,PushAsync,The method has 8 parameters. Parameters: repository' url' branches' forceOverwrite' thinPack' sendTags' progress' cancellationToken
Long Parameter List,gitter.Git,RemotesUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesUtility.cs,PushAsync,The method has 8 parameters. Parameters: repository' remote' branches' forceOverwrite' thinPack' sendTags' progress' cancellationToken
Long Parameter List,gitter.Git,TreeCommit,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\TreeCommit.cs,TreeCommit,The method has 5 parameters. Parameters: repository' relativePath' parent' status' name
Long Parameter List,gitter.Git,Head,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Head.cs,Merge,The method has 5 parameters. Parameters: branch' noCommit' noFastForward' squash' message
Long Parameter List,gitter.Git,Head,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Head.cs,Merge,The method has 5 parameters. Parameters: branches' noCommit' noFastForward' squash' message
Long Parameter List,gitter.Git,ReflogRecord,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\ReflogRecord.cs,ReflogRecord,The method has 5 parameters. Parameters: repository' reflog' revision' message' index
Long Parameter List,gitter.Git,RefsHeadsCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\RefsHeadsCollection.cs,CreateBranchCore,The method has 6 parameters. Parameters: name' startingRevision' tracking' createRefLog' checkout' orphan
Long Parameter List,gitter.Git,RefsHeadsCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\RefsHeadsCollection.cs,Create,The method has 5 parameters. Parameters: name' startingRevision' tracking' checkout' createRefLog
Long Parameter List,gitter.Git,RemotesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesCollection.cs,AddRemote,The method has 5 parameters. Parameters: name' url' fetch' mirror' tagFetchMode
Long Parameter List,gitter.Git,RemotesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesCollection.cs,PushTo,The method has 5 parameters. Parameters: url' branches' forceOverwrite' thinPack' sendTags
Long Parameter List,gitter.Git,RemotesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesCollection.cs,PushToAsync,The method has 7 parameters. Parameters: url' branches' forceOverwrite' thinPack' sendTags' progress' cancellationToken
Long Parameter List,gitter.Git,RevisionPointerExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Revision\RevisionPointerExtensions.cs,Merge,The method has 5 parameters. Parameters: revision' noCommit' noFastForward' squash' message
Long Parameter List,gitter.Git,RevisionPointerExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Revision\RevisionPointerExtensions.cs,ArchiveAsync,The method has 5 parameters. Parameters: revision' outputFile' path' format' progress
Long Parameter List,gitter.Git,TreeFile,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\TreeFile.cs,TreeFile,The method has 5 parameters. Parameters: repository' relativePath' parent' status' name
Long Parameter List,gitter.Git,TreeFile,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\TreeFile.cs,TreeFile,The method has 6 parameters. Parameters: repository' relativePath' parent' status' name' size
Long Parameter List,gitter.Git,TreeDirectory,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\TreeDirectory.cs,TreeDirectory,The method has 5 parameters. Parameters: repository' relativePath' parent' status' name
Long Parameter List,gitter.Git,TreeItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\TreeItem.cs,TreeItem,The method has 5 parameters. Parameters: repository' relativePath' parent' status' name
Long Parameter List,gitter.Git,Status,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\Status.cs,GetFilesToAddAsync,The method has 5 parameters. Parameters: pattern' includeUntracked' includeIgnored' progress' cancellationToken
Long Parameter List,gitter.Git,Status,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\Status.cs,GetCleanFilesParameters,The method has 5 parameters. Parameters: includePattern' excludePattern' mode' removeDirectories' force
Long Parameter List,gitter.Git,Status,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\Status.cs,GetFilesToCleanAsync,The method has 6 parameters. Parameters: includePattern' excludePattern' mode' removeDirectories' progress' cancellationToken
Long Parameter List,gitter.Git,Remote,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\Remote.cs,PushAsync,The method has 6 parameters. Parameters: branches' forceOverwrite' thinPack' sendTags' progress' cancellationToken
Long Parameter List,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,Clone,The method has 11 parameters. Parameters: gitAccessor' url' path' template' remoteName' shallow' depth' bare' mirror' recursive' noCheckout
Long Parameter List,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,CloneAsync,The method has 13 parameters. Parameters: gitAccessor' url' path' template' remoteName' shallow' depth' bare' mirror' recursive' noCheckout' progress' cancellationToken
Long Statement,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The length of the statement  "			   1. They can include slash / for hierarchical (directory) grouping' but no slash-separated component can begin with a dot .. " is 123.
Long Statement,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The length of the statement  "			   2. They must contain at least one /. This enforces the presence of a category like heads/' tags/ etc. but the actual names are not restricted. " is 142.
Long Statement,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The length of the statement  "			   4. They cannot have ASCII control characters (i.e. bytes whose values are lower than \040' or \177 DEL)' space' tilde ~' caret ^' colon :' question-mark ?' asterisk *' or open bracket [ anywhere. " is 195.
Long Statement,gitter.Git,RemoteBranch,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\RemoteBranch.cs,DeleteFromRemote,The length of the statement  "			if(remote == null) throw new GitException(string.Format(CultureInfo.InvariantCulture' "Unable to find remote for branch '{0}'"' Name)); " is 135.
Long Statement,gitter.Git,RemotesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemotesCollection.cs,PushToAsync,The length of the statement  "			return RemotesUtility.PushAsync(Repository' url' branches' forceOverwrite' thinPack' sendTags' progress' cancellationToken); " is 124.
Long Statement,gitter.Git,Remote,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\Remote.cs,PushAsync,The length of the statement  "			return RemotesUtility.PushAsync(Repository' this' branches' forceOverwrite' thinPack' sendTags' progress' cancellationToken); " is 125.
Long Statement,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,GetWorkingDirectory,The length of the statement  "			if(workingDirectory.Length > 3 && workingDirectory.EndsWithOneOf(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar)) " is 126.
Virtual Method Call from Constructor,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,Reference,The constructor "Reference" calls a virtual method "PrepareInputPointer".
Virtual Method Call from Constructor,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,Reference,The constructor "Reference" calls a virtual method "EnterPointer".
Virtual Method Call from Constructor,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,Reference,The constructor "Reference" calls a virtual method "EnterRevision".
Empty Catch Block,gitter.Git,PatchFile,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Patch\PatchFromFile.cs,Dispose,The method has an empty catch block.
Empty Catch Block,gitter.Git,Hook,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Hooks\Hook.cs,Delete,The method has an empty catch block.
Empty Catch Block,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,ApplyProc,The method has an empty catch block.
Empty Catch Block,gitter.Git,Status,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\Status.cs,Commit,The method has an empty catch block.
Empty Catch Block,gitter.Git,Status,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\Status.cs,SaveCommitMessage,The method has an empty catch block.
Empty Catch Block,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,GetConfigurationManager,The method has an empty catch block.
Magic Number,gitter,Argument,D:\research\architectureSmells\repos\amgine_gitter\shared\Verify.cs,IsValidSHA1,The following statement contains a magic number: const int SHA1_LENGTH = 40;
Magic Number,gitter.Git,RevisionFileBlameSource,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Blame\RevisionFileBlameSource.cs,ToString,The following statement contains a magic number: return Revision is Revision  				? FileName + " @ " + Revision.Pointer.Substring(0' 7)  				: FileName + " @ " + Revision.Pointer;
Magic Number,gitter.Git,PathLogSource,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Log\PathLogSource.cs,ToString,The following statement contains a magic number: return Revision is Revision  				? Path + " @ " + Revision.Pointer.Substring(0' 7)  				: Path + " @ " + Revision.Pointer;
Magic Number,gitter.Git,RevisionParentsCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Revision\RevisionParentsCollection.cs,RevisionParentsCollection,The following statement contains a magic number: _container = new List<Revision>(2);
Magic Number,gitter.Git,RevisionChangesDiffSource,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Diff\RevisionChangesDiffSource.cs,ToString,The following statement contains a magic number: return "log -p " + Revision.Pointer.Substring(0' 7);
Magic Number,gitter.Git,RevisionCompareDiffSource,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Diff\RevisionCompareDiffSource.cs,ToString,The following statement contains a magic number: var r1 = (_revision1 is Revision) ? _revision1.Pointer.Substring(0' 7) : _revision1.Pointer;
Magic Number,gitter.Git,RevisionCompareDiffSource,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Diff\RevisionCompareDiffSource.cs,ToString,The following statement contains a magic number: var r2 = (_revision2 is Revision) ? _revision2.Pointer.Substring(0' 7) : _revision2.Pointer;
Magic Number,gitter.Git,DiffOptions,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Diff\DiffOptions.cs,DiffOptions,The following statement contains a magic number: _context = 3;
Magic Number,gitter.Git,LogOptions,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Log\LogOptions.cs,LogOptions,The following statement contains a magic number: _maxCount = 500;
Magic Number,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The following statement contains a magic number: c < 32 || c == 127
Magic Number,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The following statement contains a magic number: c < 32 || c == 127
Magic Number,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The following statement contains a magic number: switch(c)  				{  					case '/':  						if(i == 0)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotBeginWithCharacter' GetReferenceTypeName(referenceType)' "/");  							return false;  						}  						if(lastchar)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithCharacter' GetReferenceTypeName(referenceType)' "/");  							return false;  						}  						if(name[i + 1] == '.')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrSlashSeparatedComponentCannotBeginWithCharacter' ".");  							return false;  						}  						if(name[i + 1] == '/')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "//");  							return false;  						}  						break;  					case '.':  						if(i == 0)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotBeginWithCharacter' GetReferenceTypeName(referenceType)' ".");  							return false;  						}  						if(lastchar)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithCharacter' GetReferenceTypeName(referenceType)' ".");  							return false;  						}  						if(!lastchar && name[i + 1] == '.')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "..");  							return false;  						}  						if(i == name.Length - 5 && name.IndexOf("lock"' i + 1' 4) != -1)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithSequence' GetReferenceTypeName(referenceType)' ".lock");  							return false;  						}  						break;  					case '@':  						if(!lastchar && (name[i + 1] == '{'))  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "@{");  							return false;  						}  						break;  					case ' ':  					case '\\':  					case '~':  					case '^':  					case ':':  					case '?':  					case '*':  					case '[':  						errorMessage = string.Format(CultureInfo.InvariantCulture'  							Resources.ErrNameCannotContainCharacter' referenceType' c);  						return false;  				}
Magic Number,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The following statement contains a magic number: switch(c)  				{  					case '/':  						if(i == 0)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotBeginWithCharacter' GetReferenceTypeName(referenceType)' "/");  							return false;  						}  						if(lastchar)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithCharacter' GetReferenceTypeName(referenceType)' "/");  							return false;  						}  						if(name[i + 1] == '.')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrSlashSeparatedComponentCannotBeginWithCharacter' ".");  							return false;  						}  						if(name[i + 1] == '/')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "//");  							return false;  						}  						break;  					case '.':  						if(i == 0)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotBeginWithCharacter' GetReferenceTypeName(referenceType)' ".");  							return false;  						}  						if(lastchar)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithCharacter' GetReferenceTypeName(referenceType)' ".");  							return false;  						}  						if(!lastchar && name[i + 1] == '.')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "..");  							return false;  						}  						if(i == name.Length - 5 && name.IndexOf("lock"' i + 1' 4) != -1)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithSequence' GetReferenceTypeName(referenceType)' ".lock");  							return false;  						}  						break;  					case '@':  						if(!lastchar && (name[i + 1] == '{'))  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "@{");  							return false;  						}  						break;  					case ' ':  					case '\\':  					case '~':  					case '^':  					case ':':  					case '?':  					case '*':  					case '[':  						errorMessage = string.Format(CultureInfo.InvariantCulture'  							Resources.ErrNameCannotContainCharacter' referenceType' c);  						return false;  				}
Magic Number,gitter.Git,MergeTool,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\MergeTool.cs,MergeTool,The following statement contains a magic number: _tools = new Dictionary<string' MergeTool>(13)  			{  				{ "kdiff3"'			kdiff3			= new MergeTool("kdiff3"'			@"http://sourceforge.net/projects/kdiff3/files/"' true' true) }'  				{ "tkdiff"'			tkdiff			= new MergeTool("tkdiff"'			@"http://sourceforge.net/projects/tkdiff/files/"' true' true) }'  				{ "meld"'			meld			= new MergeTool("meld"'				@"http://ftp.gnome.org/pub/gnome/sources/meld/"' false' true) }'  				{ "xxdiff"'			xxdiff			= new MergeTool("xxdiff"'			@"http://sourceforge.net/projects/xxdiff/files/"' false' true) }'  				{ "emerge"'			emerge			= new MergeTool("emerge"'			@""' false' true) }'  				{ "vimdiff"'		vimdiff			= new MergeTool("vimdiff"'			@""' false' true) }'  				{ "gvimdiff"'		gvimdiff		= new MergeTool("gvimdiff"'			@""' false' true) }'  				{ "ecmerge"'		ecmerge			= new MergeTool("ecmerge"'			@"http://www.elliecomputing.com/Download/download_form.asp"' true' true) }'  				{ "diffuse"'		diffuse			= new MergeTool("diffuse"'			@"http://diffuse.sourceforge.net/download.html"' true' true) }'  				{ "tortoisemerge"'	tortoisemerge	= new MergeTool("tortoisemerge"'	@"http://tortoisesvn.net/downloads"' true' false) }'  				{ "opendiff"'		opendiff		= new MergeTool("opendiff"'			@""' false' true) }'  				{ "p4merge"'		p4merge			= new MergeTool("p4merge"'			@"http://www.perforce.com/perforce/downloads/index.html"' true' true) }'  				{ "araxis"'			araxis			= new MergeTool("araxis"'			@"http://www.araxis.com/merge/index.html"' true' false) }'  			};
Magic Number,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,GetSubdirectory,The following statement contains a magic number: path.Length <= 5 + 5
Magic Number,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,GetSubdirectory,The following statement contains a magic number: path.Length <= 5 + 5
Magic Number,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,GetSubdirectory,The following statement contains a magic number: CheckValue(path' "heads" + Path.DirectorySeparatorChar' 0 + 5)
Magic Number,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,GetSubdirectory,The following statement contains a magic number: CheckValue(path' "remotes" + Path.DirectorySeparatorChar' 0 + 5)
Magic Number,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,GetSubdirectory,The following statement contains a magic number: CheckValue(path' "tags" + Path.DirectorySeparatorChar' 0 + 5)
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,SetProgress,The following statement contains a magic number: var status = new OperationProgress  				{  					ActionName      = action'  					MaxProgress     = 8'  					CurrentProgress = val'  				};
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,LoadCore,The following statement contains a magic number: SetProgress(progress' 2' Resources.StrLoadingStash.AddEllipsis());
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,LoadCore,The following statement contains a magic number: SetProgress(progress' 3' Resources.StrLoadingHEAD.AddEllipsis());
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,LoadCore,The following statement contains a magic number: SetProgress(progress' 4' Resources.StrLoadingRemotes.AddEllipsis());
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,LoadCore,The following statement contains a magic number: SetProgress(progress' 5' Resources.StrLoadingSubmodules.AddEllipsis());
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,LoadCore,The following statement contains a magic number: SetProgress(progress' 6' Resources.StrLoadingUsers.AddEllipsis());
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,LoadCore,The following statement contains a magic number: SetProgress(progress' 7' Resources.StrLoadingStatus.AddEllipsis());
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,LoadCore,The following statement contains a magic number: SetProgress(progress' 8' Resources.StrCompleted.AddPeriod());
Magic Number,gitter.Git,Repository,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Repository.cs,GetWorkingDirectory,The following statement contains a magic number: workingDirectory.Length > 3 && workingDirectory.EndsWithOneOf(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar)
Magic Number,gitter.Git,Revision,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Revision\Revision.cs,ToString,The following statement contains a magic number: return string.Format("{0}: {1}"' Hash.ToString(7)' Subject);
Duplicate Code,gitter.Git,BranchChangedNotification,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\Notifications.cs,Apply,The method contains a code clone-set at the following line numbers (starting from the method definition): ((42' 61)' (65' 84))
Missing Default,gitter.Git,ConfigurationFile,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Configuration\ConfigurationFile.cs,CreateParameter,The following switch statement is missing a default case: switch(_configFile)  				{  					case ConfigFile.Other:  						_configAccessor.SetConfigValue.Invoke(new SetConfigValueParameters(name' value)  						{  							ConfigFile = _configFile'  							FileName = _fileName'  						});  						break;  					case ConfigFile.System:  					case ConfigFile.User:  						_configAccessor.SetConfigValue.Invoke(new SetConfigValueParameters(name' value)  						{  							ConfigFile = _configFile'  						});  						break;  					case ConfigFile.Repository:  						_configAccessor.SetConfigValue.Invoke(new SetConfigValueParameters(name' value));  						break;  				}
Missing Default,gitter.Git,ConfigurationFile,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Configuration\ConfigurationFile.cs,Unset,The following switch statement is missing a default case: switch(_configFile)  			{  				case ConfigFile.Other:  					_configAccessor.UnsetConfigValue.Invoke(  						new UnsetConfigValueParameters(parameter.Name)  						{  							FileName = _fileName'  							ConfigFile = ConfigFile.Other'  						});  					break;  				case ConfigFile.System:  				case ConfigFile.User:  					_configAccessor.UnsetConfigValue.Invoke(  						new UnsetConfigValueParameters(parameter.Name)  						{  							ConfigFile = _configFile'  						});  					break;  				case ConfigFile.Repository:  					_configAccessor.UnsetConfigValue.Invoke(  						new UnsetConfigValueParameters(parameter.Name));  					break;  			}
Missing Default,gitter.Git,LogOptions,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Log\LogOptions.cs,GetLogParameters,The following switch statement is missing a default case: switch(_filter)  			{  				case LogReferenceFilter.All:  					p.All = true;  					break;  				case LogReferenceFilter.Allowed:  					var l = new List<string>();  					foreach(var reference in _allowedReferences)  					{  						l.Add(reference.FullName);  					}  					p.References = l;  					break;  				case LogReferenceFilter.HEAD:  					p.References = new List<string>() { GitConstants.HEAD };  					break;  			}
Missing Default,gitter.Git,Reference,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\References\Reference.cs,ValidateName,The following switch statement is missing a default case: switch(c)  				{  					case '/':  						if(i == 0)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotBeginWithCharacter' GetReferenceTypeName(referenceType)' "/");  							return false;  						}  						if(lastchar)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithCharacter' GetReferenceTypeName(referenceType)' "/");  							return false;  						}  						if(name[i + 1] == '.')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrSlashSeparatedComponentCannotBeginWithCharacter' ".");  							return false;  						}  						if(name[i + 1] == '/')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "//");  							return false;  						}  						break;  					case '.':  						if(i == 0)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotBeginWithCharacter' GetReferenceTypeName(referenceType)' ".");  							return false;  						}  						if(lastchar)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithCharacter' GetReferenceTypeName(referenceType)' ".");  							return false;  						}  						if(!lastchar && name[i + 1] == '.')  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "..");  							return false;  						}  						if(i == name.Length - 5 && name.IndexOf("lock"' i + 1' 4) != -1)  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotEndWithSequence' GetReferenceTypeName(referenceType)' ".lock");  							return false;  						}  						break;  					case '@':  						if(!lastchar && (name[i + 1] == '{'))  						{  							errorMessage = string.Format(CultureInfo.InvariantCulture'  								Resources.ErrNameCannotContainSequence' GetReferenceTypeName(referenceType)' "@{");  							return false;  						}  						break;  					case ' ':  					case '\\':  					case '~':  					case '^':  					case ':':  					case '?':  					case '*':  					case '[':  						errorMessage = string.Format(CultureInfo.InvariantCulture'  							Resources.ErrNameCannotContainCharacter' referenceType' c);  						return false;  				}
Missing Default,gitter.Git,RemoteReferencesCollection,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Remotes\RemoteReferencesCollection.cs,OnFetchCompleted,The following switch statement is missing a default case: switch(r.ReferenceType)  				{  					case ReferenceType.LocalBranch:  						branches.Add(r.Name.Substring(GitConstants.LocalBranchPrefix.Length)' r);  						break;  					case ReferenceType.Tag:  						tags.Add(r.Name.Substring(GitConstants.TagPrefix.Length)' r);  						break;  				}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,DelayProc,The following switch statement is missing a default case: switch(WaitHandle.WaitAny(wh' _notificationDelayTime))  				{  					case 0:  						return;  					case 1:  						continue;  					case WaitHandle.WaitTimeout:  						WorktreeUpdatedNotification globalwtn = null;  						int count = 0;  						foreach(var n in notifications)  						{  							if(n is WorktreeUpdatedNotification wtn)  							{  								if(count == 0)  								{  									globalwtn = wtn;  									++count;  								}  								else  								{  									globalwtn = new WorktreeUpdatedNotification("");  									++count;  								}  							}  							else  							{  								EmitNotification(n);  							}  						}  						notifications.Clear();  						if(globalwtn != null)  						{  							EmitNotification(globalwtn);  						}  						break;  				}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnWorkDirCreated,The following switch statement is missing a default case: switch(GetChangedPath(e.Name))  			{  				case ChangedPath.WorkDir:  					if(!IsBlocked(RepositoryNotifications.WorktreeUpdated))  					{  						EmitDelayedNotification(new WorktreeUpdatedNotification(e.Name));  					}  					break;  			}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnWorkDirChanged,The following switch statement is missing a default case: switch(GetChangedPath(e.Name))  			{  				case ChangedPath.WorkDir:  					if(e.Name == GitConstants.SubmodulesConfigFile)  					{  						if(!IsBlocked(RepositoryNotifications.SubmodulesChanged))  						{  							EmitNotification(new SubmodulesChangedNotification());  						}  					}  					if(!IsBlocked(RepositoryNotifications.WorktreeUpdated))  					{  						EmitDelayedNotification(new WorktreeUpdatedNotification(e.Name));  					}  					break;  			}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnGitDirDeleted,The following switch statement is missing a default case: switch(GetSubdirectory(e.Name))  			{  				case GitSubdirectory.Refs:  					if(e.Name == @"refs\stash" + GitConstants.LockPostfix)  					{  						#if TRACE_FS_EVENTS  						Log.Debug("Detected possible stash change");  						#endif  						if(!IsBlocked(RepositoryNotifications.StashChanged))  						{  							EmitNotification(new StashChangedNotification());  						}  					}  					break;  				case GitSubdirectory.RefsHeads:  					if(e.Name.EndsWith(GitConstants.LockPostfix))  					{  						int pos = GitConstants.LocalBranchPrefix.Length;  						var name = e.Name.Substring(pos' e.Name.Length - pos - GitConstants.LockPostfix.Length)  										 .Replace(Path.DirectorySeparatorChar' '/');  						#if TRACE_FS_EVENTS  						Log.Debug(string.Format("Detected possible branch change: {0}"' name));  						#endif  						if(!IsBlocked(RepositoryNotifications.BranchChanged))  						{  							EmitNotification(new BranchChangedNotification(name' false));  						}  					}  					break;  				case GitSubdirectory.RefsRemotes:  					if(e.Name.EndsWith(GitConstants.LockPostfix))  					{  						int pos = GitConstants.RemoteBranchPrefix.Length;  						var name = e.Name.Substring(pos' e.Name.Length - pos - GitConstants.LockPostfix.Length)  										 .Replace(Path.DirectorySeparatorChar' '/');  						#if TRACE_FS_EVENTS  						Log.Debug(string.Format("Detected possible remote branch change: {0}"' name));  						#endif  						if(!IsBlocked(RepositoryNotifications.BranchChanged))  						{  							EmitNotification(new BranchChangedNotification(name' true));  						}  					}  					break;  				case GitSubdirectory.RefsTags:  					if(e.Name.EndsWith(GitConstants.LockPostfix))  					{  						var tagFileName = e.FullPath.Substring(0' e.FullPath.Length - GitConstants.LockPostfix.Length);  						if(!File.Exists(tagFileName))  						{  							var pos = GitConstants.TagPrefix.Length;  							var name = e.Name.Substring(pos' e.Name.Length - pos - GitConstants.LockPostfix.Length)  											 .Replace(Path.DirectorySeparatorChar' '/');  							#if TRACE_FS_EVENTS  							Log.Debug(string.Format("Detected possible tag removal: {0}"' name));  							#endif  							if(!IsBlocked(RepositoryNotifications.TagChanged))  							{  								EmitNotification(new TagChangedNotification(name));  							}  						}  					}  					break;  				case GitSubdirectory.Root:  					{  						if(e.Name.Length == 0)  						{  							#if TRACE_FS_EVENTS  							Log.Debug("Repository destruction detected");  							#endif  							EmitNotification(new RepositoryRemovedNotification());  							IsEnabled = false;  						}  						else  						{  							switch(e.Name)  							{  								case GitConstants.HEAD + GitConstants.LockPostfix:  									#if TRACE_FS_EVENTS  									Log.Debug("Checkout detected");  									#endif  									if(!IsBlocked(RepositoryNotifications.Checkout))  									{  										EmitNotification(new CheckoutNotification());  									}  									break;  								case "config" + GitConstants.LockPostfix:  									#if TRACE_FS_EVENTS  									Log.Debug("Config update detected");  									#endif  									if(!IsBlocked(RepositoryNotifications.ConfigUpdated))  									{  										EmitNotification(new ConfigUpdatedNotification());  									}  									break;  								case "index" + GitConstants.LockPostfix:  									#if TRACE_FS_EVENTS  									Log.Debug("Index update detected");  									#endif  									if(!IsBlocked(RepositoryNotifications.IndexUpdated))  									{  										EmitNotification(new IndexUpdatedNotification());  									}  									break;  							}  						}  					}  					break;  			}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnGitDirDeleted,The following switch statement is missing a default case: switch(e.Name)  							{  								case GitConstants.HEAD + GitConstants.LockPostfix:  									#if TRACE_FS_EVENTS  									Log.Debug("Checkout detected");  									#endif  									if(!IsBlocked(RepositoryNotifications.Checkout))  									{  										EmitNotification(new CheckoutNotification());  									}  									break;  								case "config" + GitConstants.LockPostfix:  									#if TRACE_FS_EVENTS  									Log.Debug("Config update detected");  									#endif  									if(!IsBlocked(RepositoryNotifications.ConfigUpdated))  									{  										EmitNotification(new ConfigUpdatedNotification());  									}  									break;  								case "index" + GitConstants.LockPostfix:  									#if TRACE_FS_EVENTS  									Log.Debug("Index update detected");  									#endif  									if(!IsBlocked(RepositoryNotifications.IndexUpdated))  									{  										EmitNotification(new IndexUpdatedNotification());  									}  									break;  							}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnWorkDirDeleted,The following switch statement is missing a default case: switch(GetChangedPath(e.Name))  			{  				case ChangedPath.WorkDir:  					if(e.Name == GitConstants.SubmodulesConfigFile)  					{  						if(!IsBlocked(RepositoryNotifications.SubmodulesChanged))  						{  							EmitNotification(new SubmodulesChangedNotification());  						}  					}  					if(!IsBlocked(RepositoryNotifications.WorktreeUpdated))  					{  						EmitDelayedNotification(new WorktreeUpdatedNotification(e.Name));  					}  					break;  			}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnGitDirRenamed,The following switch statement is missing a default case: switch(GetSubdirectory(e.OldName))  			{  				case GitSubdirectory.RefsHeads:  					{  						int pos = GitConstants.LocalBranchPrefix.Length;  						var oldName = e.OldName.Substring(pos);  						var newName = e.Name.Substring(pos);  						if(newName + GitConstants.LockPostfix == oldName)  						{  							newName = newName.Replace(Path.DirectorySeparatorChar' '/');  							#if TRACE_FS_EVENTS  							Log.Debug(string.Format("Detected branch creation: {0}"' newName));  							#endif  							if(!IsBlocked(RepositoryNotifications.BranchChanged))  							{  								EmitNotification(new BranchChangedNotification(newName' false));  							}  						}  					}  					break;  				case GitSubdirectory.RefsRemotes:  					{  						int pos = GitConstants.RemoteBranchPrefix.Length;  						var oldName = e.OldName.Substring(pos);  						var newName = e.Name.Substring(pos);  						if(newName + GitConstants.LockPostfix == oldName)  						{  							newName = newName.Replace(Path.DirectorySeparatorChar' '/');  							#if TRACE_FS_EVENTS  							Log.Debug(string.Format("Detected remote branch creation: {0}"' newName));  							#endif  							if(!IsBlocked(RepositoryNotifications.BranchChanged))  							{  								EmitNotification(new BranchChangedNotification(newName' true));  							}  						}  					}  					break;  				case GitSubdirectory.RefsTags:  					{  						int pos = GitConstants.TagPrefix.Length;  						var oldName = e.OldName.Substring(pos);  						var newName = e.Name.Substring(pos);  						if(newName + GitConstants.LockPostfix == oldName)  						{  							newName = newName.Replace(Path.DirectorySeparatorChar' '/');  							#if TRACE_FS_EVENTS  							Log.Debug(string.Format("Detected tag creation: {0}"' newName));  							#endif  							if(!IsBlocked(RepositoryNotifications.TagChanged))  							{  								EmitNotification(new TagChangedNotification(newName));  							}  						}  					}  					break;  			}
Missing Default,gitter.Git,RepositoryMonitor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Monitor\RepositoryMonitor.cs,OnWorkDirRenamed,The following switch statement is missing a default case: switch(GetChangedPath(e.OldName))  			{  				case ChangedPath.WorkDir:  					#if TRACE_FS_EVENTS  					Log.Debug(string.Format("Detected working directory file rename: {0} -> {1]"' e.OldName ' e.Name));  					#endif  					if(e.OldName == GitConstants.SubmodulesConfigFile || e.Name == GitConstants.SubmodulesConfigFile)  					{  						if(!IsBlocked(RepositoryNotifications.SubmodulesChanged))  						{  							EmitNotification(new SubmodulesChangedNotification());  						}  					}  					if(!IsBlocked(RepositoryNotifications.WorktreeUpdated))  					{  						EmitDelayedNotification(new WorktreeUpdatedNotification(e.OldName));  						EmitDelayedNotification(new WorktreeUpdatedNotification(e.Name));  					}  					break;  			}
Missing Default,gitter.Git,TreeItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\TreeItem.cs,GetDiffSource,The following switch statement is missing a default case: switch(_stagedStatus)  			{  				case StagedStatus.Staged:  					return Repository.Status.GetDiffSource(true' new[] { RelativePath });  				case StagedStatus.Unstaged:  					return Repository.Status.GetDiffSource(false' new[] { RelativePath });  			}
Missing Default,gitter.Git,Tree,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.prj\Tree\Tree.cs,SetContent,The following switch statement is missing a default case: switch(item.Type)  				{  					case TreeContentType.Tree:  						{  							var dir = new TreeDirectory(Repository' item.Name' parent' name);  							trees.Add(item.Name' dir);  							parent.AddDirectory(dir);  						}  						break;  					case TreeContentType.Blob:  						{  							var blob = new TreeFile(Repository' item.Name' parent' FileStatus.Cached' name' ((BlobData)item).Size);  							parent.AddFile(blob);  						}  						break;  					case TreeContentType.Commit:  						{  							var commit = new TreeCommit(Repository' item.Name' parent' FileStatus.Cached' name);  							parent.AddCommit(commit);  						}  						break;  				}
