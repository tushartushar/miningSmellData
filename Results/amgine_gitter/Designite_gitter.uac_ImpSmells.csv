Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,gitter,Argument,C:\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter,Argument,C:\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Magic Number,gitter.UAC,Program,C:\repos\amgine_gitter\gitter.uac.prj\Program.cs,Main,The following statement contains a magic number: using(var mutex = new Mutex(true' "gitter-uac-instance"' out isFirstInstance))  			{  				if(isFirstInstance)  				{  					var args = Environment.GetCommandLineArgs();  					if(args == null || args.Length < 2 || args[1] != "--remoting")  						return;    					ChannelServices.RegisterChannel(  						new IpcChannel(  							new Dictionary<string' string>  							{  								{ "portName"' RemotingChannelName }  							}'  							new BinaryClientFormatterSinkProvider()'  							new BinaryServerFormatterSinkProvider()  							{  								TypeFilterLevel = System.Runtime.Serialization.Formatters.TypeFilterLevel.Full'  							})'  						false);    					RemotingConfiguration.RegisterWellKnownServiceType(  						typeof(RemoteExecutor)' RemotingObjectName' WellKnownObjectMode.Singleton);    					_executor = (RemoteExecutor)Activator.GetObject(typeof(RemoteExecutor)'  						string.Format(@"ipc://{0}/{1}"' RemotingChannelName' RemotingObjectName));  					_executor.ExitEvent.WaitOne();  					_executor.ExitEvent.Close();  				}  			}
