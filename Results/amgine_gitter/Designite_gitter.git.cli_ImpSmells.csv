Implementation smell,Namespace,Class,File,Method,Description
Long Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,The method has 144 lines of code.
Long Method,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The method has 193 lines of code.
Long Method,gitter.Git.AccessLayer.CLI,StatusParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The method has 100 lines of code.
Long Method,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The method has 191 lines of code.
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCloneCommand,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,Cyclomatic complexity of the method is 32
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCommitCommand,Cyclomatic complexity of the method is 13
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertAddFilesParameters,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertCleanFilesParameters,Cyclomatic complexity of the method is 11
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertDiffParameters1,Cyclomatic complexity of the method is 18
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCherryPickCommand,Cyclomatic complexity of the method is 10
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertFetchParameters,Cyclomatic complexity of the method is 11
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetPushCommand,Cyclomatic complexity of the method is 12
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddRemoteCommand,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateBranchCommand,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateTagCommand,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffLine,Cyclomatic complexity of the method is 16
Complex Method,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,Cyclomatic complexity of the method is 37
Complex Method,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFile,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,DecodeEscapedString,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseProgress,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseObjectCountData,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTreeContent,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleCheckoutResult,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseReferences,Cyclomatic complexity of the method is 16
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParsePushResult,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,SubjectAndBodyField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,gitter.Git.AccessLayer.CLI,StatusParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,CharToFileStatus,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,StatusParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,GetConflictType,Cyclomatic complexity of the method is 13
Complex Method,gitter.Git.AccessLayer.CLI,StatusParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,GitProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Process\GitProcess.cs,DetectGitExePath,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git,GitRepositoryUpdateChannel,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitRepositoryUpdateChannel.cs,CheckVersion,Cyclomatic complexity of the method is 9
Long Parameter List,gitter,Argument,D:\research\architectureSmells\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter,Argument,D:\research\architectureSmells\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommand,The method has 5 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsyncCore,The method has 6 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsync,The method has 5 parameters. Parameters: command' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsync,The method has 6 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,RemoteCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The method has 7 parameters. Parameters: name' url' master' branches' mirror' fetch' tags
Long Parameter List,gitter.Git.AccessLayer.CLI,PushCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\push.cs,FormatPushCommand,The method has 5 parameters. Parameters: remote' branches' force' thin' tags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: action' commandExecutor' commandFactory' resultHandler' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: action' commandExecutor' commandFactory' resultHandler' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: function' commandExecutor' commandFactory' resultParser' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: function' commandExecutor' commandFactory' resultParser' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,ICommandExecutor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\ICommandExecutor.cs,ExecuteCommand,The method has 5 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,ICommandExecutor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\ICommandExecutor.cs,ExecuteCommandAsync,The method has 5 parameters. Parameters: command' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,ICommandExecutor,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\ICommandExecutor.cs,ExecuteCommandAsync,The method has 6 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Statement,gitter.Git.AccessLayer.CLI,CommandExecutorBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsync,The length of the statement  "			return ExecuteCommandAsyncCore(command' GitProcess.DefaultEncoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken); " is 126.
Long Statement,gitter.Git.AccessLayer.CLI,RemoteCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The length of the statement  "			var args = new ICommandArgument[1+2+(master!=null?1:0)+(branches!=null?branches.Length:0)+(mirror?1:0)+(fetch?(tags?2:1):0)]; " is 125.
Long Statement,gitter.Git.AccessLayer.CLI,DiffCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindRenames,The length of the statement  "			return new CommandParameterValue("--find-renames"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '='); " is 125.
Long Statement,gitter.Git.AccessLayer.CLI,DiffCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindCopies,The length of the statement  "			return new CommandParameterValue("--find-copies"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '='); " is 124.
Long Statement,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadUnixTimestampLine,The length of the statement  "			if(string.IsNullOrWhiteSpace(timestampStr) || !long.TryParse(timestampStr' NumberStyles.None' CultureInfo.InvariantCulture' out timestamp)) " is 139.
Long Statement,gitter.Git.AccessLayer.CLI,FormatMergeMessageImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\FormatMergeMessageImpl.cs,Invoke,The length of the statement  "				var msg = string.Format("Merge branch '{0}' into {1}\r\n\r\n"' rev' parameters.HeadReference) + "Changes:\r\n" + commits; " is 121.
Long Statement,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseReferences,The length of the statement  "								if(StringUtility.CheckValue(refs' pos2' name) && StringUtility.CheckValue(refs' pos2 + name.Length' GitConstants.DereferencedTagPostfix)) " is 137.
Long Statement,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._txtmSysGitPath.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._cmdAutoDetect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._cmdBrowse.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._btnDownload.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._btnRefreshLatestVersion.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 160.
Long Statement,gitter.Git,MSysGitDownloader,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,UpdateDownloadProgress,The length of the statement  "			if(process.Monitor != null && process.WebResponse.ContentLength > 0 && process.DownloadedBytes <= process.WebResponse.ContentLength) " is 132.
Complex Conditional,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The conditional expression  "IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader)"  is complex.
Complex Conditional,gitter.Git,GitRepositoryUpdateChannel,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitRepositoryUpdateChannel.cs,CheckVersion,The conditional expression  "sha1 == branchSHA1 &&  						refname.Length > GitConstants.TagPrefix.Length + 1 &&  						refname.StartsWith(GitConstants.TagPrefix) &&  						refname[GitConstants.TagPrefix.Length] == 'v'"  is complex.
Empty Catch Block,gitter.Git.AccessLayer.CLI,GitProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Process\GitProcess.cs,GetFullPath,The method has an empty catch block.
Empty Catch Block,gitter.Git,MSysGitDownloader,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,MSysGitDownloader,The method has an empty catch block.
Empty Catch Block,gitter.Git,DownloadAndInstallProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,OnInstallerProcessExited,The method has an empty catch block.
Magic Number,gitter.Git.AccessLayer.CLI,BlameParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\BlameParser.cs,ReadPreviousValue,The following statement contains a magic number: var previous = ReadString(40);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetInitCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryStatusCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(7);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryRevisionsCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(30);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryRevisionGraphCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(30);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryReflogCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCommitCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(12);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryFilesToAddCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 6);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryFilesToRemoveCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryFilesToCleanCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(  				(parameters.ExcludePatterns != null ? parameters.ExcludePatterns.Count : 0) +  				(parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddFilesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetRemoveFilesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCleanFilesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(  				(parameters.ExcludePatterns != null ? parameters.ExcludePatterns.Count : 0) +  				(parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetStashApplyCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetStashPopCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetStashToBranchCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetArchiveCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetFetchCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(10);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddRemoteCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Branches != null ? parameters.Branches.Count : 0) + 6);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryRemoteReferencesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetDescribeCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateTagCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetRunMergeToolCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Files != null ? parameters.Files.Count : 0) + 2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryConfigParameterCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryConfigCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddConfigValueCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetSetConfigValueCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetUnsetConfigValueCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetRenameConfigSectionCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetDeleteConfigSectionCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,RemoteCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The following statement contains a magic number: var args = new ICommandArgument[1+2+(master!=null?1:0)+(branches!=null?branches.Length:0)+(mirror?1:0)+(fetch?(tags?2:1):0)];
Magic Number,gitter.Git.AccessLayer.CLI,RemoteCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The following statement contains a magic number: var args = new ICommandArgument[1+2+(master!=null?1:0)+(branches!=null?branches.Length:0)+(mirror?1:0)+(fetch?(tags?2:1):0)];
Magic Number,gitter.Git.AccessLayer.CLI,DiffCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindRenames,The following statement contains a magic number: return new CommandParameterValue("--find-renames"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '=');
Magic Number,gitter.Git.AccessLayer.CLI,DiffCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindCopies,The following statement contains a magic number: return new CommandParameterValue("--find-copies"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '=');
Magic Number,gitter.Git.AccessLayer.CLI,PushCommand,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\push.cs,FormatPushCommand,The following statement contains a magic number: var args = new ICommandArgument[branches.Count + 3 + (force?1:0) + (tags?1:0)];
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The following statement contains a magic number: switch(header)  				{  					case Header.Index:  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// index <hash>'<hash>..<hash>  								SkipLine();  							}  							else  							{  								int pos = FindNoAdvance("..");  								fileHeader.OldIndex = ReadStringUpTo(pos' 2);  								pos = FindNewLineOrEndOfString();  								int space = FindSpace(pos - Position);  								if(space == -1)  								{  									// index <hash>..<hash>  									fileHeader.NewIndex = ReadStringUpTo(pos' 1);  								}  								else  								{  									// index <hash>..<hash> <mode>  									fileHeader.NewIndex = ReadStringUpTo(space' 1);  									fileHeader.NewMode = int.Parse(ReadStringUpTo(pos' 1)' NumberStyles.None' CultureInfo.InvariantCulture);  								}  							}  						}  						break;  					case Header.OldMode:  						// old mode <mode>  						if(dataPresent)  						{  							fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.NewMode:  						// new mode <mode>  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.Mode:  						// mode <mode>'<mode>..<mode>  						if(dataPresent)  						{  							SkipLine();  						}  						break;  					case Header.NewFileMode:  						// new file mode <mode>  						fileHeader.Status = FileStatus.Added;  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.DeletedFileMode:  						fileHeader.Status = FileStatus.Removed;  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// deleted file mode <mode>'<mode>  								SkipLine();  							}  							else  							{  								// deleted file mode <mode>  								fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  							}  						}  						break;  					case Header.CopyFrom:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy from <path>  							fileHeader.CopyFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.CopyTo:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy to <path>  							fileHeader.CopyTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameFrom:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename from <path>  							fileHeader.RenameFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameTo:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename to <path>  							fileHeader.RenameTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.SimilarityIndex:  						{  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out var index))  							{  								fileHeader.SimilarityIndex = index;  							}  						}  						break;  					case Header.DissimilarityIndex:  						{  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out var index))  							{  								fileHeader.DissimilarityIndex = index;  							}  						}  						break;  					case Header.Unknown:  						if(IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader))  						{  							completed = true;  						}  						else  						{  							SkipLine();  						}  						break;  					default:  						if(dataPresent)  						{  							SkipLine();  						}  						break;  				}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The following statement contains a magic number: switch(header)  				{  					case Header.Index:  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// index <hash>'<hash>..<hash>  								SkipLine();  							}  							else  							{  								int pos = FindNoAdvance("..");  								fileHeader.OldIndex = ReadStringUpTo(pos' 2);  								pos = FindNewLineOrEndOfString();  								int space = FindSpace(pos - Position);  								if(space == -1)  								{  									// index <hash>..<hash>  									fileHeader.NewIndex = ReadStringUpTo(pos' 1);  								}  								else  								{  									// index <hash>..<hash> <mode>  									fileHeader.NewIndex = ReadStringUpTo(space' 1);  									fileHeader.NewMode = int.Parse(ReadStringUpTo(pos' 1)' NumberStyles.None' CultureInfo.InvariantCulture);  								}  							}  						}  						break;  					case Header.OldMode:  						// old mode <mode>  						if(dataPresent)  						{  							fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.NewMode:  						// new mode <mode>  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.Mode:  						// mode <mode>'<mode>..<mode>  						if(dataPresent)  						{  							SkipLine();  						}  						break;  					case Header.NewFileMode:  						// new file mode <mode>  						fileHeader.Status = FileStatus.Added;  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.DeletedFileMode:  						fileHeader.Status = FileStatus.Removed;  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// deleted file mode <mode>'<mode>  								SkipLine();  							}  							else  							{  								// deleted file mode <mode>  								fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  							}  						}  						break;  					case Header.CopyFrom:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy from <path>  							fileHeader.CopyFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.CopyTo:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy to <path>  							fileHeader.CopyTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameFrom:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename from <path>  							fileHeader.RenameFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameTo:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename to <path>  							fileHeader.RenameTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.SimilarityIndex:  						{  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out var index))  							{  								fileHeader.SimilarityIndex = index;  							}  						}  						break;  					case Header.DissimilarityIndex:  						{  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out var index))  							{  								fileHeader.DissimilarityIndex = index;  							}  						}  						break;  					case Header.Unknown:  						if(IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader))  						{  							completed = true;  						}  						else  						{  							SkipLine();  						}  						break;  					default:  						if(dataPresent)  						{  							SkipLine();  						}  						break;  				}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The following statement contains a magic number: switch(header)  				{  					case Header.Index:  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// index <hash>'<hash>..<hash>  								SkipLine();  							}  							else  							{  								int pos = FindNoAdvance("..");  								fileHeader.OldIndex = ReadStringUpTo(pos' 2);  								pos = FindNewLineOrEndOfString();  								int space = FindSpace(pos - Position);  								if(space == -1)  								{  									// index <hash>..<hash>  									fileHeader.NewIndex = ReadStringUpTo(pos' 1);  								}  								else  								{  									// index <hash>..<hash> <mode>  									fileHeader.NewIndex = ReadStringUpTo(space' 1);  									fileHeader.NewMode = int.Parse(ReadStringUpTo(pos' 1)' NumberStyles.None' CultureInfo.InvariantCulture);  								}  							}  						}  						break;  					case Header.OldMode:  						// old mode <mode>  						if(dataPresent)  						{  							fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.NewMode:  						// new mode <mode>  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.Mode:  						// mode <mode>'<mode>..<mode>  						if(dataPresent)  						{  							SkipLine();  						}  						break;  					case Header.NewFileMode:  						// new file mode <mode>  						fileHeader.Status = FileStatus.Added;  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.DeletedFileMode:  						fileHeader.Status = FileStatus.Removed;  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// deleted file mode <mode>'<mode>  								SkipLine();  							}  							else  							{  								// deleted file mode <mode>  								fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  							}  						}  						break;  					case Header.CopyFrom:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy from <path>  							fileHeader.CopyFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.CopyTo:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy to <path>  							fileHeader.CopyTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameFrom:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename from <path>  							fileHeader.RenameFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameTo:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename to <path>  							fileHeader.RenameTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.SimilarityIndex:  						{  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out var index))  							{  								fileHeader.SimilarityIndex = index;  							}  						}  						break;  					case Header.DissimilarityIndex:  						{  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out var index))  							{  								fileHeader.DissimilarityIndex = index;  							}  						}  						break;  					case Header.Unknown:  						if(IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader))  						{  							completed = true;  						}  						else  						{  							SkipLine();  						}  						break;  					default:  						if(dataPresent)  						{  							SkipLine();  						}  						break;  				}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: Skip(4);
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: source = source.Substring(2);
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: Skip(4);
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: target = target.Substring(2);
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ByteFromOctString,The following statement contains a magic number: n *= 8;
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseBranch,The following statement contains a magic number: Skip(2);
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseBranch,The following statement contains a magic number: current && (space == Position + 3) && CheckValue(GitConstants.NoBranch)
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: p -= 3;
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: trimEnd += 3;
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: String[p] == 'K' && String[p - 1] == '[' && String[p - 2] == '\u001B'
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: p - Position + 1 > 3
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseCommitParentsFromRaw,The following statement contains a magic number: Skip(7);
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadRevisionParents,The following statement contains a magic number: int numParents = (end - Position + 1) / 41;
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadHash,The following statement contains a magic number: Skip(40);
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadHash,The following statement contains a magic number: Skip(40 + skip);
Magic Number,gitter.Git.AccessLayer.CLI,ByteString,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,AppendByte,The following statement contains a magic number: var buffer = new byte[_buffer.Length * 2];
Magic Number,gitter.Git.AccessLayer.CLI,QueryReflogImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryReflogImpl.cs,ParseResult1,The following statement contains a magic number: output.Output.Length < 40
Magic Number,gitter.Git.AccessLayer.CLI,QueryReflogImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryReflogImpl.cs,InvokeAsync,The following statement contains a magic number: task1.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QueryReflogImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryReflogImpl.cs,InvokeAsync,The following statement contains a magic number: task2.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QueryStashImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryStashImpl.cs,ParseResult1,The following statement contains a magic number: parser.Skip(41);
Magic Number,gitter.Git.AccessLayer.CLI,QueryStashImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryStashImpl.cs,InvokeAsync,The following statement contains a magic number: task1.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QueryStashImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryStashImpl.cs,InvokeAsync,The following statement contains a magic number: task2.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QuerySymbolicReferenceImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QuerySymbolicReferenceImpl.cs,Parse,The following statement contains a magic number: return new SymbolicReferenceData(value.Substring(16)' ReferenceType.LocalBranch);
Magic Number,gitter.Git.AccessLayer.CLI,QuerySymbolicReferenceImpl,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Methods\QuerySymbolicReferenceImpl.cs,Parse,The following statement contains a magic number: value != null && value.Length >= 17 && value.StartsWith(refPrefix + GitConstants.LocalBranchPrefix)
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRevisionGraph,The following statement contains a magic number: var sha1 = parser.ReadString(40' 1);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRevisionGraph,The following statement contains a magic number: int numParents = (end - parser.Position + 1) / 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: output.ExitCode != 0 && output.ExitCode != 128
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToRemove,The following statement contains a magic number: res.Add(files.Substring(pos + 4' eol - pos - 5));
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToRemove,The following statement contains a magic number: res.Add(files.Substring(pos + 4' eol - pos - 5));
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToClean,The following statement contains a magic number: parser.Skip(13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseUsers,The following statement contains a magic number: string name = parser.ReadStringUpTo(emailSeparator' 2);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseUsers,The following statement contains a magic number: string email = parser.ReadStringUpTo(eol - 1' 2);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string fetchUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string fetchUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string pushUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string pushUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: var hash = output.Substring(pos' 40);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: pos += 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: var hash2 = output.Substring(pos' 40);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: int pos2 = pos + 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParsePrunedBranches,The following statement contains a magic number: res.Add(branches.Substring(pos + 17' end - pos - 17));
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParsePrunedBranches,The following statement contains a magic number: res.Add(branches.Substring(pos + 17' end - pos - 17));
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseNotes,The following statement contains a magic number: var noteSHA1 = parser.ReadString(40' 1);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseNotes,The following statement contains a magic number: var objectSHA1 = parser.ReadString(40' 1);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseNotes,The following statement contains a magic number: notes.Length > 81
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTreeContent,The following statement contains a magic number: pos += 5;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTreeContent,The following statement contains a magic number: pos += 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseReferences,The following statement contains a magic number: pos += 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,IsBranchNotFullyMergedError,The following statement contains a magic number: error.Length == errNotMerged3.Length + errNotMerged4.Length + errNotMerged5.Length + 2 * branchName.Length
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTag,The following statement contains a magic number: hash = new Hash(output.Output' 41);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTag,The following statement contains a magic number: tag.Length >= 81
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTag,The following statement contains a magic number: output.ExitCode == 0 && tag.Length >= 40
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: var strHash = strTag.Substring(pos' 40);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: pos += 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: var strName = strTag.Substring(pos + 10' pos2 - pos - 10);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: var strName = strTag.Substring(pos + 10' pos2 - pos - 10);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: strHash = strTag.Substring(pos' 40);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: strTag[pos2 - 3] == '^'
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParsePushResult,The following statement contains a magic number: pos += 2;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,HashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,HashField,The following statement contains a magic number: _buffer = new char[40];
Magic Number,gitter.Git.AccessLayer.CLI,HashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: Verify.State.IsFalse(_offset == 41' "Field is already completed.");
Magic Number,gitter.Git.AccessLayer.CLI,HashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: int c = Math.Min(textSegment.Length' 40 - _offset);
Magic Number,gitter.Git.AccessLayer.CLI,HashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: _offset < 40
Magic Number,gitter.Git.AccessLayer.CLI,HashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: _offset = 41;
Magic Number,gitter.Git.AccessLayer.CLI,HashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: _offset == 40 && textSegment.Length > 0
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,MultiHashField,The following statement contains a magic number: _buffer = new char[40];
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: int c = Math.Min(textSegment.Length' 40 - _offset);
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: _offset < 40 && textSegment.Length > 0
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: _offset == 40 && textSegment.Length > 0
Magic Number,gitter.Git.AccessLayer.CLI,UnixTimestampField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: _timestamp = _timestamp * 10 + value;
Magic Number,gitter.Git.AccessLayer.CLI,UnixTimestampField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: value >= 0 && value <= 9
Magic Number,gitter.Git.AccessLayer.CLI,EmptyLineSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,EmptyLineSeparator,The following statement contains a magic number: _buffer = new char[4];
Magic Number,gitter.Git.AccessLayer.CLI,EmptyLineSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Append,The following statement contains a magic number: return _lineEndings == 2;
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,StatusLine,The following statement contains a magic number: _from   = new StringBuilder(260);
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,StatusLine,The following statement contains a magic number: _to     = new StringBuilder(260);
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,StatusLine,The following statement contains a magic number: _offset = -3;
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The following statement contains a magic number: switch(_offset)  					{  						case -3:  							X = textSegment.ReadChar();  							++_offset;  							break;  						case -2:  							Y = textSegment.ReadChar();  							++_offset;  							break;  						case -1:  							textSegment.Skip(1);  							++_offset;  							break;  						case 0:  							if(ParseFileName(textSegment' _to))  							{  								++_offset;  								if(X != 'C' && X != 'R')  								{  									++_offset;  									return true;  								}  							}  							break;  						case 1:  							if(ParseFileName(textSegment' _from))  							{  								++_offset;  								return true;  							}  							break;  					}
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The following statement contains a magic number: switch(_offset)  					{  						case -3:  							X = textSegment.ReadChar();  							++_offset;  							break;  						case -2:  							Y = textSegment.ReadChar();  							++_offset;  							break;  						case -1:  							textSegment.Skip(1);  							++_offset;  							break;  						case 0:  							if(ParseFileName(textSegment' _to))  							{  								++_offset;  								if(X != 'C' && X != 'R')  								{  									++_offset;  									return true;  								}  							}  							break;  						case 1:  							if(ParseFileName(textSegment' _from))  							{  								++_offset;  								return true;  							}  							break;  					}
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Reset,The following statement contains a magic number: _offset = -3;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPathToGitExe.Size = new System.Drawing.Size(105' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPathToGitExe.Size = new System.Drawing.Size(105' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Location = new System.Drawing.Point(3' 24);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Location = new System.Drawing.Point(3' 24);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Size = new System.Drawing.Size(473' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Size = new System.Drawing.Size(473' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.TabIndex = 2;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Location = new System.Drawing.Point(270' 53);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Location = new System.Drawing.Point(270' 53);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.TabIndex = 3;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.Location = new System.Drawing.Point(0' 57);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.Size = new System.Drawing.Size(106' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.Size = new System.Drawing.Size(106' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.TabIndex = 7;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Location = new System.Drawing.Point(376' 53);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Location = new System.Drawing.Point(376' 53);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.TabIndex = 9;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Location = new System.Drawing.Point(114' 57);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Location = new System.Drawing.Point(114' 57);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Size = new System.Drawing.Size(83' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Size = new System.Drawing.Size(83' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.TabIndex = 11;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Location = new System.Drawing.Point(117' -2);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Location = new System.Drawing.Point(117' -2);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Size = new System.Drawing.Size(148' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Size = new System.Drawing.Size(148' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.TabIndex = 12;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Location = new System.Drawing.Point(270' -2);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Location = new System.Drawing.Point(270' -2);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Size = new System.Drawing.Size(141' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Size = new System.Drawing.Size(141' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.TabIndex = 13;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Location = new System.Drawing.Point(114' 86);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Location = new System.Drawing.Point(114' 86);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Size = new System.Drawing.Size(81' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Size = new System.Drawing.Size(81' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.TabIndex = 21;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.Location = new System.Drawing.Point(0' 86);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.Size = new System.Drawing.Size(103' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.Size = new System.Drawing.Size(103' 15);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.TabIndex = 20;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Location = new System.Drawing.Point(376' 82);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Location = new System.Drawing.Point(376' 82);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.TabIndex = 19;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Location = new System.Drawing.Point(270' 82);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Location = new System.Drawing.Point(270' 82);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.TabIndex = 18;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Location = new System.Drawing.Point(3' 133);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Location = new System.Drawing.Point(3' 133);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Size = new System.Drawing.Size(372' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Size = new System.Drawing.Size(372' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.TabIndex = 17;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Location = new System.Drawing.Point(3' 111);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Location = new System.Drawing.Point(3' 111);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Size = new System.Drawing.Size(227' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Size = new System.Drawing.Size(227' 20);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.TabIndex = 17;
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(479' 158);
Magic Number,gitter.Git,CliOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(479' 158);
Magic Number,gitter.Git,GitRepositoryUpdateChannel,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\GitRepositoryUpdateChannel.cs,CheckVersion,The following statement contains a magic number: var sha1	= parser.ReadString(40' 1);
Magic Number,gitter.Git,MSysGitDownloader,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,OnGotResponse,The following statement contains a magic number: process.Buffer = new byte[1024*4];
Magic Number,gitter.Git,MSysGitDownloader,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,OnGotResponse,The following statement contains a magic number: process.Buffer = new byte[1024*4];
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,The following switch statement is missing a default case: switch(parameters.MergesMode)  			{  				case RevisionMergesQueryMode.MergesOnly:  					args.Add(LogCommand.Merges());  					break;  				case RevisionMergesQueryMode.NoMerges:  					args.Add(LogCommand.NoMerges());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,The following switch statement is missing a default case: switch(parameters.Order)  			{  				case RevisionQueryOrder.DateOrder:  					args.Add(LogCommand.DateOrder());  					break;  				case RevisionQueryOrder.TopoOrder:  					args.Add(LogCommand.TopoOrder());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertAddFilesParameters,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case AddFilesMode.All:  					args.Add(AddCommand.All());  					break;  				case AddFilesMode.Update:  					args.Add(AddCommand.Update());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertCleanFilesParameters,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case CleanFilesMode.IncludeIgnored:  					args.Add(CleanCommand.IncludeIgnored());  					break;  				case CleanFilesMode.OnlyIgnored:  					args.Add(CleanCommand.ExcludeUntracked());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCheckoutFilesCommand,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case CheckoutFileMode.Ours:  					builder.Ours();  					break;  				case CheckoutFileMode.Theirs:  					builder.Theirs();  					break;  				case CheckoutFileMode.Merge:  					builder.Merge();  					break;  				case CheckoutFileMode.IgnoreUnmergedEntries:  					builder.Force();  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertFetchParameters,The following switch statement is missing a default case: switch(parameters.TagFetchMode)  			{  				case TagFetchMode.Default:  					break;  				case TagFetchMode.AllTags:  					args.Add(FetchCommand.Tags());  					break;  				case TagFetchMode.NoTags:  					args.Add(FetchCommand.NoTags());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetPushCommand,The following switch statement is missing a default case: switch(parameters.PushMode)  			{  				case PushMode.Default:  					break;  				case PushMode.AllLocalBranches:  					args.Add(PushCommand.All());  					break;  				case PushMode.Mirror:  					args.Add(PushCommand.Mirror());  					break;  				case PushMode.Tags:  					args.Add(PushCommand.Tags());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddRemoteCommand,The following switch statement is missing a default case: switch(parameters.TagFetchMode)  			{  				case TagFetchMode.Default:  					break;  				case TagFetchMode.AllTags:  					args.Add(RemoteCommand.Tags());  					break;  				case TagFetchMode.NoTags:  					args.Add(RemoteCommand.NoTags());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryBranchesCommand,The following switch statement is missing a default case: switch(parameters.Restriction)  			{  				case QueryBranchRestriction.All:  					builder.All();  					break;  				case QueryBranchRestriction.Remote:  					builder.Remotes();  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryBranchesCommand,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case BranchQueryMode.Contains:  					builder.Contains(parameters.Revision);  					break;  				case BranchQueryMode.Merged:  					builder.Merged(parameters.Revision);  					break;  				case BranchQueryMode.NoMerged:  					builder.NoMerged(parameters.Revision);  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateBranchCommand,The following switch statement is missing a default case: switch(parameters.TrackingMode)  				{  					case BranchTrackingMode.NotTracking:  						builder.NoTrack();  						break;  					case BranchTrackingMode.Tracking:  						builder.Track();  						break;  				}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateBranchCommand,The following switch statement is missing a default case: switch(parameters.TrackingMode)  				{  					case BranchTrackingMode.NotTracking:  						builder.NoTrack();  						break;  					case BranchTrackingMode.Tracking:  						builder.Track();  						break;  				}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetUpdateSubmoduleCommand,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case SubmoduleUpdateMode.Merge:  					args.Add(SubmoduleCommand.Merge());  					break;  				case SubmoduleUpdateMode.Rebase:  					args.Add(SubmoduleCommand.Rebase());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertConfigFileSpecifier,The following switch statement is missing a default case: switch(parameters.ConfigFile)  			{  				case ConfigFile.Repository:  				case ConfigFile.Other:  					if(parameters.FileName != null)  					{  						args.Add(ConfigCommand.File(parameters.FileName));  					}  					break;  				case ConfigFile.System:  					args.Add(ConfigCommand.System());  					break;  				case ConfigFile.User:  					args.Add(ConfigCommand.Global());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffLine,The following switch statement is missing a default case: switch(state)  			{  				case DiffLineState.Context:  					for(int i = 0; i < nc; ++i)  					{  						++nums[i];  					}  					break;  				case DiffLineState.Added:  					for(int i = 0; i < nc; ++i)  					{  						if(states[i] == DiffLineState.Context)  						{  							++nums[i];  						}  					}  					break;  				case DiffLineState.Removed:  					for(int i = 0; i < nc - 1; ++i)  					{  						if(states[i] == DiffLineState.Context)  						{  							states[i] = DiffLineState.NotPresent;  						}  						else if(states[i] == DiffLineState.Removed)  						{  							states[i] = DiffLineState.Context;  							++nums[i];  						}  					}  					states[nc - 1] = DiffLineState.Removed;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,DiffParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFile,The following switch statement is missing a default case: switch(header.Status)  			{  				case FileStatus.Renamed:  					source = header.RenameFrom;  					target = header.RenameTo;  					break;  				case FileStatus.Copied:  					source = header.CopyFrom;  					target = header.CopyTo;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,OutputParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following switch statement is missing a default case: switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}
Missing Default,gitter.Git.AccessLayer.CLI,SubjectAndBodyField,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following switch statement is missing a default case: switch(separatorChar)  						{  							case '\0':  								RemoveTrailingWhitespace(_subject);  								if(_isSubjectCompleted)  								{  									RemoveTrailingWhitespace(_body);  								}  								_isCompleted = true;  								return true;  							case '\r':  							case '\n':  								if(_isSubjectCompleted)  								{  									_body.Append(separatorChar);  								}  								else  								{  									if(_separator.Append(separatorChar))  									{  										_isSubjectCompleted = true;  										_separator.Reset();  									}  								}  								break;  						}
Missing Default,gitter.Git.AccessLayer.CLI,StatusParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,AddUnstagedStats,The following switch statement is missing a default case: switch(fileStatus)  			{  				case FileStatus.Added:  					_unstagedUntrackedCount += count;  					break;  				case FileStatus.Removed:  					_unstagedRemovedCount += count;  					break;  				case FileStatus.Modified:  					_unstagedModifiedCount += count;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,StatusParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,AddStagedStats,The following switch statement is missing a default case: switch(fileStatus)  			{  				case FileStatus.Added:  					_stagedAddedCount += count;  					break;  				case FileStatus.Removed:  					_stagedRemovedCount += count;  					break;  				case FileStatus.Modified:  					_stagedModifiedCount += count;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,StatusLine,D:\research\architectureSmells\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The following switch statement is missing a default case: switch(_offset)  					{  						case -3:  							X = textSegment.ReadChar();  							++_offset;  							break;  						case -2:  							Y = textSegment.ReadChar();  							++_offset;  							break;  						case -1:  							textSegment.Skip(1);  							++_offset;  							break;  						case 0:  							if(ParseFileName(textSegment' _to))  							{  								++_offset;  								if(X != 'C' && X != 'R')  								{  									++_offset;  									return true;  								}  							}  							break;  						case 1:  							if(ParseFileName(textSegment' _from))  							{  								++_offset;  								return true;  							}  							break;  					}
