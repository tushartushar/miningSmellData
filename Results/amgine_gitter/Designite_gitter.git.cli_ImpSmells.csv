Implementation smell,Namespace,Class,File,Method,Description
Long Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,The method has 144 lines of code.
Long Method,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The method has 195 lines of code.
Long Method,gitter.Git.AccessLayer.CLI,StatusParser,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The method has 102 lines of code.
Long Method,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The method has 191 lines of code.
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCloneCommand,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,Cyclomatic complexity of the method is 32
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCommitCommand,Cyclomatic complexity of the method is 13
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertAddFilesParameters,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertCleanFilesParameters,Cyclomatic complexity of the method is 11
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertDiffParameters1,Cyclomatic complexity of the method is 18
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertFetchParameters,Cyclomatic complexity of the method is 10
Complex Method,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetPushCommand,Cyclomatic complexity of the method is 10
Complex Method,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,DecodeEscapedString,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseProgress,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,Cyclomatic complexity of the method is 8
Complex Method,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleCheckoutResult,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,StatusParser,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,gitter.Git.AccessLayer.CLI,GitProcess,C:\repos\amgine_gitter\gitter.git.cli.prj\Process\GitProcess.cs,DetectGitExePath,Cyclomatic complexity of the method is 8
Long Parameter List,gitter,Argument,C:\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter,Argument,C:\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommand,The method has 5 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsyncCore,The method has 6 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsync,The method has 5 parameters. Parameters: command' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,CommandExecutorBase,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsync,The method has 6 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,RemoteCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The method has 7 parameters. Parameters: name' url' master' branches' mirror' fetch' tags
Long Parameter List,gitter.Git.AccessLayer.CLI,BranchCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\branch.cs,FormatCreateBranchCommand,The method has 5 parameters. Parameters: name' startingRevision' specifyTracking' track' reflog
Long Parameter List,gitter.Git.AccessLayer.CLI,CheckoutCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\checkout.cs,FormatCreateBranchCommand,The method has 5 parameters. Parameters: name' startingRevision' specifyTracking' track' reflog
Long Parameter List,gitter.Git.AccessLayer.CLI,PushCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\push.cs,FormatPushCommand,The method has 5 parameters. Parameters: remote' branches' force' thin' tags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,C:\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: action' commandExecutor' commandFactory' resultHandler' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,C:\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: action' commandExecutor' commandFactory' resultHandler' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,C:\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: function' commandExecutor' commandFactory' resultParser' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,GitCliMethod,C:\repos\amgine_gitter\gitter.git.cli.prj\GitCliMethod.cs,Create,The method has 5 parameters. Parameters: function' commandExecutor' commandFactory' resultParser' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,ICommandExecutor,C:\repos\amgine_gitter\gitter.git.cli.prj\ICommandExecutor.cs,ExecuteCommand,The method has 5 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags
Long Parameter List,gitter.Git.AccessLayer.CLI,ICommandExecutor,C:\repos\amgine_gitter\gitter.git.cli.prj\ICommandExecutor.cs,ExecuteCommandAsync,The method has 5 parameters. Parameters: command' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Parameter List,gitter.Git.AccessLayer.CLI,ICommandExecutor,C:\repos\amgine_gitter\gitter.git.cli.prj\ICommandExecutor.cs,ExecuteCommandAsync,The method has 6 parameters. Parameters: command' encoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken
Long Statement,gitter.Git.AccessLayer.CLI,CommandExecutorBase,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandExecutorBase.cs,ExecuteCommandAsync,The length of the statement  "			return ExecuteCommandAsyncCore(command' GitProcess.DefaultEncoding' stdOutReceiver' stdErrReceiver' flags' cancellationToken); " is 126.
Long Statement,gitter.Git.AccessLayer.CLI,RemoteCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The length of the statement  "			var args = new ICommandArgument[1+2+(master!=null?1:0)+(branches!=null?branches.Length:0)+(mirror?1:0)+(fetch?(tags?2:1):0)]; " is 125.
Long Statement,gitter.Git.AccessLayer.CLI,DiffCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindRenames,The length of the statement  "			return new CommandParameterValue("--find-renames"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '='); " is 125.
Long Statement,gitter.Git.AccessLayer.CLI,DiffCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindCopies,The length of the statement  "			return new CommandParameterValue("--find-copies"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '='); " is 124.
Long Statement,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadUnixTimestampLine,The length of the statement  "			if(string.IsNullOrWhiteSpace(timestampStr) || !long.TryParse(timestampStr' NumberStyles.None' CultureInfo.InvariantCulture' out timestamp)) " is 139.
Long Statement,gitter.Git.AccessLayer.CLI,FormatMergeMessageImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\FormatMergeMessageImpl.cs,Invoke,The length of the statement  "				var msg = string.Format("Merge branch '{0}' into {1}\r\n\r\n"' rev' parameters.HeadReference) + "Changes:\r\n" + commits; " is 121.
Long Statement,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseReferences,The length of the statement  "								if(StringUtility.CheckValue(refs' pos2' name) && StringUtility.CheckValue(refs' pos2 + name.Length' GitConstants.DereferencedTagPostfix)) " is 137.
Long Statement,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._txtmSysGitPath.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._cmdAutoDetect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._cmdBrowse.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._btnDownload.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The length of the statement  "			this._btnRefreshLatestVersion.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 160.
Long Statement,gitter.Git,MSysGitDownloader,C:\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,UpdateDownloadProgress,The length of the statement  "			if(process.Monitor != null && process.WebResponse.ContentLength > 0 && process.DownloadedBytes <= process.WebResponse.ContentLength) " is 132.
Complex Conditional,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The conditional expression  "IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader)"  is complex.
Complex Conditional,gitter.Git,GitRepositoryUpdateChannel,C:\repos\amgine_gitter\gitter.git.cli.prj\GitRepositoryUpdateChannel.cs,CheckVersion,The conditional expression  "sha1 == branchSHA1 &&  						refname.Length > GitConstants.TagPrefix.Length + 1 &&  						refname.StartsWith(GitConstants.TagPrefix) &&  						refname[GitConstants.TagPrefix.Length] == 'v'"  is complex.
Empty Catch Block,gitter.Git,MSysGitDownloader,C:\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,MSysGitDownloader,The method has an empty catch block.
Empty Catch Block,gitter.Git,DownloadAndInstallProcess,C:\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,OnInstallerProcessExited,The method has an empty catch block.
Magic Number,gitter.Git.AccessLayer.CLI,BlameParser,C:\repos\amgine_gitter\gitter.git.cli.prj\BlameParser.cs,ReadPreviousValue,The following statement contains a magic number: if(CheckValue(PreviousHeader))  			{  				Skip(PreviousHeader.Length + 1);  				var previous = ReadString(40);  				SkipLine();  				return previous;  			}  			else  			{  				return null;  			}
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetInitCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryStatusCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(7);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryRevisionsCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(30);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryRevisionGraphCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(30);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryReflogCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCommitCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(12);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryFilesToAddCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 6);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryFilesToRemoveCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryFilesToCleanCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(  				(parameters.ExcludePatterns != null ? parameters.ExcludePatterns.Count : 0) +  				(parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddFilesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetRemoveFilesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCleanFilesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(  				(parameters.ExcludePatterns != null ? parameters.ExcludePatterns.Count : 0) +  				(parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetStashApplyCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetStashPopCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetStashToBranchCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCheckoutFilesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Paths != null ? parameters.Paths.Count + 1 : 0) + 2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetArchiveCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetFetchCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(10);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddRemoteCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Branches != null ? parameters.Branches.Count : 0) + 6);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryRemoteReferencesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryBranchesCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(6);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateBranchCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(6);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetDescribeCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateTagCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(5);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetRunMergeToolCommand,The following statement contains a magic number: var args = new List<ICommandArgument>((parameters.Files != null ? parameters.Files.Count : 0) + 2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryConfigParameterCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryConfigCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddConfigValueCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(4);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetSetConfigValueCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetUnsetConfigValueCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(3);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetRenameConfigSectionCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetDeleteConfigSectionCommand,The following statement contains a magic number: var args = new List<ICommandArgument>(2);
Magic Number,gitter.Git.AccessLayer.CLI,RemoteCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The following statement contains a magic number: var args = new ICommandArgument[1+2+(master!=null?1:0)+(branches!=null?branches.Length:0)+(mirror?1:0)+(fetch?(tags?2:1):0)];
Magic Number,gitter.Git.AccessLayer.CLI,RemoteCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Ancillary\Manipulation\remote.cs,FormatAddCommand,The following statement contains a magic number: var args = new ICommandArgument[1+2+(master!=null?1:0)+(branches!=null?branches.Length:0)+(mirror?1:0)+(fetch?(tags?2:1):0)];
Magic Number,gitter.Git.AccessLayer.CLI,BranchCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\branch.cs,FormatCreateBranchCommand,The following statement contains a magic number: var args = new ICommandArgument[2+(specifyTracking?1:0)+(reflog?1:0)];
Magic Number,gitter.Git.AccessLayer.CLI,CheckoutCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\checkout.cs,FormatCreateBranchCommand,The following statement contains a magic number: var args = new ICommandArgument[3 + (specifyTracking ? 1 : 0) + (reflog ? 1 : 0)];
Magic Number,gitter.Git.AccessLayer.CLI,CheckoutCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\checkout.cs,FormatCreateBranchCommand,The following statement contains a magic number: args[id + 2] = new CommandParameter(startingRevision);
Magic Number,gitter.Git.AccessLayer.CLI,DiffCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindRenames,The following statement contains a magic number: return new CommandParameterValue("--find-renames"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '=');
Magic Number,gitter.Git.AccessLayer.CLI,DiffCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\diff.cs,FindCopies,The following statement contains a magic number: return new CommandParameterValue("--find-copies"' similarity.ToString("G"' CultureInfo.InvariantCulture).Substring(2)' '=');
Magic Number,gitter.Git.AccessLayer.CLI,PushCommand,C:\repos\amgine_gitter\gitter.git.cli.prj\Commands\Main\push.cs,FormatPushCommand,The following statement contains a magic number: var args = new ICommandArgument[branches.Count + 3 + (force?1:0) + (tags?1:0)];
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader1,The following statement contains a magic number: if(combined)  			{  				Skip(CombinedHeader.Length + 1);  				source = target = DecodeEscapedString(eol' 1).Trim();  			}  			else  			{  				if(cc)  				{  					Skip(CCHeader.Length + 1);  					source = target = DecodeEscapedString(eol' 1).Trim();  				}  				else  				{  					int offset = 10;  					int len = (eol - Position - offset) / 2;  					offset += 1;  					len -= 1;  					Skip(offset);  					source = target = DecodeEscapedString(Position + len).Trim();  					if(target.StartsWith(DefaultPrefixA))  					{  						source = target = target.Substring(2);  					}  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader1,The following statement contains a magic number: if(combined)  			{  				Skip(CombinedHeader.Length + 1);  				source = target = DecodeEscapedString(eol' 1).Trim();  			}  			else  			{  				if(cc)  				{  					Skip(CCHeader.Length + 1);  					source = target = DecodeEscapedString(eol' 1).Trim();  				}  				else  				{  					int offset = 10;  					int len = (eol - Position - offset) / 2;  					offset += 1;  					len -= 1;  					Skip(offset);  					source = target = DecodeEscapedString(Position + len).Trim();  					if(target.StartsWith(DefaultPrefixA))  					{  						source = target = target.Substring(2);  					}  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader1,The following statement contains a magic number: if(combined)  			{  				Skip(CombinedHeader.Length + 1);  				source = target = DecodeEscapedString(eol' 1).Trim();  			}  			else  			{  				if(cc)  				{  					Skip(CCHeader.Length + 1);  					source = target = DecodeEscapedString(eol' 1).Trim();  				}  				else  				{  					int offset = 10;  					int len = (eol - Position - offset) / 2;  					offset += 1;  					len -= 1;  					Skip(offset);  					source = target = DecodeEscapedString(Position + len).Trim();  					if(target.StartsWith(DefaultPrefixA))  					{  						source = target = target.Substring(2);  					}  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The following statement contains a magic number: while(!completed)  			{  				var header = Header.Unknown;  				bool dataPresent = false;  				for(int i = 0; i < DiffHeaders.Length; ++i)  				{  					if(!headerPresent[i])  					{  						if(CheckValue(DiffHeaders[i]))  						{  							Skip(DiffHeaders[i].Length);  							if(CheckValue(' '))  							{  								dataPresent = true;  							}  							Skip();  							headerPresent[i] = true;  							header = (Header)i;  							break;  						}  					}  				}  				switch(header)  				{  					case Header.Index:  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// index <hash>'<hash>..<hash>  								SkipLine();  							}  							else  							{  								int pos = FindNoAdvance("..");  								fileHeader.OldIndex = ReadStringUpTo(pos' 2);  								pos = FindNewLineOrEndOfString();  								int space = FindSpace(pos - Position);  								if(space == -1)  								{  									// index <hash>..<hash>  									fileHeader.NewIndex = ReadStringUpTo(pos' 1);  								}  								else  								{  									// index <hash>..<hash> <mode>  									fileHeader.NewIndex = ReadStringUpTo(space' 1);  									fileHeader.NewMode = int.Parse(ReadStringUpTo(pos' 1)' NumberStyles.None' CultureInfo.InvariantCulture);  								}  							}  						}  						break;  					case Header.OldMode:  						// old mode <mode>  						if(dataPresent)  						{  							fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.NewMode:  						// new mode <mode>  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.Mode:  						// mode <mode>'<mode>..<mode>  						if(dataPresent)  						{  							SkipLine();  						}  						break;  					case Header.NewFileMode:  						// new file mode <mode>  						fileHeader.Status = FileStatus.Added;  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.DeletedFileMode:  						fileHeader.Status = FileStatus.Removed;  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// deleted file mode <mode>'<mode>  								SkipLine();  							}  							else  							{  								// deleted file mode <mode>  								fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  							}  						}  						break;  					case Header.CopyFrom:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy from <path>  							fileHeader.CopyFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.CopyTo:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy to <path>  							fileHeader.CopyTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameFrom:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename from <path>  							fileHeader.RenameFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameTo:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename to <path>  							fileHeader.RenameTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.SimilarityIndex:  						{  							int index;  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out index))  							{  								fileHeader.SimilarityIndex = index;  							}  						}  						break;  					case Header.DissimilarityIndex:  						{  							int index;  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out index))  							{  								fileHeader.DissimilarityIndex = index;  							}  						}  						break;  					case Header.Unknown:  						if(IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader))  						{  							completed = true;  						}  						else  						{  							SkipLine();  						}  						break;  					default:  						if(dataPresent)  						{  							SkipLine();  						}  						break;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The following statement contains a magic number: while(!completed)  			{  				var header = Header.Unknown;  				bool dataPresent = false;  				for(int i = 0; i < DiffHeaders.Length; ++i)  				{  					if(!headerPresent[i])  					{  						if(CheckValue(DiffHeaders[i]))  						{  							Skip(DiffHeaders[i].Length);  							if(CheckValue(' '))  							{  								dataPresent = true;  							}  							Skip();  							headerPresent[i] = true;  							header = (Header)i;  							break;  						}  					}  				}  				switch(header)  				{  					case Header.Index:  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// index <hash>'<hash>..<hash>  								SkipLine();  							}  							else  							{  								int pos = FindNoAdvance("..");  								fileHeader.OldIndex = ReadStringUpTo(pos' 2);  								pos = FindNewLineOrEndOfString();  								int space = FindSpace(pos - Position);  								if(space == -1)  								{  									// index <hash>..<hash>  									fileHeader.NewIndex = ReadStringUpTo(pos' 1);  								}  								else  								{  									// index <hash>..<hash> <mode>  									fileHeader.NewIndex = ReadStringUpTo(space' 1);  									fileHeader.NewMode = int.Parse(ReadStringUpTo(pos' 1)' NumberStyles.None' CultureInfo.InvariantCulture);  								}  							}  						}  						break;  					case Header.OldMode:  						// old mode <mode>  						if(dataPresent)  						{  							fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.NewMode:  						// new mode <mode>  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.Mode:  						// mode <mode>'<mode>..<mode>  						if(dataPresent)  						{  							SkipLine();  						}  						break;  					case Header.NewFileMode:  						// new file mode <mode>  						fileHeader.Status = FileStatus.Added;  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.DeletedFileMode:  						fileHeader.Status = FileStatus.Removed;  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// deleted file mode <mode>'<mode>  								SkipLine();  							}  							else  							{  								// deleted file mode <mode>  								fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  							}  						}  						break;  					case Header.CopyFrom:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy from <path>  							fileHeader.CopyFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.CopyTo:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy to <path>  							fileHeader.CopyTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameFrom:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename from <path>  							fileHeader.RenameFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameTo:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename to <path>  							fileHeader.RenameTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.SimilarityIndex:  						{  							int index;  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out index))  							{  								fileHeader.SimilarityIndex = index;  							}  						}  						break;  					case Header.DissimilarityIndex:  						{  							int index;  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out index))  							{  								fileHeader.DissimilarityIndex = index;  							}  						}  						break;  					case Header.Unknown:  						if(IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader))  						{  							completed = true;  						}  						else  						{  							SkipLine();  						}  						break;  					default:  						if(dataPresent)  						{  							SkipLine();  						}  						break;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader2,The following statement contains a magic number: while(!completed)  			{  				var header = Header.Unknown;  				bool dataPresent = false;  				for(int i = 0; i < DiffHeaders.Length; ++i)  				{  					if(!headerPresent[i])  					{  						if(CheckValue(DiffHeaders[i]))  						{  							Skip(DiffHeaders[i].Length);  							if(CheckValue(' '))  							{  								dataPresent = true;  							}  							Skip();  							headerPresent[i] = true;  							header = (Header)i;  							break;  						}  					}  				}  				switch(header)  				{  					case Header.Index:  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// index <hash>'<hash>..<hash>  								SkipLine();  							}  							else  							{  								int pos = FindNoAdvance("..");  								fileHeader.OldIndex = ReadStringUpTo(pos' 2);  								pos = FindNewLineOrEndOfString();  								int space = FindSpace(pos - Position);  								if(space == -1)  								{  									// index <hash>..<hash>  									fileHeader.NewIndex = ReadStringUpTo(pos' 1);  								}  								else  								{  									// index <hash>..<hash> <mode>  									fileHeader.NewIndex = ReadStringUpTo(space' 1);  									fileHeader.NewMode = int.Parse(ReadStringUpTo(pos' 1)' NumberStyles.None' CultureInfo.InvariantCulture);  								}  							}  						}  						break;  					case Header.OldMode:  						// old mode <mode>  						if(dataPresent)  						{  							fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.NewMode:  						// new mode <mode>  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.Mode:  						// mode <mode>'<mode>..<mode>  						if(dataPresent)  						{  							SkipLine();  						}  						break;  					case Header.NewFileMode:  						// new file mode <mode>  						fileHeader.Status = FileStatus.Added;  						if(dataPresent)  						{  							fileHeader.NewMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  						}  						break;  					case Header.DeletedFileMode:  						fileHeader.Status = FileStatus.Removed;  						if(dataPresent)  						{  							if(combinedDiff)  							{  								// deleted file mode <mode>'<mode>  								SkipLine();  							}  							else  							{  								// deleted file mode <mode>  								fileHeader.OldMode = int.Parse(ReadLine()' NumberStyles.None' CultureInfo.InvariantCulture);  							}  						}  						break;  					case Header.CopyFrom:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy from <path>  							fileHeader.CopyFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.CopyTo:  						fileHeader.Status = FileStatus.Copied;  						if(dataPresent)  						{  							// copy to <path>  							fileHeader.CopyTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameFrom:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename from <path>  							fileHeader.RenameFrom = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.RenameTo:  						fileHeader.Status = FileStatus.Renamed;  						if(dataPresent)  						{  							// rename to <path>  							fileHeader.RenameTo = DecodeEscapedString(FindNewLineOrEndOfString()' 1);  						}  						break;  					case Header.SimilarityIndex:  						{  							int index;  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out index))  							{  								fileHeader.SimilarityIndex = index;  							}  						}  						break;  					case Header.DissimilarityIndex:  						{  							int index;  							string strIndex = ReadStringUpTo(FindNewLineOrEndOfString() - 1);  							Skip(2);  							if(int.TryParse(strIndex' NumberStyles.Integer' CultureInfo.InvariantCulture' out index))  							{  								fileHeader.DissimilarityIndex = index;  							}  						}  						break;  					case Header.Unknown:  						if(IsAtEndOfString ||  							CheckValue("---") ||  							CheckValue(HunkHeader) ||  							CheckValue(FileHeader) ||  							CheckValue(BinaryFilesHeader) ||  							CheckValue(BinaryPatchHeader))  						{  							completed = true;  						}  						else  						{  							SkipLine();  						}  						break;  					default:  						if(dataPresent)  						{  							SkipLine();  						}  						break;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: if(CheckValue("---"))  			{  				Skip(4);  				source = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(source.StartsWith(DefaultPrefixA))  				{  					source = source.Substring(2);  				}  				Skip(4);  				target = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(target.StartsWith(DefaultPrefixB))  				{  					target = target.Substring(2);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: if(CheckValue("---"))  			{  				Skip(4);  				source = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(source.StartsWith(DefaultPrefixA))  				{  					source = source.Substring(2);  				}  				Skip(4);  				target = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(target.StartsWith(DefaultPrefixB))  				{  					target = target.Substring(2);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: if(CheckValue("---"))  			{  				Skip(4);  				source = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(source.StartsWith(DefaultPrefixA))  				{  					source = source.Substring(2);  				}  				Skip(4);  				target = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(target.StartsWith(DefaultPrefixB))  				{  					target = target.Substring(2);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFileHeader3,The following statement contains a magic number: if(CheckValue("---"))  			{  				Skip(4);  				source = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(source.StartsWith(DefaultPrefixA))  				{  					source = source.Substring(2);  				}  				Skip(4);  				target = DecodeEscapedString(FindNewLineOrEndOfString()' 1).Trim();  				if(target.StartsWith(DefaultPrefixB))  				{  					target = target.Substring(2);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ByteFromOctString,The following statement contains a magic number: for(int i = offset + length - 1' n = 1; i >= offset; --i)  			{  				res += (str[i] - '0') * n;  				n *= 8;  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseBranch,The following statement contains a magic number: Skip(2);
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseBranch,The following statement contains a magic number: if(current && (space == Position + 3) && CheckValue(GitConstants.NoBranch))  			{  				Skip(GitConstants.NoBranch.Length);  				Skip(' ');  				var sha1 = new Hash(String' Position);  				res = new BranchData(GitConstants.NoBranch' sha1' true' false' true);  			}  			else  			{  				var name = ReadStringUpTo(space' 1);  				Skip(' ');  				if(!(restriction == QueryBranchRestriction.Local) && CheckValue('-')) // it's a remote head indicator' skip it  				{  					res = null;  				}  				else  				{  					var sha1 = new Hash(String' Position);  					bool remote;  					switch(restriction)  					{  						case QueryBranchRestriction.All:  							remote = !current && name.StartsWith(GitConstants.RemoteBranchShortPrefix);  							if(remote) name = name.Substring(8);  							break;  						case QueryBranchRestriction.Local:  							remote = false;  							break;  						case QueryBranchRestriction.Remote:  							remote = true;  							break;  						default:  							throw new ArgumentException("restriction");  					}  					res = new BranchData(name' sha1' remote' current);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseBranch,The following statement contains a magic number: if(current && (space == Position + 3) && CheckValue(GitConstants.NoBranch))  			{  				Skip(GitConstants.NoBranch.Length);  				Skip(' ');  				var sha1 = new Hash(String' Position);  				res = new BranchData(GitConstants.NoBranch' sha1' true' false' true);  			}  			else  			{  				var name = ReadStringUpTo(space' 1);  				Skip(' ');  				if(!(restriction == QueryBranchRestriction.Local) && CheckValue('-')) // it's a remote head indicator' skip it  				{  					res = null;  				}  				else  				{  					var sha1 = new Hash(String' Position);  					bool remote;  					switch(restriction)  					{  						case QueryBranchRestriction.All:  							remote = !current && name.StartsWith(GitConstants.RemoteBranchShortPrefix);  							if(remote) name = name.Substring(8);  							break;  						case QueryBranchRestriction.Local:  							remote = false;  							break;  						case QueryBranchRestriction.Remote:  							remote = true;  							break;  						default:  							throw new ArgumentException("restriction");  					}  					res = new BranchData(name' sha1' remote' current);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: if(p - Position + 1 > 3)  			{  				if(String[p] == 'K' && String[p - 1] == '[' && String[p - 2] == '\u001B')  				{  					p -= 3;  					trimEnd += 3;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: if(p - Position + 1 > 3)  			{  				if(String[p] == 'K' && String[p - 1] == '[' && String[p - 2] == '\u001B')  				{  					p -= 3;  					trimEnd += 3;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: if(p - Position + 1 > 3)  			{  				if(String[p] == 'K' && String[p - 1] == '[' && String[p - 2] == '\u001B')  				{  					p -= 3;  					trimEnd += 3;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,TrimProgressMessageEnd,The following statement contains a magic number: if(p - Position + 1 > 3)  			{  				if(String[p] == 'K' && String[p - 1] == '[' && String[p - 2] == '\u001B')  				{  					p -= 3;  					trimEnd += 3;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ParseCommitParentsFromRaw,The following statement contains a magic number: foreach(var rev in revs)  			{  				parents.Clear();  				int start = Position;  				int eoc = FindNullOrEndOfString();  				SkipLine();  				while(Position < eoc)  				{  					bool hasParents = false;  					while(CheckValue("parent ") && Position < eoc)  					{  						Skip(7);  						var p = ReadHash();  						SkipLine();  						RevisionData prd;  						if(cache != null)  						{  							if(!cache.TryGetValue(p' out prd))  							{  								prd = new RevisionData(p);  								cache.Add(p' prd);  							}  						}  						else  						{  							prd = new RevisionData(p);  						}  						parents.Add(prd);  						hasParents = true;  					}  					SkipLine();  					if(hasParents) break;  				}  				rev.Parents = parents.ToArray();  				Position = eoc + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadRevisionParents,The following statement contains a magic number: int numParents = (end - Position + 1) / 41;
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadHash,The following statement contains a magic number: Skip(40);
Magic Number,gitter.Git.AccessLayer.CLI,GitParser,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,ReadHash,The following statement contains a magic number: Skip(40 + skip);
Magic Number,gitter.Git.AccessLayer.CLI,ByteString,C:\repos\amgine_gitter\gitter.git.cli.prj\GitParser.cs,AppendByte,The following statement contains a magic number: if(_length == _buffer.Length)  				{  					var buffer = new byte[_buffer.Length * 2];  					Array.Copy(_buffer' buffer' _buffer.Length);  					_buffer = buffer;  				}
Magic Number,gitter.Git.AccessLayer.CLI,QueryReflogImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryReflogImpl.cs,ParseResult1,The following statement contains a magic number: if(output.Output.Length < 40)  			{  				return new ReflogRecordData[0];  			}
Magic Number,gitter.Git.AccessLayer.CLI,QueryReflogImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryReflogImpl.cs,InvokeAsync,The following statement contains a magic number: task1.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QueryReflogImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryReflogImpl.cs,InvokeAsync,The following statement contains a magic number: task2.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QueryStashImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryStashImpl.cs,ParseResult1,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				var sha1 = new Hash(parser.String' parser.Position);  				var rev  = new RevisionData(sha1);  				parser.Skip(41);  				parser.ParseRevisionData(rev' cache);  				var state = new StashedStateData(index' rev);  				res.Add(state);  				++index;  			}
Magic Number,gitter.Git.AccessLayer.CLI,QueryStashImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryStashImpl.cs,InvokeAsync,The following statement contains a magic number: task1.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QueryStashImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QueryStashImpl.cs,InvokeAsync,The following statement contains a magic number: task2.ContinueWith(  				t =>  				{  					if(Interlocked.Increment(ref completedTasks) == 2)  					{  						tcs.TrySetResult(null);  					}  				}'  				cancellationToken'  				TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion'  				TaskScheduler.Default);
Magic Number,gitter.Git.AccessLayer.CLI,QuerySymbolicReferenceImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QuerySymbolicReferenceImpl.cs,Parse,The following statement contains a magic number: if(value != null && value.Length >= 17 && value.StartsWith(refPrefix + GitConstants.LocalBranchPrefix))  			{  				return new SymbolicReferenceData(value.Substring(16)' ReferenceType.LocalBranch);  			}  			else  			{  				if(GitUtils.IsValidSHA1(value))  				{  					return new SymbolicReferenceData(value' ReferenceType.Revision);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,QuerySymbolicReferenceImpl,C:\repos\amgine_gitter\gitter.git.cli.prj\Methods\QuerySymbolicReferenceImpl.cs,Parse,The following statement contains a magic number: if(value != null && value.Length >= 17 && value.StartsWith(refPrefix + GitConstants.LocalBranchPrefix))  			{  				return new SymbolicReferenceData(value.Substring(16)' ReferenceType.LocalBranch);  			}  			else  			{  				if(GitUtils.IsValidSHA1(value))  				{  					return new SymbolicReferenceData(value' ReferenceType.Revision);  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRevisionGraph,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				var sha1 = parser.ReadString(40' 1);  				int end = parser.FindNullOrEndOfString();  				int numParents = (end - parser.Position + 1) / 41;  				if(numParents == 0)  				{  					parser.Position = end + 1;  					result.Add(new RevisionGraphData(sha1' new string[0]));  				}  				else  				{  					var parents = new List<string>(numParents);  					for(int i = 0; i < numParents; ++i)  					{  						parents.Add(parser.ReadString(40' 1));  					}  					result.Add(new RevisionGraphData(sha1' parents));  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRevisionGraph,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				var sha1 = parser.ReadString(40' 1);  				int end = parser.FindNullOrEndOfString();  				int numParents = (end - parser.Position + 1) / 41;  				if(numParents == 0)  				{  					parser.Position = end + 1;  					result.Add(new RevisionGraphData(sha1' new string[0]));  				}  				else  				{  					var parents = new List<string>(numParents);  					for(int i = 0; i < numParents; ++i)  					{  						parents.Add(parser.ReadString(40' 1));  					}  					result.Add(new RevisionGraphData(sha1' parents));  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRevisionGraph,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				var sha1 = parser.ReadString(40' 1);  				int end = parser.FindNullOrEndOfString();  				int numParents = (end - parser.Position + 1) / 41;  				if(numParents == 0)  				{  					parser.Position = end + 1;  					result.Add(new RevisionGraphData(sha1' new string[0]));  				}  				else  				{  					var parents = new List<string>(numParents);  					for(int i = 0; i < numParents; ++i)  					{  						parents.Add(parser.ReadString(40' 1));  					}  					result.Add(new RevisionGraphData(sha1' parents));  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: if(output.ExitCode != 0 && output.ExitCode != 128)  			{  				return new List<TreeFileData>(0);  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: while(pos < l)  			{  				int eol = files.IndexOf('\n'' pos);  				if(eol == -1) eol = l;  				var status = FileStatus.Cached;  				string filePath = null;  				switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}  				if(filePath != null)  				{  					var slashPos = filePath.LastIndexOf('/');  					var fileName = slashPos != -1 ?  						filePath.Substring(slashPos + 1) :  						filePath;  					var file = new TreeFileData(  						filePath' status' ConflictType.None' StagedStatus.Unstaged);  					res.Add(file);  					pos = eol + 1;  				}  				else  				{  					pos = eol + 1;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: while(pos < l)  			{  				int eol = files.IndexOf('\n'' pos);  				if(eol == -1) eol = l;  				var status = FileStatus.Cached;  				string filePath = null;  				switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}  				if(filePath != null)  				{  					var slashPos = filePath.LastIndexOf('/');  					var fileName = slashPos != -1 ?  						filePath.Substring(slashPos + 1) :  						filePath;  					var file = new TreeFileData(  						filePath' status' ConflictType.None' StagedStatus.Unstaged);  					res.Add(file);  					pos = eol + 1;  				}  				else  				{  					pos = eol + 1;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: while(pos < l)  			{  				int eol = files.IndexOf('\n'' pos);  				if(eol == -1) eol = l;  				var status = FileStatus.Cached;  				string filePath = null;  				switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}  				if(filePath != null)  				{  					var slashPos = filePath.LastIndexOf('/');  					var fileName = slashPos != -1 ?  						filePath.Substring(slashPos + 1) :  						filePath;  					var file = new TreeFileData(  						filePath' status' ConflictType.None' StagedStatus.Unstaged);  					res.Add(file);  					pos = eol + 1;  				}  				else  				{  					pos = eol + 1;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following statement contains a magic number: while(pos < l)  			{  				int eol = files.IndexOf('\n'' pos);  				if(eol == -1) eol = l;  				var status = FileStatus.Cached;  				string filePath = null;  				switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}  				if(filePath != null)  				{  					var slashPos = filePath.LastIndexOf('/');  					var fileName = slashPos != -1 ?  						filePath.Substring(slashPos + 1) :  						filePath;  					var file = new TreeFileData(  						filePath' status' ConflictType.None' StagedStatus.Unstaged);  					res.Add(file);  					pos = eol + 1;  				}  				else  				{  					pos = eol + 1;  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToRemove,The following statement contains a magic number: while(pos < l)  			{  				var eol = files.IndexOf('\n'' pos);  				if(eol == -1) eol = files.Length;  				if(StringUtility.CheckValue(files' pos' "rm '"))  				{  					res.Add(files.Substring(pos + 4' eol - pos - 5));  				}  				pos = eol + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToRemove,The following statement contains a magic number: while(pos < l)  			{  				var eol = files.IndexOf('\n'' pos);  				if(eol == -1) eol = files.Length;  				if(StringUtility.CheckValue(files' pos' "rm '"))  				{  					res.Add(files.Substring(pos + 4' eol - pos - 5));  				}  				pos = eol + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToClean,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				if(parser.CheckValue("Would remove "))  				{  					parser.Skip(13);  					res.Add(parser.DecodeEscapedString(parser.FindNewLineOrEndOfString()' 1));  				}  				else  				{  					parser.SkipLine();  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseUsers,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				var tab = parser.FindNoAdvance('\t');  				string commitsCountStr = parser.ReadStringUpTo(tab' 1);  				int commitsCount = int.Parse(commitsCountStr' NumberStyles.Integer' CultureInfo.InvariantCulture);  				var eol = parser.FindLfLineEnding();  				var emailSeparator = parser.String.LastIndexOf(" <"' eol - 1' eol - tab - 1);  				string name = parser.ReadStringUpTo(emailSeparator' 2);  				string email = parser.ReadStringUpTo(eol - 1' 2);  				var userData = new UserData(name' email' commitsCount);  				res.Add(userData);  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseUsers,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				var tab = parser.FindNoAdvance('\t');  				string commitsCountStr = parser.ReadStringUpTo(tab' 1);  				int commitsCount = int.Parse(commitsCountStr' NumberStyles.Integer' CultureInfo.InvariantCulture);  				var eol = parser.FindLfLineEnding();  				var emailSeparator = parser.String.LastIndexOf(" <"' eol - 1' eol - tab - 1);  				string name = parser.ReadStringUpTo(emailSeparator' 2);  				string email = parser.ReadStringUpTo(eol - 1' 2);  				var userData = new UserData(name' email' commitsCount);  				res.Add(userData);  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string fetchUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string fetchUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string pushUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseSingleRemote,The following statement contains a magic number: string pushUrl = info.Substring(pos + 13' pos2 - pos - 13);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: var hash = output.Substring(pos' 40);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: pos += 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: if(name.StartsWith(GitConstants.TagPrefix) && pos < output.Length)  			{  				end = output.IndexOf('\n'' pos);  				if(end == -1) end = output.Length;  				var hash2 = output.Substring(pos' 40);  				int pos2 = pos + 41;  				while(output[pos2] == ' ' || output[pos2] == '\t') ++pos2;  				int l = end - pos2;  				if(l == name.Length + GitConstants.DereferencedTagPostfix.Length)  				{  					if(StringUtility.CheckValues(output' pos2' name' GitConstants.DereferencedTagPostfix))  					{  						pos = end + 1;  						return new RemoteReferenceData(name' new Hash(hash2)) { TagType = TagType.Annotated };  					}  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseRemoteReference,The following statement contains a magic number: if(name.StartsWith(GitConstants.TagPrefix) && pos < output.Length)  			{  				end = output.IndexOf('\n'' pos);  				if(end == -1) end = output.Length;  				var hash2 = output.Substring(pos' 40);  				int pos2 = pos + 41;  				while(output[pos2] == ' ' || output[pos2] == '\t') ++pos2;  				int l = end - pos2;  				if(l == name.Length + GitConstants.DereferencedTagPostfix.Length)  				{  					if(StringUtility.CheckValues(output' pos2' name' GitConstants.DereferencedTagPostfix))  					{  						pos = end + 1;  						return new RemoteReferenceData(name' new Hash(hash2)) { TagType = TagType.Annotated };  					}  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParsePrunedBranches,The following statement contains a magic number: while(pos < l)  			{  				int end = branches.IndexOf('\n'' pos);  				if(end == -1) end = l;    				if(StringUtility.CheckValue(branches' pos' " * [would prune] "))  				{  					res.Add(branches.Substring(pos + 17' end - pos - 17));  				}    				pos = end + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParsePrunedBranches,The following statement contains a magic number: while(pos < l)  			{  				int end = branches.IndexOf('\n'' pos);  				if(end == -1) end = l;    				if(StringUtility.CheckValue(branches' pos' " * [would prune] "))  				{  					res.Add(branches.Substring(pos + 17' end - pos - 17));  				}    				pos = end + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseNotes,The following statement contains a magic number: if(notes.Length > 81)  			{  				var parser = new GitParser(notes);  				while(!parser.IsAtEndOfString)  				{  					var noteSHA1 = parser.ReadString(40' 1);  					var objectSHA1 = parser.ReadString(40' 1);  					res.Add(new NoteData(noteSHA1' objectSHA1' null));  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseNotes,The following statement contains a magic number: if(notes.Length > 81)  			{  				var parser = new GitParser(notes);  				while(!parser.IsAtEndOfString)  				{  					var noteSHA1 = parser.ReadString(40' 1);  					var objectSHA1 = parser.ReadString(40' 1);  					res.Add(new NoteData(noteSHA1' objectSHA1' null));  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseNotes,The following statement contains a magic number: if(notes.Length > 81)  			{  				var parser = new GitParser(notes);  				while(!parser.IsAtEndOfString)  				{  					var noteSHA1 = parser.ReadString(40' 1);  					var objectSHA1 = parser.ReadString(40' 1);  					res.Add(new NoteData(noteSHA1' objectSHA1' null));  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTreeContent,The following statement contains a magic number: while(pos < l)  			{  				var end = content.IndexOf('\0'' pos);  				if(end == -1) end = l;    				int delimeter = content.IndexOf(' '' pos);  				int mode = int.Parse(content.Substring(pos' delimeter - pos)' CultureInfo.InvariantCulture);  				pos = delimeter + 1;  				while(content[pos] == ' ')  				{  					++pos;  				}    				bool isTree		= StringUtility.CheckValue(content' pos' GitConstants.TreeObjectType);  				bool isBlob		= !isTree && StringUtility.CheckValue(content' pos' GitConstants.BlobObjectType);  				bool isCommit	= !isTree && !isBlob && StringUtility.CheckValue(content' pos' GitConstants.CommitObjectType);  				bool isTag		= !isTree && !isBlob && !isCommit && StringUtility.CheckValue(content' pos' GitConstants.TagObjectType);    				pos += 5;  				delimeter = content.IndexOf(' '' pos);  				var hash = content.Substring(pos' delimeter - pos);  				pos += 41;  				while(content[pos] == ' ')  				{  					++pos;  				}  				delimeter = content.IndexOf('\t'' pos);  				long size = 0;  				if(isBlob)  				{  					size = long.Parse(content.Substring(pos' delimeter - pos)' CultureInfo.InvariantCulture);  				}  				pos = delimeter + 1;  				var name = content.Substring(pos' end - pos);  				if(isBlob)  				{  					res.Add(new BlobData(hash' mode' name' size));  				}  				else if(isTree)  				{  					res.Add(new TreeData(hash' mode' name));  				}  				else if(isCommit)  				{  					res.Add(new TreeCommitData(hash' mode' name));  				}  				pos = end + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTreeContent,The following statement contains a magic number: while(pos < l)  			{  				var end = content.IndexOf('\0'' pos);  				if(end == -1) end = l;    				int delimeter = content.IndexOf(' '' pos);  				int mode = int.Parse(content.Substring(pos' delimeter - pos)' CultureInfo.InvariantCulture);  				pos = delimeter + 1;  				while(content[pos] == ' ')  				{  					++pos;  				}    				bool isTree		= StringUtility.CheckValue(content' pos' GitConstants.TreeObjectType);  				bool isBlob		= !isTree && StringUtility.CheckValue(content' pos' GitConstants.BlobObjectType);  				bool isCommit	= !isTree && !isBlob && StringUtility.CheckValue(content' pos' GitConstants.CommitObjectType);  				bool isTag		= !isTree && !isBlob && !isCommit && StringUtility.CheckValue(content' pos' GitConstants.TagObjectType);    				pos += 5;  				delimeter = content.IndexOf(' '' pos);  				var hash = content.Substring(pos' delimeter - pos);  				pos += 41;  				while(content[pos] == ' ')  				{  					++pos;  				}  				delimeter = content.IndexOf('\t'' pos);  				long size = 0;  				if(isBlob)  				{  					size = long.Parse(content.Substring(pos' delimeter - pos)' CultureInfo.InvariantCulture);  				}  				pos = delimeter + 1;  				var name = content.Substring(pos' end - pos);  				if(isBlob)  				{  					res.Add(new BlobData(hash' mode' name' size));  				}  				else if(isTree)  				{  					res.Add(new TreeData(hash' mode' name));  				}  				else if(isCommit)  				{  					res.Add(new TreeCommitData(hash' mode' name));  				}  				pos = end + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseReferences,The following statement contains a magic number: while(pos < l)  			{  				var hash = new Hash(refs' pos);  				pos += 41;  				var end = refs.IndexOf('\n'' pos);  				if(end == -1) end = l;    				if(!encounteredRemoteBranch && StringUtility.CheckValue(refs' pos' GitConstants.LocalBranchPrefix))  				{  					if(needHeads)  					{  						pos += GitConstants.LocalBranchPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						var branch = new BranchData(name' hash' false' false' false);  						heads.Add(branch);  					}  				}  				else if(!encounteredStash && StringUtility.CheckValue(refs' pos' GitConstants.RemoteBranchPrefix))  				{  					encounteredRemoteBranch = true;  					if(needRemotes)  					{  						pos += GitConstants.RemoteBranchPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						if(!name.EndsWith("/HEAD"))  						{  							var branch = new BranchData(name' hash' false' true' false);  							remotes.Add(branch);  						}  					}  				}  				else if(!encounteredTag && !encounteredStash && StringUtility.CheckValue(refs' pos' GitConstants.StashFullName))  				{  					encounteredRemoteBranch = true;  					encounteredStash = true;  					if(needStash)  					{  						stash = new RevisionData(hash);  					}  				}  				else if(StringUtility.CheckValue(refs' pos' GitConstants.TagPrefix))  				{  					encounteredRemoteBranch = true;  					encounteredStash = true;  					encounteredTag = true;  					if(needTags)  					{  						pos += GitConstants.TagPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						var type = TagType.Lightweight;  						if(end < l - 1)  						{  							int s2 = end + 1;  							int pos2 = s2 + 41 + GitConstants.TagPrefix.Length;  							var end2 = refs.IndexOf('\n'' pos2);  							if(end2 == -1) end2 = l;  							if(end2 - pos2 == end - pos + 3)  							{  								if(StringUtility.CheckValue(refs' pos2' name) && StringUtility.CheckValue(refs' pos2 + name.Length' GitConstants.DereferencedTagPostfix))  								{  									type = TagType.Annotated;  									hash = new Hash(refs' s2);  									end = end2;  								}  							}  						}  						var tag = new TagData(name' hash' type);  						tags.Add(tag);  					}  					else break;  				}  				pos = end + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseReferences,The following statement contains a magic number: while(pos < l)  			{  				var hash = new Hash(refs' pos);  				pos += 41;  				var end = refs.IndexOf('\n'' pos);  				if(end == -1) end = l;    				if(!encounteredRemoteBranch && StringUtility.CheckValue(refs' pos' GitConstants.LocalBranchPrefix))  				{  					if(needHeads)  					{  						pos += GitConstants.LocalBranchPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						var branch = new BranchData(name' hash' false' false' false);  						heads.Add(branch);  					}  				}  				else if(!encounteredStash && StringUtility.CheckValue(refs' pos' GitConstants.RemoteBranchPrefix))  				{  					encounteredRemoteBranch = true;  					if(needRemotes)  					{  						pos += GitConstants.RemoteBranchPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						if(!name.EndsWith("/HEAD"))  						{  							var branch = new BranchData(name' hash' false' true' false);  							remotes.Add(branch);  						}  					}  				}  				else if(!encounteredTag && !encounteredStash && StringUtility.CheckValue(refs' pos' GitConstants.StashFullName))  				{  					encounteredRemoteBranch = true;  					encounteredStash = true;  					if(needStash)  					{  						stash = new RevisionData(hash);  					}  				}  				else if(StringUtility.CheckValue(refs' pos' GitConstants.TagPrefix))  				{  					encounteredRemoteBranch = true;  					encounteredStash = true;  					encounteredTag = true;  					if(needTags)  					{  						pos += GitConstants.TagPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						var type = TagType.Lightweight;  						if(end < l - 1)  						{  							int s2 = end + 1;  							int pos2 = s2 + 41 + GitConstants.TagPrefix.Length;  							var end2 = refs.IndexOf('\n'' pos2);  							if(end2 == -1) end2 = l;  							if(end2 - pos2 == end - pos + 3)  							{  								if(StringUtility.CheckValue(refs' pos2' name) && StringUtility.CheckValue(refs' pos2 + name.Length' GitConstants.DereferencedTagPostfix))  								{  									type = TagType.Annotated;  									hash = new Hash(refs' s2);  									end = end2;  								}  							}  						}  						var tag = new TagData(name' hash' type);  						tags.Add(tag);  					}  					else break;  				}  				pos = end + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseReferences,The following statement contains a magic number: while(pos < l)  			{  				var hash = new Hash(refs' pos);  				pos += 41;  				var end = refs.IndexOf('\n'' pos);  				if(end == -1) end = l;    				if(!encounteredRemoteBranch && StringUtility.CheckValue(refs' pos' GitConstants.LocalBranchPrefix))  				{  					if(needHeads)  					{  						pos += GitConstants.LocalBranchPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						var branch = new BranchData(name' hash' false' false' false);  						heads.Add(branch);  					}  				}  				else if(!encounteredStash && StringUtility.CheckValue(refs' pos' GitConstants.RemoteBranchPrefix))  				{  					encounteredRemoteBranch = true;  					if(needRemotes)  					{  						pos += GitConstants.RemoteBranchPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						if(!name.EndsWith("/HEAD"))  						{  							var branch = new BranchData(name' hash' false' true' false);  							remotes.Add(branch);  						}  					}  				}  				else if(!encounteredTag && !encounteredStash && StringUtility.CheckValue(refs' pos' GitConstants.StashFullName))  				{  					encounteredRemoteBranch = true;  					encounteredStash = true;  					if(needStash)  					{  						stash = new RevisionData(hash);  					}  				}  				else if(StringUtility.CheckValue(refs' pos' GitConstants.TagPrefix))  				{  					encounteredRemoteBranch = true;  					encounteredStash = true;  					encounteredTag = true;  					if(needTags)  					{  						pos += GitConstants.TagPrefix.Length;  						var name = refs.Substring(pos' end - pos);  						var type = TagType.Lightweight;  						if(end < l - 1)  						{  							int s2 = end + 1;  							int pos2 = s2 + 41 + GitConstants.TagPrefix.Length;  							var end2 = refs.IndexOf('\n'' pos2);  							if(end2 == -1) end2 = l;  							if(end2 - pos2 == end - pos + 3)  							{  								if(StringUtility.CheckValue(refs' pos2' name) && StringUtility.CheckValue(refs' pos2 + name.Length' GitConstants.DereferencedTagPostfix))  								{  									type = TagType.Annotated;  									hash = new Hash(refs' s2);  									end = end2;  								}  							}  						}  						var tag = new TagData(name' hash' type);  						tags.Add(tag);  					}  					else break;  				}  				pos = end + 1;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,IsBranchNotFullyMergedError,The following statement contains a magic number: if(error.Length == errNotMerged3.Length + errNotMerged4.Length + errNotMerged5.Length + 2 * branchName.Length)  			{  				return StringUtility.CheckValues(error' errNotMerged3' branchName' errNotMerged4' branchName' errNotMerged5);  			}  			else  			{  				if(StringUtility.CheckValues(error' 0' errNotMerged0' branchName' errNotMerged1))  				{  					int pos = error.IndexOf(errNotMerged2' errNotMerged0.Length + errNotMerged1.Length + branchName.Length);  					if(pos != -1)  					{  						pos += errNotMerged2.Length;  						return StringUtility.CheckValues(error' pos' errNotMerged3' branchName' errNotMerged4' branchName' errNotMerged5);  					}  				}  				return false;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTag,The following statement contains a magic number: if(output.ExitCode == 0 && tag.Length >= 40)  			{  				Hash hash;  				TagType type;  				if(tag.Length >= 81)  				{  					hash = new Hash(output.Output' 41);  					type = TagType.Annotated;  				}  				else  				{  					hash = new Hash(output.Output);  					type = TagType.Lightweight;  				}  				return new TagData(parameters.TagName' hash' type);  			}  			else  			{  				return null;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTag,The following statement contains a magic number: if(output.ExitCode == 0 && tag.Length >= 40)  			{  				Hash hash;  				TagType type;  				if(tag.Length >= 81)  				{  					hash = new Hash(output.Output' 41);  					type = TagType.Annotated;  				}  				else  				{  					hash = new Hash(output.Output);  					type = TagType.Lightweight;  				}  				return new TagData(parameters.TagName' hash' type);  			}  			else  			{  				return null;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseTag,The following statement contains a magic number: if(output.ExitCode == 0 && tag.Length >= 40)  			{  				Hash hash;  				TagType type;  				if(tag.Length >= 81)  				{  					hash = new Hash(output.Output' 41);  					type = TagType.Annotated;  				}  				else  				{  					hash = new Hash(output.Output);  					type = TagType.Lightweight;  				}  				return new TagData(parameters.TagName' hash' type);  			}  			else  			{  				return null;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: var strHash = strTag.Substring(pos' 40);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: pos += 41;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: var strName = strTag.Substring(pos + 10' pos2 - pos - 10);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: var strName = strTag.Substring(pos + 10' pos2 - pos - 10);
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: if(pos < strTag.Length)  			{  				pos2 = strTag.IndexOf('\n'' pos);  				if(pos2 != -1)  				{  					if(strTag[pos2 - 3] == '^')  					{  						type = TagType.Annotated;  						strHash = strTag.Substring(pos' 40);  						pos = pos2 + 1;  					}  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,TryParseTag,The following statement contains a magic number: if(pos < strTag.Length)  			{  				pos2 = strTag.IndexOf('\n'' pos);  				if(pos2 != -1)  				{  					if(strTag[pos2 - 3] == '^')  					{  						type = TagType.Annotated;  						strHash = strTag.Substring(pos' 40);  						pos = pos2 + 1;  					}  				}  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParsePushResult,The following statement contains a magic number: pos += 2;
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseQueryStashTopOutput,The following statement contains a magic number: if(parameters.LoadCommitInfo)  			{  				return new GitParser(output.Output).ParseRevision();  			}  			else  			{  				if(output.ExitCode != 0 || output.Output.Length < 40)  				{  					return null;  				}    				var hash = new Hash(output.Output);  				return new RevisionData(hash);  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,HandleConfigResults,The following statement contains a magic number: switch(output.ExitCode)  			{  				case 0:  					return;  				case 1:  					throw new InvalidConfigFileException(output.Error);  				case 2:  					throw new CannotWriteConfigFileException(output.Error);  				case 3:  					throw new NoSectionProvidedException(output.Error);  				case 4:  					throw new InvalidSectionOrKeyException(output.Error);  				case 5:  					throw new ConfigParameterDoesNotExistException(output.Error);  				default:  					output.Throw();  					break;  			}
Magic Number,gitter.Git.AccessLayer.CLI,HashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,HashField,The following statement contains a magic number: _buffer = new char[40];
Magic Number,gitter.Git.AccessLayer.CLI,HashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: Verify.State.IsFalse(_offset == 41' "Field is already completed.");
Magic Number,gitter.Git.AccessLayer.CLI,HashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: if(_offset < 40)  				{  					int c = Math.Min(textSegment.Length' 40 - _offset);  					textSegment.MoveTo(_buffer' _offset' c);  					_offset += c;  				}
Magic Number,gitter.Git.AccessLayer.CLI,HashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: if(_offset < 40)  				{  					int c = Math.Min(textSegment.Length' 40 - _offset);  					textSegment.MoveTo(_buffer' _offset' c);  					_offset += c;  				}
Magic Number,gitter.Git.AccessLayer.CLI,HashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: if(_offset == 40 && textSegment.Length > 0)  				{  					_offset = 41;  					textSegment.Skip(1);  					return true;  				}
Magic Number,gitter.Git.AccessLayer.CLI,HashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: if(_offset == 40 && textSegment.Length > 0)  				{  					_offset = 41;  					textSegment.Skip(1);  					return true;  				}
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,MultiHashField,The following statement contains a magic number: _buffer = new char[40];
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: if(_offset < 40 && textSegment.Length > 0)  				{  					int c = Math.Min(textSegment.Length' 40 - _offset);  					textSegment.MoveTo(_buffer' _offset' c);  					_offset += c;  				}
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: if(_offset < 40 && textSegment.Length > 0)  				{  					int c = Math.Min(textSegment.Length' 40 - _offset);  					textSegment.MoveTo(_buffer' _offset' c);  					_offset += c;  				}
Magic Number,gitter.Git.AccessLayer.CLI,MultiHashField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: if(_offset == 40 && textSegment.Length > 0)  				{  					_offset = 0;  					_hashes.Add(new Hash(_buffer));  					var separator = textSegment.ReadChar();  					if(separator == '\n')  					{  						_isCompleted = true;  						return true;  					}  				}
Magic Number,gitter.Git.AccessLayer.CLI,UnixTimestampField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: while(textSegment.Length > 0)  				{  					var c = textSegment.ReadChar();  					if(c == '\n')  					{  						_isCompleted = true;  						return true;  					}  					int value = c - '0';  					if(value >= 0 && value <= 9)  					{  						_timestamp = _timestamp * 10 + value;  					}  				}
Magic Number,gitter.Git.AccessLayer.CLI,UnixTimestampField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following statement contains a magic number: while(textSegment.Length > 0)  				{  					var c = textSegment.ReadChar();  					if(c == '\n')  					{  						_isCompleted = true;  						return true;  					}  					int value = c - '0';  					if(value >= 0 && value <= 9)  					{  						_timestamp = _timestamp * 10 + value;  					}  				}
Magic Number,gitter.Git.AccessLayer.CLI,EmptyLineSeparator,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,EmptyLineSeparator,The following statement contains a magic number: _buffer = new char[4];
Magic Number,gitter.Git.AccessLayer.CLI,EmptyLineSeparator,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Append,The following statement contains a magic number: return _lineEndings == 2;
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,StatusLine,The following statement contains a magic number: _from   = new StringBuilder(260);
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,StatusLine,The following statement contains a magic number: _to     = new StringBuilder(260);
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,StatusLine,The following statement contains a magic number: _offset = -3;
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The following statement contains a magic number: while(textSegment.Length > 0)  				{  					switch(_offset)  					{  						case -3:  							_x = textSegment.ReadChar();  							++_offset;  							break;  						case -2:  							_y = textSegment.ReadChar();  							++_offset;  							break;  						case -1:  							textSegment.Skip(1);  							++_offset;  							break;  						case 0:  							if(ParseFileName(textSegment' _to))  							{  								++_offset;  								if(_x != 'C' && _x != 'R')  								{  									++_offset;  									return true;  								}  							}  							break;  						case 1:  							if(ParseFileName(textSegment' _from))  							{  								++_offset;  								return true;  							}  							break;  					}  				}
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The following statement contains a magic number: while(textSegment.Length > 0)  				{  					switch(_offset)  					{  						case -3:  							_x = textSegment.ReadChar();  							++_offset;  							break;  						case -2:  							_y = textSegment.ReadChar();  							++_offset;  							break;  						case -1:  							textSegment.Skip(1);  							++_offset;  							break;  						case 0:  							if(ParseFileName(textSegment' _to))  							{  								++_offset;  								if(_x != 'C' && _x != 'R')  								{  									++_offset;  									return true;  								}  							}  							break;  						case 1:  							if(ParseFileName(textSegment' _from))  							{  								++_offset;  								return true;  							}  							break;  					}  				}
Magic Number,gitter.Git.AccessLayer.CLI,StatusLine,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Reset,The following statement contains a magic number: _offset = -3;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPathToGitExe.Size = new System.Drawing.Size(105' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPathToGitExe.Size = new System.Drawing.Size(105' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Location = new System.Drawing.Point(3' 24);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Location = new System.Drawing.Point(3' 24);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Size = new System.Drawing.Size(473' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.Size = new System.Drawing.Size(473' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._txtmSysGitPath.TabIndex = 2;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Location = new System.Drawing.Point(270' 53);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Location = new System.Drawing.Point(270' 53);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdAutoDetect.TabIndex = 3;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.Location = new System.Drawing.Point(0' 57);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.Size = new System.Drawing.Size(106' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.Size = new System.Drawing.Size(106' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFoundVersion.TabIndex = 7;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Location = new System.Drawing.Point(376' 53);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Location = new System.Drawing.Point(376' 53);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmdBrowse.TabIndex = 9;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Location = new System.Drawing.Point(114' 57);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Location = new System.Drawing.Point(114' 57);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Size = new System.Drawing.Size(83' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.Size = new System.Drawing.Size(83' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblVersion.TabIndex = 11;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Location = new System.Drawing.Point(117' -2);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Location = new System.Drawing.Point(117' -2);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Size = new System.Drawing.Size(148' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.Size = new System.Drawing.Size(148' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radAlwaysAutodetect.TabIndex = 12;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Location = new System.Drawing.Point(270' -2);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Location = new System.Drawing.Point(270' -2);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Size = new System.Drawing.Size(141' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.Size = new System.Drawing.Size(141' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._radSpecifyManually.TabIndex = 13;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Location = new System.Drawing.Point(114' 86);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Location = new System.Drawing.Point(114' 86);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Size = new System.Drawing.Size(81' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.Size = new System.Drawing.Size(81' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersionValue.TabIndex = 21;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.Location = new System.Drawing.Point(0' 86);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.Size = new System.Drawing.Size(103' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.Size = new System.Drawing.Size(103' 15);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblLatestVersion.TabIndex = 20;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Location = new System.Drawing.Point(376' 82);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Location = new System.Drawing.Point(376' 82);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnDownload.TabIndex = 19;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Location = new System.Drawing.Point(270' 82);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Location = new System.Drawing.Point(270' 82);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.Size = new System.Drawing.Size(100' 23);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._btnRefreshLatestVersion.TabIndex = 18;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Location = new System.Drawing.Point(3' 133);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Location = new System.Drawing.Point(3' 133);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Size = new System.Drawing.Size(372' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.Size = new System.Drawing.Size(372' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkFallbackToAnsi.TabIndex = 17;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Location = new System.Drawing.Point(3' 111);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Location = new System.Drawing.Point(3' 111);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Size = new System.Drawing.Size(227' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.Size = new System.Drawing.Size(227' 20);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._chkLogCLICalls.TabIndex = 17;
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(479' 158);
Magic Number,gitter.Git,CliOptionsPage,C:\repos\amgine_gitter\gitter.git.cli.prj\Controls\CliOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(479' 158);
Magic Number,gitter.Git,GitRepositoryUpdateChannel,C:\repos\amgine_gitter\gitter.git.cli.prj\GitRepositoryUpdateChannel.cs,CheckVersion,The following statement contains a magic number: while(!parser.IsAtEndOfString)  			{  				var sha1	= parser.ReadString(40' 1);  				var refname	= parser.ReadLine();  				if(branchSHA1 == null)  				{  					if(refname == GitConstants.LocalBranchPrefix + _branch)  					{  						branchSHA1 = sha1;  					}  				}  				else  				{  					if(sha1 == branchSHA1 &&  						refname.Length > GitConstants.TagPrefix.Length + 1 &&  						refname.StartsWith(GitConstants.TagPrefix) &&  						refname[GitConstants.TagPrefix.Length] == 'v')  					{  						var s = GitConstants.TagPrefix.Length + 1;  						var e = refname.Length - 1;  						while(s < refname.Length && !char.IsDigit(refname[s])) ++s;  						while(e > 0 && !char.IsDigit(refname[e])) --e;  						if(e > s && Version.TryParse(refname.Substring(s' e - s + 1)' out result))  						{  							break;  						}  						else  						{  							result = null;  						}  					}  				}  			}
Magic Number,gitter.Git,MSysGitDownloader,C:\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,OnGotResponse,The following statement contains a magic number: process.Buffer = new byte[1024*4];
Magic Number,gitter.Git,MSysGitDownloader,C:\repos\amgine_gitter\gitter.git.cli.prj\MSysGitDownloader.cs,OnGotResponse,The following statement contains a magic number: process.Buffer = new byte[1024*4];
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,The following switch statement is missing a default case: switch(parameters.MergesMode)  			{  				case RevisionMergesQueryMode.MergesOnly:  					args.Add(LogCommand.Merges());  					break;  				case RevisionMergesQueryMode.NoMerges:  					args.Add(LogCommand.NoMerges());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertQueryRevisionsParameters,The following switch statement is missing a default case: switch(parameters.Order)  			{  				case RevisionQueryOrder.DateOrder:  					args.Add(LogCommand.DateOrder());  					break;  				case RevisionQueryOrder.TopoOrder:  					args.Add(LogCommand.TopoOrder());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertAddFilesParameters,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case AddFilesMode.All:  					args.Add(AddCommand.All());  					break;  				case AddFilesMode.Update:  					args.Add(AddCommand.Update());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertCleanFilesParameters,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case CleanFilesMode.IncludeIgnored:  					args.Add(CleanCommand.IncludeIgnored());  					break;  				case CleanFilesMode.OnlyIgnored:  					args.Add(CleanCommand.ExcludeUntracked());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCheckoutFilesCommand,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case CheckoutFileMode.Ours:  					args.Add(CheckoutCommand.Ours());  					break;  				case CheckoutFileMode.Theirs:  					args.Add(CheckoutCommand.Theirs());  					break;  				case CheckoutFileMode.Merge:  					args.Add(CheckoutCommand.Merge());  					break;  				case CheckoutFileMode.IgnoreUnmergedEntries:  					args.Add(CheckoutCommand.Force());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertFetchParameters,The following switch statement is missing a default case: switch(parameters.TagFetchMode)  			{  				case TagFetchMode.Default:  					break;  				case TagFetchMode.AllTags:  					args.Add(FetchCommand.Tags());  					break;  				case TagFetchMode.NoTags:  					args.Add(FetchCommand.NoTags());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetPushCommand,The following switch statement is missing a default case: switch(parameters.PushMode)  			{  				case PushMode.Default:  					break;  				case PushMode.AllLocalBranches:  					args.Add(PushCommand.All());  					break;  				case PushMode.Mirror:  					args.Add(PushCommand.Mirror());  					break;  				case PushMode.Tags:  					args.Add(PushCommand.Tags());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetAddRemoteCommand,The following switch statement is missing a default case: switch(parameters.TagFetchMode)  			{  				case TagFetchMode.Default:  					break;  				case TagFetchMode.AllTags:  					args.Add(RemoteCommand.Tags());  					break;  				case TagFetchMode.NoTags:  					args.Add(RemoteCommand.NoTags());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryBranchesCommand,The following switch statement is missing a default case: switch(parameters.Restriction)  			{  				case QueryBranchRestriction.All:  					args.Add(BranchCommand.All());  					break;  				case QueryBranchRestriction.Remote:  					args.Add(BranchCommand.Remote());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetQueryBranchesCommand,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case BranchQueryMode.Contains:  					args.Add(BranchCommand.Contains());  					break;  				case BranchQueryMode.Merged:  					args.Add(BranchCommand.Merged());  					break;  				case BranchQueryMode.NoMerged:  					args.Add(BranchCommand.NoMerged());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetCreateBranchCommand,The following switch statement is missing a default case: switch(parameters.TrackingMode)  			{  				case BranchTrackingMode.NotTracking:  					args.Add(BranchCommand.NoTrack());  					break;  				case BranchTrackingMode.Tracking:  					args.Add(BranchCommand.Track());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,GetUpdateSubmoduleCommand,The following switch statement is missing a default case: switch(parameters.Mode)  			{  				case SubmoduleUpdateMode.Merge:  					args.Add(SubmoduleCommand.Merge());  					break;  				case SubmoduleUpdateMode.Rebase:  					args.Add(SubmoduleCommand.Rebase());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,CommandBuilder,C:\repos\amgine_gitter\gitter.git.cli.prj\CommandBuilder.cs,InsertConfigFileSpecifier,The following switch statement is missing a default case: switch(parameters.ConfigFile)  			{  				case ConfigFile.Repository:  				case ConfigFile.Other:  					if(parameters.FileName != null)  					{  						args.Add(ConfigCommand.File(parameters.FileName));  					}  					break;  				case ConfigFile.System:  					args.Add(ConfigCommand.System());  					break;  				case ConfigFile.User:  					args.Add(ConfigCommand.Global());  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffLine,The following switch statement is missing a default case: switch(state)  			{  				case DiffLineState.Context:  					for(int i = 0; i < nc; ++i)  					{  						++nums[i];  					}  					break;  				case DiffLineState.Added:  					for(int i = 0; i < nc; ++i)  					{  						if(states[i] == DiffLineState.Context)  						{  							++nums[i];  						}  					}  					break;  				case DiffLineState.Removed:  					for(int i = 0; i < nc - 1; ++i)  					{  						if(states[i] == DiffLineState.Context)  						{  							states[i] = DiffLineState.NotPresent;  						}  						else if(states[i] == DiffLineState.Removed)  						{  							states[i] = DiffLineState.Context;  							++nums[i];  						}  					}  					states[nc - 1] = DiffLineState.Removed;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,DiffParser,C:\repos\amgine_gitter\gitter.git.cli.prj\DiffParser.cs,ReadDiffFile,The following switch statement is missing a default case: switch(header.Status)  			{  				case FileStatus.Renamed:  					source = header.RenameFrom;  					target = header.RenameTo;  					break;  				case FileStatus.Copied:  					source = header.CopyFrom;  					target = header.CopyTo;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,OutputParser,C:\repos\amgine_gitter\gitter.git.cli.prj\OutputParser.cs,ParseFilesToAdd,The following switch statement is missing a default case: switch(files[pos])  				{  					case 'a':  						status = FileStatus.Added;  						filePath = files.Substring(pos + 5' eol - pos - 6);  						break;  					case 'r':  						status = FileStatus.Removed;  						filePath = files.Substring(pos + 8' eol - pos - 9);  						break;  					case 'T':  						eol = l;  						break;  				}
Missing Default,gitter.Git.AccessLayer.CLI,SubjectAndBodyField,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\LogParser.cs,Parse,The following switch statement is missing a default case: switch(separatorChar)  						{  							case '\0':  								RemoveTrailingWhitespace(_subject);  								if(_isSubjectCompleted)  								{  									RemoveTrailingWhitespace(_body);  								}  								_isCompleted = true;  								return true;  							case '\r':  							case '\n':  								if(_isSubjectCompleted)  								{  									_body.Append(separatorChar);  								}  								else  								{  									if(_separator.Append(separatorChar))  									{  										_isSubjectCompleted = true;  										_separator.Reset();  									}  								}  								break;  						}
Missing Default,gitter.Git.AccessLayer.CLI,StatusParser,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,AddUnstagedStats,The following switch statement is missing a default case: switch(fileStatus)  			{  				case FileStatus.Added:  					_unstagedUntrackedCount += count;  					break;  				case FileStatus.Removed:  					_unstagedRemovedCount += count;  					break;  				case FileStatus.Modified:  					_unstagedModifiedCount += count;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,StatusParser,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,AddStagedStats,The following switch statement is missing a default case: switch(fileStatus)  			{  				case FileStatus.Added:  					_stagedAddedCount += count;  					break;  				case FileStatus.Removed:  					_stagedRemovedCount += count;  					break;  				case FileStatus.Modified:  					_stagedModifiedCount += count;  					break;  			}
Missing Default,gitter.Git.AccessLayer.CLI,StatusLine,C:\repos\amgine_gitter\gitter.git.cli.prj\Parsers\StatusParser.cs,Parse,The following switch statement is missing a default case: switch(_offset)  					{  						case -3:  							_x = textSegment.ReadChar();  							++_offset;  							break;  						case -2:  							_y = textSegment.ReadChar();  							++_offset;  							break;  						case -1:  							textSegment.Skip(1);  							++_offset;  							break;  						case 0:  							if(ParseFileName(textSegment' _to))  							{  								++_offset;  								if(_x != 'C' && _x != 'R')  								{  									++_offset;  									return true;  								}  							}  							break;  						case 1:  							if(ParseFileName(textSegment' _from))  							{  								++_offset;  								return true;  							}  							break;  					}
