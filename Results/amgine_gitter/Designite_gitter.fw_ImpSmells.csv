Implementation smell,Namespace,Class,File,Method,Description
Long Method,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderPlusMinus,The method has 120 lines of code.
Long Method,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,OnPaintItemContent,The method has 184 lines of code.
Long Method,gitter.Framework,HelperExecutables,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\HelperExecutables.cs,ExecuteWithAdministartorRights,The method has 117 lines of code.
Long Method,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The method has 109 lines of code.
Long Method,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The method has 159 lines of code.
Long Method,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,OnPaintItemContent,The method has 213 lines of code.
Long Method,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The method has 168 lines of code.
Long Method,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The method has 143 lines of code.
Long Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,ViewHost,The method has 104 lines of code.
Long Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,RemoveView,The method has 108 lines of code.
Long Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,Undock,The method has 130 lines of code.
Long Method,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,ResetButtons,The method has 109 lines of code.
Long Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnItemsChanged,The method has 156 lines of code.
Long Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnPreviewKeyDown,The method has 284 lines of code.
Long Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HandleItemDefaultMouseDown,The method has 175 lines of code.
Long Method,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,RecomputeAreas,The method has 102 lines of code.
Long Method,gitter.Framework.Mvc.WinForms,MouseCursorConverter,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Mvc\WinForms\MouseCursorConverter.cs,Convert,The method has 115 lines of code.
Long Method,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The method has 129 lines of code.
Long Method,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The method has 147 lines of code.
Complex Method,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,OnPaintItemBackground,Cyclomatic complexity of the method is 14
Complex Method,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderPlusMinus,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,OnPaintItemContent,Cyclomatic complexity of the method is 26
Complex Method,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework,TextWithHyperlinks,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\TextWithHyperlinks.cs,Render,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectDictionary,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectDictionary,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectDictionary,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectList,Cyclomatic complexity of the method is 14
Complex Method,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectListNoRemove,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,FindSeparatingEmptyLine,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,FormatDate,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.CLI,NotifyingAsyncTextReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\NotifyingAsyncTextReader.cs,OnStringDecoded,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ColumnResizeProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnResizeProcess.cs,FromActiveColumn,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,OnPaintItemBackground,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,OnPaintItemContent,Cyclomatic complexity of the method is 28
Complex Method,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderPart,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,NotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\NotifySortedCollection.cs,GetNewIndex,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,RemoveHost,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,OnViewAdded,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,OnViewRemoved,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,GetTabBounds,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,SpawnPanel,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ViewButton,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewButton.cs,ViewButton,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveLeftSide,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveTopSide,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveRightSide,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,KillBottomSide,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,GetCreateDockSide,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,FindView,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,OnResize,Cyclomatic complexity of the method is 17
Complex Method,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,PerformDock,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewDockService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockService.cs,FindAppropriateViewHost,Cyclomatic complexity of the method is 16
Complex Method,gitter.Framework.Controls,ViewDockService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockService.cs,ShowView,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,FloatingViewForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\FloatingViewForm.cs,OnNcHitTest,Cyclomatic complexity of the method is 14
Complex Method,gitter.Framework.Controls,ViewHostDockingProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostDockingProcess.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ViewHostResizingProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostResizingProcess.cs,Commit,Cyclomatic complexity of the method is 13
Complex Method,gitter.Framework.Controls,ViewLayout,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewLayout.cs,ViewLayout,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ViewLayout,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewLayout.cs,SaveTo,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerButtonContent,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerButtonContent,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,Replace,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,OnResize,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,CommitMoving,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,ViewHost,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,OnHeaderButtonClick,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,RemoveView,Cyclomatic complexity of the method is 16
Complex Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,OnHeaderMouseMove,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,Undock,Cyclomatic complexity of the method is 15
Complex Method,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,PerformDock,Cyclomatic complexity of the method is 14
Complex Method,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,EnsureVisible,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,ResetButtons,Cyclomatic complexity of the method is 21
Complex Method,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,HitTestArea,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,HitTestTab,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseMove,Cyclomatic complexity of the method is 13
Complex Method,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnPaint,Cyclomatic complexity of the method is 13
Complex Method,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,Cyclomatic complexity of the method is 15
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnItemsChanging,Cyclomatic complexity of the method is 13
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnItemsChanged,Cyclomatic complexity of the method is 29
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetInsertIndexFormPoint,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,InvalidateSubItem,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetExtendedColumnContentRectangle,Cyclomatic complexity of the method is 15
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,RemoveItems,Cyclomatic complexity of the method is 14
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,CollapseItem,Cyclomatic complexity of the method is 13
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,EnsureVisible,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HitTest,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,FocusAndSelectItem,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnPreviewKeyDown,Cyclomatic complexity of the method is 60
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,PerformHeaderDrag,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HandleItemDefaultMouseDown,Cyclomatic complexity of the method is 30
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HandleFreeSpaceMouseDown,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnDoubleClick,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,UpdateAutoSizeColumnsContentWidth,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,RecomputeHeaderSizes,Cyclomatic complexity of the method is 13
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,PaintHeaders,Cyclomatic complexity of the method is 17
Complex Method,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,PaintItems,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,CustomListBoxColumn,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBoxColumn.cs,OnHitTest,Cyclomatic complexity of the method is 20
Complex Method,gitter.Framework.Controls,CustomListBoxItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBoxItem.cs,OnHitTest,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Controls,FlowLayoutControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowLayoutControl.cs,UpdateHover,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,FlowLayoutControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowLayoutControl.cs,OnPreviewKeyDown,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,RecomputeAreas,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,SetVScrollBar,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,SetHScrollBar,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,OnScrollTimerTick,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,PaintNonClient,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,OnVisibleChanged,Cyclomatic complexity of the method is 12
Complex Method,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,OnNcHitTest,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,RemoveToolStrip,Cyclomatic complexity of the method is 11
Complex Method,gitter.Framework.Mvc.WinForms,MouseCursorConverter,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Mvc\WinForms\MouseCursorConverter.cs,Convert,Cyclomatic complexity of the method is 29
Complex Method,gitter.Framework.Mvc.WinForms,MouseCursorConverter,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Mvc\WinForms\MouseCursorConverter.cs,Convert,Cyclomatic complexity of the method is 29
Complex Method,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,ExtractFormatFlags,Cyclomatic complexity of the method is 13
Complex Method,gitter.Framework.Services,HyperlinkExtractor,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\HyperlinkExtractor.cs,ExtractHyperlinks,Cyclomatic complexity of the method is 19
Complex Method,gitter.Framework.Services,TextBoxSpellChecker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\TextBoxSpellChecker.cs,PaintErrors,Cyclomatic complexity of the method is 9
Complex Method,gitter.Framework.Services,TextBoxSpellChecker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\TextBoxSpellChecker.cs,Revalidate,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Services,SystemMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\SystemMessageBoxService.cs,PickButtons,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,OnItemActivated,Cyclomatic complexity of the method is 10
Complex Method,gitter.Framework.Configuration,ArrayPersister,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Configuration\XmlAdapter.cs,LoadValue,Cyclomatic complexity of the method is 8
Complex Method,gitter.Framework.Configuration,SectionPersister,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Configuration\XmlAdapter.cs,Store,Cyclomatic complexity of the method is 10
Long Parameter List,gitter,Argument,D:\research\architectureSmells\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter,Argument,D:\research\architectureSmells\repos\amgine_gitter\shared\Verify.cs,IsInRange,The method has 5 parameters. Parameters: lowerBoundInclusive' value' upperBoundInclusive' message' parameterName
Long Parameter List,gitter,GraphicsExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\GraphicsExtensions.cs,FillRoundedRectangle,The method has 7 parameters. Parameters: g' brush' rect' topLeftCorner' topRightCorner' bottomLeftCorner' bottomRightCorner
Long Parameter List,gitter,GraphicsExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\GraphicsExtensions.cs,FillRoundedRectangle,The method has 5 parameters. Parameters: g' fillBrush' borderPen' rect' cornerRadius
Long Parameter List,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The method has 5 parameters. Parameters: rect' topLeftCorner' topRightCorner' bottomLeftCorner' bottomRightCorner
Long Parameter List,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderPlusMinus,The method has 7 parameters. Parameters: graphics' x' y' isExpanded' isSelected' isPlusMinusHovered' isHostControlFocused
Long Parameter List,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,RenderMenuItemBackgroundInternal,The method has 8 parameters. Parameters: graphics' x' y' width' height' isPressed' isSelected' isRoot
Long Parameter List,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,RenderItemBackgroundInternal,The method has 7 parameters. Parameters: graphics' x' y' width' height' pressed' selected
Long Parameter List,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,RenderItemBackgroundInternal,The method has 5 parameters. Parameters: graphics' width' height' pressed' selected
Long Parameter List,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,RenderMenuItemBackgroundInternal,The method has 8 parameters. Parameters: graphics' x' y' width' height' pressed' selected' root
Long Parameter List,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,RenderItemBackgroundInternal,The method has 7 parameters. Parameters: graphics' x' y' width' height' pressed' selected
Long Parameter List,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,RenderItemBackgroundInternal,The method has 5 parameters. Parameters: graphics' width' height' pressed' selected
Long Parameter List,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectDictionary,The method has 9 parameters. Parameters: dictionary' validateObject' validateInfo' actualList' factory' updater' objectCreated' objectDeleted' callUpdate
Long Parameter List,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectDictionary,The method has 9 parameters. Parameters: dictionary' validateObject' validateInfo' actualDictinary' factory' updater' objectCreated' objectDeleted' callUpdate
Long Parameter List,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectDictionary,The method has 8 parameters. Parameters: repository' dictionary' validateObject' validateInfo' actualDictinary' objectCreated' objectDeleted' callUpdate
Long Parameter List,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectDictionaryNoRemove,The method has 7 parameters. Parameters: repository' dictionary' validateObject' validateInfo' actualList' objectCreated' callUpdate
Long Parameter List,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectList,The method has 8 parameters. Parameters: repository' list' validateObject' validateInfo' actualList' objectCreated' objectDeleted' callUpdate
Long Parameter List,gitter.Framework,CacheUpdater,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CacheUpdater.cs,UpdateObjectListNoRemove,The method has 7 parameters. Parameters: repository' list' validateObject' validateInfo' actualList' objectCreated' callUpdate
Long Parameter List,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The method has 6 parameters. Parameters: text' font' width' height' expanded' hover
Long Parameter List,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,NtQueryInformationProcess,The method has 5 parameters. Parameters: hProcess' processInformationClass' processBasicInformation' processInformationLength' returnLength
Long Parameter List,gitter.Framework.CLI,ProcessExecutor<TInput>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\ProcessExecutor.cs,ExecuteAsync,The method has 5 parameters. Parameters: input' stdOutReceiver' stdErrReceiver' cancellationMethod' cancellationToken
Long Parameter List,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The method has 5 parameters. Parameters: graphics' x' y' w' h
Long Parameter List,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The method has 5 parameters. Parameters: graphics' x' y' w' h
Long Parameter List,gitter.Framework.Controls,CustomScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBarRenderer.cs,Render,The method has 11 parameters. Parameters: scrollBarOrientation' isEnabled' graphics' clipRectangle' decreaseButtonBounds' decreaseTrackBarBounds' thumbBounds' increaseTrackBarBounds' increaseButtonBounds' hoveredPart' pressedPart
Long Parameter List,gitter.Framework.Controls,CustomScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBarRenderer.cs,RenderPart,The method has 7 parameters. Parameters: part' scrollBarOrientation' graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderPart,The method has 7 parameters. Parameters: part' scrollBarOrientation' graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderUpArrow,The method has 5 parameters. Parameters: graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderDownArrow,The method has 5 parameters. Parameters: graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderLeftArrow,The method has 5 parameters. Parameters: graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderRightArrow,The method has 5 parameters. Parameters: graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderHorizontalThumb,The method has 5 parameters. Parameters: graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderVerticalThumb,The method has 5 parameters. Parameters: graphics' bounds' isEnabled' isHovered' isPressed
Long Parameter List,gitter.Framework.Controls,ViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewRenderer.cs,RenderViewButton,The method has 6 parameters. Parameters: viewButton' graphics' bounds' focus' hover' pressed
Long Parameter List,gitter.Framework.Controls,ItemContextMenuRequestEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\ItemContextMenuRequestedEventArgs.cs,ItemContextMenuRequestEventArgs,The method has 5 parameters. Parameters: item' column' columnIndex' x' y
Long Parameter List,gitter.Framework.Controls,ItemsContextMenuRequestEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\ItemsContextMenuRequestEventArgs.cs,ItemsContextMenuRequestEventArgs,The method has 5 parameters. Parameters: items' column' columnIndex' x' y
Long Parameter List,gitter.Framework.Controls,DockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockMarker.cs,DockMarker,The method has 5 parameters. Parameters: dockHost' dockClient' buttons' border' bounds
Long Parameter List,gitter.Framework.Controls,ViewButton,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewButton.cs,OnPaint,The method has 5 parameters. Parameters: graphics' bounds' focus' hover' pressed
Long Parameter List,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The method has 6 parameters. Parameters: viewButton' graphics' bounds' focus' hover' pressed
Long Parameter List,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewButton,The method has 6 parameters. Parameters: viewButton' graphics' bounds' focus' hover' pressed
Long Parameter List,gitter.Framework.Controls,ItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\ItemPaintEventArgs.cs,ItemPaintEventArgs,The method has 7 parameters. Parameters: graphics' clipRectangle' bounds' index' state' hoveredPart' hostControlFocused
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,SubItemPaintEventArgs,The method has 9 parameters. Parameters: graphics' clipRectangle' bounds' index' state' hoveredPart' hostControlFocused' columnIndex' column
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageAndTextCore,The method has 5 parameters. Parameters: image' text' font' brush' stringFormat
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageAndText,The method has 5 parameters. Parameters: image' text' font' brush' stringFormat
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageAndText,The method has 5 parameters. Parameters: image' text' font' brush' stringAlignment
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndTextCore,The method has 6 parameters. Parameters: icon' overlay' text' font' brush' stringFormat
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The method has 6 parameters. Parameters: image' overlay' text' font' brush' stringFormat
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The method has 6 parameters. Parameters: image' overlay' text' font' brush' stringAlignment
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The method has 5 parameters. Parameters: image' overlay' text' brush' stringFormat
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The method has 5 parameters. Parameters: image' overlay' text' brush' stringAlignment
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The method has 5 parameters. Parameters: image' overlay' text' font' stringFormat
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The method has 5 parameters. Parameters: image' overlay' text' font' stringAlignment
Long Parameter List,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The method has 5 parameters. Parameters: image' overlay' text' font' brush
Long Parameter List,gitter.Native,Gdi32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\Gdi32.cs,SetDIBitsToDevice,The method has 12 parameters. Parameters: hdc' XDest' YDest' dwWidth' dwHeight' XSrc' YSrc' uStartScan' cScanLines' lpvBits' lpbmi' fuColorUse
Long Parameter List,gitter.Native,Gdi32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\Gdi32.cs,Ellipse,The method has 5 parameters. Parameters: hDc' x1' y1' x2' y2
Long Parameter List,gitter.Native,Shell32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\Shell32.cs,ExtractIconEx,The method has 5 parameters. Parameters: lpszFile' nIconIndex' phiconLarge' phiconSmall' nIcons
Long Parameter List,gitter.Native,Shell32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\Shell32.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Parameter List,gitter.Native,User32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\User32.cs,DrawTextExW,The method has 6 parameters. Parameters: hDC' lpszString' nCount' lpRect' nFormat' lpDTParams
Long Parameter List,gitter.Native,User32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\User32.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,gitter.Native,User32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\User32.cs,CallWindowProc,The method has 5 parameters. Parameters: lpPrevWndFunc' hWnd' Msg' wParam' lParam
Long Parameter List,gitter.Native,User32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\User32.cs,ScrollDC,The method has 7 parameters. Parameters: hDC' dx' dy' lprcScroll' lprcClip' hrgnUpdate' lprcUpdate
Long Parameter List,gitter.Native,User32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\User32.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' nXAmount' nYAmount' rectScrollRegion' rectClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,gitter.Native,User32,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\User32.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' nXAmount' nYAmount' rectScrollRegion' rectClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' layoutRectangle' format
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' point' format
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 7 parameters. Parameters: graphics' text' font' brush' x' y' format
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' brush' layoutRectangle
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' brush' point
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' x' y
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' layoutRectangle' format
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' point' format
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 7 parameters. Parameters: graphics' text' font' color' x' y' format
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' color' layoutRectangle
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' color' point
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' x' y
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,MeasureText,The method has 5 parameters. Parameters: graphics' text' font' layoutArea' format
Long Parameter List,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,MeasureText,The method has 5 parameters. Parameters: graphics' text' font' width' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' layoutRectangle' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' point' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 7 parameters. Parameters: graphics' text' font' brush' x' y' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' brush' layoutRectangle
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' brush' point
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' x' y
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' layoutRectangle' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' point' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 7 parameters. Parameters: graphics' text' font' color' x' y' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' color' layoutRectangle
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' color' point
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' x' y
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,MeasureText,The method has 5 parameters. Parameters: graphics' text' font' layoutArea' format
Long Parameter List,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,MeasureText,The method has 5 parameters. Parameters: graphics' text' font' width' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' layoutRectangle' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' point' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 7 parameters. Parameters: graphics' text' font' brush' x' y' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' brush' layoutRectangle
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' brush' point
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' brush' x' y
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' layoutRectangle' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' point' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 7 parameters. Parameters: graphics' text' font' color' x' y' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' color' layoutRectangle
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 5 parameters. Parameters: graphics' text' font' color' point
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,DrawText,The method has 6 parameters. Parameters: graphics' text' font' color' x' y
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,MeasureText,The method has 5 parameters. Parameters: graphics' text' font' layoutArea' format
Long Parameter List,gitter.Framework.Services,ITextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\ITextRenderer.cs,MeasureText,The method has 5 parameters. Parameters: graphics' text' font' width' format
Long Parameter List,gitter.Framework.Services,LogEvent,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Logging\LogEvent.cs,LogEvent,The method has 5 parameters. Parameters: source' type' message' timestamp' exception
Long Parameter List,gitter.Framework.Services,CustomMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\CustomMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' buttons' icon
Long Parameter List,gitter.Framework.Services,CustomMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\CustomMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' buttons' icon
Long Parameter List,gitter.Framework.Services,CustomMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\CustomMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' button' icon
Long Parameter List,gitter.Framework.Services,BalloonNotificationService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Notifcation\BalloonNotificationService.cs,Notify,The method has 7 parameters. Parameters: control' x' y' type' title' message' focus
Long Parameter List,gitter.Framework.Services,GravatarService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Gravatar\GravatarService.cs,BeginGetGravatar,The method has 5 parameters. Parameters: callback' email' defaultType' rating' size
Long Parameter List,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,Show,The method has 5 parameters. Parameters: owner' text' caption' button' icon
Long Parameter List,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,Show,The method has 5 parameters. Parameters: owner' text' caption' buttons' icon
Long Parameter List,gitter.Framework.Services,IMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\IMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' buttons' icon
Long Parameter List,gitter.Framework.Services,IMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\IMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' buttons' icon
Long Parameter List,gitter.Framework.Services,IMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\IMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' button' icon
Long Parameter List,gitter.Framework.Services,SystemMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\SystemMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' buttons' icon
Long Parameter List,gitter.Framework.Services,SystemMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\SystemMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' buttons' icon
Long Parameter List,gitter.Framework.Services,SystemMessageBoxService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\SystemMessageBoxService.cs,Show,The method has 5 parameters. Parameters: parent' message' caption' button' icon
Long Parameter List,gitter.Framework.Options,PropertyPageFactory,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\PropertyPageFactory.cs,PropertyPageFactory,The method has 5 parameters. Parameters: guid' name' icon' groupGuid' getPropertyPage
Long Identifier,gitter.Framework,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,,The length of the parameter MenuItemSelectedBackgroundStart is 31.
Long Identifier,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,,The length of the parameter _isRunningWithAdministratorRights is 33.
Long Identifier,gitter.Framework.Controls,DarkColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\MSVS2012ButtonRenderer.cs,,The length of the parameter _DocTabBackgroundSelectedActive is 31.
Long Identifier,gitter.Framework.Controls,DarkColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\MSVS2012ButtonRenderer.cs,,The length of the parameter _ViewButtonHoverBackgroundActive is 32.
Long Identifier,gitter.Framework.Controls,DarkColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\MSVS2012ButtonRenderer.cs,,The length of the parameter _ViewButtonHoverBackgroundInactive is 34.
Long Identifier,gitter.Framework.Controls,DarkColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\MSVS2012ButtonRenderer.cs,,The length of the parameter _ViewHostHeaderBackgroundNormal is 31.
Long Identifier,gitter.Framework.Controls,DarkColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\MSVS2012ButtonRenderer.cs,,The length of the parameter _ViewHostHeaderBackgroundFocused is 32.
Long Identifier,gitter.Framework.Controls,DarkColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\MSVS2012ButtonRenderer.cs,,The length of the parameter _DockMarkerButtonContentBorder is 30.
Long Identifier,gitter.Framework.Controls,LightColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,,The length of the parameter _DocTabBackgroundSelectedActive is 31.
Long Identifier,gitter.Framework.Controls,LightColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,,The length of the parameter _ViewButtonHoverBackgroundActive is 32.
Long Identifier,gitter.Framework.Controls,LightColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,,The length of the parameter _ViewButtonHoverBackgroundInactive is 34.
Long Identifier,gitter.Framework.Controls,LightColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,,The length of the parameter _ViewHostHeaderBackgroundNormal is 31.
Long Identifier,gitter.Framework.Controls,LightColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,,The length of the parameter _ViewHostHeaderBackgroundFocused is 32.
Long Identifier,gitter.Framework.Controls,LightColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,,The length of the parameter _DockMarkerButtonContentBorder is 30.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter ViewHostTabsSelectedBackgroundActiveEnd is 39.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter ViewHostTabsSelectedBackgroundNormalEnd is 39.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter TabSelectedBackgroundActiveStart is 32.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter TabSelectedBackgroundActiveEnd is 30.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter TabSelectedBackgroundNormalStart is 32.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter TabSelectedBackgroundNormalEnd is 30.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter ViewHostHeaderBackgroundNormalStart is 35.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter ViewHostHeaderBackgroundNormalEnd is 33.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter ViewHostHeaderBackgroundFocusedStart is 36.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter ViewHostHeaderBackgroundFocusedEnd is 34.
Long Identifier,gitter.Framework.Controls,ColorTable,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,,The length of the parameter DockMarkerButtonBackgroundStart is 31.
Long Identifier,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,,The length of the parameter ItemsContextMenuRequestedEvent is 30.
Long Identifier,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,,The length of the parameter DefaultStringFormatCenterAlign is 30.
Long Identifier,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,,The length of the parameter DefaultStringFormatCenterAlign is 30.
Long Statement,gitter,GraphicsExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\GraphicsExtensions.cs,FillRoundedRectangle,The length of the statement  "			using(var gp = GraphicsUtility.GetRoundedRectangle(rect' topLeftCorner' topRightCorner' bottomLeftCorner' bottomRightCorner)) " is 125.
Long Statement,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderMenuItemBackground,The length of the statement  "			RenderMenuItemBackgroundInternal(e.Graphics' 0' 0' item.Width' item.Height' item.Pressed' item.Selected && item.Enabled' e.ToolStrip is MenuStrip); " is 147.
Long Statement,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderMenuItemBackground,The length of the statement  "			RenderMenuItemBackgroundInternal(e.Graphics' 0' 0' item.Width' item.Height' item.Pressed' item.Selected && item.Enabled' e.ToolStrip is MenuStrip); " is 147.
Long Statement,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The length of the statement  "			this._lblExceptionName.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 150.
Long Statement,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The length of the statement  "			this._lblMessage.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 144.
Long Statement,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The length of the statement  "			this._txtStack.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The length of the statement  "			this._lnkCopyToClipboard.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The length of the statement  "			this._lnkCopyToClipboard.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.OnCopyToClipboardLinkClicked); " is 133.
Long Statement,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The length of the statement  "			this._lnkSendBugReport.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The length of the statement  "			this._lnkSendBugReport.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.OnSendBugReportLinkClicked); " is 129.
Long Statement,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The length of the statement  "			this._pnlContainer.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 149.
Long Statement,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The length of the statement  "			this._pnlLine.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 144.
Long Statement,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The length of the statement  "			this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223))))); " is 128.
Long Statement,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The length of the statement  "			this._btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The length of the statement  "			this._btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The length of the statement  "			this._picAdvanced.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 150.
Long Statement,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The length of the statement  "			this._btnApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The length of the statement  "			this._btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The length of the statement  "			this._pnlLine.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The length of the statement  "			this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223))))); " is 128.
Long Statement,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The length of the statement  "			this._progressBar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,gitter.Framework,GlobalOptions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\GlobalOptions.cs,IntegrateInExplorerContextMenu,The length of the statement  "					using(var commandKey = gitterKey.CreateSubKey("command"' RegistryKeyPermissionCheck.ReadWriteSubTree' RegistryOptions.None)) " is 124.
Long Statement,gitter.Framework,ShellUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\ShellUtility.cs,ExtractAssociatedFileIcon16ByExt,The length of the statement  "			Shell32.SHGetFileInfo(fileName' FILE_ATTRIBUTE_NORMAL' ref info' Marshal.SizeOf(info)' SHGFI_ICON | SHGFI_SMALLICON | SHGFI_USEFILEATTRIBUTES); " is 143.
Long Statement,gitter.Framework,ShellUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\ShellUtility.cs,ExtractAssociatedFileIcon16,The length of the statement  "				Shell32.SHGetFileInfo(fileName' FILE_ATTRIBUTE_NORMAL' ref info' Marshal.SizeOf(info)' SHGFI_ICON | SHGFI_SMALLICON | SHGFI_USEFILEATTRIBUTES); " is 143.
Long Statement,gitter.Framework,ShellUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\ShellUtility.cs,ExtractAssociatedFolderIcon16,The length of the statement  "			Shell32.SHGetFileInfo(fileName' FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_DIR' ref info' Marshal.SizeOf(info)' SHGFI_ICON | SHGFI_SMALLICON); " is 138.
Long Statement,gitter.Framework,ShellUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\ShellUtility.cs,ExtractAssociatedFolderIcon16,The length of the statement  "				Shell32.SHGetFileInfo(fileName' FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_DIR' ref info' Marshal.SizeOf(info)' SHGFI_ICON | SHGFI_SMALLICON | SHGFI_USEFILEATTRIBUTES); " is 164.
Long Statement,gitter.Framework,ShellUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\ShellUtility.cs,ExtractAssociatedFolderIcon16ByType,The length of the statement  "			Shell32.SHGetFileInfo(fileName' FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_DIR' ref info' Marshal.SizeOf(info)' SHGFI_ICON | SHGFI_SMALLICON | SHGFI_USEFILEATTRIBUTES); " is 164.
Long Statement,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The length of the statement  "					graphics.FillRectangle(ExtenderBorderBrush' rect.Right - CustomListBoxColumn.ExtenderButtonWidth - 0.5f' rect.Y' 1' rect.Height - 1); " is 133.
Long Statement,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The length of the statement  "			DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14); " is 126.
Long Statement,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The length of the statement  "			var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height); " is 128.
Long Statement,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The length of the statement  "			DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14); " is 126.
Long Statement,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The length of the statement  "			var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height); " is 128.
Long Statement,gitter.Framework.Controls,CustomHScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomHScrollbar.cs,Arrange,The length of the statement  "			_increaseTrackBarBounds	= new Rectangle(buttonWidth + thumbOffset + thumbSize' 0' trackBarSize - thumbSize - thumbOffset' size.Height); " is 135.
Long Statement,gitter.Framework.Controls,CustomVScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomVScrollbar.cs,Arrange,The length of the statement  "			_increaseTrackBarBounds	= new Rectangle(0' buttonHeight + thumbOffset + thumbSize' size.Width' trackBarSize - thumbSize - thumbOffset); " is 135.
Long Statement,gitter.Framework.Controls,SubItemMeasureEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemMeasureEventArgs.cs,MeasureImageAndTextCore,The length of the statement  "			return new Size(s.Width + 1 + 2 * ListBoxConstants.ContentSpacing + (iconW + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage)' s.Height); " is 158.
Long Statement,gitter.Framework.Controls,SubItemMeasureEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemMeasureEventArgs.cs,MeasureIconAndTextCore,The length of the statement  "			return new Size(s.Width + 1 + 2 * ListBoxConstants.ContentSpacing + (iconW + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage)' s.Height); " is 158.
Long Statement,gitter.Framework.Controls,LogEventListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogEventListItem.cs,GetContextMenu,The length of the statement  "			menu.Items.Add(new ToolStripMenuItem("Copy to Clipboard"' null' (s' e) => ClipboardEx.SetTextSafe(DataContext.Message))); " is 121.
Long Statement,gitter.Framework.Controls,ViewHostDockMarkers,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarkers.cs,CreateMarkers,The length of the statement  "			if(ViewHost.IsDocumentWell || (!dockClient.IsDocumentWell && !(dockClient.ViewsCount == 1 && dockClient.GetView(0).IsDocument))) " is 128.
Long Statement,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostTabsBackground,The length of the statement  "					var ltCorner = ((tabs.LeftButtons == null || tabs.LeftButtons.Width == 0) && tabs[tabs.FirstTabIndex].IsActive) ? 0 : 2; " is 120.
Long Statement,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostHeader,The length of the statement  "				using(var brush = new LinearGradientBrush(Point.Empty' new Point(0' Constants.HeaderHeight)' backgroundStart' backgroundEnd)) " is 125.
Long Statement,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostHeader,The length of the statement  "				using(var brush = new LinearGradientBrush(Point.Empty' new Point(0' Constants.HeaderHeight)' backgroundStart' backgroundEnd)) " is 125.
Long Statement,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderPopupNotificationHeader,The length of the statement  "			using(var brush = new LinearGradientBrush(Point.Empty' new Point(0' Constants.HeaderHeight)' backgroundStart' backgroundEnd)) " is 125.
Long Statement,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageAndTextCore,The length of the statement  "				rect.X     += ListBoxConstants.DefaultImageWidth + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage; " is 120.
Long Statement,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageAndTextCore,The length of the statement  "				rect.Width -= ListBoxConstants.DefaultImageWidth + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage; " is 120.
Long Statement,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndTextCore,The length of the statement  "				rect.Width -= ListBoxConstants.DefaultImageWidth + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage; " is 120.
Long Statement,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The length of the statement  "			PaintImageOverlayAndTextCore(image' overlay' text' _column.ContentFont' _column.ContentBrush' GetFormat(stringAlignment)); " is 122.
Long Statement,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndText,The length of the statement  "			PaintImageOverlayAndTextCore(image' overlay' text' _column.ContentFont' _column.ContentBrush' GetFormat(_column.ContentAlignment)); " is 131.
Long Statement,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The length of the statement  "			this._lstColumns.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 147.
Long Statement,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The length of the statement  "			this._btnHide.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The length of the statement  "			this._btnUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 142.
Long Statement,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The length of the statement  "			this._btnShow.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The length of the statement  "			this._btnDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HandleHeaderExtenderMouseDown,The length of the statement  "					extender.Show(this' new Point(GetColumnX(itemIndex) + c.Width - HScrollPos + 1' _headersArea.Bottom)' ToolStripDropDownDirection.Left); " is 135.
Long Statement,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HandleItemDefaultMouseDown,The length of the statement  "						Invalidate(Rectangle.Intersect(_itemsArea' new Rectangle(_itemsArea.X' _itemsArea.Y + minY' _itemsArea.Width' maxY - minY + 1))); " is 129.
Long Statement,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnDoubleClick,The length of the statement  "					if(_oldHitTestResult.ItemPart >= 0 && _itemFocus.IsTracked && _itemFocus.Index >= 0 && _itemFocus.Index < _itemPlainList.Count) " is 127.
Long Statement,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,CreateScrollBars,The length of the statement  "			_vScrollBar.Control.Bounds = new Rectangle(Width - scrollWidth - borderSize' borderSize' scrollWidth' Height - borderSize * 2); " is 127.
Long Statement,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,CreateScrollBars,The length of the statement  "			_hScrollBar.Control.Bounds = new Rectangle(borderSize' Height - borderSize - scrollHeight' Width - borderSize * 2' scrollHeight); " is 129.
Long Statement,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,SetVScrollBar,The length of the statement  "				if((_vScrollBar.Control.Parent == null && _alwaysShowVScrollBar) || (_vScrollBar.Control.Parent != null && !_alwaysShowVScrollBar)) " is 131.
Long Statement,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,SetHScrollBar,The length of the statement  "				if((_hScrollBar.Control.Parent == null && _alwaysShowHScrollBar) || (_hScrollBar.Control.Parent != null && !_alwaysShowHScrollBar)) " is 131.
Long Statement,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,PaintNonClient,The length of the statement  "					new Rectangle(_vScrollBar.Control.Left' _vScrollBar.Control.Bottom' _vScrollBar.Control.Width' _hScrollBar.Control.Height)); " is 124.
Long Statement,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The length of the statement  "			this._picChevron.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,OnVisibleChanged,The length of the statement  "			if((_flags & (PopupAnimations.Blend | PopupAnimations.Center | PopupAnimations.Roll | PopupAnimations.Slide)) == PopupAnimations.None) " is 134.
Long Statement,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,PaintSizeGrip,The length of the statement  "				e.Graphics.DrawImage(gripImage' clientSize.Width - gripWidth' clientSize.Height - gripHeight + 1' gripWidth' gripHeight); " is 121.
Long Statement,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,RemoveToolStrip,The length of the statement  "			Verify.Argument.IsTrue(toolStrip.Parent == this' "toolStrip"' "ToolStrip is not hosted in this " + GetType().Name + "."); " is 121.
Long Statement,gitter.Framework.Services,RepositoryManagerService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\RepositoryManager\RepositoryManagerService.cs,SaveGroupContentTo,The length of the statement  "				var repositorySection = repositoriesSection.CreateSection(string.Format(CultureInfo.InvariantCulture' "Repository{0}"' id++)); " is 126.
Long Statement,gitter.Framework.Services,RepositoryManagerService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\RepositoryManager\RepositoryManagerService.cs,SaveTo,The length of the statement  "					var repositorySection = recentRepositories.CreateSection(string.Format(CultureInfo.InvariantCulture' "Repository{0}"' id++)); " is 125.
Long Statement,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The length of the statement  "			var size = TextRenderer.MeasureText(_message' _lblMessage.Font' _lblMessage.Size' TextFormatFlags.TextBoxControl | TextFormatFlags.WordBreak); " is 142.
Long Statement,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The length of the statement  "			this._pnlContainer.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The length of the statement  "			this._lblMessage.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 147.
Long Statement,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The length of the statement  "			this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The length of the statement  "			this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223))))); " is 126.
Long Statement,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The length of the statement  "			this._lstFeatures.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 148.
Long Statement,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The length of the statement  "			this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The length of the statement  "			this.groupSeparator1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The length of the statement  "			this.groupSeparator2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The length of the statement  "			this._pnlThemesContainer.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 155.
Long Statement,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The length of the statement  "			this._pnlRestartRequiredWarning.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 162.
Long Statement,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SpellingPage)); " is 132.
Long Statement,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The length of the statement  "			this._lstDictionaries.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 152.
Long Statement,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The length of the statement  "			this._lnkDownload.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this._lnkDownload_LinkClicked); " is 122.
Long Statement,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The length of the statement  "			this._lblPoweredBy.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The length of the statement  "			this._picLogo.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The length of the statement  "			this._lstOptions.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 146.
Long Statement,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The length of the statement  "			this._lstOptions.ItemActivated += new System.EventHandler<gitter.Framework.Controls.ItemEventArgs>(this.OnItemActivated); " is 121.
Long Statement,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The length of the statement  "			this._pnlPageContainer.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 153.
Long Statement,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The length of the statement  "			this._lstFonts.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 145.
Long Statement,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The length of the statement  "			this._lblSize.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The length of the statement  "			this._lblSample.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The length of the statement  "			this._cmbFonts.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The length of the statement  "			this._numSize.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The length of the statement  "			this._cmbStyle.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The length of the statement  "			this._pnlSelectedFont.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 152.
Complex Conditional,gitter.Framework.Controls,ViewHostDockMarkers,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarkers.cs,CreateMarkers,The conditional expression  "ViewHost.IsDocumentWell || (!dockClient.IsDocumentWell && !(dockClient.ViewsCount == 1 && dockClient.GetView(0).IsDocument))"  is complex.
Complex Conditional,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,HitTest,The conditional expression  "x < 0 || y < 0 || x >= Width || y >= Height"  is complex.
Complex Conditional,gitter.Framework.Controls,ViewLayout,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewLayout.cs,SaveTo,The conditional expression  "_left != null || _top != null || _right != null || _bottom != null"  is complex.
Complex Conditional,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,HitTestArea,The conditional expression  "x < 0 || x > width || y < 0 || y >= ViewManager.Renderer.TabHeight"  is complex.
Complex Conditional,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnDoubleClick,The conditional expression  "_oldHitTestResult.ItemPart >= 0 && _itemFocus.IsTracked && _itemFocus.Index >= 0 && _itemFocus.Index < _itemPlainList.Count"  is complex.
Complex Conditional,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,SetVScrollBar,The conditional expression  "(_vScrollBar.Control.Parent == null && _alwaysShowVScrollBar) || (_vScrollBar.Control.Parent != null && !_alwaysShowVScrollBar)"  is complex.
Complex Conditional,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,SetHScrollBar,The conditional expression  "(_hScrollBar.Control.Parent == null && _alwaysShowHScrollBar) || (_hScrollBar.Control.Parent != null && !_alwaysShowHScrollBar)"  is complex.
Complex Conditional,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,PaintNonClient,The conditional expression  "clip.X <= 0 || clip.Y <= 0 || clip.Right >= w || clip.Height >= h"  is complex.
Complex Conditional,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,PaintNonClient,The conditional expression  "clip.X <= 0 || clip.Y <= 0 || clip.Right >= w || clip.Height >= h"  is complex.
Complex Conditional,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,PaintNonClient,The conditional expression  "clip.X <= 0 || clip.Y <= 0 || clip.Right >= w || clip.Height >= h"  is complex.
Complex Conditional,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,OnVisibleChanged,The conditional expression  "(Visible && PopupAnimation == PopupAnimations.None) || (!Visible && CloseAnimation == PopupAnimations.None)"  is complex.
Complex Conditional,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,Repaint,The conditional expression  "InvalidateHost && HostControl != null && HostControl.Created && !HostControl.IsDisposed"  is complex.
Complex Conditional,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The conditional expression  "CancelButton == null && (  					btn.DialogResult == DialogResult.Abort ||  					btn.DialogResult == DialogResult.Cancel ||  					btn.DialogResult == DialogResult.No)"  is complex.
Empty Catch Block,gitter.Framework,AsyncDataBinding<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\AsyncDataBinding.cs,ReloadData,The method has an empty catch block.
Empty Catch Block,gitter.Framework,AsyncDataBinding<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\AsyncDataBinding.cs,Dispose,The method has an empty catch block.
Empty Catch Block,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The method has an empty catch block.
Empty Catch Block,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The method has an empty catch block.
Empty Catch Block,gitter.Framework,GitterApplication,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GitterApplication.cs,OnUnhandledException,The method has an empty catch block.
Empty Catch Block,gitter.Framework,GitterApplication,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GitterApplication.cs,OnThreadException,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,SetAction,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,SetProgressRange,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,SetProgressRange,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,SetProgress,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,SetProgress,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,SetProgressIndeterminate,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,ProcessCompleted,The method has an empty catch block.
Empty Catch Block,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,Report,The method has an empty catch block.
Empty Catch Block,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,TerminateProcessTree,The method has an empty catch block.
Empty Catch Block,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,ShowPickFolderDialog,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncBytesReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncBytesReader.cs,OnStreamRead,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncBytesReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncBytesReader.cs,BeginReadAsync,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncBytesReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncBytesReader.cs,BeginReadAsync,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextReader.cs,WaitForEndOfStream,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextReader.cs,OnStreamRead,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextReader.cs,BeginReadAsync,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextReader.cs,BeginReadAsync,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextParser.cs,WaitForEndOfStream,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextParser.cs,OnStreamRead,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextParser.cs,BeginReadAsync,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,AsyncTextParser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\AsyncTextParser.cs,BeginReadAsync,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,NullReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\NullReader.cs,WaitForEndOfStream,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,NullReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\NullReader.cs,OnStreamRead,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,NullReader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\NullReader.cs,BeginReadAsync,The method has an empty catch block.
Empty Catch Block,gitter.Framework.CLI,CancellationMethods,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\CLI\ProcessExecutor.cs,KillProcess,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,AddSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,AddRangeSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,SetSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,InsertSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,RemoveSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,RemoveAtSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,RemoveRangeSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,ClearSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,InsertSortedFromTopSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,SafeNotifySortedCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\SafeNotifySortedCollection.cs,InsertSortedFromBottomSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,FlowPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowPanel.cs,InvalidateSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,FlowPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowPanel.cs,InvalidateSafe,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,InvalidateHostControl,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,ProcessCompleted,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,ProcessCompleted,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,Report,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Services,SpellingService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\SpellingService.cs,GetAvailableLocales,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Services,SpellingService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\SpellingService.cs,GetAvailableLocales,The method has an empty catch block.
Empty Catch Block,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,SpellingPage,The method has an empty catch block.
Magic Number,gitter,CharExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\CharExtensions.cs,IsOctDigit,The following statement contains a magic number: return digit >= 0 && digit < 8;
Magic Number,gitter,ColorExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\ColorExtensions.cs,Lighter,The following statement contains a magic number: var r = (byte)(color.R + (255 - color.R) * amount);
Magic Number,gitter,ColorExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\ColorExtensions.cs,Lighter,The following statement contains a magic number: var g = (byte)(color.G + (255 - color.G) * amount);
Magic Number,gitter,ColorExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\ColorExtensions.cs,Lighter,The following statement contains a magic number: var b = (byte)(color.B + (255 - color.B) * amount);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: var d = 2 * arcRadius;
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRegion,The following statement contains a magic number: var d = 2 * arcRadius;
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(x' y'  					2 * topLeftCorner' 2 * topLeftCorner' 180' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(x' y'  					2 * topLeftCorner' 2 * topLeftCorner' 180' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(x' y'  					2 * topLeftCorner' 2 * topLeftCorner' 180' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(x' y'  					2 * topLeftCorner' 2 * topLeftCorner' 180' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * topRightCorner - 1'  					y'  					2 * topRightCorner' 2 * topRightCorner' 270' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * topRightCorner - 1'  					y'  					2 * topRightCorner' 2 * topRightCorner' 270' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * topRightCorner - 1'  					y'  					2 * topRightCorner' 2 * topRightCorner' 270' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * topRightCorner - 1'  					y'  					2 * topRightCorner' 2 * topRightCorner' 270' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * topRightCorner - 1'  					y'  					2 * topRightCorner' 2 * topRightCorner' 270' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * bottomRightCorner - 1'  					y + h - 2 * bottomRightCorner - 1'  					2 * bottomRightCorner' 2 * bottomRightCorner' 0' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * bottomRightCorner - 1'  					y + h - 2 * bottomRightCorner - 1'  					2 * bottomRightCorner' 2 * bottomRightCorner' 0' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * bottomRightCorner - 1'  					y + h - 2 * bottomRightCorner - 1'  					2 * bottomRightCorner' 2 * bottomRightCorner' 0' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * bottomRightCorner - 1'  					y + h - 2 * bottomRightCorner - 1'  					2 * bottomRightCorner' 2 * bottomRightCorner' 0' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x + w - 2 * bottomRightCorner - 1'  					y + h - 2 * bottomRightCorner - 1'  					2 * bottomRightCorner' 2 * bottomRightCorner' 0' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x'  					y + h - 2 * bottomLeftCorner - 1'  					2 * bottomLeftCorner' 2 * bottomLeftCorner' 90' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x'  					y + h - 2 * bottomLeftCorner - 1'  					2 * bottomLeftCorner' 2 * bottomLeftCorner' 90' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x'  					y + h - 2 * bottomLeftCorner - 1'  					2 * bottomLeftCorner' 2 * bottomLeftCorner' 90' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x'  					y + h - 2 * bottomLeftCorner - 1'  					2 * bottomLeftCorner' 2 * bottomLeftCorner' 90' 90);
Magic Number,gitter.Framework,GraphicsUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\GraphicsUtility.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc(  					x'  					y + h - 2 * bottomLeftCorner - 1'  					2 * bottomLeftCorner' 2 * bottomLeftCorner' 90' 90);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,PaintColumnExtender,The following statement contains a magic number: graphics.FillRectangle(brush'  						bounds.Right - CustomListBoxColumn.ExtenderButtonWidth - 0.5f' bounds.Y'  						1' bounds.Height);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,PaintColumnExtender,The following statement contains a magic number: const int ArrowSize = 4;
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,PaintColumnExtender,The following statement contains a magic number: var p1 = new Point(  						bounds.Right - CustomListBoxColumn.ExtenderButtonWidth + CustomListBoxColumn.ExtenderButtonWidth / 2'  						bounds.Y + bounds.Height - (bounds.Height - ArrowSize) / 2);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,PaintColumnExtender,The following statement contains a magic number: var p1 = new Point(  						bounds.Right - CustomListBoxColumn.ExtenderButtonWidth + CustomListBoxColumn.ExtenderButtonWidth / 2'  						bounds.Y + bounds.Height - (bounds.Height - ArrowSize) / 2);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,PaintColumnExtender,The following statement contains a magic number: _triangle[2] = p3;
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c2 = Color.FromArgb(0' 122' 204);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c2 = Color.FromArgb(0' 122' 204);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c1 = Color.FromArgb(63' 63' 70);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c2 = Color.FromArgb(62' 62' 64);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c2 = Color.FromArgb(62' 62' 64);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c2 = Color.FromArgb(62' 62' 64);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon1,The following statement contains a magic number: var p0 = new PointF(x + 10.5f' y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon1,The following statement contains a magic number: var p0 = new PointF(x + 10.5f' y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon1,The following statement contains a magic number: _triangle[1] = new PointF(p0.X + 0' p0.Y + 7f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon1,The following statement contains a magic number: _triangle[2] = new PointF(p0.X - 7f' p0.Y + 7f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon1,The following statement contains a magic number: _triangle[2] = new PointF(p0.X - 7f' p0.Y + 7f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon1,The following statement contains a magic number: _triangle[2] = new PointF(p0.X - 7f' p0.Y + 7f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon2,The following statement contains a magic number: var p0 = new PointF(x + 9.5f' y + 6f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon2,The following statement contains a magic number: var p0 = new PointF(x + 9.5f' y + 6f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon2,The following statement contains a magic number: _triangle[1] = new PointF(p0.X + 0' p0.Y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon2,The following statement contains a magic number: _triangle[2] = new PointF(p0.X - 3.5f' p0.Y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon2,The following statement contains a magic number: _triangle[2] = new PointF(p0.X - 3.5f' p0.Y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CacheMinusTrianglePolygon2,The following statement contains a magic number: _triangle[2] = new PointF(p0.X - 3.5f' p0.Y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon1,The following statement contains a magic number: var p0 = new PointF(x + 5.5f' y + 2.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon1,The following statement contains a magic number: var p0 = new PointF(x + 5.5f' y + 2.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon1,The following statement contains a magic number: _triangle[1] = new PointF(p0.X + 5' p0.Y + 5.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon1,The following statement contains a magic number: _triangle[1] = new PointF(p0.X + 5' p0.Y + 5.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon1,The following statement contains a magic number: _triangle[2] = new PointF(p0.X + 0' p0.Y + 10.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon1,The following statement contains a magic number: _triangle[2] = new PointF(p0.X + 0' p0.Y + 10.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon2,The following statement contains a magic number: var p0 = new PointF(x + 6.5f' y + 4.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon2,The following statement contains a magic number: var p0 = new PointF(x + 6.5f' y + 4.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon2,The following statement contains a magic number: _triangle[1] = new PointF(p0.X + 3' p0.Y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon2,The following statement contains a magic number: _triangle[1] = new PointF(p0.X + 3' p0.Y + 3.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon2,The following statement contains a magic number: _triangle[2] = new PointF(p0.X + 0' p0.Y + 6.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,CachePlusTrianglePolygon2,The following statement contains a magic number: _triangle[2] = new PointF(p0.X + 0' p0.Y + 6.5f);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,OnPaintItemContent,The following statement contains a magic number: RenderPlusMinus(  										graphics'  										x + offset' subrect.Y + (subrect.Height - ListBoxConstants.PlusMinusImageWidth) / 2'  										item.IsExpanded'  										(paintEventArgs.State & ItemState.Selected) == ItemState.Selected'  										hoveredPart == ItemHitTestResults.PlusMinus'  										paintEventArgs.IsHostControlFocused);
Magic Number,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,OnPaintItemContent,The following statement contains a magic number: destRect = new Rectangle(  										x + offset + ListBoxConstants.SpaceBeforeCheckbox'  										rect.Y + (rect.Height - ListBoxConstants.CheckboxImageWidth) / 2'  										w2 - ListBoxConstants.SpaceBeforeCheckbox'  										ListBoxConstants.CheckboxImageWidth);
Magic Number,gitter.Framework,FileSize,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\FileSize.cs,FileSize,The following statement contains a magic number: s /= 1024;
Magic Number,gitter.Framework,FileSize,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\FileSize.cs,FileSize,The following statement contains a magic number: s > 1024
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: int x = e.ToolStrip.Bounds.Width - 13;
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: int y = e.ToolStrip.Bounds.Height - 13;
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush0' new Rectangle(x + i * 3 + 0' y + j * 3 + 0' 1' 1));
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush0' new Rectangle(x + i * 3 + 0' y + j * 3 + 0' 1' 1));
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush1' new Rectangle(x + i * 3 + 1' y + j * 3 + 1' 1' 1));
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush1' new Rectangle(x + i * 3 + 1' y + j * 3 + 1' 1' 1));
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: var x = size.Width / 2;
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: var y = 4;
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: e.Graphics.DrawLine(pen' x' y' x' y + size.Height - 8);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: e.Graphics.DrawLine(pen' x' y' x' y + size.Height - 8);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: const int GripSize = 5;
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  			{  				case ToolStripGripDisplayStyle.Horizontal:  					client.Y += (client.Width - GripSize) / 2;  					client.Height = 5;  					break;  				case ToolStripGripDisplayStyle.Vertical:  					client.X += (client.Width - GripSize) / 2;  					client.Width = 5;  					break;  			}
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  			{  				case ToolStripGripDisplayStyle.Horizontal:  					client.Y += (client.Width - GripSize) / 2;  					client.Height = 5;  					break;  				case ToolStripGripDisplayStyle.Vertical:  					client.X += (client.Width - GripSize) / 2;  					client.Width = 5;  					break;  			}
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  			{  				case ToolStripGripDisplayStyle.Horizontal:  					client.Y += (client.Width - GripSize) / 2;  					client.Height = 5;  					break;  				case ToolStripGripDisplayStyle.Vertical:  					client.X += (client.Width - GripSize) / 2;  					client.Width = 5;  					break;  			}
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  			{  				case ToolStripGripDisplayStyle.Horizontal:  					client.Y += (client.Width - GripSize) / 2;  					client.Height = 5;  					break;  				case ToolStripGripDisplayStyle.Vertical:  					client.X += (client.Width - GripSize) / 2;  					client.Width = 5;  					break;  			}
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: graphics.RenderingOrigin = new Point(client.X % 4' client.Y % 4);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: graphics.RenderingOrigin = new Point(client.X % 4' client.Y % 4);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderDropDownButtonBackground,The following statement contains a magic number: var arrowBounds = new Rectangle(item.Width - 16' 0' 16' item.Height);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderDropDownButtonBackground,The following statement contains a magic number: var arrowBounds = new Rectangle(item.Width - 16' 0' 16' item.Height);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: rc2.Width -= 2;
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: rc2.Height -= 2;
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: var path = new Point[]  					{  						new Point(rc2.X + 3'  6 + rc2.Y)'  						new Point(rc2.X + 5'  9 + rc2.Y)'  						new Point(rc2.X + 10' 2 + rc2.Y)'  					};
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: var path = new Point[]  					{  						new Point(rc2.X + 3'  6 + rc2.Y)'  						new Point(rc2.X + 5'  9 + rc2.Y)'  						new Point(rc2.X + 10' 2 + rc2.Y)'  					};
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: var path = new Point[]  					{  						new Point(rc2.X + 3'  6 + rc2.Y)'  						new Point(rc2.X + 5'  9 + rc2.Y)'  						new Point(rc2.X + 10' 2 + rc2.Y)'  					};
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: var path = new Point[]  					{  						new Point(rc2.X + 3'  6 + rc2.Y)'  						new Point(rc2.X + 5'  9 + rc2.Y)'  						new Point(rc2.X + 10' 2 + rc2.Y)'  					};
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: var path = new Point[]  					{  						new Point(rc2.X + 3'  6 + rc2.Y)'  						new Point(rc2.X + 5'  9 + rc2.Y)'  						new Point(rc2.X + 10' 2 + rc2.Y)'  					};
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: var path = new Point[]  					{  						new Point(rc2.X + 3'  6 + rc2.Y)'  						new Point(rc2.X + 5'  9 + rc2.Y)'  						new Point(rc2.X + 10' 2 + rc2.Y)'  					};
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,RenderDropDownBackground,The following statement contains a magic number: var rc = new Rectangle(1' 1' strip.Width - 2' strip.Height - 2);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,RenderDropDownBackground,The following statement contains a magic number: var rc = new Rectangle(1' 1' strip.Width - 2' strip.Height - 2);
Magic Number,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,RenderMenuItemBackgroundInternal,The following statement contains a magic number: rc.Height += 5;
Magic Number,gitter.Framework,BitmapExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\BitmapExtensions.cs,SetAlpha,The following statement contains a magic number: var pixelAlpha = line + 3;
Magic Number,gitter.Framework,BitmapExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\BitmapExtensions.cs,SetAlpha,The following statement contains a magic number: var eol = pixelAlpha + data.Width * 4;
Magic Number,gitter.Framework,BitmapExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\BitmapExtensions.cs,SetAlpha,The following statement contains a magic number: pixelAlpha += 4;
Magic Number,gitter.Framework,ProgressBarExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\ProgressBarExtensions.cs,SetStyleEx,The following statement contains a magic number: const uint TDM_SET_PROGRESS_BAR_STATE = 0x400 + 16;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderImageMargin,The following statement contains a magic number: rect.Y += 2;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderImageMargin,The following statement contains a magic number: rect.Height -= 4;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: int x = e.ToolStrip.Bounds.Width - 13;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: int y = e.ToolStrip.Bounds.Height - 13;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush00' new Rectangle(x + i * 3 + 0' y + j * 3 + 0' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush00' new Rectangle(x + i * 3 + 0' y + j * 3 + 0' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush10' new Rectangle(x + i * 3 + 1' y + j * 3 + 0' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush10' new Rectangle(x + i * 3 + 1' y + j * 3 + 0' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush01' new Rectangle(x + i * 3 + 0' y + j * 3 + 1' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush01' new Rectangle(x + i * 3 + 0' y + j * 3 + 1' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush11' new Rectangle(x + i * 3 + 1' y + j * 3 + 1' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: e.Graphics.FillRectangle(brush11' new Rectangle(x + i * 3 + 1' y + j * 3 + 1' 1' 1));
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: var x = size.Width / 2;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: var y = 4;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: e.Graphics.DrawLine(pen' x' y' x' y + size.Height - 8);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: var y = e.GripBounds.Y + 2;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderDropDownButtonBackground,The following statement contains a magic number: Rectangle arrowBounds = new Rectangle(item.Width - 16' 0' 16' item.Height);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderDropDownButtonBackground,The following statement contains a magic number: Rectangle arrowBounds = new Rectangle(item.Width - 16' 0' 16' item.Height);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderItemImage,The following statement contains a magic number: RenderItemBackgroundInternal(e.Graphics'  						e.ImageRectangle.X - 2'  						e.ImageRectangle.Y - 2'  						e.ImageRectangle.Width + 4'  						e.ImageRectangle.Height + 4'  						true' false);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: checkRect.X += (checkRect.Width + 1 - ImgMenuCheck.Width) / 2;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderItemCheck,The following statement contains a magic number: checkRect.Y += (checkRect.Height + 1 - ImgMenuCheck.Height) / 2;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,RenderDropDownBackground,The following statement contains a magic number: var rc = new Rectangle(1' 1' strip.Width - 2' strip.Height - 2);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,RenderDropDownBackground,The following statement contains a magic number: var rc = new Rectangle(1' 1' strip.Width - 2' strip.Height - 2);
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,RenderMenuItemBackgroundInternal,The following statement contains a magic number: rc.Height += 4;
Magic Number,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,RenderMenuItemBackgroundInternal,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' pen' rc' 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: var sb = new StringBuilder(24);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: date.Month <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: date.Day <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: date.Hour <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: date.Minute <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: date.Second <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: offset.Hours <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatISO8601,The following statement contains a magic number: offset.Minutes <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: var sb = new StringBuilder(3 + 2 + 2 + 1 + 3 + 1 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 2);
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: date.Hour <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: date.Minute <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: date.Second <= 9
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: sb.Append(offset.Hours > 10 ? offset.Hours.ToString() : "0" + offset.Hours.ToString());
Magic Number,gitter.Framework,DateTimeExtensions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Extensions\DateTimeExtensions.cs,FormatRFC2822,The following statement contains a magic number: sb.Append(offset.Minutes > 10 ? offset.Minutes.ToString() : "0" + offset.Minutes.ToString());
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,ExceptionDialog,The following statement contains a magic number: _lblExceptionName.Font = new Font(f.FontFamily' 15' FontStyle.Regular' f.Unit' f.GdiCharSet);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblExceptionName.Size = new System.Drawing.Size(490' 32);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblExceptionName.Size = new System.Drawing.Size(490' 32);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.Location = new System.Drawing.Point(0' 32);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.Size = new System.Drawing.Size(490' 65);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.Size = new System.Drawing.Size(490' 65);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._txtStack.Location = new System.Drawing.Point(0' 115);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._txtStack.Size = new System.Drawing.Size(490' 268);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._txtStack.Size = new System.Drawing.Size(490' 268);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._txtStack.TabIndex = 2;
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblSTack.Location = new System.Drawing.Point(0' 97);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblSTack.Size = new System.Drawing.Size(58' 15);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblSTack.Size = new System.Drawing.Size(58' 15);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblSTack.TabIndex = 3;
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkCopyToClipboard.Location = new System.Drawing.Point(249' 386);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkCopyToClipboard.Location = new System.Drawing.Point(249' 386);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkCopyToClipboard.Size = new System.Drawing.Size(122' 15);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkCopyToClipboard.Size = new System.Drawing.Size(122' 15);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkCopyToClipboard.TabIndex = 4;
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkSendBugReport.Location = new System.Drawing.Point(378' 386);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkSendBugReport.Location = new System.Drawing.Point(378' 386);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkSendBugReport.Size = new System.Drawing.Size(109' 15);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkSendBugReport.Size = new System.Drawing.Size(109' 15);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this._lnkSendBugReport.TabIndex = 5;
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(490' 401);
Magic Number,gitter.Framework,ExceptionDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\ExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(490' 401);
Magic Number,gitter.Framework,FormEx,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\FormEx.cs,FormEx,The following statement contains a magic number: AutoScaleDimensions = new SizeF(96F' 96F);
Magic Number,gitter.Framework,FormEx,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\FormEx.cs,FormEx,The following statement contains a magic number: AutoScaleDimensions = new SizeF(96F' 96F);
Magic Number,gitter.Framework,FormEx,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\FormEx.cs,FormEx,The following statement contains a magic number: ClientSize = new Size(624' 435);
Magic Number,gitter.Framework,FormEx,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\FormEx.cs,FormEx,The following statement contains a magic number: ClientSize = new Size(624' 435);
Magic Number,gitter.Framework,DialogBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogBase.cs,DialogBase,The following statement contains a magic number: AutoScaleDimensions = new SizeF(96F' 96F);
Magic Number,gitter.Framework,DialogBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogBase.cs,DialogBase,The following statement contains a magic number: AutoScaleDimensions = new SizeF(96F' 96F);
Magic Number,gitter.Framework,DialogBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogBase.cs,DialogBase,The following statement contains a magic number: Margin = new Padding(10);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: var rc = new Rectangle(2' 2' width - 4' height - 4);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: var rc = new Rectangle(2' 2' width - 4' height - 4);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: var rc = new Rectangle(2' 2' width - 4' height - 4);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: var rc = new Rectangle(2' 2' width - 4' height - 4);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: g.DrawImage(img' (height - img.Width) / 2' (height - img.Height) / 2' img.Width' img.Height);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: g.DrawImage(img' (height - img.Width) / 2' (height - img.Height) / 2' img.Width' img.Height);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: rc.X += height + 2;
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,RenderChevronButton,The following statement contains a magic number: rc.Width -= height + 2;
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlContainer.Size = new System.Drawing.Size(423' 137);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlContainer.Size = new System.Drawing.Size(423' 137);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.Location = new System.Drawing.Point(0' 136);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.Size = new System.Drawing.Size(423' 1);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Location = new System.Drawing.Point(260' 145);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Location = new System.Drawing.Point(260' 145);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.TabIndex = 2;
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnOK.Location = new System.Drawing.Point(179' 145);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnOK.Location = new System.Drawing.Point(179' 145);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnOK.TabIndex = 2;
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._picAdvanced.Location = new System.Drawing.Point(7' 146);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._picAdvanced.Location = new System.Drawing.Point(7' 146);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._picAdvanced.Size = new System.Drawing.Size(150' 21);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._picAdvanced.Size = new System.Drawing.Size(150' 21);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._picAdvanced.TabIndex = 3;
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnApply.Location = new System.Drawing.Point(341' 145);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnApply.Location = new System.Drawing.Point(341' 145);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnApply.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnApply.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this._btnApply.TabIndex = 4;
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(423' 176);
Magic Number,gitter.Framework,DialogForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Dialogs\DialogForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(423' 176);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 64);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(389' 40);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(389' 40);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 4;
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Location = new System.Drawing.Point(307' 9);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Location = new System.Drawing.Point(307' 9);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._btnCancel.TabIndex = 3;
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.Location = new System.Drawing.Point(0' 64);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.Size = new System.Drawing.Size(389' 1);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlLine.TabIndex = 2;
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._progressBar.Location = new System.Drawing.Point(12' 31);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._progressBar.Location = new System.Drawing.Point(12' 31);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._progressBar.Size = new System.Drawing.Size(365' 18);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._progressBar.Size = new System.Drawing.Size(365' 18);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._lblAction.Location = new System.Drawing.Point(10' 10);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._lblAction.Location = new System.Drawing.Point(10' 10);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._lblAction.Size = new System.Drawing.Size(48' 13);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._lblAction.Size = new System.Drawing.Size(48' 13);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlContainer.Size = new System.Drawing.Size(389' 65);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlContainer.Size = new System.Drawing.Size(389' 65);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlContainer.TabIndex = 3;
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(389' 104);
Magic Number,gitter.Framework,ProgressForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Forms\ProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(389' 104);
Magic Number,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,FindSeparatingEmptyLine,The following statement contains a magic number: switch(c)  				{  					case '\r':  						if(prevN)  						{  							prevN = false;  						}  						else  						{  							lines = 0;  						}  						prevR = true;  						break;  					case '\n':  						if(prevN)  						{  							part2Start = i + 1;  							return i - 1;  						}  						else  						{  							if(prevR)  							{  								++lines;  								if(lines == 2)  								{  									part2Start = i + 1;  									return i - 3;  								}  								prevR = false;  							}  							prevN = true;  						}  						break;  					default:  						lines = 0;  						prevN = false;  						prevR = false;  						break;  				}
Magic Number,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,FindSeparatingEmptyLine,The following statement contains a magic number: switch(c)  				{  					case '\r':  						if(prevN)  						{  							prevN = false;  						}  						else  						{  							lines = 0;  						}  						prevR = true;  						break;  					case '\n':  						if(prevN)  						{  							part2Start = i + 1;  							return i - 1;  						}  						else  						{  							if(prevR)  							{  								++lines;  								if(lines == 2)  								{  									part2Start = i + 1;  									return i - 3;  								}  								prevR = false;  							}  							prevN = true;  						}  						break;  					default:  						lines = 0;  						prevN = false;  						prevR = false;  						break;  				}
Magic Number,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,ReadVersion,The following statement contains a magic number: int[] values = new int[4];
Magic Number,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,ReadVersion,The following statement contains a magic number: !IsAtEndOfLine && parts < 4
Magic Number,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,ReadVersion,The following statement contains a magic number: return new Version(values[0]' values[1]' values[2]' values[3]);
Magic Number,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,ReadVersion,The following statement contains a magic number: return new Version(values[0]' values[1]' values[2]' values[3]);
Magic Number,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,ReadVersion,The following statement contains a magic number: parts > 2
Magic Number,gitter.Framework,ShellUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\ShellUtility.cs,ExtractAssociatedIcon16_,The following statement contains a magic number: return new Icon(fileName' 16' 16);
Magic Number,gitter.Framework,ShellUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\ShellUtility.cs,ExtractAssociatedIcon16_,The following statement contains a magic number: return new Icon(fileName' 16' 16);
Magic Number,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,FormatDate,The following statement contains a magic number: switch(format)  			{  				case DateFormat.SystemDefault:  					return date.ToString(CultureInfo.CurrentCulture);  				case DateFormat.UnixTimestamp:  					return ((int)(date - UnixEraStart).TotalSeconds).ToString(CultureInfo.InvariantCulture);  				case DateFormat.Relative:  					{  						var span = DateTime.Now - date;  						if(span.TotalDays >= 365)  						{  							var years = (int)(span.TotalDays / 365);  							return (years == 1) ? "1 year ago" : years.ToString(CultureInfo.InvariantCulture) + " years ago";  						}  						if(span.TotalDays >= 30)  						{  							var months = (int)(span.TotalDays / 30);  							return (months == 1) ? "1 month ago" : months.ToString(CultureInfo.InvariantCulture) + " months ago";  						}  						if(span.TotalDays >= 7)  						{  							var weeks = (int)(span.TotalDays / 7);  							return (weeks == 1) ? "1 week ago" : weeks.ToString(CultureInfo.InvariantCulture) + " weeks ago";  						}  						if(span.TotalDays >= 1)  						{  							var days = (int)span.TotalDays;  							return (days == 1) ? "1 day ago" : days.ToString(CultureInfo.InvariantCulture) + " days ago";  						}  						if(span.TotalHours >= 1)  						{  							var hours = (int)span.TotalHours;  							return (hours == 1) ? "1 hour ago" : hours.ToString(CultureInfo.InvariantCulture) + " hours ago";  						}  						if(span.TotalMinutes >= 1)  						{  							var minutes = (int)span.TotalMinutes;  							return (minutes == 1) ? "1 minute ago" : minutes.ToString(CultureInfo.InvariantCulture) + " minutes ago";  						}  						var seconds = (int)span.TotalSeconds;  						return (seconds == 1) ? "1 second ago" : seconds.ToString(CultureInfo.InvariantCulture) + " seconds ago";  					}  				case DateFormat.ISO8601:  					return date.FormatISO8601();  				case DateFormat.RFC2822:  					return date.FormatRFC2822();  				default:  					throw new ArgumentException(  						"Unknown DateFormat value: {0}".UseAsFormat(date)'  						"format");  			}
Magic Number,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,FormatDate,The following statement contains a magic number: switch(format)  			{  				case DateFormat.SystemDefault:  					return date.ToString(CultureInfo.CurrentCulture);  				case DateFormat.UnixTimestamp:  					return ((int)(date - UnixEraStart).TotalSeconds).ToString(CultureInfo.InvariantCulture);  				case DateFormat.Relative:  					{  						var span = DateTime.Now - date;  						if(span.TotalDays >= 365)  						{  							var years = (int)(span.TotalDays / 365);  							return (years == 1) ? "1 year ago" : years.ToString(CultureInfo.InvariantCulture) + " years ago";  						}  						if(span.TotalDays >= 30)  						{  							var months = (int)(span.TotalDays / 30);  							return (months == 1) ? "1 month ago" : months.ToString(CultureInfo.InvariantCulture) + " months ago";  						}  						if(span.TotalDays >= 7)  						{  							var weeks = (int)(span.TotalDays / 7);  							return (weeks == 1) ? "1 week ago" : weeks.ToString(CultureInfo.InvariantCulture) + " weeks ago";  						}  						if(span.TotalDays >= 1)  						{  							var days = (int)span.TotalDays;  							return (days == 1) ? "1 day ago" : days.ToString(CultureInfo.InvariantCulture) + " days ago";  						}  						if(span.TotalHours >= 1)  						{  							var hours = (int)span.TotalHours;  							return (hours == 1) ? "1 hour ago" : hours.ToString(CultureInfo.InvariantCulture) + " hours ago";  						}  						if(span.TotalMinutes >= 1)  						{  							var minutes = (int)span.TotalMinutes;  							return (minutes == 1) ? "1 minute ago" : minutes.ToString(CultureInfo.InvariantCulture) + " minutes ago";  						}  						var seconds = (int)span.TotalSeconds;  						return (seconds == 1) ? "1 second ago" : seconds.ToString(CultureInfo.InvariantCulture) + " seconds ago";  					}  				case DateFormat.ISO8601:  					return date.FormatISO8601();  				case DateFormat.RFC2822:  					return date.FormatRFC2822();  				default:  					throw new ArgumentException(  						"Unknown DateFormat value: {0}".UseAsFormat(date)'  						"format");  			}
Magic Number,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,FormatDate,The following statement contains a magic number: switch(format)  			{  				case DateFormat.SystemDefault:  					return date.ToString(CultureInfo.CurrentCulture);  				case DateFormat.UnixTimestamp:  					return ((int)(date - UnixEraStart).TotalSeconds).ToString(CultureInfo.InvariantCulture);  				case DateFormat.Relative:  					{  						var span = DateTime.Now - date;  						if(span.TotalDays >= 365)  						{  							var years = (int)(span.TotalDays / 365);  							return (years == 1) ? "1 year ago" : years.ToString(CultureInfo.InvariantCulture) + " years ago";  						}  						if(span.TotalDays >= 30)  						{  							var months = (int)(span.TotalDays / 30);  							return (months == 1) ? "1 month ago" : months.ToString(CultureInfo.InvariantCulture) + " months ago";  						}  						if(span.TotalDays >= 7)  						{  							var weeks = (int)(span.TotalDays / 7);  							return (weeks == 1) ? "1 week ago" : weeks.ToString(CultureInfo.InvariantCulture) + " weeks ago";  						}  						if(span.TotalDays >= 1)  						{  							var days = (int)span.TotalDays;  							return (days == 1) ? "1 day ago" : days.ToString(CultureInfo.InvariantCulture) + " days ago";  						}  						if(span.TotalHours >= 1)  						{  							var hours = (int)span.TotalHours;  							return (hours == 1) ? "1 hour ago" : hours.ToString(CultureInfo.InvariantCulture) + " hours ago";  						}  						if(span.TotalMinutes >= 1)  						{  							var minutes = (int)span.TotalMinutes;  							return (minutes == 1) ? "1 minute ago" : minutes.ToString(CultureInfo.InvariantCulture) + " minutes ago";  						}  						var seconds = (int)span.TotalSeconds;  						return (seconds == 1) ? "1 second ago" : seconds.ToString(CultureInfo.InvariantCulture) + " seconds ago";  					}  				case DateFormat.ISO8601:  					return date.FormatISO8601();  				case DateFormat.RFC2822:  					return date.FormatRFC2822();  				default:  					throw new ArgumentException(  						"Unknown DateFormat value: {0}".UseAsFormat(date)'  						"format");  			}
Magic Number,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,FormatDate,The following statement contains a magic number: switch(format)  			{  				case DateFormat.SystemDefault:  					return date.ToString(CultureInfo.CurrentCulture);  				case DateFormat.UnixTimestamp:  					return ((int)(date - UnixEraStart).TotalSeconds).ToString(CultureInfo.InvariantCulture);  				case DateFormat.Relative:  					{  						var span = DateTime.Now - date;  						if(span.TotalDays >= 365)  						{  							var years = (int)(span.TotalDays / 365);  							return (years == 1) ? "1 year ago" : years.ToString(CultureInfo.InvariantCulture) + " years ago";  						}  						if(span.TotalDays >= 30)  						{  							var months = (int)(span.TotalDays / 30);  							return (months == 1) ? "1 month ago" : months.ToString(CultureInfo.InvariantCulture) + " months ago";  						}  						if(span.TotalDays >= 7)  						{  							var weeks = (int)(span.TotalDays / 7);  							return (weeks == 1) ? "1 week ago" : weeks.ToString(CultureInfo.InvariantCulture) + " weeks ago";  						}  						if(span.TotalDays >= 1)  						{  							var days = (int)span.TotalDays;  							return (days == 1) ? "1 day ago" : days.ToString(CultureInfo.InvariantCulture) + " days ago";  						}  						if(span.TotalHours >= 1)  						{  							var hours = (int)span.TotalHours;  							return (hours == 1) ? "1 hour ago" : hours.ToString(CultureInfo.InvariantCulture) + " hours ago";  						}  						if(span.TotalMinutes >= 1)  						{  							var minutes = (int)span.TotalMinutes;  							return (minutes == 1) ? "1 minute ago" : minutes.ToString(CultureInfo.InvariantCulture) + " minutes ago";  						}  						var seconds = (int)span.TotalSeconds;  						return (seconds == 1) ? "1 second ago" : seconds.ToString(CultureInfo.InvariantCulture) + " seconds ago";  					}  				case DateFormat.ISO8601:  					return date.FormatISO8601();  				case DateFormat.RFC2822:  					return date.FormatRFC2822();  				default:  					throw new ArgumentException(  						"Unknown DateFormat value: {0}".UseAsFormat(date)'  						"format");  			}
Magic Number,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,FormatDate,The following statement contains a magic number: switch(format)  			{  				case DateFormat.SystemDefault:  					return date.ToString(CultureInfo.CurrentCulture);  				case DateFormat.UnixTimestamp:  					return ((int)(date - UnixEraStart).TotalSeconds).ToString(CultureInfo.InvariantCulture);  				case DateFormat.Relative:  					{  						var span = DateTime.Now - date;  						if(span.TotalDays >= 365)  						{  							var years = (int)(span.TotalDays / 365);  							return (years == 1) ? "1 year ago" : years.ToString(CultureInfo.InvariantCulture) + " years ago";  						}  						if(span.TotalDays >= 30)  						{  							var months = (int)(span.TotalDays / 30);  							return (months == 1) ? "1 month ago" : months.ToString(CultureInfo.InvariantCulture) + " months ago";  						}  						if(span.TotalDays >= 7)  						{  							var weeks = (int)(span.TotalDays / 7);  							return (weeks == 1) ? "1 week ago" : weeks.ToString(CultureInfo.InvariantCulture) + " weeks ago";  						}  						if(span.TotalDays >= 1)  						{  							var days = (int)span.TotalDays;  							return (days == 1) ? "1 day ago" : days.ToString(CultureInfo.InvariantCulture) + " days ago";  						}  						if(span.TotalHours >= 1)  						{  							var hours = (int)span.TotalHours;  							return (hours == 1) ? "1 hour ago" : hours.ToString(CultureInfo.InvariantCulture) + " hours ago";  						}  						if(span.TotalMinutes >= 1)  						{  							var minutes = (int)span.TotalMinutes;  							return (minutes == 1) ? "1 minute ago" : minutes.ToString(CultureInfo.InvariantCulture) + " minutes ago";  						}  						var seconds = (int)span.TotalSeconds;  						return (seconds == 1) ? "1 second ago" : seconds.ToString(CultureInfo.InvariantCulture) + " seconds ago";  					}  				case DateFormat.ISO8601:  					return date.FormatISO8601();  				case DateFormat.RFC2822:  					return date.FormatRFC2822();  				default:  					throw new ArgumentException(  						"Unknown DateFormat value: {0}".UseAsFormat(date)'  						"format");  			}
Magic Number,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,FormatDate,The following statement contains a magic number: switch(format)  			{  				case DateFormat.SystemDefault:  					return date.ToString(CultureInfo.CurrentCulture);  				case DateFormat.UnixTimestamp:  					return ((int)(date - UnixEraStart).TotalSeconds).ToString(CultureInfo.InvariantCulture);  				case DateFormat.Relative:  					{  						var span = DateTime.Now - date;  						if(span.TotalDays >= 365)  						{  							var years = (int)(span.TotalDays / 365);  							return (years == 1) ? "1 year ago" : years.ToString(CultureInfo.InvariantCulture) + " years ago";  						}  						if(span.TotalDays >= 30)  						{  							var months = (int)(span.TotalDays / 30);  							return (months == 1) ? "1 month ago" : months.ToString(CultureInfo.InvariantCulture) + " months ago";  						}  						if(span.TotalDays >= 7)  						{  							var weeks = (int)(span.TotalDays / 7);  							return (weeks == 1) ? "1 week ago" : weeks.ToString(CultureInfo.InvariantCulture) + " weeks ago";  						}  						if(span.TotalDays >= 1)  						{  							var days = (int)span.TotalDays;  							return (days == 1) ? "1 day ago" : days.ToString(CultureInfo.InvariantCulture) + " days ago";  						}  						if(span.TotalHours >= 1)  						{  							var hours = (int)span.TotalHours;  							return (hours == 1) ? "1 hour ago" : hours.ToString(CultureInfo.InvariantCulture) + " hours ago";  						}  						if(span.TotalMinutes >= 1)  						{  							var minutes = (int)span.TotalMinutes;  							return (minutes == 1) ? "1 minute ago" : minutes.ToString(CultureInfo.InvariantCulture) + " minutes ago";  						}  						var seconds = (int)span.TotalSeconds;  						return (seconds == 1) ? "1 second ago" : seconds.ToString(CultureInfo.InvariantCulture) + " seconds ago";  					}  				case DateFormat.ISO8601:  					return date.FormatISO8601();  				case DateFormat.RFC2822:  					return date.FormatRFC2822();  				default:  					throw new ArgumentException(  						"Unknown DateFormat value: {0}".UseAsFormat(date)'  						"format");  			}
Magic Number,gitter.Framework,Utility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Utility.cs,ExpandNewLineCharacters,The following statement contains a magic number: var sb = new StringBuilder(text.Length + 20);
Magic Number,gitter.Framework,VistaPickFolderDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Win7Support\VistaPickFolderDialog.cs,GetFilePathFromShellItem,The following statement contains a magic number: item.GetDisplayName((SIGDN)(-2147319808)' out str);
Magic Number,gitter.Framework.Controls,CustomButton,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\CustomButton.cs,CustomButton,The following statement contains a magic number: Size = new Size(86' 18);
Magic Number,gitter.Framework.Controls,CustomButton,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\CustomButton.cs,CustomButton,The following statement contains a magic number: Size = new Size(86' 18);
Magic Number,gitter.Framework.Controls,CustomCheckBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\CustomCheckBox.cs,CustomCheckBox,The following statement contains a magic number: Size = new Size(86' 18);
Magic Number,gitter.Framework.Controls,CustomCheckBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\CustomCheckBox.cs,CustomCheckBox,The following statement contains a magic number: Size = new Size(86' 18);
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: const int CheckBoxSize = 16;
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: var rcCheckBox = new Rectangle(1' 1 + (checkBox.Height - CheckBoxSize) / 2' CheckBoxSize - 2' CheckBoxSize - 2);
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: var rcCheckBox = new Rectangle(1' 1 + (checkBox.Height - CheckBoxSize) / 2' CheckBoxSize - 2' CheckBoxSize - 2);
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: var rcCheckBox = new Rectangle(1' 1 + (checkBox.Height - CheckBoxSize) / 2' CheckBoxSize - 2' CheckBoxSize - 2);
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: int textOffset = 16;
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: textOffset += image.Width + 4;
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: graphics.DrawImage(image' new Rectangle(16 + 3' (checkBox.Height - image.Height) / 2' image.Width' image.Height));
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: graphics.DrawImage(image' new Rectangle(16 + 3' (checkBox.Height - image.Height) / 2' image.Width' image.Height));
Magic Number,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following statement contains a magic number: graphics.DrawImage(image' new Rectangle(16 + 3' (checkBox.Height - image.Height) / 2' image.Width' image.Height));
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radUnixTimestamp.Location = new System.Drawing.Point(6' 22);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radUnixTimestamp.Location = new System.Drawing.Point(6' 22);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radUnixTimestamp.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radUnixTimestamp.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRelative.Location = new System.Drawing.Point(6' 42);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRelative.Location = new System.Drawing.Point(6' 42);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRelative.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRelative.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radSystemDefault.Location = new System.Drawing.Point(6' 62);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radSystemDefault.Location = new System.Drawing.Point(6' 62);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radSystemDefault.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radSystemDefault.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radSystemDefault.TabIndex = 2;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radISO8601.Location = new System.Drawing.Point(6' 82);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radISO8601.Location = new System.Drawing.Point(6' 82);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radISO8601.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radISO8601.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radISO8601.TabIndex = 3;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRFC2822.Location = new System.Drawing.Point(6' 102);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRFC2822.Location = new System.Drawing.Point(6' 102);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRFC2822.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRFC2822.Size = new System.Drawing.Size(94' 19);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._radRFC2822.TabIndex = 4;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblUnixTimestamp.Location = new System.Drawing.Point(137' 24);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblUnixTimestamp.Location = new System.Drawing.Point(137' 24);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblUnixTimestamp.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblUnixTimestamp.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblUnixTimestamp.TabIndex = 5;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRelative.Location = new System.Drawing.Point(137' 44);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRelative.Location = new System.Drawing.Point(137' 44);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRelative.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRelative.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRelative.TabIndex = 6;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblSystemDefault.Location = new System.Drawing.Point(137' 64);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblSystemDefault.Location = new System.Drawing.Point(137' 64);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblSystemDefault.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblSystemDefault.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblSystemDefault.TabIndex = 7;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblISO8601.Location = new System.Drawing.Point(137' 84);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblISO8601.Location = new System.Drawing.Point(137' 84);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblISO8601.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblISO8601.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblISO8601.TabIndex = 8;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRFC2822.Location = new System.Drawing.Point(137' 104);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRFC2822.Location = new System.Drawing.Point(137' 104);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRFC2822.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRFC2822.Size = new System.Drawing.Size(38' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblRFC2822.TabIndex = 9;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblDateFormat.Location = new System.Drawing.Point(3' 4);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblDateFormat.Location = new System.Drawing.Point(3' 4);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblDateFormat.Size = new System.Drawing.Size(95' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblDateFormat.Size = new System.Drawing.Size(95' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblDateFormat.TabIndex = 10;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblExample.Location = new System.Drawing.Point(137' 4);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblExample.Location = new System.Drawing.Point(137' 4);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblExample.Size = new System.Drawing.Size(74' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblExample.Size = new System.Drawing.Size(74' 15);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this._lblExample.TabIndex = 11;
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(327' 127);
Magic Number,gitter.Framework.Controls,DateColumnExtender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\DateColumnExtender.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(327' 127);
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,CustomObjectPicker,The following statement contains a magic number: listBox.Size = new Size(Width' 2 + 2 + listBox.ItemHeight * 5);
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,CustomObjectPicker,The following statement contains a magic number: listBox.Size = new Size(Width' 2 + 2 + listBox.ItemHeight * 5);
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,CustomObjectPicker,The following statement contains a magic number: listBox.Size = new Size(Width' 2 + 2 + listBox.ItemHeight * 5);
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,OnPaintNullItem,The following statement contains a magic number: iconBounds.Width = 16;
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,OnPaintNullItem,The following statement contains a magic number: var d = (iconBounds.Height - 16);
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,OnPaintNullItem,The following statement contains a magic number: iconBounds.Y += d / 2;
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,OnPaintNullItem,The following statement contains a magic number: iconBounds.Height = 16;
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,OnPaintNullItem,The following statement contains a magic number: bounds.X += iconBounds.Width + 3;
Magic Number,gitter.Framework.Controls,CustomObjectPicker<TListBox;TItem;TValue>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomObjectPicker.cs,OnPaintNullItem,The following statement contains a magic number: bounds.Width -= iconBounds.Width + 3;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c1 = Color.FromArgb(223' 234' 247);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c1 = Color.FromArgb(223' 234' 247);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c1 = Color.FromArgb(223' 234' 247);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c2 = Color.FromArgb(255' 255' 255);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c2 = Color.FromArgb(255' 255' 255);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnNormalBackground,The following statement contains a magic number: var c2 = Color.FromArgb(255' 255' 255);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c1 = Color.FromArgb(192' 203' 217);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c1 = Color.FromArgb(192' 203' 217);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c1 = Color.FromArgb(192' 203' 217);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c2 = Color.FromArgb(246' 247' 248);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c2 = Color.FromArgb(246' 247' 248);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c2 = Color.FromArgb(246' 247' 248);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c3 = Color.FromArgb(193' 204' 218);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c3 = Color.FromArgb(193' 204' 218);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c3 = Color.FromArgb(193' 204' 218);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c4 = Color.FromArgb(215' 222' 231);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c4 = Color.FromArgb(215' 222' 231);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c4 = Color.FromArgb(215' 222' 231);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c5 = Color.FromArgb(235' 238' 242);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c5 = Color.FromArgb(235' 238' 242);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: var c5 = Color.FromArgb(235' 238' 242);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: rc.X += 2;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: rc.Width -= 4;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawLine(p' rc.X + 1' rc.Y + 0' rc.Right - 2' rc.Y + 0);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawLine(p' rc.X + 1' rc.Y + 1' rc.Right - 2' rc.Y + 1);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawLine(p' rc.X + 1' rc.Y + 2' rc.Right - 2' rc.Y + 2);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawLine(p' rc.X + 1' rc.Y + 2' rc.Right - 2' rc.Y + 2);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawLine(p' rc.X + 1' rc.Y + 2' rc.Right - 2' rc.Y + 2);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.FillRectangle(ExtenderBorderBrush' rect.Right - CustomListBoxColumn.ExtenderButtonWidth - 0.5f' rect.Y' 1' rect.Height - 1);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender' rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9' 7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender' rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9' 7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender' rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9' 7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnPressedBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender' rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9' 7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c1 = Color.FromArgb(227' 232' 238);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c1 = Color.FromArgb(227' 232' 238);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c1 = Color.FromArgb(227' 232' 238);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c2 = Color.FromArgb(241' 245' 251);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c2 = Color.FromArgb(241' 245' 251);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: var c2 = Color.FromArgb(241' 245' 251);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: rc.X += 2;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: rc.Width -= 4;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: rc.Height -= 3;
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.FillRectangle(ExtenderHoveredBrush'  							rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 1.5f' rect.Y + 1.5f'  							CustomListBoxColumn.ExtenderButtonWidth - 4' rect.Height - 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.FillRectangle(ExtenderHoveredBrush'  							rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 1.5f' rect.Y + 1.5f'  							CustomListBoxColumn.ExtenderButtonWidth - 4' rect.Height - 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.FillRectangle(ExtenderHoveredBrush'  							rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 1.5f' rect.Y + 1.5f'  							CustomListBoxColumn.ExtenderButtonWidth - 4' rect.Height - 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.FillRectangle(ExtenderHoveredBrush'  							rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 1.5f' rect.Y + 1.5f'  							CustomListBoxColumn.ExtenderButtonWidth - 4' rect.Height - 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender'  						rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9'  						7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender'  						rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9'  						7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender'  						rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9'  						7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,RenderColumnHoverBackground,The following statement contains a magic number: graphics.DrawImage(ImgColumnExtender'  						rect.Right - CustomListBoxColumn.ExtenderButtonWidth + 4' rect.Y + 9'  						7' 4);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,OnPaintItemContent,The following statement contains a magic number: destRect = new Rectangle(  											x + offset'  											subrect.Y + (subrect.Height - ListBoxConstants.PlusMinusImageWidth) / 2'  											w2 - ListBoxConstants.SpaceBeforePlusMinus'  											ListBoxConstants.PlusMinusImageWidth);
Magic Number,gitter.Framework.Controls,Win7CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\Win7CustomListBoxRenderer.cs,OnPaintItemContent,The following statement contains a magic number: destRect = new Rectangle(  										x + offset + ListBoxConstants.SpaceBeforeCheckbox'  										rect.Y + (rect.Height - ListBoxConstants.CheckboxImageWidth) / 2'  										w2 - ListBoxConstants.SpaceBeforeCheckbox'  										ListBoxConstants.CheckboxImageWidth);
Magic Number,gitter.Framework.Controls,DragHelper,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\DragHelper.cs,Update,The following statement contains a magic number: IsDragging =  				(Math.Abs(x - _x) * 2 > dragSize.Width) ||  				(Math.Abs(y - _y) * 2 > dragSize.Height);
Magic Number,gitter.Framework.Controls,DragHelper,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\DragHelper.cs,Update,The following statement contains a magic number: IsDragging =  				(Math.Abs(x - _x) * 2 > dragSize.Width) ||  				(Math.Abs(y - _y) * 2 > dragSize.Height);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: const int n = 12;
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: int cx = x + w / 2;
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: int cy = y + h / 2;
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: int r = (w < h ? w : h) / 2;
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: long current = (DateTime.Now.Ticks / 1000000) % n;
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: var a = i * (Math.PI * 2) / n;
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: float x1 = (float)(cx + cos * r / 3.0);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: float y1 = (float)(cy + sin * r / 3.0);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: const int spacing = 10;
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,DefaultOverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\DefaultOverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: const int n = 12;
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: int cx = x + w / 2;
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: int cy = y + h / 2;
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: int r = (w < h ? w : h) / 2;
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: long current = (DateTime.Now.Ticks / 1000000) % n;
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: var a = i * (Math.PI * 2) / n;
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: float x1 = (float)(cx + cos * r / 3.0);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,DrawIndeterminateProgress,The following statement contains a magic number: float y1 = (float)(cy + sin * r / 3.0);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: const int spacing = 10;
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: DrawIndeterminateProgress(graphics' bounds.X + (bounds.Width - tw) / 2 - 14 - 5' bounds.Y + (bounds.Height - 14) / 2' 14' 14);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,MSVS2012OverlayRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\MSVS2012OverlayRenderer.cs,Paint,The following statement contains a magic number: var titleRect = new Rectangle(bounds.X + (bounds.Width - tw) / 2' bounds.Y' bounds.Width - spacing * 2 - 5 - 14' bounds.Height);
Magic Number,gitter.Framework.Controls,CustomHScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomHScrollbar.cs,Arrange,The following statement contains a magic number: var trackBarSize = size.Width - buttonWidth * 2;
Magic Number,gitter.Framework.Controls,CustomHScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomHScrollbar.cs,OnScrollHereClick,The following statement contains a magic number: var thumbPosition = x - _thumbBounds.Width / 2;
Magic Number,gitter.Framework.Controls,CustomVScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomVScrollbar.cs,Arrange,The following statement contains a magic number: var trackBarSize	= size.Height - buttonHeight * 2;
Magic Number,gitter.Framework.Controls,CustomVScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomVScrollbar.cs,OnScrollHereClick,The following statement contains a magic number: var thumbPosition = y - _thumbBounds.Height / 2;
Magic Number,gitter.Framework.Controls,NotificationBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationBase.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,NotificationBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationBase.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,NotificationBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationBase.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(345' 156);
Magic Number,gitter.Framework.Controls,NotificationBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationBase.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(345' 156);
Magic Number,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,Show,The following statement contains a magic number: const int margin = 17;
Magic Number,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,Show,The following statement contains a magic number: User32.ShowWindow(this.Handle' 8);
Magic Number,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,WndProc,The following statement contains a magic number: switch((WM)m.Msg)  			{  				case WM.NCHITTEST:  					m.Result = (IntPtr)1;  					processed = true;  					break;  				case WM.MOUSEACTIVATE:  					m.Result = (IntPtr)4;  					processed = true;  					return;  			}
Magic Number,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderUpArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + bounds.Width / 2' bounds.Y + (bounds.Height - ArrowSize - 1) / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderUpArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + bounds.Width / 2' bounds.Y + (bounds.Height - ArrowSize - 1) / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderDownArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + bounds.Width / 2' bounds.Y + bounds.Height - (bounds.Height - ArrowSize) / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderDownArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + bounds.Width / 2' bounds.Y + bounds.Height - (bounds.Height - ArrowSize) / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderLeftArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + (bounds.Width - ArrowSize) / 2' bounds.Y + bounds.Height / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderLeftArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + (bounds.Width - ArrowSize) / 2' bounds.Y + bounds.Height / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderRightArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - ArrowSize) / 2' bounds.Y + bounds.Height / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderRightArrow,The following statement contains a magic number: var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - ArrowSize) / 2' bounds.Y + bounds.Height / 2);
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderHorizontalThumb,The following statement contains a magic number: var backgroundSize = bounds.Height / 2;
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderHorizontalThumb,The following statement contains a magic number: var backgroundSize1 = backgroundSize / 2;
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderVerticalThumb,The following statement contains a magic number: var backgroundSize = bounds.Width / 2;
Magic Number,gitter.Framework.Controls,MSVS2012ScrollBarRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\MSVS2012ScrollBarRenderer.cs,RenderVerticalThumb,The following statement contains a magic number: var backgroundSize1 = backgroundSize / 2;
Magic Number,gitter.Framework.Controls,NotificationContent,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\NotificationContent.cs,NotificationContent,The following statement contains a magic number: Timeout = TimeSpan.FromSeconds(10.0);
Magic Number,gitter.Framework.Controls,PopupNotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationForm.cs,PopupNotificationForm,The following statement contains a magic number: var header = new PopupNotificationHeader()  			{  				Text = content.Text'  				Bounds = new Rectangle(  					Renderer.FloatBorderSize'  					Renderer.FloatBorderSize'  					ViewConstants.PopupWidth - Renderer.FloatBorderSize * 2'  					ViewManager.Renderer.HeaderHeight)'  				Parent	= this'  			};
Magic Number,gitter.Framework.Controls,PopupNotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationForm.cs,PopupNotificationForm,The following statement contains a magic number: content.Width	= ViewConstants.PopupWidth - Renderer.FloatBorderSize * 2;
Magic Number,gitter.Framework.Controls,PopupNotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationForm.cs,PopupNotificationForm,The following statement contains a magic number: ClientSize		= new Size(ViewConstants.PopupWidth' content.Height + Renderer.HeaderHeight + Renderer.FloatBorderSize * 2);
Magic Number,gitter.Framework.Controls,PopupNotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationForm.cs,Show,The following statement contains a magic number: User32.ShowWindow(this.Handle' 4);
Magic Number,gitter.Framework.Controls,PopupNotificationsStack,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationsStack.cs,PopupNotificationsStack,The following statement contains a magic number: _maximumVisibleNotifications = 5;
Magic Number,gitter.Framework.Controls,PopupNotificationsStack,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationsStack.cs,PopupNotificationsStack,The following statement contains a magic number: _defaultNotificationDuration = TimeSpan.FromSeconds(10.0);
Magic Number,gitter.Framework.Controls,PopupNotificationsStack,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationsStack.cs,GetDefaultOrigin,The following statement contains a magic number: return new Point(w - ViewConstants.PopupWidth - 5' h - 5);
Magic Number,gitter.Framework.Controls,PopupNotificationsStack,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationsStack.cs,GetDefaultOrigin,The following statement contains a magic number: return new Point(w - ViewConstants.PopupWidth - 5' h - 5);
Magic Number,gitter.Framework.Controls,PopupNotificationHeader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationHeader.cs,GetButtonsRect,The following statement contains a magic number: return new Rectangle(  				Width - Buttons.Width - 2'  				0'  				viewButtonSize'  				viewButtonSize);
Magic Number,gitter.Framework.Controls,CustomScrollBar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBar.cs,CustomScrollBar,The following statement contains a magic number: _maximum = 100;
Magic Number,gitter.Framework.Controls,CustomScrollBar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBar.cs,CustomScrollBar,The following statement contains a magic number: _largeChange = 10;
Magic Number,gitter.Framework.Controls,CustomScrollBar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBar.cs,OnMouseDown,The following statement contains a magic number: switch(e.Button)  			{  				case MouseButtons.Left:  					PressedPart = HitTest(e.X' e.Y);  					_mouseDownPoint = e.Location;  					switch(PressedPart)  					{  						case CustomScrollBarPart.DecreaseButton:  						case CustomScrollBarPart.DecreaseTrackBar:  						case CustomScrollBarPart.IncreaseTrackBar:  						case CustomScrollBarPart.IncreaseButton:  							OnTimerTick(_timer' EventArgs.Empty);  							_timer.Interval = 400;  							_timer.Enabled = true;  							break;  						case CustomScrollBarPart.Thumb:  							_trackValue = Value;  							OnScroll(ScrollEventType.ThumbTrack' _trackValue' _trackValue);  							BeginScroll(_mouseDownPoint);  							break;  					}  					break;  			}
Magic Number,gitter.Framework.Controls,CustomScrollBar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBar.cs,OnTimerTick,The following statement contains a magic number: _timer.Interval = 25;
Magic Number,gitter.Framework.Controls,SubItemMeasureEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemMeasureEventArgs.cs,MeasureImage,The following statement contains a magic number: int w = 2 * ListBoxConstants.ContentSpacing + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage;
Magic Number,gitter.Framework.Controls,SubItemMeasureEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemMeasureEventArgs.cs,MeasureIcon,The following statement contains a magic number: int w = 2 * ListBoxConstants.ContentSpacing + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage;
Magic Number,gitter.Framework.Controls,SubItemMeasureEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemMeasureEventArgs.cs,MeasureTextCore,The following statement contains a magic number: return new Size((int)(s.Width + 1 + 2 * ListBoxConstants.ContentSpacing)' s.Height);
Magic Number,gitter.Framework.Controls,SubItemMeasureEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemMeasureEventArgs.cs,MeasureImageAndTextCore,The following statement contains a magic number: return new Size(s.Width + 1 + 2 * ListBoxConstants.ContentSpacing + (iconW + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage)' s.Height);
Magic Number,gitter.Framework.Controls,SubItemMeasureEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemMeasureEventArgs.cs,MeasureIconAndTextCore,The following statement contains a magic number: return new Size(s.Width + 1 + 2 * ListBoxConstants.ContentSpacing + (iconW + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage)' s.Height);
Magic Number,gitter.Framework.Controls,DragImage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\DragImage.cs,ShowDragVisual,The following statement contains a magic number: User32.ShowWindow(this.Handle' 8);
Magic Number,gitter.Framework.Controls,LogListBoxSourceColumn,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogListBoxSourceColumn.cs,LogListBoxSourceColumn,The following statement contains a magic number: Width = 50;
Magic Number,gitter.Framework.Controls,LogListBoxAppender,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogListBoxAppender.cs,LogListBoxAppender,The following statement contains a magic number: _events = new LogEvent[500];
Magic Number,gitter.Framework.Controls,LogListBoxTimestampColumn,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogListBoxTimestampColumn.cs,LogListBoxTimestampColumn,The following statement contains a magic number: Width = 155;
Magic Number,gitter.Framework.Controls,LogListBoxExceptionColumn,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogListBoxExceptionColumn.cs,LogListBoxExceptionColumn,The following statement contains a magic number: Width = 16 + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage;
Magic Number,gitter.Framework.Controls,LogEventListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogEventListItem.cs,OnMeasureSubItem,The following statement contains a magic number: switch((LogListBoxColumnId)measureEventArgs.SubItemId)  			{  				case LogListBoxColumnId.Type:  					return new Size(16' 16);  				case LogListBoxColumnId.Timestamp:  					return measureEventArgs.MeasureText(DataContext.Timestamp.FormatISO8601());  				case LogListBoxColumnId.Source:  					return measureEventArgs.MeasureText(DataContext.Source);  				case LogListBoxColumnId.Message:  					return measureEventArgs.MeasureText(DataContext.Message);  				case LogListBoxColumnId.Exception:  					return new Size(16' 16);  				default:  					return Size.Empty;  			}
Magic Number,gitter.Framework.Controls,LogEventListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogEventListItem.cs,OnMeasureSubItem,The following statement contains a magic number: switch((LogListBoxColumnId)measureEventArgs.SubItemId)  			{  				case LogListBoxColumnId.Type:  					return new Size(16' 16);  				case LogListBoxColumnId.Timestamp:  					return measureEventArgs.MeasureText(DataContext.Timestamp.FormatISO8601());  				case LogListBoxColumnId.Source:  					return measureEventArgs.MeasureText(DataContext.Source);  				case LogListBoxColumnId.Message:  					return measureEventArgs.MeasureText(DataContext.Message);  				case LogListBoxColumnId.Exception:  					return new Size(16' 16);  				default:  					return Size.Empty;  			}
Magic Number,gitter.Framework.Controls,LogEventListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogEventListItem.cs,OnMeasureSubItem,The following statement contains a magic number: switch((LogListBoxColumnId)measureEventArgs.SubItemId)  			{  				case LogListBoxColumnId.Type:  					return new Size(16' 16);  				case LogListBoxColumnId.Timestamp:  					return measureEventArgs.MeasureText(DataContext.Timestamp.FormatISO8601());  				case LogListBoxColumnId.Source:  					return measureEventArgs.MeasureText(DataContext.Source);  				case LogListBoxColumnId.Message:  					return measureEventArgs.MeasureText(DataContext.Message);  				case LogListBoxColumnId.Exception:  					return new Size(16' 16);  				default:  					return Size.Empty;  			}
Magic Number,gitter.Framework.Controls,LogEventListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogEventListItem.cs,OnMeasureSubItem,The following statement contains a magic number: switch((LogListBoxColumnId)measureEventArgs.SubItemId)  			{  				case LogListBoxColumnId.Type:  					return new Size(16' 16);  				case LogListBoxColumnId.Timestamp:  					return measureEventArgs.MeasureText(DataContext.Timestamp.FormatISO8601());  				case LogListBoxColumnId.Source:  					return measureEventArgs.MeasureText(DataContext.Source);  				case LogListBoxColumnId.Message:  					return measureEventArgs.MeasureText(DataContext.Message);  				case LogListBoxColumnId.Exception:  					return new Size(16' 16);  				default:  					return Size.Empty;  			}
Magic Number,gitter.Framework.Controls,LogListBoxTypeColumn,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogListBoxTypeColumn.cs,LogListBoxTypeColumn,The following statement contains a magic number: Width = 16 + ListBoxConstants.SpaceBeforeImage + ListBoxConstants.SpaceAfterImage;
Magic Number,gitter.Framework.Controls,LogView,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogView.cs,LogView,The following statement contains a magic number: Height = 200;
Magic Number,gitter.Framework.Controls,DockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockMarker.cs,Show,The following statement contains a magic number: User32.ShowWindow(this.Handle' 8);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: switch(side)  			{  				case AnchorStyles.Left:  					cx = bounds.X + 20 + ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Top:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + 20 + ViewConstants.Spacing;  					break;  				case AnchorStyles.Right:  					cx = bounds.X + bounds.Width - 20 - ViewConstants.Spacing;  					cy = bounds.Y + bounds.Height / 2;  					break;  				case AnchorStyles.Bottom:  					cx = bounds.X + bounds.Width / 2;  					cy = bounds.Y + bounds.Height - 20 - ViewConstants.Spacing;  					break;  				default:  					throw new ArgumentException(  						"Unknown AnchorStyles value: {0}".UseAsFormat(side)'  						"side");  			}
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: return new Rectangle(cx - 20' cy - 20' 40' 40);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: return new Rectangle(cx - 20' cy - 20' 40' 40);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: return new Rectangle(cx - 20' cy - 20' 40' 40);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetPositionBounds,The following statement contains a magic number: return new Rectangle(cx - 20' cy - 20' 40' 40);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetButton,The following statement contains a magic number: var bounds = new Rectangle(4' 4' 32' 32);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetButton,The following statement contains a magic number: var bounds = new Rectangle(4' 4' 32' 32);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetButton,The following statement contains a magic number: var bounds = new Rectangle(4' 4' 32' 32);
Magic Number,gitter.Framework.Controls,GridDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\GridDockMarker.cs,GetButton,The following statement contains a magic number: var bounds = new Rectangle(4' 4' 32' 32);
Magic Number,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,ViewDockSide,The following statement contains a magic number: _autoShowTimer = new Timer() { Interval = 500 };
Magic Number,gitter.Framework.Controls,ViewDockSide,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockSide.cs,ViewDockSide,The following statement contains a magic number: _autoHideTimer = new Timer() { Interval = 500 };
Magic Number,gitter.Framework.Controls,ViewButtons,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewButtons.cs,HitTest,The following statement contains a magic number: int y1 = (Height - viewButtonSize) / 2;
Magic Number,gitter.Framework.Controls,ViewButtons,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewButtons.cs,OnPaint,The following statement contains a magic number: var y = bounds.Y + (Height - viewButtonSize) / 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,ViewDockGrid,The following statement contains a magic number: bounds.Width -= ViewConstants.Spacing * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,ViewDockGrid,The following statement contains a magic number: bounds.Height -= ViewConstants.Spacing * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,SpawnLeftSide,The following statement contains a magic number: int hspace = size.Width - (Renderer.SideTabHeight + ViewConstants.Spacing * 2);
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,SpawnTopSide,The following statement contains a magic number: int vspace = size.Height - Renderer.SideTabHeight - ViewConstants.Spacing * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,SpawnRightSide,The following statement contains a magic number: int hspace = size.Width - Renderer.SideTabHeight - ViewConstants.Spacing * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,SpawnBottomSide,The following statement contains a magic number: int vspace = size.Height - Renderer.SideTabHeight - ViewConstants.Spacing * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveAllSides,The following statement contains a magic number: RootControl.SetBounds(  				ViewConstants.Spacing' ViewConstants.Spacing'  				Width - ViewConstants.Spacing * 2' Height - ViewConstants.Spacing * 2'  				BoundsSpecified.All);
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveAllSides,The following statement contains a magic number: RootControl.SetBounds(  				ViewConstants.Spacing' ViewConstants.Spacing'  				Width - ViewConstants.Spacing * 2' Height - ViewConstants.Spacing * 2'  				BoundsSpecified.All);
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveLeftSide,The following statement contains a magic number: var hcs = Width - ViewConstants.Spacing * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveTopSide,The following statement contains a magic number: var vcs = Height - Renderer.SideTabHeight * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,RemoveRightSide,The following statement contains a magic number: var hcs = Width - ViewConstants.Spacing * 2;
Magic Number,gitter.Framework.Controls,ViewDockGrid,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewDockGrid\ViewDockGrid.cs,KillBottomSide,The following statement contains a magic number: var vcs = Height - Renderer.SideTabHeight * 2;
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetButtons,The following statement contains a magic number: return new []  					{  						new DockMarkerButton(new Rectangle(40' 4' 32' 32)'	DockResult.DocumentTop)'    						new DockMarkerButton(new Rectangle(4' 40' 32' 32)'	DockResult.DocumentLeft)'  						new DockMarkerButton(new Rectangle(40' 40' 32' 32)'	DockResult.Fill)'  						new DockMarkerButton(new Rectangle(76' 40' 32' 32)'	DockResult.DocumentRight)'    						new DockMarkerButton(new Rectangle(40' 76' 32' 32)'	DockResult.DocumentBottom)'  					};
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetBounds,The following statement contains a magic number: return new Rectangle(  						loc.X + (size.Width - 112) / 2'  						loc.Y + (size.Height - 112) / 2'  						112' 112);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetBounds,The following statement contains a magic number: return new Rectangle(  						loc.X + (size.Width - 112) / 2'  						loc.Y + (size.Height - 112) / 2'  						112' 112);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetBounds,The following statement contains a magic number: return new Rectangle(  						loc.X + (size.Width - 112) / 2'  						loc.Y + (size.Height - 112) / 2'  						112' 112);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetBounds,The following statement contains a magic number: return new Rectangle(  						loc.X + (size.Width - 112) / 2'  						loc.Y + (size.Height - 112) / 2'  						112' 112);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetBounds,The following statement contains a magic number: return new Rectangle(  						loc.X + (size.Width - 112) / 2'  						loc.Y + (size.Height - 112) / 2'  						112' 112);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,GetBounds,The following statement contains a magic number: return new Rectangle(  						loc.X + (size.Width - 112) / 2'  						loc.Y + (size.Height - 112) / 2'  						112' 112);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,OnHostBoundsChanged,The following statement contains a magic number: Location = new Point(  				bounds.X + (bounds.Width - 112) / 2'  				bounds.Y + (bounds.Height - 112) / 2);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,OnHostBoundsChanged,The following statement contains a magic number: Location = new Point(  				bounds.X + (bounds.Width - 112) / 2'  				bounds.Y + (bounds.Height - 112) / 2);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,OnHostBoundsChanged,The following statement contains a magic number: Location = new Point(  				bounds.X + (bounds.Width - 112) / 2'  				bounds.Y + (bounds.Height - 112) / 2);
Magic Number,gitter.Framework.Controls,ViewHostDockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\ViewHostDockMarker.cs,OnHostBoundsChanged,The following statement contains a magic number: Location = new Point(  				bounds.X + (bounds.Width - 112) / 2'  				bounds.Y + (bounds.Height - 112) / 2);
Magic Number,gitter.Framework.Controls,DockPositionMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockPositionMarker.cs,DockPositionMarker,The following statement contains a magic number: BackColor = Color.FromArgb(120' 170' 240);
Magic Number,gitter.Framework.Controls,DockPositionMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockPositionMarker.cs,DockPositionMarker,The following statement contains a magic number: BackColor = Color.FromArgb(120' 170' 240);
Magic Number,gitter.Framework.Controls,DockPositionMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockPositionMarker.cs,DockPositionMarker,The following statement contains a magic number: BackColor = Color.FromArgb(120' 170' 240);
Magic Number,gitter.Framework.Controls,DockPositionMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockPositionMarker.cs,Show,The following statement contains a magic number: User32.ShowWindow(this.Handle' 8);
Magic Number,gitter.Framework.Controls,FloatingViewForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\FloatingViewForm.cs,FloatingViewForm,The following statement contains a magic number: MinimumSize		= new Size(  				ViewConstants.MinimumHostWidth + Renderer.FloatBorderSize * 2'  				ViewConstants.MinimumHostHeight + Renderer.FloatBorderSize * 2);
Magic Number,gitter.Framework.Controls,FloatingViewForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\FloatingViewForm.cs,FloatingViewForm,The following statement contains a magic number: MinimumSize		= new Size(  				ViewConstants.MinimumHostWidth + Renderer.FloatBorderSize * 2'  				ViewConstants.MinimumHostHeight + Renderer.FloatBorderSize * 2);
Magic Number,gitter.Framework.Controls,FloatingViewForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\FloatingViewForm.cs,GetBoundsForControl,The following statement contains a magic number: size.Width += Renderer.FloatBorderSize * 2;
Magic Number,gitter.Framework.Controls,FloatingViewForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\FloatingViewForm.cs,GetBoundsForControl,The following statement contains a magic number: size.Height += Renderer.FloatBorderSize * 2;
Magic Number,gitter.Framework.Controls,ViewHostDockingProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostDockingProcess.cs,ZOrderComparison,The following statement contains a magic number: const int GW_HWNDNEXT = 2;
Magic Number,gitter.Framework.Controls,ViewHostDockingProcess,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostDockingProcess.cs,ZOrderComparison,The following statement contains a magic number: const int GW_HWNDPREV = 3;
Magic Number,gitter.Framework.Controls,ViewHostTab,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTab.cs,OnMouseDown,The following statement contains a magic number: var buttonsBounds = new Rectangle(Length - Buttons.Width - 2' 0' Buttons.Width' ViewManager.Renderer.TabHeight);
Magic Number,gitter.Framework.Controls,ViewHostTab,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTab.cs,OnMouseMove,The following statement contains a magic number: var buttonsBounds = new Rectangle(Length - Buttons.Width - 2' 0' Buttons.Width' ViewManager.Renderer.TabHeight);
Magic Number,gitter.Framework.Controls,ViewHostTab,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTab.cs,OnMouseUp,The following statement contains a magic number: var buttonsBounds = new Rectangle(Length - Buttons.Width - 2' 0' Buttons.Width' ViewManager.Renderer.TabHeight);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,MeasureTabLength,The following statement contains a magic number: length += 16 + ViewConstants.ImageSpacing;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						graphics.DrawImage(image' imageRect);  						bounds.Width -= imageRect.Width + 3;  						bounds.X += imageRect.Width + 3;  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  						}  						bounds.Height -= imageRect.Height + 3;  						bounds.Y += imageRect.Height + 3;  						break;  					default:  						throw new ApplicationException(  							string.Format("Unexpected ViewTabBase.Orientation value: {0}"' tab.Orientation));  				}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						graphics.DrawImage(image' imageRect);  						bounds.Width -= imageRect.Width + 3;  						bounds.X += imageRect.Width + 3;  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  						}  						bounds.Height -= imageRect.Height + 3;  						bounds.Y += imageRect.Height + 3;  						break;  					default:  						throw new ApplicationException(  							string.Format("Unexpected ViewTabBase.Orientation value: {0}"' tab.Orientation));  				}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						graphics.DrawImage(image' imageRect);  						bounds.Width -= imageRect.Width + 3;  						bounds.X += imageRect.Width + 3;  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  						}  						bounds.Height -= imageRect.Height + 3;  						bounds.Y += imageRect.Height + 3;  						break;  					default:  						throw new ApplicationException(  							string.Format("Unexpected ViewTabBase.Orientation value: {0}"' tab.Orientation));  				}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						graphics.DrawImage(image' imageRect);  						bounds.Width -= imageRect.Width + 3;  						bounds.X += imageRect.Width + 3;  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  						}  						bounds.Height -= imageRect.Height + 3;  						bounds.Y += imageRect.Height + 3;  						break;  					default:  						throw new ApplicationException(  							string.Format("Unexpected ViewTabBase.Orientation value: {0}"' tab.Orientation));  				}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						bounds.X += ViewConstants.BeforeTabContent;  						bounds.Width -= ViewConstants.BeforeTabContent + ViewConstants.AfterTabContent - 1;  						GitterApplication.TextRenderer.DrawText(  							graphics' tab.Text' GitterApplication.FontManager.UIFont' textBrush' bounds' stringFormat);  						break;  					case Orientation.Vertical:  						bounds.Y += ViewConstants.BeforeTabContent;  						bounds.Height -= ViewConstants.BeforeTabContent + ViewConstants.AfterTabContent - 1;  						bounds.Height += 10;  						GitterApplication.GdiPlusTextRenderer.DrawText(  							graphics' tab.Text' GitterApplication.FontManager.UIFont' textBrush' bounds' stringFormat);  						break;  					default:  						throw new ApplicationException(  							string.Format("Unexpected ViewTabBase.Orientation value: {0}"' tab.Orientation));  				}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostTabContent,The following statement contains a magic number: var buttonsBounds = new Rectangle(bounds.Right - tab.Buttons.Width - 2' 0' tab.Buttons.Width' bounds.Height);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewButton,The following statement contains a magic number: switch(viewButton.Type)  			{  				case ViewButtonType.TabsMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.TabsScrollMenu:  					{  						int x = bounds.X + (bounds.Width - 8) / 2;  						int y = bounds.Y + (bounds.Height - 8) / 2;  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							graphics.FillRectangle(brush' x' y' 8' 2);  							graphics.FillPolygon(brush' new[]  								{  									new Point(x + 1' y + 4)'  									new Point(x + 7' y + 4)'  									new Point(x + 4' y + 7)'  									new Point(x + 3' y + 7)'  								});  						}  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 4' x + 3' y + 7);  							graphics.DrawLine(pen' x + 4' y + 7' x + 7' y + 4);  						}  					}  					break;  				case ViewButtonType.ScrollTabsLeft:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X + 5' p1.Y - 5);  							var p3 = new Point(p1.X + 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					{  						using(var brush = new SolidBrush(ColorTable.ViewButtonForeground))  						{  							var p1 = new Point(bounds.X + bounds.Width - (bounds.Width - 5) / 2' bounds.Y + bounds.Height / 2);  							var p2 = new Point(p1.X - 5' p1.Y - 5);  							var p3 = new Point(p1.X - 5' p1.Y + 5);  							var triangle = new[] { p1' p2' p3 };  							graphics.FillPolygon(brush' triangle);  						}  					}  					break;  				case ViewButtonType.Normalize:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 3' 6' 6);  							graphics.DrawLine(pen' x + 1' y + 4' x + 5' y + 4);  							graphics.DrawLine(pen' x + 3' y + 0' x + 3' y + 2);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 9' y + 0' x + 9' y + 6);  							graphics.DrawLine(pen' x + 4' y + 0' x + 8' y + 0);  							graphics.DrawLine(pen' x + 4' y + 1' x + 8' y + 1);  							graphics.DrawLine(pen' x + 7' y + 6' x + 8' y + 6);  						}  					}  					break;  				case ViewButtonType.Maximize:  					{  						int x = bounds.X + (bounds.Width - 9) / 2;  						int y = bounds.Y + (bounds.Height - 9) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawRectangle(pen' x + 0' y + 0' 8' 8);  							graphics.DrawLine(pen' x + 1' y + 1' x + 7' y + 1);  							graphics.DrawLine(pen' x + 1' y + 2' x + 7' y + 2);  						}  					}  					break;  				case ViewButtonType.Unpin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 3' y + 0' x + 7' y + 0);  							graphics.DrawLine(pen' x + 3' y + 1' x + 3' y + 5);  							graphics.DrawLine(pen' x + 6' y + 1' x + 6' y + 5);  							graphics.DrawLine(pen' x + 7' y + 1' x + 7' y + 5);  							graphics.DrawLine(pen' x + 2' y + 6' x + 8' y + 6);  							graphics.DrawLine(pen' x + 5' y + 7' x + 5' y + 10);  						}  					}  					break;  				case ViewButtonType.Pin:  					{  						int x = bounds.X + (bounds.Width - 11) / 2;  						int y = bounds.Y + (bounds.Height - 11) / 2;  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 10' y + 3' x + 10' y + 7);  							graphics.DrawLine(pen' x + 9' y + 3' x + 5' y + 3);  							graphics.DrawLine(pen' x + 9' y + 6' x + 5' y + 6);  							graphics.DrawLine(pen' x + 9' y + 7' x + 5' y + 7);  							graphics.DrawLine(pen' x + 4' y + 2' x + 4' y + 8);  							graphics.DrawLine(pen' x + 3' y + 5' x + 0' y + 5);  						}  					}  					break;  				case ViewButtonType.Close:  					{  						int x = bounds.X + (bounds.Width - 10) / 2;  						int y = bounds.Y + (bounds.Height - 10) / 2;  						using(var pen = new Pen(Color.FromArgb(120' ColorTable.ViewButtonForeground)))  						{  							graphics.DrawLine(pen' x + 0' y + 1' x + 7' y + 8);  							graphics.DrawLine(pen' x + 2' y + 1' x + 9' y + 8);  							graphics.DrawLine(pen' x + 7' y + 1' x + 0' y + 8);  							graphics.DrawLine(pen' x + 9' y + 1' x + 2' y + 8);  						}  						using(var pen = new Pen(ColorTable.ViewButtonForeground))  						{  							graphics.DrawLine(pen' x + 1' y + 1' x + 8' y + 8);  							graphics.DrawLine(pen' x + 8' y + 1' x + 1' y + 8);  						}  					}  					break;  				default:  					if(viewButton.Image != null)  					{  						graphics.DrawImage(viewButton.Image' bounds);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: const int BetweenTextAndButtons = 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: const int BeforeContent = 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: client.X += textWidth + 6;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: client.Width -= textWidth + 6;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: const int AccentHeight = 5;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: client.Y = (client.Height - AccentHeight) / 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: graphics.RenderingOrigin = new Point(client.X % 4' client.Y % 4);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: graphics.RenderingOrigin = new Point(client.X % 4' client.Y % 4);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerButtonBackground,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' bounds' 2);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Height = 11;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Width = 11;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.X += 11;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Width = 11;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Y += 9;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Height = 11;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: const int BetweenTextAndButtons = 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: const int BeforeContent = 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: client.X += textWidth + 6;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: client.Width -= textWidth + 6;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: const int AccentHeight = 5;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: client.Y = (client.Height - AccentHeight) / 2;
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: graphics.RenderingOrigin = new Point(client.X % 4' client.Y % 4);
Magic Number,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: graphics.RenderingOrigin = new Point(client.X % 4' client.Y % 4);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,MeasureTabLength,The following statement contains a magic number: length += 16 + ViewConstants.ImageSpacing;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: var linePoints = new Point[6];
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: var polyPoints = new Point[6];
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabBackground,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x + w - corner - 1' y);  					linePoints[2] = new Point(x + w - 1' y + corner);  					linePoints[3] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[4] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[5] = new Point(x' y + h - 1);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x + w - corner - 1' y);  					polyPoints[2] = new Point(x + w - 1' y + corner);  					polyPoints[3] = new Point(x + w - 1' y + h - corner - 1);  					polyPoints[4] = new Point(x + w - corner - 1' y + h - 1);  					polyPoints[5] = new Point(x' y + h - 1);  					break;  				case AnchorStyles.Left:  					linePoints[0] = new Point(x + w - 1' y);  					linePoints[1] = new Point(x + corner' y);  					linePoints[2] = new Point(x' y + corner);  					linePoints[3] = new Point(x' y + h - corner - 1);  					linePoints[4] = new Point(x + corner' y + h - 1);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x + w - 1' y);  					polyPoints[1] = new Point(x + corner' y);  					polyPoints[2] = new Point(x' y + corner);  					polyPoints[3] = new Point(x' y + h - corner - 1);  					polyPoints[4] = new Point(x + corner' y + h - 1);  					polyPoints[5] = new Point(x + w - 1' y + h - 1);  					break;  				case AnchorStyles.Top:  					linePoints[0] = new Point(x' y + h - 1);  					linePoints[1] = new Point(x' y + corner);  					linePoints[2] = new Point(x + corner' y);  					linePoints[3] = new Point(x + w - corner - 1' y);  					linePoints[4] = new Point(x + w - 1' y + corner);  					linePoints[5] = new Point(x + w - 1' y + h - 1);  					polyPoints[0] = new Point(x' y + h);  					polyPoints[1] = new Point(x' y + corner);  					polyPoints[2] = new Point(x + corner' y);  					polyPoints[3] = new Point(x + w - corner' y);  					polyPoints[4] = new Point(x + w' y + corner);  					polyPoints[5] = new Point(x + w' y + h);  					break;  				case AnchorStyles.Bottom:  					linePoints[0] = new Point(x' y);  					linePoints[1] = new Point(x' y + h - corner - 1);  					linePoints[2] = new Point(x + corner' y + h - 1);  					linePoints[3] = new Point(x + w - corner - 1' y + h - 1);  					linePoints[4] = new Point(x + w - 1' y + h - corner - 1);  					linePoints[5] = new Point(x + w - 1' y);  					polyPoints[0] = new Point(x' y);  					polyPoints[1] = new Point(x' y + h - corner - 1);  					polyPoints[2] = new Point(x + corner + 1' y + h);  					polyPoints[3] = new Point(x + w - corner - 1' y + h);  					polyPoints[4] = new Point(x + w' y + h - corner - 1);  					polyPoints[5] = new Point(x + w' y);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Anchor)  			{  				case AnchorStyles.Right:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Left:  					imageRect = new Rectangle(x + (w - 16) / 2' y + 3' 16' 16);  					stringFormat = VerticalStringFormat;  					break;  				case AnchorStyles.Top:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				case AnchorStyles.Bottom:  					imageRect = new Rectangle(x + 3' y + (h - 16) / 2' 16' 16);  					stringFormat = NormalStringFormat;  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						{  							graphics.DrawImage(image' imageRect);  							bounds.Width -= imageRect.Width + 3;  							bounds.X += imageRect.Width + 3;  						}  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  							bounds.Height -= imageRect.Height + 3;  							bounds.Y += imageRect.Height + 3;  						}  						break;  					default:  						throw new ApplicationException();  				}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						{  							graphics.DrawImage(image' imageRect);  							bounds.Width -= imageRect.Width + 3;  							bounds.X += imageRect.Width + 3;  						}  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  							bounds.Height -= imageRect.Height + 3;  							bounds.Y += imageRect.Height + 3;  						}  						break;  					default:  						throw new ApplicationException();  				}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						{  							graphics.DrawImage(image' imageRect);  							bounds.Width -= imageRect.Width + 3;  							bounds.X += imageRect.Width + 3;  						}  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  							bounds.Height -= imageRect.Height + 3;  							bounds.Y += imageRect.Height + 3;  						}  						break;  					default:  						throw new ApplicationException();  				}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  				{  					case Orientation.Horizontal:  						{  							graphics.DrawImage(image' imageRect);  							bounds.Width -= imageRect.Width + 3;  							bounds.X += imageRect.Width + 3;  						}  						break;  					case Orientation.Vertical:  						using(var rotatedImage = (Image)image.Clone())  						{  							rotatedImage.RotateFlip(RotateFlipType.Rotate90FlipNone);  							graphics.DrawImage(rotatedImage' imageRect);  							bounds.Height -= imageRect.Height + 3;  							bounds.Y += imageRect.Height + 3;  						}  						break;  					default:  						throw new ApplicationException();  				}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderTabContent,The following statement contains a magic number: switch(tab.Orientation)  			{  				case Orientation.Horizontal:  					bounds.X += ViewConstants.BeforeTabContent;  					bounds.Width -= ViewConstants.BeforeTabContent + ViewConstants.AfterTabContent - 1;  					GitterApplication.TextRenderer.DrawText(  						graphics' tab.Text' GitterApplication.FontManager.UIFont' textBrush' bounds' stringFormat);  					break;  				case Orientation.Vertical:  					bounds.Y += ViewConstants.BeforeTabContent;  					bounds.Height -= ViewConstants.BeforeTabContent + ViewConstants.AfterTabContent - 1;  					bounds.Height += 10;  					GitterApplication.GdiPlusTextRenderer.DrawText(  						graphics' tab.Text' GitterApplication.FontManager.UIFont' textBrush' bounds' stringFormat);  					break;  				default:  					throw new ApplicationException();  			}
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostTabContent,The following statement contains a magic number: var buttonsBounds = new Rectangle(bounds.Right - tab.Buttons.Width - 2' 0' tab.Buttons.Width' bounds.Height);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostTabsBackground,The following statement contains a magic number: var rc = new RectangleF(  						-0.5f' -0.5f + Constants.TabHeight'  						tabs.Width + 1' Constants.TabFooterHeight + 1);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostTabsBackground,The following statement contains a magic number: var rc = new RectangleF(  						-0.5f' -0.5f + Constants.TabHeight'  						tabs.Width + 1' Constants.TabFooterHeight + 1);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostTabsBackground,The following statement contains a magic number: var ltCorner = ((tabs.LeftButtons == null || tabs.LeftButtons.Width == 0) && tabs[tabs.FirstTabIndex].IsActive) ? 0 : 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostTabsBackground,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' rc' ltCorner' 2' 0' 0);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostFooter,The following statement contains a magic number: rc.X -= 0.5f;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostFooter,The following statement contains a magic number: rc.Y -= 0.5f;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostFooter,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' rc' 0' 0' 2' 2);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostFooter,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' rc' 0' 0' 2' 2);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: const int BetweenTextAndButtons = 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: const int BeforeContent = 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: rect.X -= .5f;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderViewHostHeader,The following statement contains a magic number: rect.Y -= .5f;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerButtonBackground,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' pen' bounds' 2);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 11.5f' rect.Y + 25.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 21.5f)'  					new PointF(rect.X + 19.5f' rect.Y + 25.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerTopButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentTopButton,The following statement contains a magic number: rc.Height = 11;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 25.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 25.5f' rect.Y + 19.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 15.5f)'  					new PointF(rect.X + 21.5f' rect.Y + 14.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerLeftButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentLeftButton,The following statement contains a magic number: rc.Width = 11;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerFillButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 16' rect.Y + 4' 12' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 5.5f' rect.Y + 20.5f)'  					new PointF(rect.X + 5.5f' rect.Y + 11.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 14.5f)'  					new PointF(rect.X + 9.5f' rect.Y + 16.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerRightButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.X += 11;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentRightButton,The following statement contains a magic number: rc.Width = 11;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 16' 24' 12);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: var arrow = new PointF[]  				{  					new PointF(rect.X + 10.5f' rect.Y + 5.5f)'  					new PointF(rect.X + 15.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 16.5f' rect.Y + 9.5f)'  					new PointF(rect.X + 20.5f' rect.Y + 5.5f)'  				};
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerBottomButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: var rc = new Rectangle(rect.X + 4' rect.Y + 4' 24' 24);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Y += 3;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Width -= 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Height -= 4;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Y += 9;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerDocumentBottomButton,The following statement contains a magic number: rc.Height = 11;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: const int BetweenTextAndButtons = 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: const int BeforeContent = 2;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: rect.X -= .5f;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: rect.Y -= .5f;
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' rect' 2' 2' 0' 0);
Magic Number,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,RenderPopupNotificationHeader,The following statement contains a magic number: graphics.FillRoundedRectangle(brush' rect' 2' 2' 0' 0);
Magic Number,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,OptimalSizes,The following statement contains a magic number: s1 = available / 2;
Magic Number,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,OptimalSizes,The following statement contains a magic number: s1 >= available * 0.9 && s2 >= available * 0.9
Magic Number,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,OptimalSizes,The following statement contains a magic number: s1 >= available * 0.9 && s2 >= available * 0.9
Magic Number,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,ViewSplit,The following statement contains a magic number: switch(orientation)  			{  				case Orientation.Horizontal:  					if(prioroty == 0)  					{  						anchor1 = ViewConstants.AnchorDockLeft;  						anchor2 = ViewConstants.AnchorDockLeft;  					}  					else  					{  						if(prioroty == 1)  						{  							anchor1 = ViewConstants.AnchorDockLeft;  							anchor2 = ViewConstants.AnchorAll;  						}  						else  						{  							anchor1 = ViewConstants.AnchorAll;  							anchor2 = ViewConstants.AnchorDockRight;  						}  					}  					int w1 = item1.Width;  					int w2 = item2.Width;  					OptimalSizes(bounds.Width' ViewConstants.MinimumHostWidth' ref w1' ref w2);  					bounds1 = new Rectangle(0' 0' w1' bounds.Height);  					bounds2 = new Rectangle(w1 + ViewConstants.Spacing' 0' w2' bounds.Height);  					_positions = new ViewSplitPositions(this' bounds.Width'  						(double)(w1 + ViewConstants.Spacing / 2) / (double)bounds.Width);  					break;  				case Orientation.Vertical:  					if(prioroty == 0)  					{  						anchor1 = ViewConstants.AnchorDockTop;  						anchor2 = ViewConstants.AnchorDockTop;  					}  					else  					{  						if(prioroty == 1)  						{  							anchor1 = ViewConstants.AnchorDockTop;  							anchor2 = ViewConstants.AnchorAll;  						}  						else  						{  							anchor1 = ViewConstants.AnchorAll;  							anchor2 = ViewConstants.AnchorDockBottom;  						}  					}  					int h1 = item1.Height;  					int h2 = item2.Height;  					OptimalSizes(bounds.Height' ViewConstants.MinimumHostHeight' ref h1' ref h2);  					bounds1 = new Rectangle(0' 0' bounds.Width' h1);  					bounds2 = new Rectangle(0' h1 + ViewConstants.Spacing' bounds.Width' h2);  					_positions = new ViewSplitPositions(this' bounds.Height'  						(double)(h1 + ViewConstants.Spacing / 2) / (double)bounds.Height);  					break;  				default:  					throw new ArgumentException(  						string.Format("Unknown Orientation value: {0}"' orientation)'  						"orientation");  			}
Magic Number,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,ViewSplit,The following statement contains a magic number: switch(orientation)  			{  				case Orientation.Horizontal:  					if(prioroty == 0)  					{  						anchor1 = ViewConstants.AnchorDockLeft;  						anchor2 = ViewConstants.AnchorDockLeft;  					}  					else  					{  						if(prioroty == 1)  						{  							anchor1 = ViewConstants.AnchorDockLeft;  							anchor2 = ViewConstants.AnchorAll;  						}  						else  						{  							anchor1 = ViewConstants.AnchorAll;  							anchor2 = ViewConstants.AnchorDockRight;  						}  					}  					int w1 = item1.Width;  					int w2 = item2.Width;  					OptimalSizes(bounds.Width' ViewConstants.MinimumHostWidth' ref w1' ref w2);  					bounds1 = new Rectangle(0' 0' w1' bounds.Height);  					bounds2 = new Rectangle(w1 + ViewConstants.Spacing' 0' w2' bounds.Height);  					_positions = new ViewSplitPositions(this' bounds.Width'  						(double)(w1 + ViewConstants.Spacing / 2) / (double)bounds.Width);  					break;  				case Orientation.Vertical:  					if(prioroty == 0)  					{  						anchor1 = ViewConstants.AnchorDockTop;  						anchor2 = ViewConstants.AnchorDockTop;  					}  					else  					{  						if(prioroty == 1)  						{  							anchor1 = ViewConstants.AnchorDockTop;  							anchor2 = ViewConstants.AnchorAll;  						}  						else  						{  							anchor1 = ViewConstants.AnchorAll;  							anchor2 = ViewConstants.AnchorDockBottom;  						}  					}  					int h1 = item1.Height;  					int h2 = item2.Height;  					OptimalSizes(bounds.Height' ViewConstants.MinimumHostHeight' ref h1' ref h2);  					bounds1 = new Rectangle(0' 0' bounds.Width' h1);  					bounds2 = new Rectangle(0' h1 + ViewConstants.Spacing' bounds.Width' h2);  					_positions = new ViewSplitPositions(this' bounds.Height'  						(double)(h1 + ViewConstants.Spacing / 2) / (double)bounds.Height);  					break;  				default:  					throw new ArgumentException(  						string.Format("Unknown Orientation value: {0}"' orientation)'  						"orientation");  			}
Magic Number,gitter.Framework.Controls,ViewSplit,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplit.cs,RemoveAt,The following statement contains a magic number: _items.Count == 2
Magic Number,gitter.Framework.Controls,SplitterMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\SplitterMarker.cs,Show,The following statement contains a magic number: User32.ShowWindow(this.Handle' 8);
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,FindSplitter,The following statement contains a magic number: var splitter = _positions[i] * size + 0.5f;
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,FindSplitter,The following statement contains a magic number: var min = splitter - ViewConstants.Spacing / 2.0;
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,StartMoving,The following statement contains a magic number: switch(_viewSplit.Orientation)  				{  					case Orientation.Horizontal:  						{  							var width = _viewSplit.Width;  							var splitterPosition = (int)(_movingPosition * width) - ViewConstants.Spacing / 2;  							splitterBounds = new Rectangle(  								toolSplitPosition.X + splitterPosition'  								toolSplitPosition.Y'  								ViewConstants.Spacing'  								_viewSplit.Height);  							_movingOffset = position.X - splitterPosition;  							GetResizeBounds(MovingSplitterIndex' out var min' out var max);  							_movingMin = (int)(min * width) + ViewConstants.MinimumHostWidth;  							_movingMax = (int)(max * width) - ViewConstants.Spacing - ViewConstants.MinimumHostWidth;  							if(_movingMin >= _movingMax)  							{  								return false;  							}  						}  						break;  					case Orientation.Vertical:  						{  							var height = _viewSplit.Height;  							var splitterPosition = (int)(_movingPosition * _viewSplit.Height) - ViewConstants.Spacing / 2;  							splitterBounds = new Rectangle(  								toolSplitPosition.X'  								toolSplitPosition.Y + splitterPosition'  								_viewSplit.Width'  								ViewConstants.Spacing);  							_movingOffset = position.Y - splitterPosition;  							GetResizeBounds(MovingSplitterIndex' out var min' out var max);  							_movingMin = (int)(min * height) + ViewConstants.MinimumHostHeight;  							_movingMax = (int)(max * height) - ViewConstants.Spacing - ViewConstants.MinimumHostHeight;  							if(_movingMin >= _movingMax)  							{  								return false;  							}  						}  						break;  					default:  						throw new ApplicationException(  							"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  				}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,StartMoving,The following statement contains a magic number: switch(_viewSplit.Orientation)  				{  					case Orientation.Horizontal:  						{  							var width = _viewSplit.Width;  							var splitterPosition = (int)(_movingPosition * width) - ViewConstants.Spacing / 2;  							splitterBounds = new Rectangle(  								toolSplitPosition.X + splitterPosition'  								toolSplitPosition.Y'  								ViewConstants.Spacing'  								_viewSplit.Height);  							_movingOffset = position.X - splitterPosition;  							GetResizeBounds(MovingSplitterIndex' out var min' out var max);  							_movingMin = (int)(min * width) + ViewConstants.MinimumHostWidth;  							_movingMax = (int)(max * width) - ViewConstants.Spacing - ViewConstants.MinimumHostWidth;  							if(_movingMin >= _movingMax)  							{  								return false;  							}  						}  						break;  					case Orientation.Vertical:  						{  							var height = _viewSplit.Height;  							var splitterPosition = (int)(_movingPosition * _viewSplit.Height) - ViewConstants.Spacing / 2;  							splitterBounds = new Rectangle(  								toolSplitPosition.X'  								toolSplitPosition.Y + splitterPosition'  								_viewSplit.Width'  								ViewConstants.Spacing);  							_movingOffset = position.Y - splitterPosition;  							GetResizeBounds(MovingSplitterIndex' out var min' out var max);  							_movingMin = (int)(min * height) + ViewConstants.MinimumHostHeight;  							_movingMax = (int)(max * height) - ViewConstants.Spacing - ViewConstants.MinimumHostHeight;  							if(_movingMin >= _movingMax)  							{  								return false;  							}  						}  						break;  					default:  						throw new ApplicationException(  							"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  				}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,CommitMoving,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					position.X -= _movingOffset;  					if(position.X < _movingMin)  					{  						position.X = _movingMin;  					}  					else if(position.X > _movingMax)  					{  						position.X = _movingMax;  					}  					pos = (double)(position.X + ViewConstants.Spacing / 2) / (double)_viewSplit.Width;  					break;  				case Orientation.Vertical:  					position.Y -= _movingOffset;  					if(position.Y < _movingMin)  					{  						position.Y = _movingMin;  					}  					else if(position.Y > _movingMax)  					{  						position.Y = _movingMax;  					}  					pos = (double)(position.Y + ViewConstants.Spacing / 2) / (double)_viewSplit.Height;  					break;  				default:  					throw new ApplicationException(  						"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,CommitMoving,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					position.X -= _movingOffset;  					if(position.X < _movingMin)  					{  						position.X = _movingMin;  					}  					else if(position.X > _movingMax)  					{  						position.X = _movingMax;  					}  					pos = (double)(position.X + ViewConstants.Spacing / 2) / (double)_viewSplit.Width;  					break;  				case Orientation.Vertical:  					position.Y -= _movingOffset;  					if(position.Y < _movingMin)  					{  						position.Y = _movingMin;  					}  					else if(position.Y > _movingMax)  					{  						position.Y = _movingMax;  					}  					pos = (double)(position.Y + ViewConstants.Spacing / 2) / (double)_viewSplit.Height;  					break;  				default:  					throw new ApplicationException(  						"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Apply,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * width - ViewConstants.Spacing / 2.0);  						if(i >= splitterIndex)  						{  							_viewSplit[i].Bounds = new Rectangle(offset' 0' pos - offset' height);  							if(i > splitterIndex) return;  						}  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(offset' 0' width - offset' height);  					break;  				case Orientation.Vertical:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * height - ViewConstants.Spacing / 2.0);  						if(i >= splitterIndex)  						{  							_viewSplit[i].Bounds = new Rectangle(0' offset' width' pos - offset);  							if(i > splitterIndex) return;  						}  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(0' offset' width' height - offset);  					break;  				default:  					throw new ApplicationException("Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Apply,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * width - ViewConstants.Spacing / 2.0);  						if(i >= splitterIndex)  						{  							_viewSplit[i].Bounds = new Rectangle(offset' 0' pos - offset' height);  							if(i > splitterIndex) return;  						}  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(offset' 0' width - offset' height);  					break;  				case Orientation.Vertical:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * height - ViewConstants.Spacing / 2.0);  						if(i >= splitterIndex)  						{  							_viewSplit[i].Bounds = new Rectangle(0' offset' width' pos - offset);  							if(i > splitterIndex) return;  						}  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(0' offset' width' height - offset);  					break;  				default:  					throw new ApplicationException("Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Apply,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * width - ViewConstants.Spacing / 2.0);  						_viewSplit[i].Bounds = new Rectangle(offset' 0' pos - offset' height);  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(offset' 0' width - offset' height);  					break;  				case Orientation.Vertical:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * height - ViewConstants.Spacing / 2.0);  						_viewSplit[i].Bounds = new Rectangle(0' offset' width' pos - offset);  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(0' offset' width' height - offset);  					break;  				default:  					throw new ApplicationException("Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Apply,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * width - ViewConstants.Spacing / 2.0);  						_viewSplit[i].Bounds = new Rectangle(offset' 0' pos - offset' height);  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(offset' 0' width - offset' height);  					break;  				case Orientation.Vertical:  					for(int i = 0; i < _positions.Count; ++i)  					{  						var pos = (int)(_positions[i] * height - ViewConstants.Spacing / 2.0);  						_viewSplit[i].Bounds = new Rectangle(0' offset' width' pos - offset);  						offset = pos + ViewConstants.Spacing;  					}  					_viewSplit[lastItem].Bounds = new Rectangle(0' offset' width' height - offset);  					break;  				default:  					throw new ApplicationException("Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Actualize,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					{  						var size = _viewSplit.Width;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Width + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				case Orientation.Vertical:  					{  						var size = _viewSplit.Height;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Height + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				default:  					throw new ApplicationException(  						"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Actualize,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					{  						var size = _viewSplit.Width;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Width + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				case Orientation.Vertical:  					{  						var size = _viewSplit.Height;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Height + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				default:  					throw new ApplicationException(  						"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Actualize,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					{  						var size = _viewSplit.Width;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Width + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				case Orientation.Vertical:  					{  						var size = _viewSplit.Height;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Height + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				default:  					throw new ApplicationException(  						"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSplitPositions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSplit\ViewSplitPositions.cs,Actualize,The following statement contains a magic number: switch(_viewSplit.Orientation)  			{  				case Orientation.Horizontal:  					{  						var size = _viewSplit.Width;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Width + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				case Orientation.Vertical:  					{  						var size = _viewSplit.Height;  						var offset = 0;  						for(int i = 0; i < _positions.Count; ++i)  						{  							offset += _viewSplit[i].Height + ViewConstants.Spacing / 2;  							_positions[i] = (double)offset / size;  							offset += ViewConstants.Spacing - ViewConstants.Spacing / 2;  						}  					}  					break;  				default:  					throw new ApplicationException(  						"Unexpected ToolSplit.Orientation value: " + _viewSplit.Orientation);  			}
Magic Number,gitter.Framework.Controls,ViewSwitcher,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSwitcher.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(733' 386);
Magic Number,gitter.Framework.Controls,ViewSwitcher,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewSwitcher.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(733' 386);
Magic Number,gitter.Framework.Controls,WebBrowserView,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserView.cs,InitializeComponent,The following statement contains a magic number: this._webBrowser.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,gitter.Framework.Controls,WebBrowserView,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserView.cs,InitializeComponent,The following statement contains a magic number: this._webBrowser.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,gitter.Framework.Controls,WebBrowserView,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserView.cs,InitializeComponent,The following statement contains a magic number: this._webBrowser.Size = new System.Drawing.Size(555' 362);
Magic Number,gitter.Framework.Controls,WebBrowserView,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserView.cs,InitializeComponent,The following statement contains a magic number: this._webBrowser.Size = new System.Drawing.Size(555' 362);
Magic Number,gitter.Framework.Controls,WebBrowserView,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserView.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,WebBrowserView,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserView.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,WebBrowserViewToolbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserViewToolbar.cs,WebBrowserViewToolbar,The following statement contains a magic number: Items.Add(_addressBox = new ToolStripTextBox("AddressBox")  				{  					AutoSize = false'  					Width = 250'  				});
Magic Number,gitter.Framework.Controls,WebBrowserViewToolbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\WebBrowserView\WebBrowserViewToolbar.cs,OnResize,The following statement contains a magic number: _addressBox.Width = Width - 120;
Magic Number,gitter.Framework.Controls,ViewHostHeader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostHeader.cs,GetButtonsRect,The following statement contains a magic number: return new Rectangle(rc.Width - w - 2' 0' w' rc.Height);
Magic Number,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,OnHeaderMouseMove,The following statement contains a magic number: Math.Abs(e.X - _mdX) > 6 || Math.Abs(e.Y - _mdY) > 6
Magic Number,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,OnHeaderMouseMove,The following statement contains a magic number: Math.Abs(e.X - _mdX) > 6 || Math.Abs(e.Y - _mdY) > 6
Magic Number,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,StartMoving,The following statement contains a magic number: int d = Renderer.FloatBorderSize + Renderer.HeaderHeight / 2;
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnAreaHoverChanged,The following statement contains a magic number: switch(e.Index)  			{  				case 0:  					if(!e.IsTracked)  					{  						LeftButtons.OnMouseLeave();  					}  					break;  				case 1:  					if(!e.IsTracked)  					{  						_tabHover.Drop();  					}  					break;  				case 2:  					if(!e.IsTracked)  					{  						RightButtons.OnMouseLeave();  					}  					break;  			}
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,ResetButtons,The following statement contains a magic number: space -= LeftButtons.Width + viewButtonSize +  					2 * ViewConstants.TabHeaderButtonSpacing;
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,HitTestArea,The following statement contains a magic number: return 2;
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,HitTestTab,The following statement contains a magic number: maxTabWidth != int.MaxValue && space < 3
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnViewButtonClick,The following statement contains a magic number: switch(e.Button)  			{  				case ViewButtonType.ScrollTabsLeft:  					if(FirstTabIndex != 0)  					{  						--FirstTabIndex;  						ResetButtons();  						Invalidate();  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					if(FirstTabIndex < _tabs.Count - 1)  					{  						++FirstTabIndex;  						ResetButtons();  						Invalidate();  					}  					break;  				case ViewButtonType.TabsMenu:  				case ViewButtonType.TabsScrollMenu:  					if(_tabs.Count != 0)  					{  						var menu = new ContextMenuStrip();  						foreach(var tab in _tabs)  						{  							menu.Items.Add(  								new ToolStripMenuItem(tab.Text' tab.Image'  									(item' args) =>  									{  										var view = (ViewBase)((ToolStripMenuItem)item).Tag;  										ViewHost.Activate(view);  									})  								{  									Tag = tab.View'  								});  						}  						Utility.MarkDropDownForAutoDispose(menu);  						var viewButtonSize = Renderer.ViewButtonSize;  						menu.Show(this'  							Width - viewButtonSize - 1'  							viewButtonSize + 4);  					}  					break;  			}
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseDown,The following statement contains a magic number: switch(_areaMouseDown)  			{  				case 0:  					LeftButtons.OnMouseDown(e.X' e.Y' e.Button);  					break;  				case 1:  					int tabId = HitTestTab(_mdX' _mdY' out bounds);  					if(tabId != -1)  					{  						_floatId = tabId;  						int x = e.X - bounds.X;  						int y = e.Y - bounds.Y;  						var tab = _tabs[tabId];  						_tabs[tabId].OnMouseDown(x' y' e.Button);  						if(_tabs.Count <= tabId || _tabs[tabId] != tab)  						{  							_floatId = -1;  						}  						else  						{  							_readyToFloat = e.Button == MouseButtons.Left &&  								_tabs[tabId].Buttons.PressedButton == null;  						}  					}  					else  					{  						ViewHost.Focus();  					}  					break;  				case 2:  					RightButtons.OnMouseDown(e.X - (Width - RightButtons.Width)' e.Y' e.Button);  					break;  				default:  					ViewHost.Focus();  					break;  			}
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseMove,The following statement contains a magic number: switch(areaId)  			{  				case 0:  					LeftButtons.OnMouseMove(e.X' e.Y' e.Button);  					break;  				case 1:  					if(tabId != -1)  					{  						_tabHover.Track(tabId' _tabs[tabId]);  						int x = e.X;  						int y = e.Y;  						switch(Side)  						{  							case AnchorStyles.Top:  							case AnchorStyles.Bottom:  								x -= offset;  								break;  							case AnchorStyles.Left:  							case AnchorStyles.Right:  								y -= offset;  								break;  						}  						_tabs[tabId].OnMouseMove(x' y' e.Button);  					}  					break;  				case 2:  					RightButtons.OnMouseMove(e.X - (Width - RightButtons.Width)' e.Y' e.Button);  					break;  			}
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseUp,The following statement contains a magic number: switch(_areaMouseDown)  			{  				case 0:  					LeftButtons.OnMouseUp(e.X' e.Y' e.Button);  					break;  				case 1:  					if(_floatId != -1)  					{  						var offset = GetTabOffset(_floatId);  						int x = e.X;  						int y = e.Y;  						switch(Side)  						{  							case AnchorStyles.Top:  							case AnchorStyles.Bottom:  								x -= offset;  								break;  							case AnchorStyles.Left:  							case AnchorStyles.Right:  								y -= offset;  								break;  						}  						_tabs[_floatId].OnMouseUp(x' y' e.Button);  					}  					_readyToFloat = false;  					_floatId = -1;  					break;  				case 2:  					RightButtons.OnMouseUp(e.X - (Width - RightButtons.Width)' e.Y' e.Button);  					break;  			}
Magic Number,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnPaint,The following statement contains a magic number: maxTabWidth != int.MaxValue && space < 3
Magic Number,gitter.Framework.Controls,ExtenderBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ExtenderBase.cs,ExtenderBase,The following statement contains a magic number: AutoScaleDimensions	= new SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,ExtenderBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ExtenderBase.cs,ExtenderBase,The following statement contains a magic number: AutoScaleDimensions	= new SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,ExtenderBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ExtenderBase.cs,ExtenderBase,The following statement contains a magic number: AutoScaleDimensions	= new SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,ExtenderBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ExtenderBase.cs,ExtenderBase,The following statement contains a magic number: AutoScaleDimensions	= new SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,ItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\ItemPaintEventArgs.cs,PrepareContentRectangle,The following statement contains a magic number: rect.Width -= ListBoxConstants.ContentSpacing * 2;
Magic Number,gitter.Framework.Controls,ItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\ItemPaintEventArgs.cs,PrepareTextRectangle,The following statement contains a magic number: var d = (int)((rect.Height - h) / 2.0f);
Magic Number,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PrepareTextRectangle,The following statement contains a magic number: var d = (int)((rect.Height - h) / 2.0f);
Magic Number,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PrepareTextRectangle,The following statement contains a magic number: var d = (int)((rect.Height - h1) / 2.0f + h1 - h);
Magic Number,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImage,The following statement contains a magic number: graphics.DrawImage(image'  					new Rectangle(rect.X + ListBoxConstants.SpaceBeforeImage' rect.Y + (rect.Height - h) / 2' w' h)'  					new Rectangle(0' 0' w' h)' GraphicsUnit.Pixel);
Magic Number,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImage,The following statement contains a magic number: var dest = new Rectangle(rect.X + ListBoxConstants.SpaceBeforeImage' rect.Y + (rect.Height - h) / 2' w' h);
Magic Number,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageAndTextCore,The following statement contains a magic number: graphics.DrawImage(image'  					new Rectangle(rect.X + ListBoxConstants.SpaceBeforeImage' rect.Y + (rect.Height - h) / 2' w' h)'  					new Rectangle(0' 0' w' h)' GraphicsUnit.Pixel);
Magic Number,gitter.Framework.Controls,SubItemPaintEventArgs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\EventArgs\SubItemPaintEventArgs.cs,PaintImageOverlayAndTextCore,The following statement contains a magic number: var destRect = new Rectangle(rect.X + ListBoxConstants.SpaceBeforeImage' rect.Y + (rect.Height - w) / 2' w' h);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblVisibleColumns.Size = new System.Drawing.Size(115' 15);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblVisibleColumns.Size = new System.Drawing.Size(115' 15);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lblVisibleColumns.TabIndex = 19;
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstColumns.Location = new System.Drawing.Point(3' 16);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstColumns.Location = new System.Drawing.Point(3' 16);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstColumns.Size = new System.Drawing.Size(213' 228);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstColumns.Size = new System.Drawing.Size(213' 228);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstColumns.TabIndex = 18;
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnHide.Location = new System.Drawing.Point(222' 103);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnHide.Location = new System.Drawing.Point(222' 103);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnHide.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnHide.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnHide.TabIndex = 23;
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnUp.Location = new System.Drawing.Point(222' 16);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnUp.Location = new System.Drawing.Point(222' 16);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnUp.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnUp.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnUp.TabIndex = 20;
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnShow.Location = new System.Drawing.Point(222' 74);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnShow.Location = new System.Drawing.Point(222' 74);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnShow.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnShow.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnShow.TabIndex = 22;
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnDown.Location = new System.Drawing.Point(222' 45);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnDown.Location = new System.Drawing.Point(222' 45);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnDown.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnDown.Size = new System.Drawing.Size(75' 23);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this._btnDown.TabIndex = 21;
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(300' 247);
Magic Number,gitter.Framework.Controls,ColumnsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(300' 247);
Magic Number,gitter.Framework.Controls,SolidBackgroundStyle,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\BackgroundStyle.cs,Draw,The following statement contains a magic number: g.FillRectangle(b' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,gitter.Framework.Controls,SolidBackgroundStyle,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\BackgroundStyle.cs,Draw,The following statement contains a magic number: g.FillRectangle(b' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,gitter.Framework.Controls,SolidBackgroundStyle,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\BackgroundStyle.cs,Draw,The following statement contains a magic number: g.DrawRectangle(InnerBorderPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);
Magic Number,gitter.Framework.Controls,SolidBackgroundStyle,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\BackgroundStyle.cs,Draw,The following statement contains a magic number: g.DrawRectangle(InnerBorderPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);
Magic Number,gitter.Framework.Controls,SolidBackgroundStyle,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\BackgroundStyle.cs,Draw,The following statement contains a magic number: g.DrawRoundedRectangle(OuterBorderPen' rect' 2);
Magic Number,gitter.Framework.Controls,SimpleBackgroundStyle,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\BackgroundStyle.cs,Draw,The following statement contains a magic number: g.DrawRoundedRectangle(OuterBorderPen' rect' 2);
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: var k = (graphics.DpiY / 96f);
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: var loc = new Point(5' 15);
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: var loc = new Point(5' 15);
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: var r = new Rectangle(25' 8' Width - 30' (int)(21 * k));
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: var r = new Rectangle(25' 8' Width - 30' (int)(21 * k));
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: var r = new Rectangle(25' 8' Width - 30' (int)(21 * k));
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: var r = new Rectangle(25' 8' Width - 30' (int)(21 * k));
Magic Number,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPaint,The following statement contains a magic number: r = new Rectangle(r.X' r.Y + r.Height' r.Width' Height - 8 - r.Bottom);
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,CustomListBox,The following statement contains a magic number: _tooltip = new ToolTip()  			{  				InitialDelay = 350'  			};
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetInsertIndexFormPoint,The following statement contains a magic number: y += ItemHeight / 2;
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnPreviewKeyDown,The following statement contains a magic number: switch(e.KeyCode)  		    {  				case Keys.Enter:  					if(_itemFocus.IsTracked)  					{  						var item = _itemFocus.Item;  						item.Activate();  					}  					break;  				case Keys.Escape:  					if(_columnResizeProcess != null)  					{  						_columnResizeProcess.Cancel();  						_columnResizeProcess = null;  					}  					break;  				case Keys.Right:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index < 0 || _itemFocus.Index >= _itemPlainList.Count)  					{  						FocusAndSelectItem(0);  					}  					else  					{  						var item = _itemPlainList[_itemFocus.Index];  						if(item.Items.Count == 0) return;  						if(item.IsExpanded)  						{  							FocusAndSelectItem(_itemFocus.Index + 1);  						}  						else  						{  							item.IsExpanded = true;  						}  					}  					break;  				case Keys.Left:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index < 0 || _itemFocus.Index >= _itemPlainList.Count)  					{  						FocusAndSelectItem(_itemPlainList.Count - 1);  					}  					else  					{  						var item = _itemPlainList[_itemFocus.Index];  						if(item.IsExpanded)  						{  							if(_showRootTreeLines || item.Level != 0)  							{  								item.IsExpanded = false;  							}  						}  						else  						{  							if(item.Parent == null) return;  							FocusAndSelectItem(_itemPlainList.IndexOf(item.Parent));  						}  					}  					break;  				case Keys.Home:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index != 0)  					{  						FocusAndSelectItem(0);  					}  					else  					{  						EnsureVisible(_itemFocus.Index);  					}  					break;  				case Keys.End:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index != _itemPlainList.Count - 1)  					{  						FocusAndSelectItem(_itemPlainList.Count - 1);  					}  					else  					{  						EnsureVisible(_itemFocus.Index);  					}  					break;  				case Keys.PageUp:  					if(_itemPlainList.Count == 0) return;  					{  						var index = _itemFocus.Index - GetItemsOnPage();  						if(index < 0) index = 0;  						if(_itemFocus.Index != index)  						{  							FocusAndSelectItem(index);  						}  						else  						{  							EnsureVisible(_itemFocus.Index);  						}  					}  					break;  				case Keys.PageDown:  					if(_itemPlainList.Count == 0) return;  					{  						var index = _itemFocus.Index + GetItemsOnPage();  						if(index >= _itemPlainList.Count) index = _itemPlainList.Count - 1;  						if(_itemFocus.Index != index)  						{  							FocusAndSelectItem(index);  						}  						else  						{  							EnsureVisible(_itemFocus.Index);  						}  					}  					break;  				case Keys.Up:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index > 0)  		            {  						int index = _itemFocus.Index - 1;  						if(Control.ModifierKeys == Keys.Control)  						{  							FocusItem(index);  						}  						else  						{  							FocusAndSelectItem(index);  						}  					}  		            break;  		        case Keys.Down:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index < _itemPlainList.Count - 1)  					{  						int index = _itemFocus.Index + 1;  						if(Control.ModifierKeys == Keys.Control)  						{  							FocusItem(index);  						}  						else  						{  							FocusAndSelectItem(index);  						}  					}  					break;  				case Keys.Space:  					switch(_selectedItems.Count)  					{  						case 0:  							if(_itemFocus.IsTracked)  							{  								FocusAndSelectItem(_itemFocus.Index);  							}  							break;  						default:  							if(Control.ModifierKeys == Keys.Control)  							{  								if(_itemFocus.IsTracked)  								{  									var item = _itemPlainList[_itemFocus.Index];  									if(item.IsSelected)  									{  										_selectedItems.Remove(item);  										InvalidateItem(_itemFocus.Index);  									}  									else if(_multiselect)  									{  										_selectedItems.Add(item);  										InvalidateItem(_itemFocus.Index);  									}  								}  							}  							else  							{  								if(_selectedItems.Count == 1)  								{  									if(_showCheckBoxes)  									{  										var item = _selectedItems[0];  										switch(item.CheckedState)  										{  											case CheckedState.Checked:  												item.CheckedState = CheckedState.Unchecked;  												break;  											case CheckedState.Unchecked:  												item.CheckedState = CheckedState.Checked;  												break;  										}  									}  									else  									{  										FocusAndSelectItem(_itemFocus.Index);  									}  								}  							}  							break;  					}  					break;  				case Keys.A:  					if(_multiselect && Control.ModifierKeys == Keys.Control)  					{  						if(_selectedItems.Count != _itemPlainList.Count)  						{  							_selectedItems.Clear();  							_selectedItems.AddRange(_itemPlainList);  							Invalidate(_itemsArea);  						}  					}  					break;  				case (Keys)0x5D:  					{  						ToolStripDropDown menu;  						var p = _itemsArea.Location;  						p.X += _itemHeight / 2;  						int columnIndex = -1;  						CustomListBoxColumn column = null;  						for(int i = 0; i < _columns.Count; ++i)  						{  							if(_columns[i].IsVisible)  							{  								columnIndex = i;  								column = _columns[i];  								break;  							}  						}  						switch(_selectedItems.Count)  						{  							case 0:  								{  									var args = new ContextMenuRequestEventArgs(column' columnIndex' p.X' p.Y);  									Events.Raise(ContextMenuRequestedEvent' this' args);  									if(args.OverrideDefaultMenu)  									{  										menu = args.ContextMenu;  									}  									else  									{  										menu = GetFreeSpaceContextMenu(args);  									}  								}  								break;  							case 1:  								{  									var index = _itemPlainList.IndexOf(_selectedItems[0]);  									EnsureVisible(index);  									p.Y = GetItemY1Offset(index) + _itemsArea.Top + _itemHeight / 2;  									var args = new ItemContextMenuRequestEventArgs(_selectedItems[0]' column' columnIndex' p.X' p.Y);  									Events.Raise(ItemContextMenuRequestedEvent' this' args);  									if(args.OverrideDefaultMenu)  									{  										menu = args.ContextMenu;  									}  									else  									{  										menu = _selectedItems[0].GetContextMenu(args);  									}  								}  								break;  							default:  								{  									var args = new ItemsContextMenuRequestEventArgs(_selectedItems' column' columnIndex' p.X' p.Y);  									Events.Raise(ItemsContextMenuRequestedEvent' this' args);  									if(args.OverrideDefaultMenu)  									{  										menu = args.ContextMenu;  									}  									else  									{  										menu = GetMultiselectContextMenu(args);  									}  								}  								break;  						}  						if(menu != null)  						{  							menu.Renderer = Style.ToolStripRenderer;  							menu.Show(this' p' ToolStripDropDownDirection.Default);  						}  					}  					break;  				default:  					e.IsInputKey = false;  					break;  		    }
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnPreviewKeyDown,The following statement contains a magic number: switch(e.KeyCode)  		    {  				case Keys.Enter:  					if(_itemFocus.IsTracked)  					{  						var item = _itemFocus.Item;  						item.Activate();  					}  					break;  				case Keys.Escape:  					if(_columnResizeProcess != null)  					{  						_columnResizeProcess.Cancel();  						_columnResizeProcess = null;  					}  					break;  				case Keys.Right:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index < 0 || _itemFocus.Index >= _itemPlainList.Count)  					{  						FocusAndSelectItem(0);  					}  					else  					{  						var item = _itemPlainList[_itemFocus.Index];  						if(item.Items.Count == 0) return;  						if(item.IsExpanded)  						{  							FocusAndSelectItem(_itemFocus.Index + 1);  						}  						else  						{  							item.IsExpanded = true;  						}  					}  					break;  				case Keys.Left:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index < 0 || _itemFocus.Index >= _itemPlainList.Count)  					{  						FocusAndSelectItem(_itemPlainList.Count - 1);  					}  					else  					{  						var item = _itemPlainList[_itemFocus.Index];  						if(item.IsExpanded)  						{  							if(_showRootTreeLines || item.Level != 0)  							{  								item.IsExpanded = false;  							}  						}  						else  						{  							if(item.Parent == null) return;  							FocusAndSelectItem(_itemPlainList.IndexOf(item.Parent));  						}  					}  					break;  				case Keys.Home:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index != 0)  					{  						FocusAndSelectItem(0);  					}  					else  					{  						EnsureVisible(_itemFocus.Index);  					}  					break;  				case Keys.End:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index != _itemPlainList.Count - 1)  					{  						FocusAndSelectItem(_itemPlainList.Count - 1);  					}  					else  					{  						EnsureVisible(_itemFocus.Index);  					}  					break;  				case Keys.PageUp:  					if(_itemPlainList.Count == 0) return;  					{  						var index = _itemFocus.Index - GetItemsOnPage();  						if(index < 0) index = 0;  						if(_itemFocus.Index != index)  						{  							FocusAndSelectItem(index);  						}  						else  						{  							EnsureVisible(_itemFocus.Index);  						}  					}  					break;  				case Keys.PageDown:  					if(_itemPlainList.Count == 0) return;  					{  						var index = _itemFocus.Index + GetItemsOnPage();  						if(index >= _itemPlainList.Count) index = _itemPlainList.Count - 1;  						if(_itemFocus.Index != index)  						{  							FocusAndSelectItem(index);  						}  						else  						{  							EnsureVisible(_itemFocus.Index);  						}  					}  					break;  				case Keys.Up:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index > 0)  		            {  						int index = _itemFocus.Index - 1;  						if(Control.ModifierKeys == Keys.Control)  						{  							FocusItem(index);  						}  						else  						{  							FocusAndSelectItem(index);  						}  					}  		            break;  		        case Keys.Down:  					if(_itemPlainList.Count == 0) return;  					if(_itemFocus.Index < _itemPlainList.Count - 1)  					{  						int index = _itemFocus.Index + 1;  						if(Control.ModifierKeys == Keys.Control)  						{  							FocusItem(index);  						}  						else  						{  							FocusAndSelectItem(index);  						}  					}  					break;  				case Keys.Space:  					switch(_selectedItems.Count)  					{  						case 0:  							if(_itemFocus.IsTracked)  							{  								FocusAndSelectItem(_itemFocus.Index);  							}  							break;  						default:  							if(Control.ModifierKeys == Keys.Control)  							{  								if(_itemFocus.IsTracked)  								{  									var item = _itemPlainList[_itemFocus.Index];  									if(item.IsSelected)  									{  										_selectedItems.Remove(item);  										InvalidateItem(_itemFocus.Index);  									}  									else if(_multiselect)  									{  										_selectedItems.Add(item);  										InvalidateItem(_itemFocus.Index);  									}  								}  							}  							else  							{  								if(_selectedItems.Count == 1)  								{  									if(_showCheckBoxes)  									{  										var item = _selectedItems[0];  										switch(item.CheckedState)  										{  											case CheckedState.Checked:  												item.CheckedState = CheckedState.Unchecked;  												break;  											case CheckedState.Unchecked:  												item.CheckedState = CheckedState.Checked;  												break;  										}  									}  									else  									{  										FocusAndSelectItem(_itemFocus.Index);  									}  								}  							}  							break;  					}  					break;  				case Keys.A:  					if(_multiselect && Control.ModifierKeys == Keys.Control)  					{  						if(_selectedItems.Count != _itemPlainList.Count)  						{  							_selectedItems.Clear();  							_selectedItems.AddRange(_itemPlainList);  							Invalidate(_itemsArea);  						}  					}  					break;  				case (Keys)0x5D:  					{  						ToolStripDropDown menu;  						var p = _itemsArea.Location;  						p.X += _itemHeight / 2;  						int columnIndex = -1;  						CustomListBoxColumn column = null;  						for(int i = 0; i < _columns.Count; ++i)  						{  							if(_columns[i].IsVisible)  							{  								columnIndex = i;  								column = _columns[i];  								break;  							}  						}  						switch(_selectedItems.Count)  						{  							case 0:  								{  									var args = new ContextMenuRequestEventArgs(column' columnIndex' p.X' p.Y);  									Events.Raise(ContextMenuRequestedEvent' this' args);  									if(args.OverrideDefaultMenu)  									{  										menu = args.ContextMenu;  									}  									else  									{  										menu = GetFreeSpaceContextMenu(args);  									}  								}  								break;  							case 1:  								{  									var index = _itemPlainList.IndexOf(_selectedItems[0]);  									EnsureVisible(index);  									p.Y = GetItemY1Offset(index) + _itemsArea.Top + _itemHeight / 2;  									var args = new ItemContextMenuRequestEventArgs(_selectedItems[0]' column' columnIndex' p.X' p.Y);  									Events.Raise(ItemContextMenuRequestedEvent' this' args);  									if(args.OverrideDefaultMenu)  									{  										menu = args.ContextMenu;  									}  									else  									{  										menu = _selectedItems[0].GetContextMenu(args);  									}  								}  								break;  							default:  								{  									var args = new ItemsContextMenuRequestEventArgs(_selectedItems' column' columnIndex' p.X' p.Y);  									Events.Raise(ItemsContextMenuRequestedEvent' this' args);  									if(args.OverrideDefaultMenu)  									{  										menu = args.ContextMenu;  									}  									else  									{  										menu = GetMultiselectContextMenu(args);  									}  								}  								break;  						}  						if(menu != null)  						{  							menu.Renderer = Style.ToolStripRenderer;  							menu.Show(this' p' ToolStripDropDownDirection.Default);  						}  					}  					break;  				default:  					e.IsInputKey = false;  					break;  		    }
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,RecomputeHeaderSizes,The following statement contains a magic number: w = 10;
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,RecomputeHeaderSizes,The following statement contains a magic number: w < 10
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,RecomputeHeaderSizes,The following statement contains a magic number: switch(c.SizeMode)  					{  						case ColumnSizeMode.Fill:  							--nfill;  							if(nfill == 0)  							{  								if(free < 10) free = 10;  								c.SetWidth(free);  								_itemWidth += free;  							}  							else  							{  								c.SetWidth(w);  								_itemWidth += w;  								free -= w;  							}  							break;  						case ColumnSizeMode.Auto:  							if(nfill == 0 && free > 0)  							{  								_itemWidth += free;  								c.SetWidth(c.Width + free);  								free = 0;  							}  							break;  					}
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,RecomputeHeaderSizes,The following statement contains a magic number: switch(c.SizeMode)  					{  						case ColumnSizeMode.Fill:  							--nfill;  							if(nfill == 0)  							{  								if(free < 10) free = 10;  								c.SetWidth(free);  								_itemWidth += free;  							}  							else  							{  								c.SetWidth(w);  								_itemWidth += w;  								free -= w;  							}  							break;  						case ColumnSizeMode.Auto:  							if(nfill == 0 && free > 0)  							{  								_itemWidth += free;  								c.SetWidth(c.Width + free);  								free = 0;  							}  							break;  					}
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnDragOver,The following statement contains a magic number: Math.Abs(p.Y - _itemsArea.Y) < 5 && VScrollPos != 0
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: int w = (int)(_itemsArea.Width * 0.8);
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: int h = (int)(_itemsArea.Height * 0.5);
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: w = 300;
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: w > 300
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: h = 85;
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: h > 85
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: return new Rectangle(  				_itemsArea.Left + (_itemsArea.Width - w) / 2'  				_itemsArea.Top + (_itemsArea.Height - h) / 2'  				w' h);
Magic Number,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,GetOverlayBounds,The following statement contains a magic number: return new Rectangle(  				_itemsArea.Left + (_itemsArea.Width - w) / 2'  				_itemsArea.Top + (_itemsArea.Height - h) / 2'  				w' h);
Magic Number,gitter.Framework.Controls,FlowPanelSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowPanelSeparator.cs,FlowPanelSeparator,The following statement contains a magic number: _height = 16;
Magic Number,gitter.Framework.Controls,FlowPanelSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowPanelSeparator.cs,OnPaint,The following statement contains a magic number: switch(_style)  			{  				case FlowPanelSeparatorStyle.Line:  					{  						var y = _height / 2;  						var x = y;  						var w = Math.Max(FlowControl.ContentSize.Width' FlowControl.ContentArea.Width) - 2 * x;  						if(w > 0)  						{  							x += rect.X;  							y += rect.Y;  							graphics.DrawLine(Pens.Gray' x' y' x + w' y);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,FlowPanelSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowPanelSeparator.cs,OnPaint,The following statement contains a magic number: switch(_style)  			{  				case FlowPanelSeparatorStyle.Line:  					{  						var y = _height / 2;  						var x = y;  						var w = Math.Max(FlowControl.ContentSize.Width' FlowControl.ContentArea.Width) - 2 * x;  						if(w > 0)  						{  							x += rect.X;  							y += rect.Y;  							graphics.DrawLine(Pens.Gray' x' y' x + w' y);  						}  					}  					break;  			}
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,FlowProgressPanel,The following statement contains a magic number: _height = 150;
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: var w = mw - 5 * 2;
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: var w = mw - 5 * 2;
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: int h = _height  - 5 * 2;
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: int h = _height  - 5 * 2;
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: w = 300;
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: w > 300
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: h = 85;
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: h > 85
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: var rc = new Rectangle(  				rect.X + (mw - w) / 2'  				rect.Y + (rect.Height - h) / 2'  				w' h);
Magic Number,gitter.Framework.Controls,FlowProgressPanel,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowProgressPanel.cs,OnPaint,The following statement contains a magic number: var rc = new Rectangle(  				rect.X + (mw - w) / 2'  				rect.Y + (rect.Height - h) / 2'  				w' h);
Magic Number,gitter.Framework.Controls,NotifyCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\NotifyCollection.cs,Sort,The following statement contains a magic number: items < 2
Magic Number,gitter.Framework.Controls,NotifyCollection<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\NotifyCollection.cs,Sort,The following statement contains a magic number: items < 2
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,CreateScrollBars,The following statement contains a magic number: _vScrollBar.Control.Bounds = new Rectangle(Width - scrollWidth - borderSize' borderSize' scrollWidth' Height - borderSize * 2);
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,CreateScrollBars,The following statement contains a magic number: _hScrollBar.Control.Bounds = new Rectangle(borderSize' Height - borderSize - scrollHeight' Width - borderSize * 2' scrollHeight);
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,GetClientArea,The following statement contains a magic number: client.Inflate(-2' -2);
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,GetClientArea,The following statement contains a magic number: client.Inflate(-2' -2);
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,GetVScrollSmallChange,The following statement contains a magic number: return 10;
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,GetHScrollSmallChange,The following statement contains a magic number: return 10;
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,GetVScrollBounds,The following statement contains a magic number: var bounds = new Rectangle(  				size.Width - _vScrollBar.Control.Width - borderSize' borderSize'  				_vScrollBar.Control.Width' size.Height - borderSize * 2);
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,GetHScrollBounds,The following statement contains a magic number: var bounds = new Rectangle(  				borderSize' size.Height - _hScrollBar.Control.Height - borderSize'  				size.Width - borderSize * 2' _hScrollBar.Control.Height);
Magic Number,gitter.Framework.Controls,ScrollableControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollableControl\ScrollableControl.cs,StartScrollTimer,The following statement contains a magic number: _scrollTimer = new Timer()  				{  					Interval = 150'  				};
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,UpdateLineBounds,The following statement contains a magic number: var x = _lblText.Right + 4;
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,UpdateLineBounds,The following statement contains a magic number: w -= 19+5;
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,UpdateLineBounds,The following statement contains a magic number: w -= 19+5;
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,UpdateLineBounds,The following statement contains a magic number: _line.SetBounds(x' (Height + 1) / 2' w' 1);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._line.Size = new System.Drawing.Size(340' 1);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._lblText.Location = new System.Drawing.Point(0' 3);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._lblText.Size = new System.Drawing.Size(49' 15);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._lblText.Size = new System.Drawing.Size(49' 15);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._picChevron.Location = new System.Drawing.Point(388' 0);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._picChevron.Size = new System.Drawing.Size(19' 19);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._picChevron.Size = new System.Drawing.Size(19' 19);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this._picChevron.TabIndex = 2;
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(9999' System.Windows.Forms.SystemInformation.SmallIconSize.Height + 3);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(9999' System.Windows.Forms.SystemInformation.SmallIconSize.Height + 3);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(0' System.Windows.Forms.SystemInformation.SmallIconSize.Height + 3);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(407' 19);
Magic Number,gitter.Framework.Controls,GroupSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\GroupSeparator\GroupSeparator.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(407' 19);
Magic Number,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,Popup,The following statement contains a magic number: _animationDuration = 100;
Magic Number,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,PaintSizeGrip,The following statement contains a magic number: e.Graphics.RotateTransform(180);
Magic Number,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,ProcessOverlay,The following statement contains a magic number: Rounding = 10.0f;
Magic Number,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,ProcessOverlay,The following statement contains a magic number: _timer = new Timer()  			{  				Interval = 1000/25'  				Enabled = false'  			};
Magic Number,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,ProcessOverlay,The following statement contains a magic number: _timer = new Timer()  			{  				Interval = 1000/25'  				Enabled = false'  			};
Magic Number,gitter.Framework.Controls,ProcessOverlay,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ProcessOverlay\ProcessOverlay.cs,DrawMessage,The following statement contains a magic number: bounds.Height > 25
Magic Number,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,ViewBase,The following statement contains a magic number: Size				= new Size(555' 362);
Magic Number,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,ViewBase,The following statement contains a magic number: Size				= new Size(555' 362);
Magic Number,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,ViewBase,The following statement contains a magic number: AutoScaleDimensions	= new SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,ViewBase,The following statement contains a magic number: AutoScaleDimensions	= new SizeF(96F' 96F);
Magic Number,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,AddTopToolStrip,The following statement contains a magic number: toolStrip.Padding = new Padding(2);
Magic Number,gitter.Framework.Controls,ViewBase,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewBase.cs,AddBottomToolStrip,The following statement contains a magic number: toolStrip.Padding = new Padding(2);
Magic Number,gitter.Framework.Hooks,LowLevelMouseHook,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Hooks\LowLevelMouseHook.cs,HookCallback,The following statement contains a magic number: switch(msg)  			{  				case WM.MOUSEWHEEL:  					OnMouseWheel(new MouseEventArgs(MouseButtons.None' 0' info.pt.X' info.pt.Y' info.mouseData >> 16));  					break;  				case WM.MOUSEMOVE:  					OnMouseMove(new MouseEventArgs(MouseButtons.None' 0' info.pt.X' info.pt.Y' 0));  					break;  			}
Magic Number,gitter.Native,NativeUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\NativeUtility.cs,SetWindowProc,The following statement contains a magic number: const int GWLP_WNDPROC = -4;
Magic Number,gitter.Native,NativeUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\NativeUtility.cs,SetWindowProc,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,gitter.Native,NativeUtility,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Native\NativeUtility.cs,HIWORD,The following statement contains a magic number: return (n >> 16) & 0xffff;
Magic Number,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,TruncateSize,The following statement contains a magic number: int w = (int)(size.Width + .5f);
Magic Number,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,TruncateSize,The following statement contains a magic number: int h = (int)(size.Height + .5f);
Magic Number,gitter.Framework.Services,GdiPlusTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiPlusTextRenderer.cs,GetFontHeight,The following statement contains a magic number: var size = graphics.MeasureString("0"' font' 10000' DefaultStringFormatLeftAlign);
Magic Number,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,GetFontHeight,The following statement contains a magic number: var size = TextRenderer.MeasureText("0"' font' new Size(1000' 1000)' DefaultFormatFlags);
Magic Number,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,GetFontHeight,The following statement contains a magic number: var size = TextRenderer.MeasureText("0"' font' new Size(1000' 1000)' DefaultFormatFlags);
Magic Number,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,GetFontHeight,The following statement contains a magic number: font.Size >= 9
Magic Number,gitter.Framework.Services,Gravatar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Gravatar\Gravatar.cs,BeginUpdate,The following statement contains a magic number: _avatarLoading = GravatarService.BeginGetGravatar(  					OnAvatarLoaded' _email' DefaultGravatarType.wavatar' GravatarRating.g' 60);
Magic Number,gitter.Framework.Services,Gravatar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Gravatar\Gravatar.cs,Update,The following statement contains a magic number: _image = GravatarService.GetGravatar(  						_email' DefaultGravatarType.wavatar' GravatarRating.g' 60);
Magic Number,gitter.Framework.Services,LoggingService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Logging\LoggingService.cs,LoggingService,The following statement contains a magic number: _log = new LogEvent[1000];
Magic Number,gitter.Framework.Services,SpellingService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\SpellingService.cs,GetAvailableLocales,The following statement contains a magic number: File.Exists(file.Substring(0' file.Length - 4) + ".dic")
Magic Number,gitter.Framework.Services,TextBoxSpellChecker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\TextBoxSpellChecker.cs,WndProc,The following statement contains a magic number: switch (m.Msg)    			{    				case 15:  					_textBox.Invalidate();    					base.WndProc(ref m);    					PaintErrors();    					break;    				default:    					base.WndProc(ref m);    					break;    			}
Magic Number,gitter.Framework.Services,TextBoxSpellChecker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\TextBoxSpellChecker.cs,PaintErrors,The following statement contains a magic number: pos2.X += 6;
Magic Number,gitter.Framework.Services,TextBoxSpellChecker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Spelling\TextBoxSpellChecker.cs,PaintErrors,The following statement contains a magic number: pos1.Y += 15;
Magic Number,gitter.Framework.Services,BalloonNotificationService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Notifcation\BalloonNotificationService.cs,Notify,The following statement contains a magic number: _toolTip.Show(message' _notifyControl' 0' -74' 1);
Magic Number,gitter.Framework.Services,GravatarService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Gravatar\GravatarService.cs,MD5,The following statement contains a magic number: var arr = new char[hash.Length * 2];
Magic Number,gitter.Framework.Services,GravatarService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Gravatar\GravatarService.cs,MD5,The following statement contains a magic number: arr[j++] = Alphabet[h >> 4];
Magic Number,gitter.Framework.Services,GravatarService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Gravatar\GravatarService.cs,GetGravatar,The following statement contains a magic number: return GetGravatar(email' DefaultGravatarType.wavatar' GravatarRating.g' 80);
Magic Number,gitter.Framework.Services,GravatarService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Gravatar\GravatarService.cs,BeginGetGravatar,The following statement contains a magic number: return BeginGetGravatar(callback' email' DefaultGravatarType.wavatar' GravatarRating.g' 80);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: var size1 = new Size(75' 23);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: var size1 = new Size(75' 23);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: var size2 = new Size(106' 23);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: var size2 = new Size(106' 23);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: int y = cs.Height - size1.Height - 8;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: var size = (TextRenderer.MeasureText(list[i].Text' Font).Width > size1.Width - 8) ?  					size2 : size1;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: x -= size.Width + 6;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: minW += size.Width + 6;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: minW += 42 - 6;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,LayoutButtons,The following statement contains a magic number: minW += 42 - 6;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: _lblMessage.SetBounds(_lblMessage.Left - 53' 0' _lblMessage.Width + 53' 0'  					BoundsSpecified.X | BoundsSpecified.Width);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: _lblMessage.SetBounds(_lblMessage.Left - 53' 0' _lblMessage.Width + 53' 0'  					BoundsSpecified.X | BoundsSpecified.Width);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: minMessageHeight = 32;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: minMessageHeight < 32
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: int maxMessageHeight = Screen.GetBounds(this).Height * 3 / 4;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: int maxMessageHeight = Screen.GetBounds(this).Height * 3 / 4;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: h < 32
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: _lblMessage.Top = _picIcon.Top + (31 - size.Height) / 2;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,OnLoad,The following statement contains a magic number: _lblMessage.Top = _picIcon.Top + (31 - size.Height) / 2;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlContainer.Size = new System.Drawing.Size(481' 137);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._pnlContainer.Size = new System.Drawing.Size(481' 137);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.Location = new System.Drawing.Point(62' 26);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.Location = new System.Drawing.Point(62' 26);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.Size = new System.Drawing.Size(386' 84);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.Size = new System.Drawing.Size(386' 84);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._lblMessage.TabIndex = 4;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._picIcon.Location = new System.Drawing.Point(25' 26);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._picIcon.Location = new System.Drawing.Point(25' 26);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._picIcon.Size = new System.Drawing.Size(32' 32);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._picIcon.Size = new System.Drawing.Size(32' 32);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this._picIcon.TabIndex = 3;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(223))))' ((int)(((byte)(223))))' ((int)(((byte)(223)))));
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 136);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(481' 1);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 2;
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(481' 176);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(481' 176);
Magic Number,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,InitializeComponent,The following statement contains a magic number: this.Font = new System.Drawing.Font("Segoe UI"' 9F);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lstFeatures.Location = new System.Drawing.Point(0' 18);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lstFeatures.Size = new System.Drawing.Size(447' 336);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lstFeatures.Size = new System.Drawing.Size(447' 336);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblIntegrationFeatures.Location = new System.Drawing.Point(-3' 0);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblIntegrationFeatures.Size = new System.Drawing.Size(133' 15);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblIntegrationFeatures.Size = new System.Drawing.Size(133' 15);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(447' 354);
Magic Number,gitter.Framework.Options,IntegrationOptionsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\IntegrationOptionsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(447' 354);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,AppearancePage,The following statement contains a magic number: int yOffset = 3;
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,AppearancePage,The following statement contains a magic number: var themeRadioButton = new RadioButton()  				{  					Left		= 3'  					Top			= yOffset'  					Width		= _pnlThemesContainer.ClientSize.Width - SystemInformation.VerticalScrollBarWidth - 2'  					Text		= style.DisplayName'  					FlatStyle	= FlatStyle.System'  					Tag			= style'  					Checked		= style == SelectedStyle'  				};
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,AppearancePage,The following statement contains a magic number: var themeRadioButton = new RadioButton()  				{  					Left		= 3'  					Top			= yOffset'  					Width		= _pnlThemesContainer.ClientSize.Width - SystemInformation.VerticalScrollBarWidth - 2'  					Text		= style.DisplayName'  					FlatStyle	= FlatStyle.System'  					Tag			= style'  					Checked		= style == SelectedStyle'  				};
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(388' 48);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(388' 48);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdiPlus.Location = new System.Drawing.Point(3' 25);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdiPlus.Location = new System.Drawing.Point(3' 25);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdiPlus.Size = new System.Drawing.Size(58' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdiPlus.Size = new System.Drawing.Size(58' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdi.Location = new System.Drawing.Point(3' 3);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdi.Location = new System.Drawing.Point(3' 3);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdi.Size = new System.Drawing.Size(50' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._radGdi.Size = new System.Drawing.Size(50' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.groupSeparator1.Size = new System.Drawing.Size(388' 19);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.groupSeparator1.Size = new System.Drawing.Size(388' 19);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.groupSeparator2.Location = new System.Drawing.Point(0' 74);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.groupSeparator2.Size = new System.Drawing.Size(388' 19);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.groupSeparator2.Size = new System.Drawing.Size(388' 19);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.groupSeparator2.TabIndex = 2;
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlThemesContainer.Location = new System.Drawing.Point(3' 94);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlThemesContainer.Location = new System.Drawing.Point(3' 94);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlThemesContainer.Size = new System.Drawing.Size(385' 182);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlThemesContainer.Size = new System.Drawing.Size(385' 182);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlThemesContainer.TabIndex = 3;
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlRestartRequiredWarning.Location = new System.Drawing.Point(3' 282);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlRestartRequiredWarning.Location = new System.Drawing.Point(3' 282);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlRestartRequiredWarning.Size = new System.Drawing.Size(385' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlRestartRequiredWarning.Size = new System.Drawing.Size(385' 20);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this._pnlRestartRequiredWarning.TabIndex = 4;
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(0' 3);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(16' 16);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(16' 16);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(18' 4);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(18' 4);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(256' 15);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(256' 15);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(391' 305);
Magic Number,gitter.Framework.Options,AppearancePage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\AppearancePage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(391' 305);
Magic Number,gitter.Framework.Options,SelectableFontManager,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SelectableFontManager.cs,LoadStandardFonts,The following statement contains a magic number: _fonts.Add(IdFontUI' _uiFont = TryLoadFont(_section' IdFontUI' Resources.StrUIFont'  				() => new Font("Segoe UI"' 9.0f' FontStyle.Regular' GraphicsUnit.Point)));
Magic Number,gitter.Framework.Options,SelectableFontManager,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SelectableFontManager.cs,LoadStandardFonts,The following statement contains a magic number: _fonts.Add(IdFontInput' _inputFont = TryLoadFont(_section' IdFontInput' Resources.StrInputFont'  				() => new Font("Consolas"' 10.0f' FontStyle.Regular' GraphicsUnit.Point)));
Magic Number,gitter.Framework.Options,SelectableFontManager,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SelectableFontManager.cs,LoadStandardFonts,The following statement contains a magic number: _fonts.Add(IdFontViewer' _viewerFont = TryLoadFont(_section' IdFontViewer' Resources.StrViewerFont'  				() => new Font("Consolas"' 9.0f' FontStyle.Regular' GraphicsUnit.Point)));
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(-3' 0);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(72' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(72' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lstDictionaries.Location = new System.Drawing.Point(0' 18);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lstDictionaries.Size = new System.Drawing.Size(521' 310);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lstDictionaries.Size = new System.Drawing.Size(521' 310);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lstDictionaries.TabIndex = 2;
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lnkDownload.Location = new System.Drawing.Point(105' 0);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lnkDownload.Size = new System.Drawing.Size(91' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lnkDownload.Size = new System.Drawing.Size(91' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lnkDownload.TabIndex = 3;
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPoweredBy.Location = new System.Drawing.Point(369' 0);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPoweredBy.Size = new System.Drawing.Size(72' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPoweredBy.Size = new System.Drawing.Size(72' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._lblPoweredBy.TabIndex = 4;
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._picLogo.Location = new System.Drawing.Point(447' 0);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._picLogo.Size = new System.Drawing.Size(71' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._picLogo.Size = new System.Drawing.Size(71' 15);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this._picLogo.TabIndex = 5;
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(521' 328);
Magic Number,gitter.Framework.Options,SpellingPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SpellingPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(521' 328);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstOptions.Location = new System.Drawing.Point(3' 3);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstOptions.Location = new System.Drawing.Point(3' 3);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstOptions.Size = new System.Drawing.Size(162' 375);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._lstOptions.Size = new System.Drawing.Size(162' 375);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._pnlPageContainer.Location = new System.Drawing.Point(171' 3);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._pnlPageContainer.Location = new System.Drawing.Point(171' 3);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._pnlPageContainer.Size = new System.Drawing.Size(445' 375);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this._pnlPageContainer.Size = new System.Drawing.Size(445' 375);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(619' 381);
Magic Number,gitter.Framework.Options,OptionsDialog,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\OptionsDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(619' 381);
Magic Number,gitter.Framework.Options,FontsListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsListBox.cs,FontsListBox,The following statement contains a magic number: Columns.Add(new CustomListBoxColumn(1' Resources.StrFont' true) { Width = 200 });
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFonts.Location = new System.Drawing.Point(-3' 0);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFonts.Size = new System.Drawing.Size(59' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblFonts.Size = new System.Drawing.Size(59' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lstFonts.Location = new System.Drawing.Point(0' 18);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lstFonts.Size = new System.Drawing.Size(448' 245);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lstFonts.Size = new System.Drawing.Size(448' 245);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblName.Location = new System.Drawing.Point(-3' 3);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblName.Location = new System.Drawing.Point(-3' 3);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblName.Size = new System.Drawing.Size(62' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblName.Size = new System.Drawing.Size(62' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblName.TabIndex = 2;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSize.Location = new System.Drawing.Point(305' 3);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSize.Location = new System.Drawing.Point(305' 3);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSize.Size = new System.Drawing.Size(50' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSize.Size = new System.Drawing.Size(50' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSize.TabIndex = 3;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblStyle.Location = new System.Drawing.Point(-3' 30);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblStyle.Location = new System.Drawing.Point(-3' 30);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblStyle.Size = new System.Drawing.Size(55' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblStyle.Size = new System.Drawing.Size(55' 15);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblStyle.TabIndex = 4;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSample.Location = new System.Drawing.Point(0' 56);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSample.Size = new System.Drawing.Size(448' 50);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSample.Size = new System.Drawing.Size(448' 50);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._lblSample.TabIndex = 5;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbFonts.Location = new System.Drawing.Point(82' 0);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbFonts.Size = new System.Drawing.Size(217' 23);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbFonts.Size = new System.Drawing.Size(217' 23);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbFonts.TabIndex = 6;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._numSize.Location = new System.Drawing.Point(361' 0);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._numSize.Size = new System.Drawing.Size(87' 23);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._numSize.Size = new System.Drawing.Size(87' 23);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._numSize.TabIndex = 7;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._numSize.Value = new decimal(new int[] {              9'              0'              0'              0});
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbStyle.Location = new System.Drawing.Point(82' 27);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbStyle.Location = new System.Drawing.Point(82' 27);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbStyle.Size = new System.Drawing.Size(217' 23);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbStyle.Size = new System.Drawing.Size(217' 23);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._cmbStyle.TabIndex = 6;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._pnlSelectedFont.Location = new System.Drawing.Point(0' 269);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._pnlSelectedFont.Size = new System.Drawing.Size(448' 106);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._pnlSelectedFont.Size = new System.Drawing.Size(448' 106);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this._pnlSelectedFont.TabIndex = 8;
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(448' 375);
Magic Number,gitter.Framework.Options,FontsPage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontsPage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(448' 375);
Magic Number,gitter.Framework.Options,SelectableFont,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\SelectableFont.cs,LoadFrom,The following statement contains a magic number: Assert.BoundedDoubleInc(0' size' 100);
Duplicate Code,gitter.Framework,MSVS2012CustomListBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012CustomListBoxRenderer.cs,RenderPlusMinus,The method contains a code clone-set at the following line numbers (starting from the method definition): ((55' 84)' (89' 118))
Missing Default,gitter.Framework,MSVS2012StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleToolStripRenderer.cs,OnRenderGrip,The following switch statement is missing a default case: switch(e.GripDisplayStyle)  			{  				case ToolStripGripDisplayStyle.Horizontal:  					client.Y += (client.Width - GripSize) / 2;  					client.Height = 5;  					break;  				case ToolStripGripDisplayStyle.Vertical:  					client.X += (client.Width - GripSize) / 2;  					client.Width = 5;  					break;  			}
Missing Default,gitter.Framework,MSVS2010StyleToolStripRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleToolStripRenderer.cs,OnRenderGrip,The following switch statement is missing a default case: switch(e.GripDisplayStyle)  				{  					case ToolStripGripDisplayStyle.Horizontal:  						x += 4;  						while(x < e.GripBounds.Right - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							x += 4;  						}  						break;  					case ToolStripGripDisplayStyle.Vertical:  						y += 4;  						while(y < e.GripBounds.Bottom - 4)  						{  							e.Graphics.FillRectangle(brush' new Rectangle(x' y' 2' 2));  							y += 4;  						}  						break;  				}
Missing Default,gitter.Framework,GlobalOptions,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\GlobalOptions.cs,LoadFrom,The following switch statement is missing a default case: switch(textRenderer.Value as string)  					{  						case "GDI":  							GitterApplication.TextRenderer = GitterApplication.GdiTextRenderer;  							break;  						case "GDI+":  							GitterApplication.TextRenderer = GitterApplication.GdiPlusTextRenderer;  							break;  					}
Missing Default,gitter.Framework,Parser,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Parser\Parser.cs,FindLineEnding,The following switch statement is missing a default case: switch(String[i])  				{  					case '\r':  						if(i != String.Length - 1 && String[i + 1] == '\n')  						{  							ending = LineEnding.CrLf;  						}  						else  						{  							ending = LineEnding.Cr;  						}  						return i;  					case '\n':  						ending = LineEnding.Lf;  						return i;  				}
Missing Default,gitter.Framework.Controls,CustomButton,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\CustomButton.cs,OnKeyDown,The following switch statement is missing a default case: switch(e.KeyCode)  			{  				case Keys.Space:  					IsPressed = true;  					break;  			}
Missing Default,gitter.Framework.Controls,CustomButton,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Button\CustomButton.cs,OnKeyUp,The following switch statement is missing a default case: switch(e.KeyCode)  			{  				case Keys.Space:  					IsPressed = false;  					base.OnClick(EventArgs.Empty);  					break;  			}
Missing Default,gitter.Framework.Controls,CustomCheckBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\CustomCheckBox.cs,OnKeyDown,The following switch statement is missing a default case: switch(e.KeyCode)  			{  				case Keys.Space:  					_isPressed = true;  					Invalidate();  					break;  			}
Missing Default,gitter.Framework.Controls,CustomCheckBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\CustomCheckBox.cs,OnKeyUp,The following switch statement is missing a default case: switch(e.KeyCode)  			{  				case Keys.Space:  					_isPressed = false;  					CycleState();  					break;  			}
Missing Default,gitter.Framework.Controls,MSVS2012CheckBoxRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CheckBox\MSVS2012CheckBoxRenderer.cs,Render,The following switch statement is missing a default case: switch(checkBox.CheckState)  			{  				case CheckState.Checked:  					{  						var path = new Point[]  						{  							new Point(4'   7 + rcCheckBox.Y)'  							new Point(6'  10 + rcCheckBox.Y)'  							new Point(11'  3 + rcCheckBox.Y)'  						};  						var mode = graphics.SmoothingMode;  						graphics.SmoothingMode = SmoothingMode.HighQuality;  						using(var pen = new Pen(foregroundColor' 1.7f))  						{  							graphics.DrawLines(pen' path);  						}  						graphics.SmoothingMode = mode;  					}  					break;  				case CheckState.Indeterminate:  					{  						var rect = new Rectangle(rcCheckBox.X + 5' rcCheckBox.Y + 5' rcCheckBox.Width - 9' rcCheckBox.Height - 9);  						using(var brush = new SolidBrush(foregroundColor))  						{  							graphics.FillRectangle(brush' rect);  						}  					}  					break;  			}
Missing Default,gitter.Framework.Controls,NotifyCollectionBinding<T>,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\NotifyCollectionBinding.cs,OnChanged,The following switch statement is missing a default case: switch(e.Event)  			{  				case NotifyEvent.Insert:  					for(int i = e.StartIndex; i <= e.EndIndex; ++i)  					{  						var item = _itemConverter(_boundCollection[i]);  						_itemsCollection.InsertSafe(i' item);  					}  					break;  				case NotifyEvent.Remove:  					_itemsCollection.RemoveRangeSafe(e.StartIndex' e.ModifiedItems);  					break;  				case NotifyEvent.Set:  					for(int i = e.StartIndex; i <= e.EndIndex; ++i)  					{  						var item = _itemConverter(_boundCollection[i]);  						_itemsCollection[i] = item;  					}  					break;  				case NotifyEvent.Clear:  					_itemsCollection.ClearSafe();  					break;  			}
Missing Default,gitter.Framework.Controls,CustomHScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomHScrollbar.cs,OnMouseDown,The following switch statement is missing a default case: switch(e.Button)  			{  				case MouseButtons.Right:  					var menu = new ContextMenuStrip();  					menu.Items.Add(new ToolStripMenuItem(Resources.StrScrollHere' null' OnScrollHereClick));  					menu.Items.Add(new ToolStripSeparator());  					menu.Items.Add(new ToolStripMenuItem(Resources.StrLeftEdge' null' OnLeftEdgeClick));  					menu.Items.Add(new ToolStripMenuItem(Resources.StrRightEdge' null' OnRightEdgeClick));  					menu.Items.Add(new ToolStripSeparator());  					menu.Items.Add(new ToolStripMenuItem(Resources.StrPageLeft' null' OnPageLeftClick));  					menu.Items.Add(new ToolStripMenuItem(Resources.StrPageRight' null' OnPageRightClick));  					menu.Items.Add(new ToolStripSeparator());  					menu.Items.Add(new ToolStripMenuItem(Resources.StrScrollLeft' null' OnScrollLeftClick));  					menu.Items.Add(new ToolStripMenuItem(Resources.StrScrollRight' null' OnScrollRightClick));  					Utility.MarkDropDownForAutoDispose(menu);  					menu.Show(this' e.X' e.Y);  					break;  			}
Missing Default,gitter.Framework.Controls,CustomVScrollbar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomVScrollbar.cs,OnMouseDown,The following switch statement is missing a default case: switch(e.Button)  			{  				case MouseButtons.Right:  					var menu = new ContextMenuStrip();  					menu.Items.Add(new ToolStripMenuItem(Resources.StrScrollHere' null' OnScrollHereClick));  					menu.Items.Add(new ToolStripSeparator());  					menu.Items.Add(new ToolStripMenuItem(Resources.StrTop' null' OnTopClick));  					menu.Items.Add(new ToolStripMenuItem(Resources.StrBottom' null' OnBottomClick));  					menu.Items.Add(new ToolStripSeparator());  					menu.Items.Add(new ToolStripMenuItem(Resources.StrPageUp' null' OnPageUpClick));  					menu.Items.Add(new ToolStripMenuItem(Resources.StrPageDown' null' OnPageDownClick));  					menu.Items.Add(new ToolStripSeparator());  					menu.Items.Add(new ToolStripMenuItem(Resources.StrScrollUp' null' OnScrollUpClick));  					menu.Items.Add(new ToolStripMenuItem(Resources.StrScrollDown' null' OnScrollDownClick));  					Utility.MarkDropDownForAutoDispose(menu);  					menu.Show(this' e.X' e.Y);  					break;  			}
Missing Default,gitter.Framework.Controls,NotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Notifications\NotificationForm.cs,WndProc,The following switch statement is missing a default case: switch((WM)m.Msg)  			{  				case WM.NCHITTEST:  					m.Result = (IntPtr)1;  					processed = true;  					break;  				case WM.MOUSEACTIVATE:  					m.Result = (IntPtr)4;  					processed = true;  					return;  			}
Missing Default,gitter.Framework.Controls,PopupNotificationForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationForm.cs,DefWndProc,The following switch statement is missing a default case: switch(m.Msg)  			{  				case (int)WM.MOUSEACTIVATE:  					m.Result = (IntPtr)MA_NOACTIVATE;  					return;  			}
Missing Default,gitter.Framework.Controls,PopupNotificationHeader,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\PopupNotificationHeader.cs,OnButtonClick,The following switch statement is missing a default case: switch(e.Button)  			{  				case ViewButtonType.Close:  					FindForm().Close();  					break;  			}
Missing Default,gitter.Framework.Controls,CustomScrollBar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBar.cs,OnMouseDown,The following switch statement is missing a default case: switch(e.Button)  			{  				case MouseButtons.Left:  					PressedPart = HitTest(e.X' e.Y);  					_mouseDownPoint = e.Location;  					switch(PressedPart)  					{  						case CustomScrollBarPart.DecreaseButton:  						case CustomScrollBarPart.DecreaseTrackBar:  						case CustomScrollBarPart.IncreaseTrackBar:  						case CustomScrollBarPart.IncreaseButton:  							OnTimerTick(_timer' EventArgs.Empty);  							_timer.Interval = 400;  							_timer.Enabled = true;  							break;  						case CustomScrollBarPart.Thumb:  							_trackValue = Value;  							OnScroll(ScrollEventType.ThumbTrack' _trackValue' _trackValue);  							BeginScroll(_mouseDownPoint);  							break;  					}  					break;  			}
Missing Default,gitter.Framework.Controls,CustomScrollBar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBar.cs,OnMouseDown,The following switch statement is missing a default case: switch(PressedPart)  					{  						case CustomScrollBarPart.DecreaseButton:  						case CustomScrollBarPart.DecreaseTrackBar:  						case CustomScrollBarPart.IncreaseTrackBar:  						case CustomScrollBarPart.IncreaseButton:  							OnTimerTick(_timer' EventArgs.Empty);  							_timer.Interval = 400;  							_timer.Enabled = true;  							break;  						case CustomScrollBarPart.Thumb:  							_trackValue = Value;  							OnScroll(ScrollEventType.ThumbTrack' _trackValue' _trackValue);  							BeginScroll(_mouseDownPoint);  							break;  					}
Missing Default,gitter.Framework.Controls,CustomScrollBar,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\ScrollBar\CustomScrollBar.cs,InvalidatePart,The following switch statement is missing a default case: switch(area)  			{  				case CustomScrollBarPart.DecreaseButton:  					Invalidate(DecreaseButtonBounds);  					break;  				case CustomScrollBarPart.IncreaseButton:  					Invalidate(IncreaseButtonBounds);  					break;  				case CustomScrollBarPart.DecreaseTrackBar:  					Invalidate(DecreaseTrackBarBounds);  					break;  				case CustomScrollBarPart.IncreaseTrackBar:  					Invalidate(IncreaseTrackBarBounds);  					break;  				case CustomScrollBarPart.Thumb:  					Invalidate(ThumbBounds);  					break;  			}
Missing Default,gitter.Framework.Controls,DragImage,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\DragImage.cs,DefWndProc,The following switch statement is missing a default case: switch((WM)m.Msg)  			{  				case WM.MOUSEACTIVATE:  					m.Result = (IntPtr)MA_NOACTIVATE;  					return;  				case WM.NCHITTEST:  					m.Result = (IntPtr)HTTRANSPARENT;  					return;  			}
Missing Default,gitter.Framework.Controls,LogEventListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\LogListBox\LogEventListItem.cs,OnPaintSubItem,The following switch statement is missing a default case: switch((LogListBoxColumnId)paintEventArgs.SubItemId)  			{  				case LogListBoxColumnId.Type:  					paintEventArgs.PaintImage(DataContext.Type.Image);  					break;  				case LogListBoxColumnId.Timestamp:  					paintEventArgs.PaintText(DataContext.Timestamp.FormatISO8601());  					break;  				case LogListBoxColumnId.Source:  					paintEventArgs.PaintText(DataContext.Source);  					break;  				case LogListBoxColumnId.Message:  					paintEventArgs.PaintText(DataContext.Message);  					break;  				case LogListBoxColumnId.Exception:  					paintEventArgs.PaintImage(null);  					break;  			}
Missing Default,gitter.Framework.Controls,DockMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockMarker.cs,DefWndProc,The following switch statement is missing a default case: switch(m.Msg)  			{  				case WM_MOUSEACTIVATE:  					m.Result = (IntPtr)MA_NOACTIVATE;  					return;  			}
Missing Default,gitter.Framework.Controls,DockPositionMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\DockMarkers\DockPositionMarker.cs,DefWndProc,The following switch statement is missing a default case: switch(m.Msg)  			{  				case WM_MOUSEACTIVATE:  					m.Result = (IntPtr)MA_NOACTIVATE;  					return;  			}
Missing Default,gitter.Framework.Controls,FloatingViewForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\FloatingViewForm.cs,WndProc,The following switch statement is missing a default case: switch((WM)m.Msg)  			{  				case WM.NCHITTEST:  					processed = OnNcHitTest(ref m);  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHostTab,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTab.cs,OnButtonClick,The following switch statement is missing a default case: switch(e.Button)  			{  				case ViewButtonType.Close:  					View.Close();  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHostTab,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTab.cs,OnMouseDown,The following switch statement is missing a default case: switch(button)  			{  				case MouseButtons.Middle:  					View.Close();  					return;  				case MouseButtons.Right:  					return;  			}
Missing Default,gitter.Framework.Controls,MSVS2012StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2012StyleViewRenderer.cs,PaintDockMarkerButtonContent,The following switch statement is missing a default case: switch(button.Type)  			{  				case DockResult.Top:  					PaintDockMarkerTopButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentTop:  					PaintDockMarkerDocumentTopButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Left:  					PaintDockMarkerLeftButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentLeft:  					PaintDockMarkerDocumentLeftButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Fill:  					PaintDockMarkerFillButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Right:  					PaintDockMarkerRightButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentRight:  					PaintDockMarkerDocumentRightButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Bottom:  					PaintDockMarkerBottomButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentBottom:  					PaintDockMarkerDocumentBottomButton(graphics' button.Bounds' hover);  					break;  			}
Missing Default,gitter.Framework.Controls,MSVS2010StyleViewRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Styles\MSVS2010StyleViewRenderer.cs,PaintDockMarkerButtonContent,The following switch statement is missing a default case: switch(button.Type)  			{  				case DockResult.Top:  					PaintDockMarkerTopButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentTop:  					PaintDockMarkerDocumentTopButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Left:  					PaintDockMarkerLeftButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentLeft:  					PaintDockMarkerDocumentLeftButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Fill:  					PaintDockMarkerFillButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Right:  					PaintDockMarkerRightButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentRight:  					PaintDockMarkerDocumentRightButton(graphics' button.Bounds' hover);  					break;  				case DockResult.Bottom:  					PaintDockMarkerBottomButton(graphics' button.Bounds' hover);  					break;  				case DockResult.DocumentBottom:  					PaintDockMarkerDocumentBottomButton(graphics' button.Bounds' hover);  					break;  			}
Missing Default,gitter.Framework.Controls,SplitterMarker,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\SplitterMarker.cs,DefWndProc,The following switch statement is missing a default case: switch(m.Msg)  			{  				case WM_MOUSEACTIVATE:  					m.Result = (IntPtr)MA_NOACTIVATE;  					return;  			}
Missing Default,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,OnHeaderButtonClick,The following switch statement is missing a default case: switch(e.Button)  			{  				case ViewButtonType.Close:  					if(_status == ViewHostStatus.Floating)  					{  						((Form)TopLevelControl).Close();  					}  					else  					{  						if(_activeView != null)  						{  							var view = _activeView;  							var index = _views.IndexOf(view);  							if(index == _views.Count - 1)  							{  								--index;  							}  							else  							{  								++index;  							}  							if(index >= 0)  							{  								SetActiveView(_views[index]);  							}  							view.Close();  						}  					}  					break;  				case ViewButtonType.Pin:  					Pin();  					Activate();  					break;  				case ViewButtonType.Unpin:  					Unpin();  					break;  				case ViewButtonType.Maximize:  					MaximizeFloatingForm();  					break;  				case ViewButtonType.Normalize:  					NormalizeFloatingForm();  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,OnHeaderMouseDown,The following switch statement is missing a default case: switch(e.Button)  			{  				case MouseButtons.Left:  					if(_status == ViewHostStatus.Floating)  					{  						var form = (Form)TopLevelControl;  						if(form.WindowState != FormWindowState.Normal) return;  					}  					_mdX = e.X;  					_mdY = e.Y;  					_readyToMove = true;  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,ResetHeaderButtons,The following switch statement is missing a default case: switch(Status)  			{  				case ViewHostStatus.AutoHide:  					_header.SetAvailableButtons(ViewButtonType.Pin' ViewButtonType.Close);  					break;  				case ViewHostStatus.Floating:  					switch(((Form)TopLevelControl).WindowState)  					{  						case FormWindowState.Maximized:  							_header.SetAvailableButtons(ViewButtonType.Normalize' ViewButtonType.Close);  							break;  						case FormWindowState.Normal:  							_header.SetAvailableButtons(ViewButtonType.Maximize' ViewButtonType.Close);  							break;  					}  					break;  				case ViewHostStatus.Docked:  					_header.SetAvailableButtons(ViewButtonType.Unpin' ViewButtonType.Close);  					break;  				case ViewHostStatus.DockedOnFloat:  					_header.SetAvailableButtons(ViewButtonType.Close);  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHost,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHost.cs,ResetHeaderButtons,The following switch statement is missing a default case: switch(((Form)TopLevelControl).WindowState)  					{  						case FormWindowState.Maximized:  							_header.SetAvailableButtons(ViewButtonType.Normalize' ViewButtonType.Close);  							break;  						case FormWindowState.Normal:  							_header.SetAvailableButtons(ViewButtonType.Maximize' ViewButtonType.Close);  							break;  					}
Missing Default,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnAreaHoverChanged,The following switch statement is missing a default case: switch(e.Index)  			{  				case 0:  					if(!e.IsTracked)  					{  						LeftButtons.OnMouseLeave();  					}  					break;  				case 1:  					if(!e.IsTracked)  					{  						_tabHover.Drop();  					}  					break;  				case 2:  					if(!e.IsTracked)  					{  						RightButtons.OnMouseLeave();  					}  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnViewButtonClick,The following switch statement is missing a default case: switch(e.Button)  			{  				case ViewButtonType.ScrollTabsLeft:  					if(FirstTabIndex != 0)  					{  						--FirstTabIndex;  						ResetButtons();  						Invalidate();  					}  					break;  				case ViewButtonType.ScrollTabsRight:  					if(FirstTabIndex < _tabs.Count - 1)  					{  						++FirstTabIndex;  						ResetButtons();  						Invalidate();  					}  					break;  				case ViewButtonType.TabsMenu:  				case ViewButtonType.TabsScrollMenu:  					if(_tabs.Count != 0)  					{  						var menu = new ContextMenuStrip();  						foreach(var tab in _tabs)  						{  							menu.Items.Add(  								new ToolStripMenuItem(tab.Text' tab.Image'  									(item' args) =>  									{  										var view = (ViewBase)((ToolStripMenuItem)item).Tag;  										ViewHost.Activate(view);  									})  								{  									Tag = tab.View'  								});  						}  						Utility.MarkDropDownForAutoDispose(menu);  						var viewButtonSize = Renderer.ViewButtonSize;  						menu.Show(this'  							Width - viewButtonSize - 1'  							viewButtonSize + 4);  					}  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseMove,The following switch statement is missing a default case: switch(areaId)  			{  				case 0:  					LeftButtons.OnMouseMove(e.X' e.Y' e.Button);  					break;  				case 1:  					if(tabId != -1)  					{  						_tabHover.Track(tabId' _tabs[tabId]);  						int x = e.X;  						int y = e.Y;  						switch(Side)  						{  							case AnchorStyles.Top:  							case AnchorStyles.Bottom:  								x -= offset;  								break;  							case AnchorStyles.Left:  							case AnchorStyles.Right:  								y -= offset;  								break;  						}  						_tabs[tabId].OnMouseMove(x' y' e.Button);  					}  					break;  				case 2:  					RightButtons.OnMouseMove(e.X - (Width - RightButtons.Width)' e.Y' e.Button);  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseMove,The following switch statement is missing a default case: switch(Side)  						{  							case AnchorStyles.Top:  							case AnchorStyles.Bottom:  								x -= offset;  								break;  							case AnchorStyles.Left:  							case AnchorStyles.Right:  								y -= offset;  								break;  						}
Missing Default,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseUp,The following switch statement is missing a default case: switch(_areaMouseDown)  			{  				case 0:  					LeftButtons.OnMouseUp(e.X' e.Y' e.Button);  					break;  				case 1:  					if(_floatId != -1)  					{  						var offset = GetTabOffset(_floatId);  						int x = e.X;  						int y = e.Y;  						switch(Side)  						{  							case AnchorStyles.Top:  							case AnchorStyles.Bottom:  								x -= offset;  								break;  							case AnchorStyles.Left:  							case AnchorStyles.Right:  								y -= offset;  								break;  						}  						_tabs[_floatId].OnMouseUp(x' y' e.Button);  					}  					_readyToFloat = false;  					_floatId = -1;  					break;  				case 2:  					RightButtons.OnMouseUp(e.X - (Width - RightButtons.Width)' e.Y' e.Button);  					break;  			}
Missing Default,gitter.Framework.Controls,ViewHostTabs,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewHost\ViewHostTabs.cs,OnMouseUp,The following switch statement is missing a default case: switch(Side)  						{  							case AnchorStyles.Top:  							case AnchorStyles.Bottom:  								x -= offset;  								break;  							case AnchorStyles.Left:  							case AnchorStyles.Right:  								y -= offset;  								break;  						}
Missing Default,gitter.Framework.Controls,CustomListBoxTextEditor,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBoxTextEditor.cs,OnKeyDown,The following switch statement is missing a default case: switch(e.KeyCode)  			{  				case Keys.Escape:  					Stop();  					break;  				case Keys.Enter:  					var args = new CancelEventArgs(false);  					OnValidating(_textBox' args);  					break;  			}
Missing Default,gitter.Framework.Controls,ColumnItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\ColumnsDialog.cs,OnPaintSubItem,The following switch statement is missing a default case: switch(paintEventArgs.SubItemId)  				{  					case 0:  						paintEventArgs.PaintText(DataContext.Name);  						break;  				}
Missing Default,gitter.Framework.Controls,CommandLink,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CommandLink\CommandLink.cs,OnPreviewKeyDown,The following switch statement is missing a default case: switch(e.KeyCode)  			{  				case Keys.Enter:  					e.IsInputKey = true;  					OnClick(EventArgs.Empty);  					break;  			}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnItemsChanging,The following switch statement is missing a default case: switch(e.Event)  			{  				case NotifyEvent.Clear:  					if(item == null)  					{  						_lastClickedItemIndex = -1;  						_itemFocus.Drop();  						_itemHover.Drop();  						if(_itemPlainList.Count != 0)  						{  							plainListChanged = true;  							_itemPlainList.Clear();  							_selectedItems.Clear();  							if(Created)  							{  								NotifyContentSizeChanged();  							}  						}  					}  					else  					{  						if(item.IsPresented)  						{  							if(items.Count != 0)  							{  								if(item.IsExpanded)  								{  									RemoveItems(items' 0' items.Count - 1);  									plainListChanged = true;  								}  								else  								{  									_oldItem = item;  								}  							}  						}  					}  					break;  				case NotifyEvent.Set:  					if((item == null) || (item.IsPresented && item.IsExpanded))  					{  						_oldItem = items[e.StartIndex];  						_setItemPos = _itemPlainList.IndexOf(_oldItem);  					}  					break;  				case NotifyEvent.Remove:  					if((item == null) || (item.IsPresented && item.IsExpanded))  					{  						RemoveItems(items' e.StartIndex' e.EndIndex);  						plainListChanged = true;  					}  					if(_itemPlainList.Count == 0)  					{  						Invalidate(_itemsArea);  					}  					break;  			}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnItemsChanged,The following switch statement is missing a default case: switch(e.Event)  			{  				case NotifyEvent.Clear:  					if(_oldItem != null)  					{  						InvalidateItem(_oldItem);  						_oldItem = null;  					}  					break;  				case NotifyEvent.Remove:  					break;  				case NotifyEvent.Set:  					if(_setItemPos != -1)  					{  						var newitem = items[e.StartIndex];  						_itemPlainList[_setItemPos] = newitem;  						var y1 = GetItemY1Offset(_setItemPos);  						int id = _setItemPos + 1;  						if(_oldItem.IsExpanded && _oldItem.Items.Count != 0)  						{  							int level = _oldItem.Level;  							int end = id + 1;  							while(end < _itemPlainList.Count && _itemPlainList[end].Level > level)  							{  								++end;  							}  							if(_itemFocus.IsTracked)  							{  								if(_itemFocus.Index >= id)  								{  									if(_itemFocus.Index >= end)  									{  										_itemFocus.ResetIndex(_itemFocus.Index - (end - id));  									}  									else  									{  										_itemFocus.Drop();  									}  								}  							}  							if(_itemHover.IsTracked)  							{  								if(_itemHover.Index >= id)  								{  									if(_itemHover.Index >= end)  									{  										_itemHover.ResetIndex(_itemHover.Index - (end - id));  									}  									else  									{  										_itemHover.Drop();  									}  								}  							}  							_itemPlainList.RemoveRange(id' end - id);  							plainListChanged = true;  						}  						if(newitem.IsExpanded && newitem.Items.Count != 0)  						{  							int end = id;  							foreach(var i in newitem.Items)  							{  								end = InsertItem(id' i);   							}  							plainListChanged = true;  						}  						NotifyContentSizeChanged();  						_setItemPos = -1;  						_oldItem = null;  					}  					break;  				case NotifyEvent.Insert:  					{  						bool noitems = _itemPlainList.Count == 0;  						if(item == null)  						{  							int start = e.StartIndex;  							int end = e.EndIndex;  							int id = 0;  							if(start != 0)  							{  								if(end == items.Count - 1)  								{  									id = _itemPlainList.Count - (end - start);  								}  								else  								{  									var sitem = items[start - 1];  									while(sitem.Items.Count != 0 && sitem.IsExpanded)  									{  										sitem = sitem.Items[sitem.Items.Count - 1];  									}  									id = _itemPlainList.IndexOf(sitem) + 1;  								}  							}  							int startId = id;  							bool renderAll = id != _itemPlainList.Count;  							for(int i = start; i <= end; ++i)  							{  								id = InsertItem(id' items[i]);  							}  							plainListChanged = true;  							NotifyContentSizeChanged();  						}  						else  						{  							if(item.IsPresented)  							{  								if(item.IsExpanded)  								{  									int start = e.StartIndex;  									int end = e.EndIndex;  									int id = 0;  									if(start == 0)  									{  										id = _itemPlainList.IndexOf(item) + 1;  									}  									else  									{  										var sitem = items[start - 1];  										while(sitem.Items.Count != 0 && sitem.IsExpanded)  										{  											sitem = sitem.Items[sitem.Items.Count - 1];  										}  										id = _itemPlainList.IndexOf(sitem) + 1;  									}  									int startid = id;  									for(int i = start; i <= end; ++i)  									{  										id = InsertItem(id' items[i]);  									}  									NotifyContentSizeChanged();  									plainListChanged = true;  								}  								else  								{  									if(items.Count == e.ModifiedItems)  									{  										InvalidateItem(item);  									}  								}  							}  						}  						if(noitems) Invalidate(_itemsArea);  					}  					break;  			}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnPreviewKeyDown,The following switch statement is missing a default case: switch(item.CheckedState)  										{  											case CheckedState.Checked:  												item.CheckedState = CheckedState.Unchecked;  												break;  											case CheckedState.Unchecked:  												item.CheckedState = CheckedState.Checked;  												break;  										}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnMouseDown,The following switch statement is missing a default case: switch(htr.Area)  			{  				case HitTestArea.NonClient:  					break;  				case HitTestArea.Header:  					HandleHeaderMouseDown(htr.ItemIndex' htr.ItemPart' e);  					break;  				case HitTestArea.Item:  					HandleItemMouseDown(htr.ItemIndex' htr.ItemPart' e);  					break;  				case HitTestArea.FreeSpace:  					HandleFreeSpaceMouseDown(e);  					break;  			}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HandleHeaderDefaultMouseDown,The following switch statement is missing a default case: switch(e.Button)  			{  				case MouseButtons.Left:  					if(_allowColumnReorder)  					{  						if(_columns.Count > 1)  						{  							_draggedHeaderPositionIndex = _draggedHeaderIndex = itemIndex;  						}  						if(_draggedHeaderIndex != -1)  						{  							_draggedHeader = _columns[itemIndex];  							_draggedHeaderPosition = GetColumnX(itemIndex) - HScrollPos;  							_headerDragHelper.Start(e.X' e.Y);  							InvalidateColumn(_draggedHeaderIndex);  						}  						else  						{  							_draggedHeader = null;  						}  					}  					else  					{  						_draggedHeader = null;  					}  					break;  				case MouseButtons.Right:  					{  						var menu = new ContextMenuStrip();  						foreach(var c in Columns)  						{  							var item = new ToolStripMenuItem(c.Name' null)  							{  								Tag = c'  								Checked = c.IsVisible'  							};  							item.Click += (s' args) =>  							{  								var h = (CustomListBoxColumn)((ToolStripMenuItem)s).Tag;  								h.IsVisible = !h.IsVisible;  							};  							menu.Items.Add(item);  						}  						menu.Items.Add(new ToolStripSeparator());  						menu.Items.Add(new ToolStripMenuItem(  							Resources.StrColumns.AddEllipsis()' null' (s' args) => StartColumnsDialog()));  						Utility.MarkDropDownForAutoDispose(menu);  						menu.Renderer = Style.ToolStripRenderer;  						menu.Show(this' e.Location' ToolStripDropDownDirection.Default);  					}  					break;  			}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,HandleItemCheckboxMouseDown,The following switch statement is missing a default case: switch(item.CheckedState)  			{  				case CheckedState.Checked:  					if(item.ThreeStateCheckboxMode)  					{  						item.CheckedState = CheckedState.Indeterminate;  					}  					else  					{  						item.CheckedState = CheckedState.Unchecked;  					}  					break;  				case CheckedState.Indeterminate:  					item.CheckedState = CheckedState.Unchecked;  					break;  				case CheckedState.Unchecked:  					item.CheckedState = CheckedState.Checked;  					break;  			}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,OnDoubleClick,The following switch statement is missing a default case: switch(_oldHitTestResult.Area)  			{  				case HitTestArea.Item:  					if(_oldHitTestResult.ItemPart >= 0 && _itemFocus.IsTracked && _itemFocus.Index >= 0 && _itemFocus.Index < _itemPlainList.Count)  					{  						var item = _itemPlainList[_itemFocus.Index];  						item.OnDoubleClick(_mouseDownX' _mouseDownY);  						if(_itemActivation == ItemActivation.DoubleClick)  						{  							item.Activate();  						}  					}  					break;  				case HitTestArea.Header:  					bool isOverLeftResizeGrip  = _oldHitTestResult.ItemPart == ColumnHitTestResults.LeftResizer;  					bool isOverRightResizeGrip = _oldHitTestResult.ItemPart == ColumnHitTestResults.RightResizer;  					if(isOverLeftResizeGrip || isOverRightResizeGrip)  					{  						var index = _oldHitTestResult.ItemIndex;  						if(index != -1)  						{  							var autosizingColumn = _columns[index];  							if(isOverLeftResizeGrip)  							{  								var previousColumn = _columns.FindPrevious(index' column => column.IsVisible);  								if(previousColumn != null && previousColumn.SizeMode == ColumnSizeMode.Sizeable)  								{  									autosizingColumn = previousColumn;  								}  							}  							else  							{  								if(autosizingColumn.SizeMode != ColumnSizeMode.Sizeable)  								{  									var nextColumn = _columns.FindNext(index' column => column.IsVisible);  									if(nextColumn != null && nextColumn.SizeMode == ColumnSizeMode.Sizeable)  									{  										autosizingColumn = nextColumn;  									}  								}  							}  							if(autosizingColumn != null && autosizingColumn.SizeMode == ColumnSizeMode.Sizeable)  							{  								autosizingColumn.AutoSize();  							}  						}  					}  					break;  			}
Missing Default,gitter.Framework.Controls,CustomListBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\CustomListBox\CustomListBox.cs,RecomputeHeaderSizes,The following switch statement is missing a default case: switch(c.SizeMode)  					{  						case ColumnSizeMode.Fill:  							--nfill;  							if(nfill == 0)  							{  								if(free < 10) free = 10;  								c.SetWidth(free);  								_itemWidth += free;  							}  							else  							{  								c.SetWidth(w);  								_itemWidth += w;  								free -= w;  							}  							break;  						case ColumnSizeMode.Auto:  							if(nfill == 0 && free > 0)  							{  								_itemWidth += free;  								c.SetWidth(c.Width + free);  								free = 0;  							}  							break;  					}
Missing Default,gitter.Framework.Controls,FlowLayoutControl,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowLayoutControl.cs,OnPanelsChanging,The following switch statement is missing a default case: switch(e.Event)  			{  				case NotifyEvent.Clear:  					_panelHover.Drop();  					break;  				case NotifyEvent.Remove:  					if(_panelHover.Index >= e.StartIndex)  					{  						if(_panelHover.Index <= e.EndIndex)  						{  							_panelHover.Drop();  						}  						else  						{  							_panelHover.ResetIndex(_panelHover.Index - e.ModifiedItems);  						}  					}  					break;  				case NotifyEvent.Set:  					if(_panelHover.Index >= e.StartIndex)  					{  						if(_panelHover.Index <= e.EndIndex)  						{  							_panelHover.Drop();  						}  						else  						{  							_panelHover.ResetIndex(_panelHover.Index - e.ModifiedItems);  						}  					}  					break;  			}
Missing Default,gitter.Framework.Controls,FlowPanelSeparator,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\FlowLayoutControl\FlowPanelSeparator.cs,OnPaint,The following switch statement is missing a default case: switch(_style)  			{  				case FlowPanelSeparatorStyle.Line:  					{  						var y = _height / 2;  						var x = y;  						var w = Math.Max(FlowControl.ContentSize.Width' FlowControl.ContentArea.Width) - 2 * x;  						if(w > 0)  						{  							x += rect.X;  							y += rect.Y;  							graphics.DrawLine(Pens.Gray' x' y' x + w' y);  						}  					}  					break;  			}
Missing Default,gitter.Framework.Controls,CustomPopupComboBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomPopupComboBox.cs,ListBoxWndProc,The following switch statement is missing a default case: switch((WM)msg)  			{  				case WM.MOUSEMOVE:  					User32.ReleaseCapture();  					break;  				case WM.CAPTURECHANGED:  					return IntPtr.Zero;  			}
Missing Default,gitter.Framework.Controls,CustomPopupComboBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomPopupComboBox.cs,WndProc,The following switch statement is missing a default case: switch(m.Msg)  			{  				case ((int)WM.COMMAND + (int)WM.REFLECT):  					{  						switch(NativeUtility.HIWORD(m.WParam))  						{  							case Constants.CBN_DROPDOWN:  								ShowDropDownCore();  								return;  						}  					}  					break;  			}
Missing Default,gitter.Framework.Controls,CustomPopupComboBox,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\CustomPopupComboBox.cs,WndProc,The following switch statement is missing a default case: switch(NativeUtility.HIWORD(m.WParam))  						{  							case Constants.CBN_DROPDOWN:  								ShowDropDownCore();  								return;  						}
Missing Default,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,InternalProcessResizing,The following switch statement is missing a default case: switch((WM)m.Msg)  			{  				case WM.NCACTIVATE:  					if(m.WParam != IntPtr.Zero && _childPopup != null && _childPopup.Visible)  					{  						_childPopup.Hide();  					}  					break;  			}
Missing Default,gitter.Framework.Controls,Popup,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Popup\Popup.cs,InternalProcessResizing,The following switch statement is missing a default case: switch((WM)m.Msg)  			{  				case WM.NCHITTEST:  					return OnNcHitTest(ref m' contentControl);  				case WM.GETMINMAXINFO:  					return OnGetMinMaxInfo(ref m);  			}
Missing Default,gitter.Framework.Controls,ViewListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Controls\Views\ViewListItem.cs,OnPaintSubItem,The following switch statement is missing a default case: switch(paintEventArgs.SubItemId)  			{  				case 0:  					paintEventArgs.PaintImageAndText(DataContext.Image' DataContext.Name);  					break;  			}
Missing Default,gitter.Framework.Hooks,LowLevelMouseHook,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Hooks\LowLevelMouseHook.cs,HookCallback,The following switch statement is missing a default case: switch(msg)  			{  				case WM.MOUSEWHEEL:  					OnMouseWheel(new MouseEventArgs(MouseButtons.None' 0' info.pt.X' info.pt.Y' info.mouseData >> 16));  					break;  				case WM.MOUSEMOVE:  					OnMouseMove(new MouseEventArgs(MouseButtons.None' 0' info.pt.X' info.pt.Y' 0));  					break;  			}
Missing Default,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,ExtractFormatFlags,The following switch statement is missing a default case: switch(format.Alignment)  			{  				case StringAlignment.Near:  					flags |= TextFormatFlags.Left;  					break;  				case StringAlignment.Far:  					flags |= TextFormatFlags.Right;  					break;  				case StringAlignment.Center:  					flags |= TextFormatFlags.HorizontalCenter;  					break;  			}
Missing Default,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,ExtractFormatFlags,The following switch statement is missing a default case: switch(format.LineAlignment)  			{  				case StringAlignment.Near:  					flags |= TextFormatFlags.Top;  					break;  				case StringAlignment.Center:  					flags |= TextFormatFlags.VerticalCenter;  					break;  				case StringAlignment.Far:  					flags |= TextFormatFlags.Bottom;  					break;  			}
Missing Default,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,ExtractFormatFlags,The following switch statement is missing a default case: switch(format.Trimming)  			{  				case StringTrimming.Character:  				case StringTrimming.EllipsisCharacter:  					flags |= TextFormatFlags.EndEllipsis;  					break;  				case StringTrimming.Word:  				case StringTrimming.EllipsisWord:  					flags |= TextFormatFlags.WordEllipsis;  					break;  				case StringTrimming.EllipsisPath:  					flags |= TextFormatFlags.PathEllipsis;  					break;  			}
Missing Default,gitter.Framework.Services,GdiTextRenderer,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\GdiTextRenderer.cs,ExtractFormatFlags,The following switch statement is missing a default case: switch(format.HotkeyPrefix)  			{  				case HotkeyPrefix.None:  					flags |= TextFormatFlags.NoPrefix;  					break;  			}
Missing Default,gitter.Framework.Services,BalloonNotificationService,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\Notifcation\BalloonNotificationService.cs,Notify,The following switch statement is missing a default case: switch(type)  			{  				case NotificationType.Error:  					tticon = ToolTipIcon.Error;  					break;  				case NotificationType.Information:  					tticon = ToolTipIcon.Info;  					break;  				case NotificationType.Warning:  					tticon = ToolTipIcon.Warning;  					break;  			}
Missing Default,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,PlaySystemSound,The following switch statement is missing a default case: switch(_mbIcon)  			{  				case MessageBoxIcon.Information:  					SystemSounds.Asterisk.Play();  					break;  				case MessageBoxIcon.Error:  					SystemSounds.Hand.Play();  					break;  				case MessageBoxIcon.Exclamation:  					SystemSounds.Exclamation.Play();  					break;  				case MessageBoxIcon.Question:  					SystemSounds.Question.Play();  					break;  			}
Missing Default,gitter.Framework.Services,MessageBoxForm,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Services\MessageBox\MessageBoxForm.cs,MessageBoxForm_KeyDown,The following switch statement is missing a default case: switch(e.KeyCode)  			{  				case Keys.C:  					if(e.Modifiers == Keys.Control)  					{  						CopyToClipboard();  						SystemSounds.Beep.Play();  					}  					break;  			}
Missing Default,gitter.Framework.Options,FontListItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\FontListItem.cs,OnPaintSubItem,The following switch statement is missing a default case: switch(paintEventArgs.SubItemId)  			{  				case 0:  					paintEventArgs.PaintText(DataContext.Name);  					break;  				case 1:  					if(_font != null)  					{  						paintEventArgs.PaintText(_font.Name' _font);  					}  					break;  			}
Missing Default,gitter.Framework.Options,PropertyPageItem,D:\research\architectureSmells\repos\amgine_gitter\gitter.fw.prj\Options\PropertyPageItem.cs,OnPaintSubItem,The following switch statement is missing a default case: switch(paintEventArgs.Column.Id)  			{  				case 0:  					if(DataContext.Icon != null)  						paintEventArgs.PaintImageAndText(DataContext.Icon' DataContext.Name);  					else  						paintEventArgs.PaintText(DataContext.Name);  					break;  			}
