Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Riemann,Event,C:\repos\BlueMountainCapital_riemann-csharp\Event.cs,Event,The method has 7 parameters. Parameters: service' state' description' metric' ttl' tags' attributes
Long Parameter List,Riemann,Event,C:\repos\BlueMountainCapital_riemann-csharp\Event.cs,Event,The method has 8 parameters. Parameters: host' service' state' description' metric' ttl' tags' attributes
Long Parameter List,Riemann,IClient,C:\repos\BlueMountainCapital_riemann-csharp\IClient.cs,SendEvent,The method has 7 parameters. Parameters: service' state' description' metric' ttl' tags' attributes
Long Parameter List,Riemann,IClient,C:\repos\BlueMountainCapital_riemann-csharp\IClient.cs,SendEvent,The method has 8 parameters. Parameters: host' service' state' description' metric' ttl' tags' attributes
Long Parameter List,Riemann,TickEvent,C:\repos\BlueMountainCapital_riemann-csharp\TickEvent.cs,TickEvent,The method has 5 parameters. Parameters: state' description' metricValue' ttl' tags
Long Parameter List,Riemann,Client,C:\repos\BlueMountainCapital_riemann-csharp\Client.cs,SendEvent,The method has 7 parameters. Parameters: service' state' description' metric' ttl' tags' attributes
Long Parameter List,Riemann,Client,C:\repos\BlueMountainCapital_riemann-csharp\Client.cs,SendEvent,The method has 8 parameters. Parameters: host' service' state' description' metric' ttl' tags' attributes
Long Statement,Riemann,Client,C:\repos\BlueMountainCapital_riemann-csharp\Client.cs,ProcessTicks,The length of the statement  "						events.Add(new Event(tick.Service' t.State' t.Description' t.MetricValue' t.TTL.HasValue ? t.TTL.Value : tick.TickTime * 2' tickTags)); " is 135.
Empty Catch Block,Riemann,Client,C:\repos\BlueMountainCapital_riemann-csharp\Client.cs,Client,The method has an empty catch block.
Magic Number,Riemann,Event,C:\repos\BlueMountainCapital_riemann-csharp\Event.cs,Event,The following statement contains a magic number: if (!string.IsNullOrEmpty(state) && state.Length > 255) {  				throw new ArgumentException("State parameter is too long' must be 255 characters or less"' "state");  			}
Magic Number,Riemann,Client,C:\repos\BlueMountainCapital_riemann-csharp\Client.cs,Client,The following statement contains a magic number: if (_useTcp)  			{  				_cancellationTokenSource = new CancellationTokenSource();  				var token = _cancellationTokenSource.Token;    				Task.Run(async () =>  				{  					while (!token.IsCancellationRequested)  					{  						try  						{  							lock (this)  							{  								if (_tcpStream == null || _tcpSocket == null || !_tcpSocket.Connected)  								{  									OpenTcpConnectionUnsafe();  								}  							}  						}  						catch (Exception) {}  						await Task.Delay(5000);  					}  				}' token);  			}   			else  			{  				OpenUdpConnection();  			}
Magic Number,Riemann,Client,C:\repos\BlueMountainCapital_riemann-csharp\Client.cs,ProcessTicks,The following statement contains a magic number: try {  				var events = new List<Event>();  				List<TickDisposable> ticks;  				lock (_timerLock) {  					ticks = _ticks.ToList();  				}  				var removals = new List<TickDisposable>();  				foreach (var tick in ticks) {  					if (tick.RemoveRequested) {  						removals.Add(tick);  					}  					tick.NextTick = tick.NextTick - 1;  					if (tick.NextTick <= 0) {  						var t = tick.Tick();  					    var tickTags = new List<string>();  					    if (t.Tags != null)  					    {  					        tickTags.AddRange(t.Tags);  					    }  						events.Add(new Event(tick.Service' t.State' t.Description' t.MetricValue' t.TTL.HasValue ? t.TTL.Value : tick.TickTime * 2' tickTags));  						tick.NextTick = tick.TickTime;    					}  				}  				if (removals.Count > 0) {  					lock (_timerLock) {  						if (removals.Count == _ticks.Count) {  							_ticks = null;  							_timer.Dispose();  							_timer = null;  						} else {  							foreach (var removal in removals) {  								_ticks.Remove(removal);  							}  						}  					}  				}  				if (events.Count > 0) {  					SendEvents(events);  				}  			} catch {  				if (_throwExceptionsOnTicks) throw;  			}
