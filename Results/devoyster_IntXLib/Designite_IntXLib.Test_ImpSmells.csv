Implementation smell,Namespace,Class,File,Method,Description
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2IntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2IntX,The following statement contains a magic number: IntX int2 = new IntX(5);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2IntX,The following statement contains a magic number: Assert.IsTrue(int1 + int2 == 8);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2IntXNeg,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2IntXNeg,The following statement contains a magic number: IntX int2 = new IntX(-5);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2IntXNeg,The following statement contains a magic number: Assert.IsTrue(int1 + int2 == -8);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddIntIntX,The following statement contains a magic number: IntX intX = new IntX(3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddIntIntX,The following statement contains a magic number: Assert.IsTrue(intX + 5 == 8);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddIntIntX,The following statement contains a magic number: Assert.IsTrue(intX + 5 == 8);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddIntXInt,The following statement contains a magic number: IntX intX = new IntX(3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddIntXInt,The following statement contains a magic number: Assert.IsTrue(5 + intX == 8);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddIntXInt,The following statement contains a magic number: Assert.IsTrue(5 + intX == 8);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddNullIntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add0IntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add0IntX,The following statement contains a magic number: Assert.IsTrue(int1 + 0 == 3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add0IntX,The following statement contains a magic number: Assert.IsTrue(int1 + new IntX() == 3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add0IntXNeg,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add0IntXNeg,The following statement contains a magic number: Assert.IsTrue(int1 + 0 == -3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add0IntXNeg,The following statement contains a magic number: Assert.IsTrue(int1 + new IntX() == -3);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 3' 4' 5 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 3' 4' 5 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 3' 4' 5 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 4' 6' 8 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 4' 6' 8 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntX,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 4' 6' 8 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Add2BigIntXC4,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 0' 1' 2' 1 }' false);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,Fibon,The following statement contains a magic number: i < 10000
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddSub,The following statement contains a magic number: IntX int1 = new IntX(2);
Magic Number,IntXLib.Test,AddOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\AddOpTest.cs,AddSub,The following statement contains a magic number: IntX int2 = new IntX(-2);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoIntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoIntX,The following statement contains a magic number: IntX int2 = new IntX(5);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(7));
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrPositiveAndNegativeIntX,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrPositiveAndNegativeIntX,The following statement contains a magic number: IntX int2 = new IntX(5);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrPositiveAndNegativeIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(-7));
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoNegativeIntX,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoNegativeIntX,The following statement contains a magic number: IntX int2 = new IntX(-5);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoNegativeIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(-7));
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrIntXAndZero,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoBigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 3' 5' uint.MaxValue }' false);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoBigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 3' 5' uint.MaxValue }' false);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoBigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 8 }' false);
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 3' 13' uint.MaxValue }' false)));
Magic Number,IntXLib.Test,BitwiseOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseOrOpTest.cs,ShouldBitwiseOrTwoBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 3' 13' uint.MaxValue }' false)));
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoIntX,The following statement contains a magic number: IntX int1 = new IntX(11);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoIntX,The following statement contains a magic number: IntX int2 = new IntX(13);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(9));
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndPositiveAndNegativeIntX,The following statement contains a magic number: IntX int1 = new IntX(-11);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndPositiveAndNegativeIntX,The following statement contains a magic number: IntX int2 = new IntX(13);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndPositiveAndNegativeIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(9));
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoNegativeIntX,The following statement contains a magic number: IntX int1 = new IntX(-11);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoNegativeIntX,The following statement contains a magic number: IntX int2 = new IntX(-13);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoNegativeIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(-9));
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndIntXAndZero,The following statement contains a magic number: IntX int1 = new IntX(11);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoBigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 11' 6' uint.MaxValue' uint.MaxValue }' false);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoBigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 11' 6' uint.MaxValue' uint.MaxValue }' false);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoBigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 13' 3' 0 }' false);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoBigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 13' 3' 0 }' false);
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 9' 2 }' false)));
Magic Number,IntXLib.Test,BitwiseAndOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\BitwiseAndOpTest.cs,ShouldBitwiseAndTwoBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 9' 2 }' false)));
Magic Number,IntXLib.Test,IsOddTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\IsOddTest.cs,ShouldBeFalseForEvenNumber,The following statement contains a magic number: IntX value = new IntX(42);
Magic Number,IntXLib.Test,IsOddTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\IsOddTest.cs,ShouldBeTrueForOddNumber,The following statement contains a magic number: IntX value = new IntX(57);
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementIntX,The following statement contains a magic number: IntX value = new IntX(11);
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(-~(uint)11));
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementNegativeIntX,The following statement contains a magic number: IntX value = new IntX(-11);
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementNegativeIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(~(uint)11));
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementBigIntX,The following statement contains a magic number: IntX value = new IntX(new uint[] { 3' 5' uint.MaxValue }' false);
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementBigIntX,The following statement contains a magic number: IntX value = new IntX(new uint[] { 3' 5' uint.MaxValue }' false);
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { ~(uint)3' ~(uint)5 }' true)));
Magic Number,IntXLib.Test,OnesComplementOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\OnesComplementOpTest.cs,ShouldOnesComplementBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { ~(uint)3' ~(uint)5 }' true)));
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoIntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoIntX,The following statement contains a magic number: IntX int2 = new IntX(5);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(6));
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrPositiveAndNegativeIntX,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrPositiveAndNegativeIntX,The following statement contains a magic number: IntX int2 = new IntX(5);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrPositiveAndNegativeIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(-6));
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoNegativeIntX,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoNegativeIntX,The following statement contains a magic number: IntX int2 = new IntX(-5);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoNegativeIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(6));
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrIntXAndZero,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 3' 5' uint.MaxValue }' false);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 3' 5' uint.MaxValue }' false);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 8' uint.MaxValue }' false);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 2' 13 }' false)));
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntX,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 2' 13 }' false)));
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntXOfDifferentLength,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 3' 5' uint.MaxValue' uint.MaxValue }' false);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntXOfDifferentLength,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 3' 5' uint.MaxValue' uint.MaxValue }' false);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntXOfDifferentLength,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 8' uint.MaxValue }' false);
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntXOfDifferentLength,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 2' 13' 0' uint.MaxValue }' false)));
Magic Number,IntXLib.Test,ExclusiveOrOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExclusiveOrOpTest.cs,ShouldExclusiveOrTwoBigIntXOfDifferentLength,The following statement contains a magic number: Assert.That(result' Is.EqualTo(new IntX(new uint[] { 2' 13' 0' uint.MaxValue }' false)));
Magic Number,IntXLib.Test,MultiThreadingTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MultiThreadingTest.cs,StartNewShiftMemoryCorruptionTask,The following statement contains a magic number: return Task.Factory.StartNew(  				() =>  					{  						IntX x = 1;  						for (int i = 0; i < 1000000; i++)  						{  							x <<= 63;  							x >>= 63;  							Assert.That(x == 1);  						}  					});
Magic Number,IntXLib.Test,MultiThreadingTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MultiThreadingTest.cs,StartNewShiftMemoryCorruptionTask,The following statement contains a magic number: return Task.Factory.StartNew(  				() =>  					{  						IntX x = 1;  						for (int i = 0; i < 1000000; i++)  						{  							x <<= 63;  							x >>= 63;  							Assert.That(x == 1);  						}  					});
Magic Number,IntXLib.Test,MultiThreadingTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MultiThreadingTest.cs,StartNewShiftMemoryCorruptionTask,The following statement contains a magic number: return Task.Factory.StartNew(  				() =>  					{  						IntX x = 1;  						for (int i = 0; i < 1000000; i++)  						{  							x <<= 63;  							x >>= 63;  							Assert.That(x == 1);  						}  					});
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 47668' 58687' 223234234' 42424242 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 47668' 58687' 223234234' 42424242 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 47668' 58687' 223234234' 42424242 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 47668' 58687' 223234234' 42424242 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 5674356' 34656476' 45667' 678645646 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 5674356' 34656476' 45667' 678645646 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 5674356' 34656476' 45667' 678645646 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 5674356' 34656476' 45667' 678645646 }' false);
Magic Number,IntXLib.Test,PerformanceTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PerformanceTest.cs,Multiply128BitNumbers,The following statement contains a magic number: TestHelper.Repeat(  				100000'  				delegate  					{  						IntX.Multiply(int1' int2' MultiplyMode.Classic);  					}  			);
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,AlphabetNull,The following statement contains a magic number: IntX.Parse(""' 20' null);
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,AlphabetShort,The following statement contains a magic number: IntX.Parse(""' 20' "1234");
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,AlphabetRepeatingChars,The following statement contains a magic number: IntX.Parse(""' 20' "0123456789ABCDEFGHIJ0");
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,Parse,The following statement contains a magic number: Assert.AreEqual(19 * 20 + 18' (int)IntX.Parse("JI"' 20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,Parse,The following statement contains a magic number: Assert.AreEqual(19 * 20 + 18' (int)IntX.Parse("JI"' 20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,Parse,The following statement contains a magic number: Assert.AreEqual(19 * 20 + 18' (int)IntX.Parse("JI"' 20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,Parse,The following statement contains a magic number: Assert.AreEqual(19 * 20 + 18' (int)IntX.Parse("JI"' 20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,ToStringTest,The following statement contains a magic number: Assert.AreEqual("JI"' new IntX(19 * 20 + 18).ToString(20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,ToStringTest,The following statement contains a magic number: Assert.AreEqual("JI"' new IntX(19 * 20 + 18).ToString(20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,ToStringTest,The following statement contains a magic number: Assert.AreEqual("JI"' new IntX(19 * 20 + 18).ToString(20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,CustomAlphabetTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\CustomAlphabetTest.cs,ToStringTest,The following statement contains a magic number: Assert.AreEqual("JI"' new IntX(19 * 20 + 18).ToString(20' "0123456789ABCDEFGHIJ"));
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToInt,The following statement contains a magic number: int n = 1234567890;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToInt,The following statement contains a magic number: n = 1234567890;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToUint,The following statement contains a magic number: uint n = 1234567890;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToUint,The following statement contains a magic number: n = 1234567890;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToLong,The following statement contains a magic number: long n = 1234567890123456789;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToLong,The following statement contains a magic number: uint un = 1234567890;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToLong,The following statement contains a magic number: n = (long)(un | (ulong)un << 32);
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToLong,The following statement contains a magic number: int ni = 1234567890;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToUlong,The following statement contains a magic number: ulong n = 1234567890123456789;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToUlong,The following statement contains a magic number: uint un = 1234567890;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToUlong,The following statement contains a magic number: n = un | (ulong)un << 32;
Magic Number,IntXLib.Test,ExplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ExplicitConvertOpTest.cs,ConvertToUshort,The following statement contains a magic number: ushort n = 12345;
Magic Number,IntXLib.Test,DivOpNewtonTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpNewtonTest.cs,GetRandomDigits,The following statement contains a magic number: digits2 = new uint[digits.Length / 2];
Magic Number,IntXLib.Test,DivOpNewtonTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpNewtonTest.cs,GetRandomDigits,The following statement contains a magic number: byte[] bytes = new byte[4];
Magic Number,IntXLib.Test,DivOpNewtonTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpNewtonTest.cs,CompareWithClassic,The following statement contains a magic number: TestHelper.Repeat(RepeatCount'  				delegate  				{  					IntX x = new IntX(GetAllOneDigits(_length)' true);  					IntX x2 = new IntX(GetAllOneDigits(_length / 2)' true);    					IntX classicMod' fastMod;  					IntX classic = IntX.DivideModulo(x' x2' out classicMod' DivideMode.Classic);  					IntX fast = IntX.DivideModulo(x' x2' out fastMod' DivideMode.AutoNewton);    					Assert.IsTrue(classic == fast);  					Assert.IsTrue(classicMod == fastMod);    					_length += LengthIncrement;  				});
Magic Number,IntXLib.Test,ConstructorTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ConstructorTest.cs,IntCtor,The following statement contains a magic number: new IntX(7);
Magic Number,IntXLib.Test,ConstructorTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ConstructorTest.cs,IntArrayCtor,The following statement contains a magic number: new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,ConstructorTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ConstructorTest.cs,IntArrayCtor,The following statement contains a magic number: new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Simple,The following statement contains a magic number: IntX int1 = 16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Simple,The following statement contains a magic number: IntX int2 = 5;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Simple,The following statement contains a magic number: Assert.IsTrue(int1 / int2 == 3);
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: IntX int1 = -16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: IntX int2 = 5;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: Assert.IsTrue(int1 / int2 == -3);
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: int1 = 16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: int2 = -5;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: Assert.IsTrue(int1 / int2 == -3);
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: int1 = -16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: int2 = -5;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Neg,The following statement contains a magic number: Assert.IsTrue(int1 / int2 == 3);
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: IntX int2 = 25;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int2 = -25;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int1 = 16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int2 = 25;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int1 = -16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int2 = 25;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int1 = 16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int2 = -25;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int1 = -16;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,Zero,The following statement contains a magic number: int2 = -25;
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,BigDec,The following statement contains a magic number: Assert.IsTrue(int1 / int2 == 1000);
Magic Number,IntXLib.Test,DivOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\DivOpTest.cs,BigDecNeg,The following statement contains a magic number: Assert.IsTrue(int1 / int2 == -1000);
Magic Number,IntXLib.Test,EqualsOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\EqualsOpTest.cs,Equals2IntX,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,EqualsOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\EqualsOpTest.cs,Equals2IntX,The following statement contains a magic number: IntX int2 = new IntX(8);
Magic Number,IntXLib.Test,EqualsOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\EqualsOpTest.cs,EqualsIntIntX,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,EqualsOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\EqualsOpTest.cs,EqualsIntIntX,The following statement contains a magic number: Assert.IsTrue(int1 == 8);
Magic Number,IntXLib.Test,EqualsOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\EqualsOpTest.cs,EqualsNullIntX,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,EqualsOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\EqualsOpTest.cs,Equals2IntXOp,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,EqualsOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\EqualsOpTest.cs,Equals2IntXOp,The following statement contains a magic number: IntX int2 = new IntX(8);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,Simple,The following statement contains a magic number: IntX int1 = new IntX(7);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,Simple,The following statement contains a magic number: IntX int2 = new IntX(8);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,SimpleFail,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,SimpleFail,The following statement contains a magic number: Assert.IsFalse(7 >= int1);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,Big,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,BigFail,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,Simple,The following statement contains a magic number: IntX int1 = new IntX(7);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,Simple,The following statement contains a magic number: IntX int2 = new IntX(8);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,SimpleFail,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,SimpleFail,The following statement contains a magic number: Assert.IsFalse(7 > int1);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,Big,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,BigFail,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,GreaterOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\GreaterOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,ImplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ImplicitConvertOpTest.cs,ConvertLong,The following statement contains a magic number: int1 = -123123123123;
Magic Number,IntXLib.Test,ImplicitConvertOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ImplicitConvertOpTest.cs,ConvertLong,The following statement contains a magic number: Assert.IsTrue(int1 == -123123123123);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,Simple,The following statement contains a magic number: IntX int1 = new IntX(7);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,Simple,The following statement contains a magic number: IntX int2 = new IntX(8);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,SimpleFail,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,SimpleFail,The following statement contains a magic number: Assert.IsFalse(int1 <= 7);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,Big,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,BigFail,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessEqOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessEqOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,Simple,The following statement contains a magic number: IntX int1 = new IntX(7);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,Simple,The following statement contains a magic number: IntX int2 = new IntX(8);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,SimpleFail,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,SimpleFail,The following statement contains a magic number: Assert.IsFalse(int1 < 7);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,Big,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,Big,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,BigFail,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2 }' false);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,BigFail,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,EqualValues,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,EqualValues,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 1' 2' 3 }' true);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,Neg,The following statement contains a magic number: IntX int1 = new IntX(-10);
Magic Number,IntXLib.Test,LessOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\LessOpTest.cs,Neg,The following statement contains a magic number: IntX int2 = new IntX(-2);
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Simple,The following statement contains a magic number: IntX int1 = 16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Simple,The following statement contains a magic number: IntX int2 = 5;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Neg,The following statement contains a magic number: IntX int1 = -16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Neg,The following statement contains a magic number: IntX int2 = 5;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Neg,The following statement contains a magic number: int1 = 16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Neg,The following statement contains a magic number: int2 = -5;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Neg,The following statement contains a magic number: int1 = -16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Neg,The following statement contains a magic number: int2 = -5;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: IntX int2 = 25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int2 = -25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int1 = 16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int2 = 25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(int1 % int2 == 16);
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int1 = -16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int2 = 25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(int1 % int2 == -16);
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int1 = 16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int2 = -25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(int1 % int2 == 16);
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int1 = -16;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int2 = -25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(int1 % int2 == -16);
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int1 = 50;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int2 = 25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int1 = -50;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Zero,The following statement contains a magic number: int2 = -25;
Magic Number,IntXLib.Test,ModOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ModOpTest.cs,Big,The following statement contains a magic number: IntX intM = new IntX(new uint[] {2' 0xffffffffU' 0x7fffffffU}' false);
Magic Number,IntXLib.Test,MulOpFhtTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpFhtTest.cs,GetRandomDigits,The following statement contains a magic number: digits[i] = (uint)random.Next() * 2U;
Magic Number,IntXLib.Test,MulOpFhtTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpFhtTest.cs,SmallLargeCompareWithClassic,The following statement contains a magic number: IntX x = new IntX(GetAllOneDigits(50000)' false);
Magic Number,IntXLib.Test,MulOpFhtTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpFhtTest.cs,SmallLargeCompareWithClassic,The following statement contains a magic number: IntX y = new IntX(GetAllOneDigits(512)' false);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,PureIntX,The following statement contains a magic number: Assert.AreEqual(new IntX(3) * new IntX(5)' new IntX(15));
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,PureIntX,The following statement contains a magic number: Assert.AreEqual(new IntX(3) * new IntX(5)' new IntX(15));
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,PureIntX,The following statement contains a magic number: Assert.AreEqual(new IntX(3) * new IntX(5)' new IntX(15));
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,PureIntXSign,The following statement contains a magic number: Assert.AreEqual(new IntX(-3) * new IntX(5)' new IntX(-15));
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,PureIntXSign,The following statement contains a magic number: Assert.AreEqual(new IntX(-3) * new IntX(5)' new IntX(-15));
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,PureIntXSign,The following statement contains a magic number: Assert.AreEqual(new IntX(-3) * new IntX(5)' new IntX(-15));
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,IntAndIntX,The following statement contains a magic number: Assert.IsTrue(new IntX(3) * 5 == 15);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,IntAndIntX,The following statement contains a magic number: Assert.IsTrue(new IntX(3) * 5 == 15);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,IntAndIntX,The following statement contains a magic number: Assert.IsTrue(new IntX(3) * 5 == 15);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(0 * new IntX(3) == 0);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,Big,The following statement contains a magic number: IntX intRes = new IntX(new uint[] { 1' 2' 1 }' false);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,Big2,The following statement contains a magic number: IntX int2   = new IntX(new uint[] { 2 }' false);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,Big2,The following statement contains a magic number: IntX intRes = new IntX(new uint[] { 2' 2 }' false);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,Big2,The following statement contains a magic number: IntX intRes = new IntX(new uint[] { 2' 2 }' false);
Magic Number,IntXLib.Test,MulOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\MulOpTest.cs,Performance,The following statement contains a magic number: i < 1000
Magic Number,IntXLib.Test,NormalizeTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\NormalizeTest.cs,Zero,The following statement contains a magic number: IntX int1 = new IntX(7) - 7;
Magic Number,IntXLib.Test,NormalizeTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\NormalizeTest.cs,Zero,The following statement contains a magic number: IntX int1 = new IntX(7) - 7;
Magic Number,IntXLib.Test,NormalizeTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\NormalizeTest.cs,Simple,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,NormalizeTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\NormalizeTest.cs,Simple,The following statement contains a magic number: Assert.IsTrue(int1 == 64);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,WhiteSpace,The following statement contains a magic number: Assert.IsTrue(int1 == 7);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,Sign,The following statement contains a magic number: Assert.IsTrue(int1 == -7);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,Sign,The following statement contains a magic number: Assert.IsTrue(int1 == 7);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,Base,The following statement contains a magic number: IntX int1 = IntX.Parse("abcdef"' 16);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,Base,The following statement contains a magic number: int1 = IntX.Parse("100"' 8);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,Base,The following statement contains a magic number: Assert.IsTrue(int1 == 64);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,Base,The following statement contains a magic number: Assert.IsTrue(int1 == 64);
Magic Number,IntXLib.Test,ParseTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ParseTest.cs,InvalidFormat3,The following statement contains a magic number: IntX.Parse("987"' 2);
Magic Number,IntXLib.Test,PowTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PowTest.cs,Simple,The following statement contains a magic number: Assert.IsTrue(IntX.Pow(intX' 17) == -1);
Magic Number,IntXLib.Test,PowTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PowTest.cs,Simple,The following statement contains a magic number: Assert.IsTrue(IntX.Pow(intX' 18) == 1);
Magic Number,IntXLib.Test,PowTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PowTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(IntX.Pow(intX' 77) == 0);
Magic Number,IntXLib.Test,PowTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PowTest.cs,PowOne,The following statement contains a magic number: Assert.IsTrue(IntX.Pow(7' 1) == 7);
Magic Number,IntXLib.Test,PowTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PowTest.cs,PowOne,The following statement contains a magic number: Assert.IsTrue(IntX.Pow(7' 1) == 7);
Magic Number,IntXLib.Test,PowTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PowTest.cs,Big,The following statement contains a magic number: Assert.AreEqual(IntX.Pow(2' 65).ToString()' "36893488147419103232");
Magic Number,IntXLib.Test,PowTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\PowTest.cs,Big,The following statement contains a magic number: Assert.AreEqual(IntX.Pow(2' 65).ToString()' "36893488147419103232");
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(int1 << 100 == 0);
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,Zero,The following statement contains a magic number: Assert.IsTrue(int1 >> 100 == 0);
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,SimpleAndNeg,The following statement contains a magic number: IntX int1 = new IntX(8);
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,SimpleAndNeg,The following statement contains a magic number: Assert.IsTrue(int1 << 0 == int1 >> 0 && int1 << 0 == 8);
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,SimpleAndNeg,The following statement contains a magic number: Assert.IsTrue(int1 << 32 == int1 >> -32 && int1 << 32 == new IntX(new uint[] { 0' 8 }' false));
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,SimpleAndNeg,The following statement contains a magic number: Assert.IsTrue(int1 << 32 == int1 >> -32 && int1 << 32 == new IntX(new uint[] { 0' 8 }' false));
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,SimpleAndNeg,The following statement contains a magic number: Assert.IsTrue(int1 << 32 == int1 >> -32 && int1 << 32 == new IntX(new uint[] { 0' 8 }' false));
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,SimpleAndNeg,The following statement contains a magic number: Assert.IsTrue(int1 << 32 == int1 >> -32 && int1 << 32 == new IntX(new uint[] { 0' 8 }' false));
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,Complex,The following statement contains a magic number: Assert.IsTrue((int1 << 4).ToString(16) == "808080808080800");
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,Complex,The following statement contains a magic number: Assert.IsTrue((int1 << 4).ToString(16) == "808080808080800");
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,Complex,The following statement contains a magic number: Assert.IsTrue(int1 >> 36 == 0x80808);
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,BigShift,The following statement contains a magic number: IntX int1 = 8;
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,BigShift,The following statement contains a magic number: Assert.IsTrue(int1 >> 777 == 0);
Magic Number,IntXLib.Test,ShiftOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ShiftOpTest.cs,MassiveShift,The following statement contains a magic number: i < 2000
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2IntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2IntX,The following statement contains a magic number: IntX int2 = new IntX(5);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2IntX,The following statement contains a magic number: Assert.IsTrue(int1 - int2 == -2);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2IntXNeg,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2IntXNeg,The following statement contains a magic number: IntX int2 = new IntX(-5);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2IntXNeg,The following statement contains a magic number: Assert.IsTrue(int1 - int2 == 2);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubIntIntX,The following statement contains a magic number: IntX intX = new IntX(3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubIntIntX,The following statement contains a magic number: Assert.IsTrue(intX - 5 == -2);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubIntIntX,The following statement contains a magic number: Assert.IsTrue(intX - 5 == -2);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubIntXInt,The following statement contains a magic number: IntX intX = new IntX(3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubIntXInt,The following statement contains a magic number: Assert.IsTrue(5 - intX == 2);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubIntXInt,The following statement contains a magic number: Assert.IsTrue(5 - intX == 2);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubNullIntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntX,The following statement contains a magic number: IntX int1 = new IntX(3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntX,The following statement contains a magic number: Assert.IsTrue(int1 - 0 == 3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntX,The following statement contains a magic number: Assert.IsTrue(0 - int1 == -3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntX,The following statement contains a magic number: Assert.IsTrue(int1 - new IntX() == 3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntX,The following statement contains a magic number: Assert.IsTrue(new IntX() - int1 == -3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntXNeg,The following statement contains a magic number: IntX int1 = new IntX(-3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntXNeg,The following statement contains a magic number: Assert.IsTrue(int1 - 0 == -3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntXNeg,The following statement contains a magic number: Assert.IsTrue(0 - int1 == 3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntXNeg,The following statement contains a magic number: Assert.IsTrue(int1 - new IntX() == -3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub0IntXNeg,The following statement contains a magic number: Assert.IsTrue(new IntX() - int1 == 3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' false);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int1 = new IntX(new uint[] { 1' 2' 3 }' false);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 3' 4' 5 }' false);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 3' 4' 5 }' false);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int2 = new IntX(new uint[] { 3' 4' 5 }' false);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 2' 2' 2 }' true);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 2' 2' 2 }' true);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntX,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 2' 2' 2 }' true);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,Sub2BigIntXC4,The following statement contains a magic number: IntX int3 = new IntX(new uint[] { 0' 1' 2' 1 }' false);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubAdd,The following statement contains a magic number: IntX int1 = new IntX(2);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubAdd,The following statement contains a magic number: IntX int2 = new IntX(-3);
Magic Number,IntXLib.Test,SubOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\SubOpTest.cs,SubAdd,The following statement contains a magic number: Assert.IsTrue(int1 - int2 == 5);
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,VerySimple,The following statement contains a magic number: IntX intX = new IntX(11);
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Simple,The following statement contains a magic number: IntX intX = new IntX(12345670);
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Binary,The following statement contains a magic number: IntX intX = new IntX(19);
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Binary,The following statement contains a magic number: Assert.AreEqual(intX.ToString(2)' "10011");
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Octal,The following statement contains a magic number: IntX intX = new IntX(100);
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Octal,The following statement contains a magic number: Assert.AreEqual(intX.ToString(8)' "144");
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Octal2,The following statement contains a magic number: IntX intX = new IntX(901);
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Octal2,The following statement contains a magic number: Assert.AreEqual(intX.ToString(8)' "1605");
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Octal3,The following statement contains a magic number: Assert.AreEqual(intX.ToString(8)' "20000000000");
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Octal3,The following statement contains a magic number: Assert.AreEqual(intX.ToString(8)' "40000000000");
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,Hex,The following statement contains a magic number: Assert.AreEqual(intX.ToString(16)' "ABCDEF");
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,HexLower,The following statement contains a magic number: Assert.AreEqual(intX.ToString(16' false)' "ff00ff00ff00ff");
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,OtherBase,The following statement contains a magic number: IntX intX = new IntX(-144);
Magic Number,IntXLib.Test,ToStringTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\ToStringTest.cs,OtherBase,The following statement contains a magic number: Assert.AreEqual(intX.ToString(140)' "-{1}{4}");
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,Plus,The following statement contains a magic number: IntX intX = 77;
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,Minus,The following statement contains a magic number: IntX intX = 77;
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,Minus,The following statement contains a magic number: Assert.IsTrue(-intX == -77);
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,PlusPlus,The following statement contains a magic number: IntX intX = 77;
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,PlusPlus,The following statement contains a magic number: Assert.IsTrue(intX++ == 77);
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,PlusPlus,The following statement contains a magic number: Assert.IsTrue(++intX == 79);
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,MinusMinus,The following statement contains a magic number: IntX intX = 77;
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,MinusMinus,The following statement contains a magic number: Assert.IsTrue(intX-- == 77);
Magic Number,IntXLib.Test,UnaryOpTest,D:\research\architectureSmells\repos\devoyster_IntXLib\IntXLib.Test\UnaryOpTest.cs,MinusMinus,The following statement contains a magic number: Assert.IsTrue(--intX == 75);
