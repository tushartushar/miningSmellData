Implementation smell,Namespace,Class,File,Method,Description
Long Method,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The method has 142 lines of code.
Long Method,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The method has 230 lines of code.
Long Method,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The method has 128 lines of code.
Complex Method,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,comboBox1_SelectedIndexChanged,Cyclomatic complexity of the method is 9
Complex Method,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,Cyclomatic complexity of the method is 12
Complex Method,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,setOwners,Cyclomatic complexity of the method is 17
Complex Method,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,Cyclomatic complexity of the method is 38
Complex Method,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,buttonAccess,Cyclomatic complexity of the method is 8
Complex Method,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,Cyclomatic complexity of the method is 9
Complex Method,Bardarbunga,OldGraphs,C:\repos\cbradley857_barda\Bardarbunga\OldGraphs.cs,loadGraph,Cyclomatic complexity of the method is 13
Long Parameter List,Bardarbunga,EqObject,C:\repos\cbradley857_barda\Bardarbunga\WebApi.cs,EqObject,The method has 8 parameters.
Long Statement,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,display3d,The length of the statement  "            string script = "function setParams($displayHours' $displaySize' $onlyVerified){$scope.graphDisplayHours = $displayHours; $scope.graphDisplayQuakeSize = $displaySize; $scope.graphDisplayOnlyVerified = $onlyVerified; graphFilterChange();}";" is 239.
Long Statement,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,display3d,The length of the statement  "            tempBrowser.Document.InvokeScript("setParams"' new object[] { displayHours' displaySize' onlyVerified });*///string script = "<script>function setParams($displayHours' $displaySize' $onlyVerified){$scope.graphDisplayHours = $displayHours; $scope.graphDisplayQuakeSize = $displaySize; $scope.graphDisplayOnlyVerified = $onlyVerified; graphFilterChange();}</script>"; " is 365.
Long Statement,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,reloadPage,The length of the statement  "	//string script = "alert(\"hello\");$scope.graphDisplayHours = " + 1 + ";$scope.graphDisplayQuakeSize = " + 1 + "; $scope.graphDisplayOnlyVerified = " + true + ";graphFilterChange();"; " is 184.
Long Statement,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,reloadPage,The length of the statement  "	//string script = "$(\"hoursSlider\").slider(\"value\"'" + onlyHours + "); $(\"magSlider\").slider(\"value\"'" + onlySize + "); graphFilterChange();alert(\"hello\");"; " is 167.
Long Statement,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The length of the statement  "			if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) { " is 202.
Long Statement,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The length of the statement  "			toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)"; " is 128.
Long Statement,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,button1_Click,The length of the statement  "		MessageBox.Show ("There is no data to show in the graph screen\nPlease try changing your settings in the main window"' "No Data To Show"); " is 138.
Long Statement,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,UpdateProgram,The length of the statement  "				if (MessageBox.Show ("Bardabunga Version " + newest + " is available to download. Visit download page now?\nDownload: http://www.ilikeducks.com/LampSim/bardarbunga.html"' "Update Available"' MessageBoxButtons.YesNo' MessageBoxIcon.Information) == DialogResult.Yes) { " is 266.
Long Statement,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,UpdateProgram,The length of the statement  "						MessageBox.Show ("Cannot open web page automatically on your system. Please download the update from http://ilikeducks.com/"' "Problem"); " is 137.
Long Statement,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The length of the statement  "			//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None); " is 158.
Long Statement,Bardarbunga,HistoryApi,C:\repos\cbradley857_barda\Bardarbunga\HistoryApi.cs,GetData,The length of the statement  "			equakeList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' (double.Parse (quality) == 99) ? "true" : "false")); " is 149.
Long Statement,Bardarbunga,HistoryApi,C:\repos\cbradley857_barda\Bardarbunga\HistoryApi.cs,getResponse,The length of the statement  "	string webAddress = "http://www.ilikeducks.com/LampSim/Historical/historical_json.php?startTime=" + startTime + "&endTime=" + endTime; " is 134.
Long Statement,Bardarbunga,Program,C:\repos\cbradley857_barda\Bardarbunga\Program.cs,currentDomain_UnhandledException,The length of the statement  "	MessageBox.Show ("Unhandled Error Occured. Program terminating.\nAn error report has been sent to the developer\n\nMessage: " + eObj.Message); " is 142.
Magic Number,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,webBrowser1_Navigated,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  //3D Bulge  case 0:  	display3d (sender);  	break;  //Advanced 3D Bulge  case 1:  	break;  //LocationMap  case 2:  	break;  }  
Magic Number,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,onMagValueChanged,The following statement contains a magic number: selectedValue = selectedValue / 10;  
Magic Number,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,comboBox1_SelectedIndexChanged,The following statement contains a magic number: switch (combo1.SelectedIndex) {  case 0:  	webControl1.Source = new Uri ("http://www.ilikeducks.com/LampSim/Barda/baering/3dbulge.html");  	break;  case 1:  	webControl1.Source = new Uri ("http://baering.github.io/earthquakes/visualization.html");  	break;  case 2:  	webControl1.Source = new Uri ("http://www.ilikeducks.com/LampSim/Barda/baering/3dbulge_map.html");  	break;  }  
Magic Number,Bardarbunga,DrumPlots,C:\repos\cbradley857_barda\Bardarbunga\DrumPlots.cs,radioButton3_checkChanged,The following statement contains a magic number: webControl1.Source = new Uri (plotLocations [2]);  
Magic Number,Bardarbunga,DrumPlots,C:\repos\cbradley857_barda\Bardarbunga\DrumPlots.cs,refreshCharts,The following statement contains a magic number: if (radioButton1.Checked) {  	webControl1.Source = new Uri (plotLocations [0]);  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton2.Checked) {  	webControl1.Source = new Uri (plotLocations [1]);  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = new Uri (plotLocations [2]);  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,DrumPlots,C:\repos\cbradley857_barda\Bardarbunga\DrumPlots.cs,refreshCharts,The following statement contains a magic number: if (radioButton2.Checked) {  	webControl1.Source = new Uri (plotLocations [1]);  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = new Uri (plotLocations [2]);  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,DrumPlots,C:\repos\cbradley857_barda\Bardarbunga\DrumPlots.cs,refreshCharts,The following statement contains a magic number: if (radioButton3.Checked) {  	webControl1.Source = new Uri (plotLocations [2]);  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,DrumPlots,C:\repos\cbradley857_barda\Bardarbunga\DrumPlots.cs,refreshCharts,The following statement contains a magic number: webControl1.Source = new Uri (plotLocations [2]);  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.ColumnCount = 9;  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [2].Name = "Direction";  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [3].Name = "Distance";  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [4].Name = "Volcano";  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [5].Name = "Quality";  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [6].Name = "Size";  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [7].Name = "Verified";  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [8].Name = "Long Ago";  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [6].DisplayIndex = 1;  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [8].DisplayIndex = 1;  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [6].DefaultCellStyle.Font = new Font (dataGridView1.Font' FontStyle.Bold);  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: dataGridView1.Columns [8].SortMode = DataGridViewColumnSortMode.NotSortable;  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,Form1,The following statement contains a magic number: for (int i = 0; i < 48; i++) {  	comboBox2.Items.Add (i + 1);  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		comboBox1.Enabled = false;  		comboBox2.Enabled = false;  		comboBox3.Enabled = false;  		button1.Enabled = false;  	});  	DataGridViewColumn sortColumn = dataGridView1.SortedColumn;  	ListSortDirection direction;  	if (dataGridView1.SortOrder == SortOrder.Ascending)  		direction = ListSortDirection.Ascending;  	else  		direction = ListSortDirection.Descending;  	Invoke ((MethodInvoker)delegate () {  		getTime ();  	});  	//toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	});  	List<EqObject> lastCheck = equakes;  	DateTime lastDate = new DateTime (1970' 1' 1);  	if (equakes.Count > 0)  		lastDate = equakes [equakes.Count - 1].date;  	equakes.Clear ();  	WebApi web = new WebApi ();  	equakes = web.GetData ();  	foreach (EqObject q in equakes) {  		if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  			//Play sound  			System.Media.SystemSounds.Asterisk.Play ();  			notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  		}  	}  	//Clear Grid  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  	});  	//List<EqObject> tempList = new List<EqObject>();  	//tempList = equakes;  	//tempList.Reverse();  	double minSize = double.Parse (Properties.Settings.Default ["minSize"].ToString ()' new CultureInfo ("en-GB"));  	foreach (EqObject eq in equakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)";  	});  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Done     Last Checked: " + DateTime.Now.ToString ("h:mm:ss tt");  	});  	if (sortColumn != null) {  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Sort (sortColumn' direction);  		});  	}  	Invoke ((MethodInvoker)delegate () {  		label6.Text = "Quakes: " + (dataGridView1.Rows.Count);  	});  	Properties.Settings.Default.lastTime = equakes [equakes.Count - 1].date;  	Properties.Settings.Default.Save ();  }  catch (Exception e) {  	try {  		Invoke ((MethodInvoker)delegate () {  			toolStripStatusLabel1.Text = "Status: Network Error (Click for more detail)";  			networkErrorMessage = "Error Message:" + e.Message;  		});  	}  	catch (Exception error) {  		Console.WriteLine ("Error-: " + error.Message);  	}  	Console.WriteLine ("Error-: " + e.Message);  	try {  		WebRequest request = WebRequest.Create ("http://ilikeducks.com/LampSim/bugReport.php?eMessage=" + e.Message);  		WebResponse response = request.GetResponse ();  	}  	catch (Exception error) {  		Console.WriteLine (error.Message);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		comboBox1.Enabled = false;  		comboBox2.Enabled = false;  		comboBox3.Enabled = false;  		button1.Enabled = false;  	});  	DataGridViewColumn sortColumn = dataGridView1.SortedColumn;  	ListSortDirection direction;  	if (dataGridView1.SortOrder == SortOrder.Ascending)  		direction = ListSortDirection.Ascending;  	else  		direction = ListSortDirection.Descending;  	Invoke ((MethodInvoker)delegate () {  		getTime ();  	});  	//toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	});  	List<EqObject> lastCheck = equakes;  	DateTime lastDate = new DateTime (1970' 1' 1);  	if (equakes.Count > 0)  		lastDate = equakes [equakes.Count - 1].date;  	equakes.Clear ();  	WebApi web = new WebApi ();  	equakes = web.GetData ();  	foreach (EqObject q in equakes) {  		if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  			//Play sound  			System.Media.SystemSounds.Asterisk.Play ();  			notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  		}  	}  	//Clear Grid  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  	});  	//List<EqObject> tempList = new List<EqObject>();  	//tempList = equakes;  	//tempList.Reverse();  	double minSize = double.Parse (Properties.Settings.Default ["minSize"].ToString ()' new CultureInfo ("en-GB"));  	foreach (EqObject eq in equakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)";  	});  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Done     Last Checked: " + DateTime.Now.ToString ("h:mm:ss tt");  	});  	if (sortColumn != null) {  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Sort (sortColumn' direction);  		});  	}  	Invoke ((MethodInvoker)delegate () {  		label6.Text = "Quakes: " + (dataGridView1.Rows.Count);  	});  	Properties.Settings.Default.lastTime = equakes [equakes.Count - 1].date;  	Properties.Settings.Default.Save ();  }  catch (Exception e) {  	try {  		Invoke ((MethodInvoker)delegate () {  			toolStripStatusLabel1.Text = "Status: Network Error (Click for more detail)";  			networkErrorMessage = "Error Message:" + e.Message;  		});  	}  	catch (Exception error) {  		Console.WriteLine ("Error-: " + error.Message);  	}  	Console.WriteLine ("Error-: " + e.Message);  	try {  		WebRequest request = WebRequest.Create ("http://ilikeducks.com/LampSim/bugReport.php?eMessage=" + e.Message);  		WebResponse response = request.GetResponse ();  	}  	catch (Exception error) {  		Console.WriteLine (error.Message);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		comboBox1.Enabled = false;  		comboBox2.Enabled = false;  		comboBox3.Enabled = false;  		button1.Enabled = false;  	});  	DataGridViewColumn sortColumn = dataGridView1.SortedColumn;  	ListSortDirection direction;  	if (dataGridView1.SortOrder == SortOrder.Ascending)  		direction = ListSortDirection.Ascending;  	else  		direction = ListSortDirection.Descending;  	Invoke ((MethodInvoker)delegate () {  		getTime ();  	});  	//toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	});  	List<EqObject> lastCheck = equakes;  	DateTime lastDate = new DateTime (1970' 1' 1);  	if (equakes.Count > 0)  		lastDate = equakes [equakes.Count - 1].date;  	equakes.Clear ();  	WebApi web = new WebApi ();  	equakes = web.GetData ();  	foreach (EqObject q in equakes) {  		if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  			//Play sound  			System.Media.SystemSounds.Asterisk.Play ();  			notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  		}  	}  	//Clear Grid  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  	});  	//List<EqObject> tempList = new List<EqObject>();  	//tempList = equakes;  	//tempList.Reverse();  	double minSize = double.Parse (Properties.Settings.Default ["minSize"].ToString ()' new CultureInfo ("en-GB"));  	foreach (EqObject eq in equakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)";  	});  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Done     Last Checked: " + DateTime.Now.ToString ("h:mm:ss tt");  	});  	if (sortColumn != null) {  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Sort (sortColumn' direction);  		});  	}  	Invoke ((MethodInvoker)delegate () {  		label6.Text = "Quakes: " + (dataGridView1.Rows.Count);  	});  	Properties.Settings.Default.lastTime = equakes [equakes.Count - 1].date;  	Properties.Settings.Default.Save ();  }  catch (Exception e) {  	try {  		Invoke ((MethodInvoker)delegate () {  			toolStripStatusLabel1.Text = "Status: Network Error (Click for more detail)";  			networkErrorMessage = "Error Message:" + e.Message;  		});  	}  	catch (Exception error) {  		Console.WriteLine ("Error-: " + error.Message);  	}  	Console.WriteLine ("Error-: " + e.Message);  	try {  		WebRequest request = WebRequest.Create ("http://ilikeducks.com/LampSim/bugReport.php?eMessage=" + e.Message);  		WebResponse response = request.GetResponse ();  	}  	catch (Exception error) {  		Console.WriteLine (error.Message);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		comboBox1.Enabled = false;  		comboBox2.Enabled = false;  		comboBox3.Enabled = false;  		button1.Enabled = false;  	});  	DataGridViewColumn sortColumn = dataGridView1.SortedColumn;  	ListSortDirection direction;  	if (dataGridView1.SortOrder == SortOrder.Ascending)  		direction = ListSortDirection.Ascending;  	else  		direction = ListSortDirection.Descending;  	Invoke ((MethodInvoker)delegate () {  		getTime ();  	});  	//toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	});  	List<EqObject> lastCheck = equakes;  	DateTime lastDate = new DateTime (1970' 1' 1);  	if (equakes.Count > 0)  		lastDate = equakes [equakes.Count - 1].date;  	equakes.Clear ();  	WebApi web = new WebApi ();  	equakes = web.GetData ();  	foreach (EqObject q in equakes) {  		if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  			//Play sound  			System.Media.SystemSounds.Asterisk.Play ();  			notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  		}  	}  	//Clear Grid  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  	});  	//List<EqObject> tempList = new List<EqObject>();  	//tempList = equakes;  	//tempList.Reverse();  	double minSize = double.Parse (Properties.Settings.Default ["minSize"].ToString ()' new CultureInfo ("en-GB"));  	foreach (EqObject eq in equakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)";  	});  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Done     Last Checked: " + DateTime.Now.ToString ("h:mm:ss tt");  	});  	if (sortColumn != null) {  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Sort (sortColumn' direction);  		});  	}  	Invoke ((MethodInvoker)delegate () {  		label6.Text = "Quakes: " + (dataGridView1.Rows.Count);  	});  	Properties.Settings.Default.lastTime = equakes [equakes.Count - 1].date;  	Properties.Settings.Default.Save ();  }  catch (Exception e) {  	try {  		Invoke ((MethodInvoker)delegate () {  			toolStripStatusLabel1.Text = "Status: Network Error (Click for more detail)";  			networkErrorMessage = "Error Message:" + e.Message;  		});  	}  	catch (Exception error) {  		Console.WriteLine ("Error-: " + error.Message);  	}  	Console.WriteLine ("Error-: " + e.Message);  	try {  		WebRequest request = WebRequest.Create ("http://ilikeducks.com/LampSim/bugReport.php?eMessage=" + e.Message);  		WebResponse response = request.GetResponse ();  	}  	catch (Exception error) {  		Console.WriteLine (error.Message);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		comboBox1.Enabled = false;  		comboBox2.Enabled = false;  		comboBox3.Enabled = false;  		button1.Enabled = false;  	});  	DataGridViewColumn sortColumn = dataGridView1.SortedColumn;  	ListSortDirection direction;  	if (dataGridView1.SortOrder == SortOrder.Ascending)  		direction = ListSortDirection.Ascending;  	else  		direction = ListSortDirection.Descending;  	Invoke ((MethodInvoker)delegate () {  		getTime ();  	});  	//toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	});  	List<EqObject> lastCheck = equakes;  	DateTime lastDate = new DateTime (1970' 1' 1);  	if (equakes.Count > 0)  		lastDate = equakes [equakes.Count - 1].date;  	equakes.Clear ();  	WebApi web = new WebApi ();  	equakes = web.GetData ();  	foreach (EqObject q in equakes) {  		if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  			//Play sound  			System.Media.SystemSounds.Asterisk.Play ();  			notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  		}  	}  	//Clear Grid  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  	});  	//List<EqObject> tempList = new List<EqObject>();  	//tempList = equakes;  	//tempList.Reverse();  	double minSize = double.Parse (Properties.Settings.Default ["minSize"].ToString ()' new CultureInfo ("en-GB"));  	foreach (EqObject eq in equakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)";  	});  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Done     Last Checked: " + DateTime.Now.ToString ("h:mm:ss tt");  	});  	if (sortColumn != null) {  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Sort (sortColumn' direction);  		});  	}  	Invoke ((MethodInvoker)delegate () {  		label6.Text = "Quakes: " + (dataGridView1.Rows.Count);  	});  	Properties.Settings.Default.lastTime = equakes [equakes.Count - 1].date;  	Properties.Settings.Default.Save ();  }  catch (Exception e) {  	try {  		Invoke ((MethodInvoker)delegate () {  			toolStripStatusLabel1.Text = "Status: Network Error (Click for more detail)";  			networkErrorMessage = "Error Message:" + e.Message;  		});  	}  	catch (Exception error) {  		Console.WriteLine ("Error-: " + error.Message);  	}  	Console.WriteLine ("Error-: " + e.Message);  	try {  		WebRequest request = WebRequest.Create ("http://ilikeducks.com/LampSim/bugReport.php?eMessage=" + e.Message);  		WebResponse response = request.GetResponse ();  	}  	catch (Exception error) {  		Console.WriteLine (error.Message);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		comboBox1.Enabled = false;  		comboBox2.Enabled = false;  		comboBox3.Enabled = false;  		button1.Enabled = false;  	});  	DataGridViewColumn sortColumn = dataGridView1.SortedColumn;  	ListSortDirection direction;  	if (dataGridView1.SortOrder == SortOrder.Ascending)  		direction = ListSortDirection.Ascending;  	else  		direction = ListSortDirection.Descending;  	Invoke ((MethodInvoker)delegate () {  		getTime ();  	});  	//toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	});  	List<EqObject> lastCheck = equakes;  	DateTime lastDate = new DateTime (1970' 1' 1);  	if (equakes.Count > 0)  		lastDate = equakes [equakes.Count - 1].date;  	equakes.Clear ();  	WebApi web = new WebApi ();  	equakes = web.GetData ();  	foreach (EqObject q in equakes) {  		if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  			//Play sound  			System.Media.SystemSounds.Asterisk.Play ();  			notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  		}  	}  	//Clear Grid  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  	});  	//List<EqObject> tempList = new List<EqObject>();  	//tempList = equakes;  	//tempList.Reverse();  	double minSize = double.Parse (Properties.Settings.Default ["minSize"].ToString ()' new CultureInfo ("en-GB"));  	foreach (EqObject eq in equakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)";  	});  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Done     Last Checked: " + DateTime.Now.ToString ("h:mm:ss tt");  	});  	if (sortColumn != null) {  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Sort (sortColumn' direction);  		});  	}  	Invoke ((MethodInvoker)delegate () {  		label6.Text = "Quakes: " + (dataGridView1.Rows.Count);  	});  	Properties.Settings.Default.lastTime = equakes [equakes.Count - 1].date;  	Properties.Settings.Default.Save ();  }  catch (Exception e) {  	try {  		Invoke ((MethodInvoker)delegate () {  			toolStripStatusLabel1.Text = "Status: Network Error (Click for more detail)";  			networkErrorMessage = "Error Message:" + e.Message;  		});  	}  	catch (Exception error) {  		Console.WriteLine ("Error-: " + error.Message);  	}  	Console.WriteLine ("Error-: " + e.Message);  	try {  		WebRequest request = WebRequest.Create ("http://ilikeducks.com/LampSim/bugReport.php?eMessage=" + e.Message);  		WebResponse response = request.GetResponse ();  	}  	catch (Exception error) {  		Console.WriteLine (error.Message);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		comboBox1.Enabled = false;  		comboBox2.Enabled = false;  		comboBox3.Enabled = false;  		button1.Enabled = false;  	});  	DataGridViewColumn sortColumn = dataGridView1.SortedColumn;  	ListSortDirection direction;  	if (dataGridView1.SortOrder == SortOrder.Ascending)  		direction = ListSortDirection.Ascending;  	else  		direction = ListSortDirection.Descending;  	Invoke ((MethodInvoker)delegate () {  		getTime ();  	});  	//toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Checking for Quakes";  	});  	List<EqObject> lastCheck = equakes;  	DateTime lastDate = new DateTime (1970' 1' 1);  	if (equakes.Count > 0)  		lastDate = equakes [equakes.Count - 1].date;  	equakes.Clear ();  	WebApi web = new WebApi ();  	equakes = web.GetData ();  	foreach (EqObject q in equakes) {  		if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  			//Play sound  			System.Media.SystemSounds.Asterisk.Play ();  			notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  		}  	}  	//Clear Grid  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  	});  	//List<EqObject> tempList = new List<EqObject>();  	//tempList = equakes;  	//tempList.Reverse();  	double minSize = double.Parse (Properties.Settings.Default ["minSize"].ToString ()' new CultureInfo ("en-GB"));  	foreach (EqObject eq in equakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel2.Text = "Showing past " + (int.Parse (Properties.Settings.Default ["hours"].ToString ()) + 1) + " hour(s)";  	});  	Invoke ((MethodInvoker)delegate () {  		toolStripStatusLabel1.Text = "Status: Done     Last Checked: " + DateTime.Now.ToString ("h:mm:ss tt");  	});  	if (sortColumn != null) {  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Sort (sortColumn' direction);  		});  	}  	Invoke ((MethodInvoker)delegate () {  		label6.Text = "Quakes: " + (dataGridView1.Rows.Count);  	});  	Properties.Settings.Default.lastTime = equakes [equakes.Count - 1].date;  	Properties.Settings.Default.Save ();  }  catch (Exception e) {  	try {  		Invoke ((MethodInvoker)delegate () {  			toolStripStatusLabel1.Text = "Status: Network Error (Click for more detail)";  			networkErrorMessage = "Error Message:" + e.Message;  		});  	}  	catch (Exception error) {  		Console.WriteLine ("Error-: " + error.Message);  	}  	Console.WriteLine ("Error-: " + e.Message);  	try {  		WebRequest request = WebRequest.Create ("http://ilikeducks.com/LampSim/bugReport.php?eMessage=" + e.Message);  		WebResponse response = request.GetResponse ();  	}  	catch (Exception error) {  		Console.WriteLine (error.Message);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: foreach (EqObject q in equakes) {  	if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  		//Play sound  		System.Media.SystemSounds.Asterisk.Play ();  		notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (q.date > Properties.Settings.Default.lastTime && double.Parse (q.size' new CultureInfo ("en-GB")) >= double.Parse (Properties.Settings.Default ["minAlert"].ToString ()' new CultureInfo ("en-GB"))) {  	//Play sound  	System.Media.SystemSounds.Asterisk.Play ();  	notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: notifyIcon1.ShowBalloonTip (2000' "New Quake"' "Magnitude " + q.size' ToolTipIcon.Info);  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: foreach (EqObject eq in equakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: foreach (EqObject eq in equakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: foreach (EqObject eq in equakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: foreach (EqObject eq in equakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: foreach (EqObject eq in equakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minSize) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,refreshCode,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,onResizeLayout,The following statement contains a magic number: if (FormWindowState.Minimized == this.WindowState) {  	notifyIcon1.ShowBalloonTip (1000' "Minimized to Tray"' "Click here to show"' ToolTipIcon.Info);  	this.Hide ();  }  else if (FormWindowState.Normal == this.WindowState) {  }  
Magic Number,Bardarbunga,Form1,C:\repos\cbradley857_barda\Bardarbunga\Form1.cs,onResizeLayout,The following statement contains a magic number: notifyIcon1.ShowBalloonTip (1000' "Minimized to Tray"' "Click here to show"' ToolTipIcon.Info);  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (quakeList.Count != 0) {  	if (graphType == GraphType.realTime) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  		/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  		DateTime startDate = quakeList [0].date;  		DateTime lastDate = quakeList [quakeList.Count - 1].date;  		//Populate X Axis Date Labels  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Magnitude";  		chart1.Series ["main"].XValueType = ChartValueType.DateTime;  		chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  		chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  		chart1.ChartAreas [0].AxisX.Interval = 1;  		chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  		chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  		chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Name = "Time";  		chart1.Series ["main"].ChartType = SeriesChartType.Line;  		chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  		chart1.Series ["main"].MarkerSize = 5;  		for (int i = 0; i < times.Length; i++) {  			if (mag [i] > Properties.Settings.Default.minSize) {  				chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  				chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  			}  		}  		chart1.Legends.Clear ();  		/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  	else if (graphType == GraphType.totalPerHour) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		chart1.Series.Add ("main");  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.Column;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			//Create bar.  			chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  			//Generate tooltip string  			String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  			//Set tooltop  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  		}  	}  	else if (graphType == GraphType.splitHours) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.StackedColumn;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  				//Totals for each size  				double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  				if (currentSize < 1) {  					if (total0.ContainsKey (roundedTime))  						total0 [roundedTime]++;  					else  						total0.Add (roundedTime' 1);  				}  				else if (currentSize < 2) {  					if (total1.ContainsKey (roundedTime))  						total1 [roundedTime]++;  					else  						total1.Add (roundedTime' 1);  				}  				else if (currentSize < 3) {  					if (total2.ContainsKey (roundedTime))  						total2 [roundedTime]++;  					else  						total2.Add (roundedTime' 1);  				}  				else if (currentSize < 4) {  					if (total3.ContainsKey (roundedTime))  						total3 [roundedTime]++;  					else  						total3.Add (roundedTime' 1);  				}  				else if (currentSize < 5) {  					if (total4.ContainsKey (roundedTime))  						total4 [roundedTime]++;  					else  						total4.Add (roundedTime' 1);  				}  				else if (currentSize >= 5) {  					if (total5.ContainsKey (roundedTime))  						total5 [roundedTime]++;  					else  						total5.Add (roundedTime' 1);  				}  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  			chart1.Series.Add (sName);  			if (total0.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  			}  			if (total1.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  			}  			if (total2.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  			}  			if (total3.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  			}  			if (total4.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  			}  			if (total5.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  			}  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (quakeList.Count != 0) {  	if (graphType == GraphType.realTime) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  		/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  		DateTime startDate = quakeList [0].date;  		DateTime lastDate = quakeList [quakeList.Count - 1].date;  		//Populate X Axis Date Labels  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Magnitude";  		chart1.Series ["main"].XValueType = ChartValueType.DateTime;  		chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  		chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  		chart1.ChartAreas [0].AxisX.Interval = 1;  		chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  		chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  		chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Name = "Time";  		chart1.Series ["main"].ChartType = SeriesChartType.Line;  		chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  		chart1.Series ["main"].MarkerSize = 5;  		for (int i = 0; i < times.Length; i++) {  			if (mag [i] > Properties.Settings.Default.minSize) {  				chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  				chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  			}  		}  		chart1.Legends.Clear ();  		/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  	else if (graphType == GraphType.totalPerHour) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		chart1.Series.Add ("main");  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.Column;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			//Create bar.  			chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  			//Generate tooltip string  			String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  			//Set tooltop  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  		}  	}  	else if (graphType == GraphType.splitHours) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.StackedColumn;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  				//Totals for each size  				double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  				if (currentSize < 1) {  					if (total0.ContainsKey (roundedTime))  						total0 [roundedTime]++;  					else  						total0.Add (roundedTime' 1);  				}  				else if (currentSize < 2) {  					if (total1.ContainsKey (roundedTime))  						total1 [roundedTime]++;  					else  						total1.Add (roundedTime' 1);  				}  				else if (currentSize < 3) {  					if (total2.ContainsKey (roundedTime))  						total2 [roundedTime]++;  					else  						total2.Add (roundedTime' 1);  				}  				else if (currentSize < 4) {  					if (total3.ContainsKey (roundedTime))  						total3 [roundedTime]++;  					else  						total3.Add (roundedTime' 1);  				}  				else if (currentSize < 5) {  					if (total4.ContainsKey (roundedTime))  						total4 [roundedTime]++;  					else  						total4.Add (roundedTime' 1);  				}  				else if (currentSize >= 5) {  					if (total5.ContainsKey (roundedTime))  						total5 [roundedTime]++;  					else  						total5.Add (roundedTime' 1);  				}  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  			chart1.Series.Add (sName);  			if (total0.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  			}  			if (total1.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  			}  			if (total2.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  			}  			if (total3.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  			}  			if (total4.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  			}  			if (total5.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  			}  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (quakeList.Count != 0) {  	if (graphType == GraphType.realTime) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  		/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  		DateTime startDate = quakeList [0].date;  		DateTime lastDate = quakeList [quakeList.Count - 1].date;  		//Populate X Axis Date Labels  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Magnitude";  		chart1.Series ["main"].XValueType = ChartValueType.DateTime;  		chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  		chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  		chart1.ChartAreas [0].AxisX.Interval = 1;  		chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  		chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  		chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Name = "Time";  		chart1.Series ["main"].ChartType = SeriesChartType.Line;  		chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  		chart1.Series ["main"].MarkerSize = 5;  		for (int i = 0; i < times.Length; i++) {  			if (mag [i] > Properties.Settings.Default.minSize) {  				chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  				chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  			}  		}  		chart1.Legends.Clear ();  		/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  	else if (graphType == GraphType.totalPerHour) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		chart1.Series.Add ("main");  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.Column;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			//Create bar.  			chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  			//Generate tooltip string  			String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  			//Set tooltop  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  		}  	}  	else if (graphType == GraphType.splitHours) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.StackedColumn;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  				//Totals for each size  				double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  				if (currentSize < 1) {  					if (total0.ContainsKey (roundedTime))  						total0 [roundedTime]++;  					else  						total0.Add (roundedTime' 1);  				}  				else if (currentSize < 2) {  					if (total1.ContainsKey (roundedTime))  						total1 [roundedTime]++;  					else  						total1.Add (roundedTime' 1);  				}  				else if (currentSize < 3) {  					if (total2.ContainsKey (roundedTime))  						total2 [roundedTime]++;  					else  						total2.Add (roundedTime' 1);  				}  				else if (currentSize < 4) {  					if (total3.ContainsKey (roundedTime))  						total3 [roundedTime]++;  					else  						total3.Add (roundedTime' 1);  				}  				else if (currentSize < 5) {  					if (total4.ContainsKey (roundedTime))  						total4 [roundedTime]++;  					else  						total4.Add (roundedTime' 1);  				}  				else if (currentSize >= 5) {  					if (total5.ContainsKey (roundedTime))  						total5 [roundedTime]++;  					else  						total5.Add (roundedTime' 1);  				}  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  			chart1.Series.Add (sName);  			if (total0.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  			}  			if (total1.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  			}  			if (total2.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  			}  			if (total3.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  			}  			if (total4.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  			}  			if (total5.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  			}  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (quakeList.Count != 0) {  	if (graphType == GraphType.realTime) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  		/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  		DateTime startDate = quakeList [0].date;  		DateTime lastDate = quakeList [quakeList.Count - 1].date;  		//Populate X Axis Date Labels  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Magnitude";  		chart1.Series ["main"].XValueType = ChartValueType.DateTime;  		chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  		chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  		chart1.ChartAreas [0].AxisX.Interval = 1;  		chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  		chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  		chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Name = "Time";  		chart1.Series ["main"].ChartType = SeriesChartType.Line;  		chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  		chart1.Series ["main"].MarkerSize = 5;  		for (int i = 0; i < times.Length; i++) {  			if (mag [i] > Properties.Settings.Default.minSize) {  				chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  				chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  			}  		}  		chart1.Legends.Clear ();  		/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  	else if (graphType == GraphType.totalPerHour) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		chart1.Series.Add ("main");  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.Column;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			//Create bar.  			chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  			//Generate tooltip string  			String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  			//Set tooltop  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  		}  	}  	else if (graphType == GraphType.splitHours) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.StackedColumn;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  				//Totals for each size  				double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  				if (currentSize < 1) {  					if (total0.ContainsKey (roundedTime))  						total0 [roundedTime]++;  					else  						total0.Add (roundedTime' 1);  				}  				else if (currentSize < 2) {  					if (total1.ContainsKey (roundedTime))  						total1 [roundedTime]++;  					else  						total1.Add (roundedTime' 1);  				}  				else if (currentSize < 3) {  					if (total2.ContainsKey (roundedTime))  						total2 [roundedTime]++;  					else  						total2.Add (roundedTime' 1);  				}  				else if (currentSize < 4) {  					if (total3.ContainsKey (roundedTime))  						total3 [roundedTime]++;  					else  						total3.Add (roundedTime' 1);  				}  				else if (currentSize < 5) {  					if (total4.ContainsKey (roundedTime))  						total4 [roundedTime]++;  					else  						total4.Add (roundedTime' 1);  				}  				else if (currentSize >= 5) {  					if (total5.ContainsKey (roundedTime))  						total5 [roundedTime]++;  					else  						total5.Add (roundedTime' 1);  				}  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  			chart1.Series.Add (sName);  			if (total0.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  			}  			if (total1.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  			}  			if (total2.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  			}  			if (total3.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  			}  			if (total4.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  			}  			if (total5.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  			}  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (quakeList.Count != 0) {  	if (graphType == GraphType.realTime) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  		/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  		DateTime startDate = quakeList [0].date;  		DateTime lastDate = quakeList [quakeList.Count - 1].date;  		//Populate X Axis Date Labels  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Magnitude";  		chart1.Series ["main"].XValueType = ChartValueType.DateTime;  		chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  		chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  		chart1.ChartAreas [0].AxisX.Interval = 1;  		chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  		chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  		chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Name = "Time";  		chart1.Series ["main"].ChartType = SeriesChartType.Line;  		chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  		chart1.Series ["main"].MarkerSize = 5;  		for (int i = 0; i < times.Length; i++) {  			if (mag [i] > Properties.Settings.Default.minSize) {  				chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  				chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  			}  		}  		chart1.Legends.Clear ();  		/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  	else if (graphType == GraphType.totalPerHour) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		chart1.Series.Add ("main");  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.Column;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			//Create bar.  			chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  			//Generate tooltip string  			String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  			//Set tooltop  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  		}  	}  	else if (graphType == GraphType.splitHours) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.StackedColumn;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  				//Totals for each size  				double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  				if (currentSize < 1) {  					if (total0.ContainsKey (roundedTime))  						total0 [roundedTime]++;  					else  						total0.Add (roundedTime' 1);  				}  				else if (currentSize < 2) {  					if (total1.ContainsKey (roundedTime))  						total1 [roundedTime]++;  					else  						total1.Add (roundedTime' 1);  				}  				else if (currentSize < 3) {  					if (total2.ContainsKey (roundedTime))  						total2 [roundedTime]++;  					else  						total2.Add (roundedTime' 1);  				}  				else if (currentSize < 4) {  					if (total3.ContainsKey (roundedTime))  						total3 [roundedTime]++;  					else  						total3.Add (roundedTime' 1);  				}  				else if (currentSize < 5) {  					if (total4.ContainsKey (roundedTime))  						total4 [roundedTime]++;  					else  						total4.Add (roundedTime' 1);  				}  				else if (currentSize >= 5) {  					if (total5.ContainsKey (roundedTime))  						total5 [roundedTime]++;  					else  						total5.Add (roundedTime' 1);  				}  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  			chart1.Series.Add (sName);  			if (total0.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  			}  			if (total1.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  			}  			if (total2.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  			}  			if (total3.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  			}  			if (total4.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  			}  			if (total5.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  			}  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (quakeList.Count != 0) {  	if (graphType == GraphType.realTime) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  		/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  		DateTime startDate = quakeList [0].date;  		DateTime lastDate = quakeList [quakeList.Count - 1].date;  		//Populate X Axis Date Labels  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  		//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Magnitude";  		chart1.Series ["main"].XValueType = ChartValueType.DateTime;  		chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  		chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  		chart1.ChartAreas [0].AxisX.Interval = 1;  		chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  		chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  		chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Name = "Time";  		chart1.Series ["main"].ChartType = SeriesChartType.Line;  		chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  		chart1.Series ["main"].MarkerSize = 5;  		for (int i = 0; i < times.Length; i++) {  			if (mag [i] > Properties.Settings.Default.minSize) {  				chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  				chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  			}  		}  		chart1.Legends.Clear ();  		/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  	else if (graphType == GraphType.totalPerHour) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		chart1.Series.Add ("main");  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.Column;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			//Create bar.  			chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  			//Generate tooltip string  			String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  			//Set tooltop  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  		}  	}  	else if (graphType == GraphType.splitHours) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.StackedColumn;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  		Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  				//Totals for each size  				double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  				if (currentSize < 1) {  					if (total0.ContainsKey (roundedTime))  						total0 [roundedTime]++;  					else  						total0.Add (roundedTime' 1);  				}  				else if (currentSize < 2) {  					if (total1.ContainsKey (roundedTime))  						total1 [roundedTime]++;  					else  						total1.Add (roundedTime' 1);  				}  				else if (currentSize < 3) {  					if (total2.ContainsKey (roundedTime))  						total2 [roundedTime]++;  					else  						total2.Add (roundedTime' 1);  				}  				else if (currentSize < 4) {  					if (total3.ContainsKey (roundedTime))  						total3 [roundedTime]++;  					else  						total3.Add (roundedTime' 1);  				}  				else if (currentSize < 5) {  					if (total4.ContainsKey (roundedTime))  						total4 [roundedTime]++;  					else  						total4.Add (roundedTime' 1);  				}  				else if (currentSize >= 5) {  					if (total5.ContainsKey (roundedTime))  						total5 [roundedTime]++;  					else  						total5.Add (roundedTime' 1);  				}  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  			chart1.Series.Add (sName);  			if (total0.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  			}  			if (total1.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  			}  			if (total2.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  			}  			if (total3.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  			}  			if (total4.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  			}  			if (total5.ContainsKey (key.Key)) {  				chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  				chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  			}  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.realTime) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  	/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  	DateTime startDate = quakeList [0].date;  	DateTime lastDate = quakeList [quakeList.Count - 1].date;  	//Populate X Axis Date Labels  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Magnitude";  	chart1.Series ["main"].XValueType = ChartValueType.DateTime;  	chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  	chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  	chart1.ChartAreas [0].AxisX.Interval = 1;  	chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  	chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  	chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Name = "Time";  	chart1.Series ["main"].ChartType = SeriesChartType.Line;  	chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  	chart1.Series ["main"].MarkerSize = 5;  	for (int i = 0; i < times.Length; i++) {  		if (mag [i] > Properties.Settings.Default.minSize) {  			chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  		}  	}  	chart1.Legends.Clear ();  	/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  else if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.realTime) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  	/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  	DateTime startDate = quakeList [0].date;  	DateTime lastDate = quakeList [quakeList.Count - 1].date;  	//Populate X Axis Date Labels  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Magnitude";  	chart1.Series ["main"].XValueType = ChartValueType.DateTime;  	chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  	chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  	chart1.ChartAreas [0].AxisX.Interval = 1;  	chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  	chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  	chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Name = "Time";  	chart1.Series ["main"].ChartType = SeriesChartType.Line;  	chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  	chart1.Series ["main"].MarkerSize = 5;  	for (int i = 0; i < times.Length; i++) {  		if (mag [i] > Properties.Settings.Default.minSize) {  			chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  		}  	}  	chart1.Legends.Clear ();  	/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  else if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.realTime) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  	/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  	DateTime startDate = quakeList [0].date;  	DateTime lastDate = quakeList [quakeList.Count - 1].date;  	//Populate X Axis Date Labels  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Magnitude";  	chart1.Series ["main"].XValueType = ChartValueType.DateTime;  	chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  	chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  	chart1.ChartAreas [0].AxisX.Interval = 1;  	chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  	chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  	chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Name = "Time";  	chart1.Series ["main"].ChartType = SeriesChartType.Line;  	chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  	chart1.Series ["main"].MarkerSize = 5;  	for (int i = 0; i < times.Length; i++) {  		if (mag [i] > Properties.Settings.Default.minSize) {  			chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  		}  	}  	chart1.Legends.Clear ();  	/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  else if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.realTime) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  	/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  	DateTime startDate = quakeList [0].date;  	DateTime lastDate = quakeList [quakeList.Count - 1].date;  	//Populate X Axis Date Labels  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Magnitude";  	chart1.Series ["main"].XValueType = ChartValueType.DateTime;  	chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  	chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  	chart1.ChartAreas [0].AxisX.Interval = 1;  	chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  	chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  	chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Name = "Time";  	chart1.Series ["main"].ChartType = SeriesChartType.Line;  	chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  	chart1.Series ["main"].MarkerSize = 5;  	for (int i = 0; i < times.Length; i++) {  		if (mag [i] > Properties.Settings.Default.minSize) {  			chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  		}  	}  	chart1.Legends.Clear ();  	/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  else if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.realTime) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  	/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  	DateTime startDate = quakeList [0].date;  	DateTime lastDate = quakeList [quakeList.Count - 1].date;  	//Populate X Axis Date Labels  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Magnitude";  	chart1.Series ["main"].XValueType = ChartValueType.DateTime;  	chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  	chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  	chart1.ChartAreas [0].AxisX.Interval = 1;  	chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  	chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  	chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Name = "Time";  	chart1.Series ["main"].ChartType = SeriesChartType.Line;  	chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  	chart1.Series ["main"].MarkerSize = 5;  	for (int i = 0; i < times.Length; i++) {  		if (mag [i] > Properties.Settings.Default.minSize) {  			chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  		}  	}  	chart1.Legends.Clear ();  	/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  else if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.realTime) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("All Quakes in past " + (Properties.Settings.Default.hours + 1) + " hour(s)");  	/*                     Series series = new Series();                     series.ChartType = SeriesChartType.FastLine;                      for(int i = 0; i < times.Length; i++)                     {                                               try                         {                             series = chart1.Series.Add(times[i].ToString());                         }catch(Exception e)                         {                             series = chart1.Series.Add(times[i].ToString() + "-1");                         }                          series.Points.Add(mag[i]);                     }                     */chart1.Series.Add ("main");  	DateTime startDate = quakeList [0].date;  	DateTime lastDate = quakeList [quakeList.Count - 1].date;  	//Populate X Axis Date Labels  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' startDate.ToLocalTime().ToString("h:mm tt")' 0' LabelMarkStyle.None);  	//chart1.ChartAreas[0].AxisX.CustomLabels.Add(startDate.ToOADate()' lastDate.ToOADate()' "Hello"' )  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Magnitude";  	chart1.Series ["main"].XValueType = ChartValueType.DateTime;  	chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  	chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  	chart1.ChartAreas [0].AxisX.Interval = 1;  	chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  	chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  	chart1.ChartAreas [0].AxisX.Minimum = startDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Maximum = lastDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Name = "Time";  	chart1.Series ["main"].ChartType = SeriesChartType.Line;  	chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  	chart1.Series ["main"].MarkerSize = 5;  	for (int i = 0; i < times.Length; i++) {  		if (mag [i] > Properties.Settings.Default.minSize) {  			chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  		}  	}  	chart1.Legends.Clear ();  	/*                     for(int i = 0; i < times.Length; i++)                     {                         try                         {                             chart1.Series["main"].Points.AddXY()                         }                         catch(Exception e)                         {                          }                     }                     */}  else if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: chart1.Series ["main"].MarkerSize = 5;  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime ().ToString ("hh tt");  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  else if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.splitHours) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.StackedColumn;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total0 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total1 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total2 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total3 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total4 = new Dictionary<DateTime' int> ();  	Dictionary<DateTime' int> total5 = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  			//Totals for each size  			double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  			if (currentSize < 1) {  				if (total0.ContainsKey (roundedTime))  					total0 [roundedTime]++;  				else  					total0.Add (roundedTime' 1);  			}  			else if (currentSize < 2) {  				if (total1.ContainsKey (roundedTime))  					total1 [roundedTime]++;  				else  					total1.Add (roundedTime' 1);  			}  			else if (currentSize < 3) {  				if (total2.ContainsKey (roundedTime))  					total2 [roundedTime]++;  				else  					total2.Add (roundedTime' 1);  			}  			else if (currentSize < 4) {  				if (total3.ContainsKey (roundedTime))  					total3 [roundedTime]++;  				else  					total3.Add (roundedTime' 1);  			}  			else if (currentSize < 5) {  				if (total4.ContainsKey (roundedTime))  					total4 [roundedTime]++;  				else  					total4.Add (roundedTime' 1);  			}  			else if (currentSize >= 5) {  				if (total5.ContainsKey (roundedTime))  					total5 [roundedTime]++;  				else  					total5.Add (roundedTime' 1);  			}  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		/*                         //Create bar.                         chart1.Series["main"].Points.AddXY(key.Key.ToLocalTime()' key.Value);                         //Generate tooltip string                         String toolTipString = "Total: " + key.Value + "\nHour: " + key.Key.ToLocalTime().ToString("hh tt");                         //Set tooltop                         chart1.Series["main"].Points[chart1.Series["main"].Points.Count - 1].ToolTip = toolTipString;                          * */string sName = key.Key.ToLocalTime ().ToString ();  		chart1.Series.Add (sName);  		if (total0.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total0 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.LightBlue;  		}  		if (total1.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total1 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Blue;  		}  		if (total2.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total2 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Yellow;  		}  		if (total3.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total3 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Orange;  		}  		if (total4.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total4 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Red;  		}  		if (total5.ContainsKey (key.Key)) {  			chart1.Series [sName].Points.AddXY (key.Key.ToLocalTime ()' total5 [key.Key]);  			chart1.Series [sName].Points [chart1.Series [sName].Points.Count - 1].Color = Color.Purple;  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: foreach (EqObject e in quakeList) {  	if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  		//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  		DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  		if (totals.ContainsKey (roundedTime))  			totals [roundedTime]++;  		else  			totals.Add (roundedTime' 1);  		//Totals for each size  		double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  		if (currentSize < 1) {  			if (total0.ContainsKey (roundedTime))  				total0 [roundedTime]++;  			else  				total0.Add (roundedTime' 1);  		}  		else if (currentSize < 2) {  			if (total1.ContainsKey (roundedTime))  				total1 [roundedTime]++;  			else  				total1.Add (roundedTime' 1);  		}  		else if (currentSize < 3) {  			if (total2.ContainsKey (roundedTime))  				total2 [roundedTime]++;  			else  				total2.Add (roundedTime' 1);  		}  		else if (currentSize < 4) {  			if (total3.ContainsKey (roundedTime))  				total3 [roundedTime]++;  			else  				total3.Add (roundedTime' 1);  		}  		else if (currentSize < 5) {  			if (total4.ContainsKey (roundedTime))  				total4 [roundedTime]++;  			else  				total4.Add (roundedTime' 1);  		}  		else if (currentSize >= 5) {  			if (total5.ContainsKey (roundedTime))  				total5 [roundedTime]++;  			else  				total5.Add (roundedTime' 1);  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: foreach (EqObject e in quakeList) {  	if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  		//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  		DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  		if (totals.ContainsKey (roundedTime))  			totals [roundedTime]++;  		else  			totals.Add (roundedTime' 1);  		//Totals for each size  		double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  		if (currentSize < 1) {  			if (total0.ContainsKey (roundedTime))  				total0 [roundedTime]++;  			else  				total0.Add (roundedTime' 1);  		}  		else if (currentSize < 2) {  			if (total1.ContainsKey (roundedTime))  				total1 [roundedTime]++;  			else  				total1.Add (roundedTime' 1);  		}  		else if (currentSize < 3) {  			if (total2.ContainsKey (roundedTime))  				total2 [roundedTime]++;  			else  				total2.Add (roundedTime' 1);  		}  		else if (currentSize < 4) {  			if (total3.ContainsKey (roundedTime))  				total3 [roundedTime]++;  			else  				total3.Add (roundedTime' 1);  		}  		else if (currentSize < 5) {  			if (total4.ContainsKey (roundedTime))  				total4 [roundedTime]++;  			else  				total4.Add (roundedTime' 1);  		}  		else if (currentSize >= 5) {  			if (total5.ContainsKey (roundedTime))  				total5 [roundedTime]++;  			else  				total5.Add (roundedTime' 1);  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: foreach (EqObject e in quakeList) {  	if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  		//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  		DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  		if (totals.ContainsKey (roundedTime))  			totals [roundedTime]++;  		else  			totals.Add (roundedTime' 1);  		//Totals for each size  		double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  		if (currentSize < 1) {  			if (total0.ContainsKey (roundedTime))  				total0 [roundedTime]++;  			else  				total0.Add (roundedTime' 1);  		}  		else if (currentSize < 2) {  			if (total1.ContainsKey (roundedTime))  				total1 [roundedTime]++;  			else  				total1.Add (roundedTime' 1);  		}  		else if (currentSize < 3) {  			if (total2.ContainsKey (roundedTime))  				total2 [roundedTime]++;  			else  				total2.Add (roundedTime' 1);  		}  		else if (currentSize < 4) {  			if (total3.ContainsKey (roundedTime))  				total3 [roundedTime]++;  			else  				total3.Add (roundedTime' 1);  		}  		else if (currentSize < 5) {  			if (total4.ContainsKey (roundedTime))  				total4 [roundedTime]++;  			else  				total4.Add (roundedTime' 1);  		}  		else if (currentSize >= 5) {  			if (total5.ContainsKey (roundedTime))  				total5 [roundedTime]++;  			else  				total5.Add (roundedTime' 1);  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: foreach (EqObject e in quakeList) {  	if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  		//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  		DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  		if (totals.ContainsKey (roundedTime))  			totals [roundedTime]++;  		else  			totals.Add (roundedTime' 1);  		//Totals for each size  		double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  		if (currentSize < 1) {  			if (total0.ContainsKey (roundedTime))  				total0 [roundedTime]++;  			else  				total0.Add (roundedTime' 1);  		}  		else if (currentSize < 2) {  			if (total1.ContainsKey (roundedTime))  				total1 [roundedTime]++;  			else  				total1.Add (roundedTime' 1);  		}  		else if (currentSize < 3) {  			if (total2.ContainsKey (roundedTime))  				total2 [roundedTime]++;  			else  				total2.Add (roundedTime' 1);  		}  		else if (currentSize < 4) {  			if (total3.ContainsKey (roundedTime))  				total3 [roundedTime]++;  			else  				total3.Add (roundedTime' 1);  		}  		else if (currentSize < 5) {  			if (total4.ContainsKey (roundedTime))  				total4 [roundedTime]++;  			else  				total4.Add (roundedTime' 1);  		}  		else if (currentSize >= 5) {  			if (total5.ContainsKey (roundedTime))  				total5 [roundedTime]++;  			else  				total5.Add (roundedTime' 1);  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: foreach (EqObject e in quakeList) {  	if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  		//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  		DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  		if (totals.ContainsKey (roundedTime))  			totals [roundedTime]++;  		else  			totals.Add (roundedTime' 1);  		//Totals for each size  		double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  		if (currentSize < 1) {  			if (total0.ContainsKey (roundedTime))  				total0 [roundedTime]++;  			else  				total0.Add (roundedTime' 1);  		}  		else if (currentSize < 2) {  			if (total1.ContainsKey (roundedTime))  				total1 [roundedTime]++;  			else  				total1.Add (roundedTime' 1);  		}  		else if (currentSize < 3) {  			if (total2.ContainsKey (roundedTime))  				total2 [roundedTime]++;  			else  				total2.Add (roundedTime' 1);  		}  		else if (currentSize < 4) {  			if (total3.ContainsKey (roundedTime))  				total3 [roundedTime]++;  			else  				total3.Add (roundedTime' 1);  		}  		else if (currentSize < 5) {  			if (total4.ContainsKey (roundedTime))  				total4 [roundedTime]++;  			else  				total4.Add (roundedTime' 1);  		}  		else if (currentSize >= 5) {  			if (total5.ContainsKey (roundedTime))  				total5 [roundedTime]++;  			else  				total5.Add (roundedTime' 1);  		}  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  	//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  	DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  	if (totals.ContainsKey (roundedTime))  		totals [roundedTime]++;  	else  		totals.Add (roundedTime' 1);  	//Totals for each size  	double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  	if (currentSize < 1) {  		if (total0.ContainsKey (roundedTime))  			total0 [roundedTime]++;  		else  			total0.Add (roundedTime' 1);  	}  	else if (currentSize < 2) {  		if (total1.ContainsKey (roundedTime))  			total1 [roundedTime]++;  		else  			total1.Add (roundedTime' 1);  	}  	else if (currentSize < 3) {  		if (total2.ContainsKey (roundedTime))  			total2 [roundedTime]++;  		else  			total2.Add (roundedTime' 1);  	}  	else if (currentSize < 4) {  		if (total3.ContainsKey (roundedTime))  			total3 [roundedTime]++;  		else  			total3.Add (roundedTime' 1);  	}  	else if (currentSize < 5) {  		if (total4.ContainsKey (roundedTime))  			total4 [roundedTime]++;  		else  			total4.Add (roundedTime' 1);  	}  	else if (currentSize >= 5) {  		if (total5.ContainsKey (roundedTime))  			total5 [roundedTime]++;  		else  			total5.Add (roundedTime' 1);  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  	//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  	DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  	if (totals.ContainsKey (roundedTime))  		totals [roundedTime]++;  	else  		totals.Add (roundedTime' 1);  	//Totals for each size  	double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  	if (currentSize < 1) {  		if (total0.ContainsKey (roundedTime))  			total0 [roundedTime]++;  		else  			total0.Add (roundedTime' 1);  	}  	else if (currentSize < 2) {  		if (total1.ContainsKey (roundedTime))  			total1 [roundedTime]++;  		else  			total1.Add (roundedTime' 1);  	}  	else if (currentSize < 3) {  		if (total2.ContainsKey (roundedTime))  			total2 [roundedTime]++;  		else  			total2.Add (roundedTime' 1);  	}  	else if (currentSize < 4) {  		if (total3.ContainsKey (roundedTime))  			total3 [roundedTime]++;  		else  			total3.Add (roundedTime' 1);  	}  	else if (currentSize < 5) {  		if (total4.ContainsKey (roundedTime))  			total4 [roundedTime]++;  		else  			total4.Add (roundedTime' 1);  	}  	else if (currentSize >= 5) {  		if (total5.ContainsKey (roundedTime))  			total5 [roundedTime]++;  		else  			total5.Add (roundedTime' 1);  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  	//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  	DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  	if (totals.ContainsKey (roundedTime))  		totals [roundedTime]++;  	else  		totals.Add (roundedTime' 1);  	//Totals for each size  	double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  	if (currentSize < 1) {  		if (total0.ContainsKey (roundedTime))  			total0 [roundedTime]++;  		else  			total0.Add (roundedTime' 1);  	}  	else if (currentSize < 2) {  		if (total1.ContainsKey (roundedTime))  			total1 [roundedTime]++;  		else  			total1.Add (roundedTime' 1);  	}  	else if (currentSize < 3) {  		if (total2.ContainsKey (roundedTime))  			total2 [roundedTime]++;  		else  			total2.Add (roundedTime' 1);  	}  	else if (currentSize < 4) {  		if (total3.ContainsKey (roundedTime))  			total3 [roundedTime]++;  		else  			total3.Add (roundedTime' 1);  	}  	else if (currentSize < 5) {  		if (total4.ContainsKey (roundedTime))  			total4 [roundedTime]++;  		else  			total4.Add (roundedTime' 1);  	}  	else if (currentSize >= 5) {  		if (total5.ContainsKey (roundedTime))  			total5 [roundedTime]++;  		else  			total5.Add (roundedTime' 1);  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  	//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  	DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  	if (totals.ContainsKey (roundedTime))  		totals [roundedTime]++;  	else  		totals.Add (roundedTime' 1);  	//Totals for each size  	double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  	if (currentSize < 1) {  		if (total0.ContainsKey (roundedTime))  			total0 [roundedTime]++;  		else  			total0.Add (roundedTime' 1);  	}  	else if (currentSize < 2) {  		if (total1.ContainsKey (roundedTime))  			total1 [roundedTime]++;  		else  			total1.Add (roundedTime' 1);  	}  	else if (currentSize < 3) {  		if (total2.ContainsKey (roundedTime))  			total2 [roundedTime]++;  		else  			total2.Add (roundedTime' 1);  	}  	else if (currentSize < 4) {  		if (total3.ContainsKey (roundedTime))  			total3 [roundedTime]++;  		else  			total3.Add (roundedTime' 1);  	}  	else if (currentSize < 5) {  		if (total4.ContainsKey (roundedTime))  			total4 [roundedTime]++;  		else  			total4.Add (roundedTime' 1);  	}  	else if (currentSize >= 5) {  		if (total5.ContainsKey (roundedTime))  			total5 [roundedTime]++;  		else  			total5.Add (roundedTime' 1);  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  	//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  	DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  	if (totals.ContainsKey (roundedTime))  		totals [roundedTime]++;  	else  		totals.Add (roundedTime' 1);  	//Totals for each size  	double currentSize = double.Parse (e.size' new CultureInfo ("en-GB"));  	if (currentSize < 1) {  		if (total0.ContainsKey (roundedTime))  			total0 [roundedTime]++;  		else  			total0.Add (roundedTime' 1);  	}  	else if (currentSize < 2) {  		if (total1.ContainsKey (roundedTime))  			total1 [roundedTime]++;  		else  			total1.Add (roundedTime' 1);  	}  	else if (currentSize < 3) {  		if (total2.ContainsKey (roundedTime))  			total2 [roundedTime]++;  		else  			total2.Add (roundedTime' 1);  	}  	else if (currentSize < 4) {  		if (total3.ContainsKey (roundedTime))  			total3 [roundedTime]++;  		else  			total3.Add (roundedTime' 1);  	}  	else if (currentSize < 5) {  		if (total4.ContainsKey (roundedTime))  			total4 [roundedTime]++;  		else  			total4.Add (roundedTime' 1);  	}  	else if (currentSize >= 5) {  		if (total5.ContainsKey (roundedTime))  			total5 [roundedTime]++;  		else  			total5.Add (roundedTime' 1);  	}  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 1) {  	if (total0.ContainsKey (roundedTime))  		total0 [roundedTime]++;  	else  		total0.Add (roundedTime' 1);  }  else if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 1) {  	if (total0.ContainsKey (roundedTime))  		total0 [roundedTime]++;  	else  		total0.Add (roundedTime' 1);  }  else if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 1) {  	if (total0.ContainsKey (roundedTime))  		total0 [roundedTime]++;  	else  		total0.Add (roundedTime' 1);  }  else if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 1) {  	if (total0.ContainsKey (roundedTime))  		total0 [roundedTime]++;  	else  		total0.Add (roundedTime' 1);  }  else if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 1) {  	if (total0.ContainsKey (roundedTime))  		total0 [roundedTime]++;  	else  		total0.Add (roundedTime' 1);  }  else if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 2) {  	if (total1.ContainsKey (roundedTime))  		total1 [roundedTime]++;  	else  		total1.Add (roundedTime' 1);  }  else if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 3) {  	if (total2.ContainsKey (roundedTime))  		total2 [roundedTime]++;  	else  		total2.Add (roundedTime' 1);  }  else if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 4) {  	if (total3.ContainsKey (roundedTime))  		total3 [roundedTime]++;  	else  		total3.Add (roundedTime' 1);  }  else if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize < 5) {  	if (total4.ContainsKey (roundedTime))  		total4 [roundedTime]++;  	else  		total4.Add (roundedTime' 1);  }  else if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,loadGraph,The following statement contains a magic number: if (currentSize >= 5) {  	if (total5.ContainsKey (roundedTime))  		total5 [roundedTime]++;  	else  		total5.Add (roundedTime' 1);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.ColumnCount = 9;  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [2].Name = "Direction";  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [3].Name = "Distance";  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [4].Name = "Volcano";  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [5].Name = "Quality";  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [6].Name = "Size";  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [7].Name = "Verified";  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [8].Name = "Long Ago";  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [6].DisplayIndex = 1;  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [8].DisplayIndex = 1;  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical,The following statement contains a magic number: dataGridView1.Columns [6].DefaultCellStyle.Font = new Font (dataGridView1.Font' FontStyle.Bold);  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical_Load,The following statement contains a magic number: for (int i = 1; i < 25; i++) {  	startHour.Items.Add (i);  	endHour.Items.Add (i);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical_Load,The following statement contains a magic number: startDatePicker.MinDate = new DateTime (2014' 9' 13);  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical_Load,The following statement contains a magic number: startDatePicker.MinDate = new DateTime (2014' 9' 13);  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,Historical_Load,The following statement contains a magic number: startDatePicker.MinDate = new DateTime (2014' 9' 13);  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: try {  	Invoke ((MethodInvoker)delegate () {  		button1.Enabled = false;  		button2.Enabled = false;  		toolStripStatusLabel1.Text = "Loading..";  	});  	if (earthquakes != null)  		earthquakes.Clear ();  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Clear ();  		sortColumn = dataGridView1.SortedColumn;  		if (dataGridView1.SortOrder == SortOrder.Ascending)  			sortDirection = ListSortDirection.Ascending;  		else  			sortDirection = ListSortDirection.Descending;  	});  	//Get Date and times  	DateTime startDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		startDate = startDatePicker.Value;  	});  	int hours = 0;  	Invoke ((MethodInvoker)delegate () {  		hours = startHour.SelectedIndex + 1;  	});  	startDate = startDate + new TimeSpan (hours' 0' 0);  	DateTime endDate = DateTime.Now;  	Invoke ((MethodInvoker)delegate () {  		endDate = endDatePicker.Value;  	});  	int endHours = 0;  	Invoke ((MethodInvoker)delegate () {  		endHours = endHour.SelectedIndex + 1;  	});  	endDate = endDate + new TimeSpan (endHours' 0' 0);  	Int32 startTimestamp = (Int32)(startDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	Int32 endTimestamp = (Int32)(endDate.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	HistoryApi history = new HistoryApi ();  	earthquakes = history.GetData (startTimestamp.ToString ()' endTimestamp.ToString ());  	double minMag = 0.0;  	Invoke ((MethodInvoker)delegate () {  		switch (comboBox1.SelectedIndex) {  		case 0:  			minMag = 0;  			break;  		case 1:  			minMag = 1;  			break;  		case 2:  			minMag = 2;  			break;  		case 3:  			minMag = 3;  			break;  		case 4:  			minMag = 4;  			break;  		case 5:  			minMag = 5;  			break;  		}  	});  	foreach (EqObject eq in earthquakes) {  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  			DataGridViewRow tempRow = new DataGridViewRow ();  			DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  			cellDateName.Value = eq.date.ToLocalTime ().ToString ();  			tempRow.Cells.Add (cellDateName);  			DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  			cellDepthName.Value = eq.depth;  			tempRow.Cells.Add (cellDepthName);  			DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  			cellDirectionName.Value = eq.direction;  			tempRow.Cells.Add (cellDirectionName);  			DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  			cellDistanceName.Value = eq.distance;  			tempRow.Cells.Add (cellDistanceName);  			DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  			cellVolcanoName.Value = eq.volcano;  			tempRow.Cells.Add (cellVolcanoName);  			DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  			cellQualityName.Value = eq.quality;  			tempRow.Cells.Add (cellQualityName);  			DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  			cellSizeName.Value = eq.size;  			tempRow.Cells.Add (cellSizeName);  			DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  			cellVerifiedName.Value = eq.verified;  			tempRow.Cells.Add (cellVerifiedName);  			DateTime now = DateTime.Now;  			Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  			int finalDiff = (int)Math.Round (difference);  			int totalHours = finalDiff / 60;  			int totalMins = finalDiff % 60;  			DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  			cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  			tempRow.Cells.Add (cellLongAgoName);  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows.Add (tempRow);  			});  			//dataGridView1.Rows.Add(tempRow);  			if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  				});  			else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  				Invoke ((MethodInvoker)delegate () {  					dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  				});  		}  	}  	if (sortColumn != null && sortDirection != null)  		dataGridView1.Sort (sortColumn' sortDirection);  }  catch (Exception e) {  	Console.WriteLine ("Exception: " + e.Message);  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: Invoke ((MethodInvoker)delegate () {  	switch (comboBox1.SelectedIndex) {  	case 0:  		minMag = 0;  		break;  	case 1:  		minMag = 1;  		break;  	case 2:  		minMag = 2;  		break;  	case 3:  		minMag = 3;  		break;  	case 4:  		minMag = 4;  		break;  	case 5:  		minMag = 5;  		break;  	}  });  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: minMag = 2;  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: minMag = 3;  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: minMag = 4;  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: minMag = 5;  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: foreach (EqObject eq in earthquakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: foreach (EqObject eq in earthquakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: foreach (EqObject eq in earthquakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: foreach (EqObject eq in earthquakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: foreach (EqObject eq in earthquakes) {  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  		DataGridViewRow tempRow = new DataGridViewRow ();  		DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  		cellDateName.Value = eq.date.ToLocalTime ().ToString ();  		tempRow.Cells.Add (cellDateName);  		DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  		cellDepthName.Value = eq.depth;  		tempRow.Cells.Add (cellDepthName);  		DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  		cellDirectionName.Value = eq.direction;  		tempRow.Cells.Add (cellDirectionName);  		DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  		cellDistanceName.Value = eq.distance;  		tempRow.Cells.Add (cellDistanceName);  		DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  		cellVolcanoName.Value = eq.volcano;  		tempRow.Cells.Add (cellVolcanoName);  		DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  		cellQualityName.Value = eq.quality;  		tempRow.Cells.Add (cellQualityName);  		DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  		cellSizeName.Value = eq.size;  		tempRow.Cells.Add (cellSizeName);  		DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  		cellVerifiedName.Value = eq.verified;  		tempRow.Cells.Add (cellVerifiedName);  		DateTime now = DateTime.Now;  		Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  		int finalDiff = (int)Math.Round (difference);  		int totalHours = finalDiff / 60;  		int totalMins = finalDiff % 60;  		DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  		cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  		tempRow.Cells.Add (cellLongAgoName);  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows.Add (tempRow);  		});  		//dataGridView1.Rows.Add(tempRow);  		if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  			});  		else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  			Invoke ((MethodInvoker)delegate () {  				dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  			});  	}  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= minMag) {  	DataGridViewRow tempRow = new DataGridViewRow ();  	DataGridViewCell cellDateName = new DataGridViewTextBoxCell ();  	cellDateName.Value = eq.date.ToLocalTime ().ToString ();  	tempRow.Cells.Add (cellDateName);  	DataGridViewCell cellDepthName = new DataGridViewTextBoxCell ();  	cellDepthName.Value = eq.depth;  	tempRow.Cells.Add (cellDepthName);  	DataGridViewCell cellDirectionName = new DataGridViewTextBoxCell ();  	cellDirectionName.Value = eq.direction;  	tempRow.Cells.Add (cellDirectionName);  	DataGridViewCell cellDistanceName = new DataGridViewTextBoxCell ();  	cellDistanceName.Value = eq.distance;  	tempRow.Cells.Add (cellDistanceName);  	DataGridViewCell cellVolcanoName = new DataGridViewTextBoxCell ();  	cellVolcanoName.Value = eq.volcano;  	tempRow.Cells.Add (cellVolcanoName);  	DataGridViewCell cellQualityName = new DataGridViewTextBoxCell ();  	cellQualityName.Value = eq.quality;  	tempRow.Cells.Add (cellQualityName);  	DataGridViewCell cellSizeName = new DataGridViewTextBoxCell ();  	cellSizeName.Value = eq.size;  	tempRow.Cells.Add (cellSizeName);  	DataGridViewCell cellVerifiedName = new DataGridViewTextBoxCell ();  	cellVerifiedName.Value = eq.verified;  	tempRow.Cells.Add (cellVerifiedName);  	DateTime now = DateTime.Now;  	Double difference = (now - eq.date.ToLocalTime ()).TotalMinutes;  	int finalDiff = (int)Math.Round (difference);  	int totalHours = finalDiff / 60;  	int totalMins = finalDiff % 60;  	DataGridViewCell cellLongAgoName = new DataGridViewTextBoxCell ();  	cellLongAgoName.Value = totalHours + " hrs " + totalMins + " mins";  	tempRow.Cells.Add (cellLongAgoName);  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows.Add (tempRow);  	});  	//dataGridView1.Rows.Add(tempRow);  	if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  		});  	else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  		Invoke ((MethodInvoker)delegate () {  			dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  		});  }  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 4)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Red;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 3)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Orange;  	});  else if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following statement contains a magic number: if (double.Parse (eq.size' new CultureInfo ("en-GB")) >= 2)  	Invoke ((MethodInvoker)delegate () {  		dataGridView1.Rows [dataGridView1.Rows.Count - 1].DefaultCellStyle.BackColor = Color.Yellow;  	});  
Magic Number,Bardarbunga,HistoryApi,C:\repos\cbradley857_barda\Bardarbunga\HistoryApi.cs,GetData,The following statement contains a magic number: if (qNo > 0) {  	// For each earthquake   	for (int i = 0; i < qNo; i++) {  		string date = (string)obj ["eqs"] [i] ["date"] + "000";  		var time = TimeSpan.FromMilliseconds (Int64.Parse (date));  		DateTime referenceTime = new DateTime (1970' 1' 1);  		referenceTime = referenceTime + time;  		string size = (string)obj ["eqs"] [i] ["size"];  		string depth = (string)obj ["eqs"] [i] ["depth"];  		string direction = (string)obj ["eqs"] [i] ["direction"];  		string distance = (string)obj ["eqs"] [i] ["distance"];  		string volcano = (string)obj ["eqs"] [i] ["volcano"];  		string quality = (string)obj ["eqs"] [i] ["quality"];  		equakeList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' (double.Parse (quality) == 99) ? "true" : "false"));  	}  }  
Magic Number,Bardarbunga,HistoryApi,C:\repos\cbradley857_barda\Bardarbunga\HistoryApi.cs,GetData,The following statement contains a magic number: if (qNo > 0) {  	// For each earthquake   	for (int i = 0; i < qNo; i++) {  		string date = (string)obj ["eqs"] [i] ["date"] + "000";  		var time = TimeSpan.FromMilliseconds (Int64.Parse (date));  		DateTime referenceTime = new DateTime (1970' 1' 1);  		referenceTime = referenceTime + time;  		string size = (string)obj ["eqs"] [i] ["size"];  		string depth = (string)obj ["eqs"] [i] ["depth"];  		string direction = (string)obj ["eqs"] [i] ["direction"];  		string distance = (string)obj ["eqs"] [i] ["distance"];  		string volcano = (string)obj ["eqs"] [i] ["volcano"];  		string quality = (string)obj ["eqs"] [i] ["quality"];  		equakeList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' (double.Parse (quality) == 99) ? "true" : "false"));  	}  }  
Magic Number,Bardarbunga,HistoryApi,C:\repos\cbradley857_barda\Bardarbunga\HistoryApi.cs,GetData,The following statement contains a magic number: for (int i = 0; i < qNo; i++) {  	string date = (string)obj ["eqs"] [i] ["date"] + "000";  	var time = TimeSpan.FromMilliseconds (Int64.Parse (date));  	DateTime referenceTime = new DateTime (1970' 1' 1);  	referenceTime = referenceTime + time;  	string size = (string)obj ["eqs"] [i] ["size"];  	string depth = (string)obj ["eqs"] [i] ["depth"];  	string direction = (string)obj ["eqs"] [i] ["direction"];  	string distance = (string)obj ["eqs"] [i] ["distance"];  	string volcano = (string)obj ["eqs"] [i] ["volcano"];  	string quality = (string)obj ["eqs"] [i] ["quality"];  	equakeList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' (double.Parse (quality) == 99) ? "true" : "false"));  }  
Magic Number,Bardarbunga,HistoryApi,C:\repos\cbradley857_barda\Bardarbunga\HistoryApi.cs,GetData,The following statement contains a magic number: for (int i = 0; i < qNo; i++) {  	string date = (string)obj ["eqs"] [i] ["date"] + "000";  	var time = TimeSpan.FromMilliseconds (Int64.Parse (date));  	DateTime referenceTime = new DateTime (1970' 1' 1);  	referenceTime = referenceTime + time;  	string size = (string)obj ["eqs"] [i] ["size"];  	string depth = (string)obj ["eqs"] [i] ["depth"];  	string direction = (string)obj ["eqs"] [i] ["direction"];  	string distance = (string)obj ["eqs"] [i] ["distance"];  	string volcano = (string)obj ["eqs"] [i] ["volcano"];  	string quality = (string)obj ["eqs"] [i] ["quality"];  	equakeList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' (double.Parse (quality) == 99) ? "true" : "false"));  }  
Magic Number,Bardarbunga,HistoryApi,C:\repos\cbradley857_barda\Bardarbunga\HistoryApi.cs,GetData,The following statement contains a magic number: equakeList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' (double.Parse (quality) == 99) ? "true" : "false"));  
Magic Number,Bardarbunga,OldGraphs,C:\repos\cbradley857_barda\Bardarbunga\OldGraphs.cs,loadGraph,The following statement contains a magic number: if (quakeList.Count != 0) {  	if (graphType == GraphType.realTime) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Berry;  		chart1.Titles.Add ("All Quakes between chosen times");  		chart1.Series.Add ("main");  		DateTime sDate = quakeList [0].date;  		DateTime eDate = quakeList [quakeList.Count - 1].date;  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisX.Title = "Magnitude";  		chart1.Series ["main"].XValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTime;  		chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  		chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  		chart1.ChartAreas [0].AxisX.Interval = 1;  		chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  		chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  		chart1.ChartAreas [0].AxisX.Minimum = sDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Maximum = eDate.ToOADate ();  		chart1.ChartAreas [0].AxisX.Name = "Time";  		chart1.Series ["main"].ChartType = SeriesChartType.Line;  		chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  		chart1.Series ["main"].MarkerSize = 5;  		for (int i = 0; i < times.Length; i++) {  			if (mag [i] > Properties.Settings.Default.minSize) {  				chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  				chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  			}  		}  		chart1.Legends.Clear ();  	}  	else if (graphType == GraphType.totalPerHour) {  		DateTime[] times = new DateTime[quakeList.Count];  		double[] mag = new double[quakeList.Count];  		for (int i = 0; i < quakeList.Count; i++) {  			times [i] = quakeList [i].date;  			mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  		}  		chart1.Palette = ChartColorPalette.Berry;  		chart1.Titles.Add ("Total Quakes Per Hour");  		// DateTime startDate = quakeList[0].date;  		//DateTime endDate = quakeList[quakeList.Count - 1].date;  		/////////  		chart1.ChartAreas [0].AxisX.Title = "Time";  		chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  		chart1.Series.Add ("main");  		//chart1.Series["main"].ChartType = SeriesChartType.Bar;  		foreach (Series series in chart1.Series) {  			series.ChartType = SeriesChartType.Column;  		}  		//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  		//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  		Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  		foreach (EqObject e in quakeList) {  			if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  				//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  				DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  				if (totals.ContainsKey (roundedTime))  					totals [roundedTime]++;  				else  					totals.Add (roundedTime' 1);  			}  		}  		foreach (KeyValuePair<DateTime' int> key in totals) {  			//Create bar.  			chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  			//Generate tooltip string  			String toolTipString = "Total: " + key.Value + "\nTime: " + key.Key.ToLocalTime ().ToString ();  			//Set tooltop  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  		}  	}  }  
Magic Number,Bardarbunga,OldGraphs,C:\repos\cbradley857_barda\Bardarbunga\OldGraphs.cs,loadGraph,The following statement contains a magic number: if (graphType == GraphType.realTime) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = System.Windows.Forms.DataVisualization.Charting.ChartColorPalette.Berry;  	chart1.Titles.Add ("All Quakes between chosen times");  	chart1.Series.Add ("main");  	DateTime sDate = quakeList [0].date;  	DateTime eDate = quakeList [quakeList.Count - 1].date;  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisX.Title = "Magnitude";  	chart1.Series ["main"].XValueType = System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTime;  	chart1.ChartAreas [0].AxisX.LabelStyle.Enabled = true;  	chart1.ChartAreas [0].AxisX.LabelStyle.Format = "h:mm tt";  	chart1.ChartAreas [0].AxisX.Interval = 1;  	chart1.ChartAreas [0].AxisX.IntervalType = DateTimeIntervalType.Hours;  	chart1.ChartAreas [0].AxisX.IntervalOffset = 1;  	chart1.ChartAreas [0].AxisX.Minimum = sDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Maximum = eDate.ToOADate ();  	chart1.ChartAreas [0].AxisX.Name = "Time";  	chart1.Series ["main"].ChartType = SeriesChartType.Line;  	chart1.Series ["main"].MarkerStyle = MarkerStyle.Diamond;  	chart1.Series ["main"].MarkerSize = 5;  	for (int i = 0; i < times.Length; i++) {  		if (mag [i] > Properties.Settings.Default.minSize) {  			chart1.Series ["main"].Points.AddXY (times [i]' mag [i]);  			chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = "#VALY" + "M \n" + times [i];  		}  	}  	chart1.Legends.Clear ();  }  else if (graphType == GraphType.totalPerHour) {  	DateTime[] times = new DateTime[quakeList.Count];  	double[] mag = new double[quakeList.Count];  	for (int i = 0; i < quakeList.Count; i++) {  		times [i] = quakeList [i].date;  		mag [i] = double.Parse (quakeList [i].size' new CultureInfo ("en-GB"));  	}  	chart1.Palette = ChartColorPalette.Berry;  	chart1.Titles.Add ("Total Quakes Per Hour");  	// DateTime startDate = quakeList[0].date;  	//DateTime endDate = quakeList[quakeList.Count - 1].date;  	/////////  	chart1.ChartAreas [0].AxisX.Title = "Time";  	chart1.ChartAreas [0].AxisY.Title = "Total Earthquakes";  	chart1.Series.Add ("main");  	//chart1.Series["main"].ChartType = SeriesChartType.Bar;  	foreach (Series series in chart1.Series) {  		series.ChartType = SeriesChartType.Column;  	}  	//KeyValuePair<float' int> totals = new KeyValuePair<float' int>();  	//List<KeyValuePair<DateTime' int>> totals = new List<KeyValuePair<DateTime'int>>();  	Dictionary<DateTime' int> totals = new Dictionary<DateTime' int> ();  	foreach (EqObject e in quakeList) {  		if (double.Parse (e.size' new CultureInfo ("en-GB")) >= Properties.Settings.Default.minSize) {  			//d.time = new DateTime(d.time.Year' d.time.Month' d.time.Day' d.time.Hour' 0' 0)  			DateTime roundedTime = new DateTime (e.date.Year' e.date.Month' e.date.Day' e.date.Hour' 0' 0);  			if (totals.ContainsKey (roundedTime))  				totals [roundedTime]++;  			else  				totals.Add (roundedTime' 1);  		}  	}  	foreach (KeyValuePair<DateTime' int> key in totals) {  		//Create bar.  		chart1.Series ["main"].Points.AddXY (key.Key.ToLocalTime ()' key.Value);  		//Generate tooltip string  		String toolTipString = "Total: " + key.Value + "\nTime: " + key.Key.ToLocalTime ().ToString ();  		//Set tooltop  		chart1.Series ["main"].Points [chart1.Series ["main"].Points.Count - 1].ToolTip = toolTipString;  	}  }  
Magic Number,Bardarbunga,OldGraphs,C:\repos\cbradley857_barda\Bardarbunga\OldGraphs.cs,loadGraph,The following statement contains a magic number: chart1.Series ["main"].MarkerSize = 5;  
Magic Number,Bardarbunga,OptionsForm,C:\repos\cbradley857_barda\Bardarbunga\OptionsForm.cs,OptionsForm_Load,The following statement contains a magic number: for (int i = 0; i < 48; i++) {  	comboBox1.Items.Add (i + 1);  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,radioButton3_CheckedChanged,The following statement contains a magic number: webControl1.Source = addresses [2];  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,radioButton4_CheckedChanged,The following statement contains a magic number: webControl1.Source = addresses [3];  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,radioButton5_CheckedChanged,The following statement contains a magic number: webControl1.Source = addresses [4];  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton1.Checked) {  	webControl1.Source = addresses [0];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton2.Checked) {  	webControl1.Source = addresses [1];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton1.Checked) {  	webControl1.Source = addresses [0];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton2.Checked) {  	webControl1.Source = addresses [1];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton1.Checked) {  	webControl1.Source = addresses [0];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton2.Checked) {  	webControl1.Source = addresses [1];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton2.Checked) {  	webControl1.Source = addresses [1];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton2.Checked) {  	webControl1.Source = addresses [1];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton2.Checked) {  	webControl1.Source = addresses [1];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton3.Checked) {  	webControl1.Source = addresses [2];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: webControl1.Source = addresses [2];  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton4.Checked) {  	webControl1.Source = addresses [3];  	toolStripStatusLabel1.Text = "Loading..";  }  else if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: webControl1.Source = addresses [3];  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: if (radioButton5.Checked) {  	webControl1.Source = addresses [4];  	toolStripStatusLabel1.Text = "Loading..";  }  
Magic Number,Bardarbunga,TremorCharts,C:\repos\cbradley857_barda\Bardarbunga\TremorCharts.cs,refreshCharts,The following statement contains a magic number: webControl1.Source = addresses [4];  
Magic Number,Bardarbunga,WebApi,C:\repos\cbradley857_barda\Bardarbunga\WebApi.cs,GetData,The following statement contains a magic number: if (qNo > 0) {  	//String quakes = (string)obj["items"][0]["date"];  	DateTime cutOff = DateTime.Now - new TimeSpan (hoursAgo + 1' 0' 0);  	for (int i = 0; i < qNo; i++) {  		//Work out time  		string date = (string)obj ["items"] [i] ["date"] + "000";  		var time = TimeSpan.FromMilliseconds (Int64.Parse (date));  		DateTime referenceTime = new DateTime (1970' 1' 1);  		referenceTime = referenceTime + time;  		//Check it actually meets the cut off time  		if (referenceTime.ToLocalTime () > cutOff) {  			//date = referenceTime.ToLocalTime().ToString();  			string depth = (string)obj ["items"] [i] ["depth"];  			string direction = (string)obj ["items"] [i] ["loc_dir"];  			string distance = (string)obj ["items"] [i] ["loc_dist"];  			string volcano = (string)obj ["items"] [i] ["loc_name"];  			string quality = (string)obj ["items"] [i] ["quality"];  			string size = (string)obj ["items"] [i] ["size"];  			string verified = (string)obj ["items"] [i] ["verified"];  			eqList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' verified));  		}  	}  }  
Magic Number,Bardarbunga,WebApi,C:\repos\cbradley857_barda\Bardarbunga\WebApi.cs,GetData,The following statement contains a magic number: for (int i = 0; i < qNo; i++) {  	//Work out time  	string date = (string)obj ["items"] [i] ["date"] + "000";  	var time = TimeSpan.FromMilliseconds (Int64.Parse (date));  	DateTime referenceTime = new DateTime (1970' 1' 1);  	referenceTime = referenceTime + time;  	//Check it actually meets the cut off time  	if (referenceTime.ToLocalTime () > cutOff) {  		//date = referenceTime.ToLocalTime().ToString();  		string depth = (string)obj ["items"] [i] ["depth"];  		string direction = (string)obj ["items"] [i] ["loc_dir"];  		string distance = (string)obj ["items"] [i] ["loc_dist"];  		string volcano = (string)obj ["items"] [i] ["loc_name"];  		string quality = (string)obj ["items"] [i] ["quality"];  		string size = (string)obj ["items"] [i] ["size"];  		string verified = (string)obj ["items"] [i] ["verified"];  		eqList.Add (new EqObject (referenceTime' depth' direction' distance' volcano' quality' size' verified));  	}  }  
Missing Default,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,webBrowser1_Navigated,The following switch statement is missing a default case: switch (comboBox1.SelectedIndex) {  //3D Bulge  case 0:  	display3d (sender);  	break;  //Advanced 3D Bulge  case 1:  	break;  //LocationMap  case 2:  	break;  }  
Missing Default,Bardarbunga,Baering,C:\repos\cbradley857_barda\Bardarbunga\Baering.cs,comboBox1_SelectedIndexChanged,The following switch statement is missing a default case: switch (combo1.SelectedIndex) {  case 0:  	webControl1.Source = new Uri ("http://www.ilikeducks.com/LampSim/Barda/baering/3dbulge.html");  	break;  case 1:  	webControl1.Source = new Uri ("http://baering.github.io/earthquakes/visualization.html");  	break;  case 2:  	webControl1.Source = new Uri ("http://www.ilikeducks.com/LampSim/Barda/baering/3dbulge_map.html");  	break;  }  
Missing Default,Bardarbunga,GraphScreen,C:\repos\cbradley857_barda\Bardarbunga\GraphScreen.cs,buttonAccess,The following switch statement is missing a default case: switch (g) {  case GraphType.totalPerHour:  	button1.Enabled = true;  	button2.Enabled = false;  	break;  case GraphType.realTime:  	button1.Enabled = false;  	button2.Enabled = true;  	break;  }  
Missing Default,Bardarbunga,Historical,C:\repos\cbradley857_barda\Bardarbunga\Historical.cs,loadQuakes,The following switch statement is missing a default case: switch (comboBox1.SelectedIndex) {  case 0:  	minMag = 0;  	break;  case 1:  	minMag = 1;  	break;  case 2:  	minMag = 2;  	break;  case 3:  	minMag = 3;  	break;  case 4:  	minMag = 4;  	break;  case 5:  	minMag = 5;  	break;  }  
