Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,OpenStory.Cryptography,AesTransform,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\AesTransform.cs,TransformBlock,The method has 5 parameters. Parameters: data' iv' blockStart' blockEnd' xorBlock
Magic Number,OpenStory.Common.Game,PointS,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\Game\PointS.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (this.X.GetHashCode() * 397) ^ this.Y.GetHashCode();              }
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,CopyBytes,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  buffer[i] = unchecked((byte)value);                  value >>= 8;              }
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,FromBytes,The following statement contains a magic number: for (int position = end - 1; position >= offset; position--)              {                  result = unchecked((result << 8) | buffer[position]);              }
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,ToUInt64,The following statement contains a magic number: return unchecked((ulong)FromBytes(array' startIndex' 8));
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,ToInt64,The following statement contains a magic number: return FromBytes(array' startIndex' 8);
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,ToDouble,The following statement contains a magic number: return BitConverter.Int64BitsToDouble(FromBytes(array' startIndex' 8));
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint)FromBytes(array' startIndex' 4));
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,ToInt32,The following statement contains a magic number: return unchecked((int)FromBytes(array' startIndex' 4));
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,ToUInt16,The following statement contains a magic number: return unchecked((ushort)FromBytes(array' startIndex' 2));
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,ToInt16,The following statement contains a magic number: return unchecked((short)FromBytes(array' startIndex' 2));
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(unchecked((long)value)' 8);
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 8);
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(BitConverter.DoubleToInt64Bits(value)' 8);
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 4);
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 4);
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 2);
Magic Number,OpenStory.Common.IO,LittleEndianBitConverter,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\LittleEndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes(value' 2);
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipBytes,The following statement contains a magic number: number = (ulong)FlipNumber((long)number' 8);
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipBytes,The following statement contains a magic number: number = FlipNumber(number' 8);
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipBytes,The following statement contains a magic number: number = unchecked((uint)FlipNumber(number' 4));
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipBytes,The following statement contains a magic number: number = unchecked((int)FlipNumber(number' 4));
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipBytes,The following statement contains a magic number: number = unchecked((ushort)FlipNumber(number' 2));
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipBytes,The following statement contains a magic number: number = unchecked((short)FlipNumber(number' 2));
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipNumber,The following statement contains a magic number: while (i++ < byteCount)              {                  newNumber <<= 8;                  newNumber |= oldNumber & 0xFF;                  oldNumber >>= 8;              }
Magic Number,OpenStory.Common.IO,ByteOrder,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\ByteOrder.cs,FlipNumber,The following statement contains a magic number: while (i++ < byteCount)              {                  newNumber <<= 8;                  newNumber |= oldNumber & 0xFF;                  oldNumber >>= 8;              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadUInt32,The following statement contains a magic number: if (this.CanAdvance(4))              {                  int start = this.UncheckedAdvance(4);                  value = LittleEndianBitConverter.ToUInt32(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadUInt32,The following statement contains a magic number: if (this.CanAdvance(4))              {                  int start = this.UncheckedAdvance(4);                  value = LittleEndianBitConverter.ToUInt32(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadInt32,The following statement contains a magic number: if (this.CanAdvance(4))              {                  int start = this.UncheckedAdvance(4);                  value = LittleEndianBitConverter.ToInt32(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadInt32,The following statement contains a magic number: if (this.CanAdvance(4))              {                  int start = this.UncheckedAdvance(4);                  value = LittleEndianBitConverter.ToInt32(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadUInt16,The following statement contains a magic number: if (this.CanAdvance(2))              {                  int start = this.UncheckedAdvance(2);                  value = LittleEndianBitConverter.ToUInt16(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadUInt16,The following statement contains a magic number: if (this.CanAdvance(2))              {                  int start = this.UncheckedAdvance(2);                  value = LittleEndianBitConverter.ToUInt16(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadInt16,The following statement contains a magic number: if (this.CanAdvance(2))              {                  int start = this.currentOffset;                  if (!peek)                  {                      this.UncheckedAdvance(2);                  }                    value = LittleEndianBitConverter.ToInt16(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadInt16,The following statement contains a magic number: if (this.CanAdvance(2))              {                  int start = this.currentOffset;                  if (!peek)                  {                      this.UncheckedAdvance(2);                  }                    value = LittleEndianBitConverter.ToInt16(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadInt64,The following statement contains a magic number: if (this.CanAdvance(8))              {                  int start = this.UncheckedAdvance(8);                  value = LittleEndianBitConverter.ToInt64(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadInt64,The following statement contains a magic number: if (this.CanAdvance(8))              {                  int start = this.UncheckedAdvance(8);                  value = LittleEndianBitConverter.ToInt64(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadUInt64,The following statement contains a magic number: if (this.CanAdvance(8))              {                  int start = this.UncheckedAdvance(8);                  value = LittleEndianBitConverter.ToUInt64(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadUInt64,The following statement contains a magic number: if (this.CanAdvance(8))              {                  int start = this.UncheckedAdvance(8);                  value = LittleEndianBitConverter.ToUInt64(this.buffer' start);                  return true;              }              else              {                  return Misc.Fail(out value);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadLengthString,The following statement contains a magic number: if (!this.CanAdvance(2 + length))              {                  return Misc.Fail(out result);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,TryReadLengthString,The following statement contains a magic number: this.UncheckedAdvance(2);
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadInt16,The following statement contains a magic number: if (peek)              {                  // If we just wanna peek' don't advance.                  if (!this.CanAdvance(2))                  {                      throw PacketReadingException.EndOfStream();                  }                    start = this.currentOffset;              }              else              {                  // Otherwise do advance.                  start = this.CheckedAdvance(2);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadInt16,The following statement contains a magic number: if (peek)              {                  // If we just wanna peek' don't advance.                  if (!this.CanAdvance(2))                  {                      throw PacketReadingException.EndOfStream();                  }                    start = this.currentOffset;              }              else              {                  // Otherwise do advance.                  start = this.CheckedAdvance(2);              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadUInt16,The following statement contains a magic number: int start = this.CheckedAdvance(2);
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadInt32,The following statement contains a magic number: int start = this.CheckedAdvance(4);
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadUInt32,The following statement contains a magic number: int start = this.CheckedAdvance(4);
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadInt64,The following statement contains a magic number: int start = this.CheckedAdvance(8);
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadUInt64,The following statement contains a magic number: int start = this.CheckedAdvance(8);
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadLengthString,The following statement contains a magic number: if (!this.CanAdvance(2 + length))              {                  throw PacketReadingException.EndOfStream();              }
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadLengthString,The following statement contains a magic number: string s = this.ReadString(this.currentOffset + 2' length);
Magic Number,OpenStory.Common.IO,PacketReader,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\IO\PacketReader.cs,ReadLengthString,The following statement contains a magic number: this.currentOffset += 2 + length;
Magic Number,OpenStory.Common,PacketCodeTable,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\PacketCodeTable.cs,PacketCodeTable,The following statement contains a magic number: this.incomingTable = new Dictionary<ushort' string>(256);
Magic Number,OpenStory.Common,PacketCodeTable,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\PacketCodeTable.cs,PacketCodeTable,The following statement contains a magic number: this.outgoingTable = new Dictionary<string' ushort>(256);
Magic Number,OpenStory.Common,HexExtensions,C:\repos\shoftee_OpenStory\Core\OpenStory\Common\Tools\HexExtensions.cs,ToByte,The following statement contains a magic number: for (int i = 0; i < arrayLength; i++)              {                  int index = i << 1;                  int digit = HexDigits.IndexOf(uppercase[index]);                  if (digit == -1)                  {                      throw new ArgumentException(CommonStrings.StringMustContainOnlyHexDigits' "hex");                  }                    var b = (byte)(digit << 4);                    digit = HexDigits.IndexOf(uppercase[index | 1]);                  if (digit == -1)                  {                      throw new ArgumentException(CommonStrings.StringMustContainOnlyHexDigits' "hex");                  }                    b |= (byte)digit;                  bytes[i] = b;              }
Magic Number,OpenStory.Cryptography,AesTransform,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\AesTransform.cs,AesTransform,The following statement contains a magic number: if (key.Length != 32)              {                  throw new ArgumentException(CommonStrings.AesKeyMustBe32Bytes' "key");              }
Magic Number,OpenStory.Cryptography,AesTransform,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\AesTransform.cs,TransformArraySegment,The following statement contains a magic number: const int FirstBlockLength = BlockLength - 4;
Magic Number,OpenStory.Cryptography,AesTransform,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\AesTransform.cs,FillXorBlock,The following statement contains a magic number: for (int i = 0; i < IvLength; i += 4)              {                  Buffer.BlockCopy(iv' 0' xorBlock' i' 4);              }
Magic Number,OpenStory.Cryptography,AesTransform,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\AesTransform.cs,FillXorBlock,The following statement contains a magic number: for (int i = 0; i < IvLength; i += 4)              {                  Buffer.BlockCopy(iv' 0' xorBlock' i' 4);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,CryptoTransformBase,The following statement contains a magic number: if (table.Length != 256)              {                  throw new ArgumentException(CommonStrings.ShuffleTableMustBe256Bytes' "table");              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,CryptoTransformBase,The following statement contains a magic number: if (vector.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes' "vector");              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIv,The following statement contains a magic number: if (vector.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes' "vector");              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIv,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte vectorByte = vector[i];                    this.ShuffleIvStep(shuffled' vectorByte);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: if (shuffled.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes' "shuffled");              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: shuffled[1] -= (byte)(shuffled[2] ^ tableInput);
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: shuffled[2] ^= (byte)(this.table[shuffled[3]] + vectorByte);
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: shuffled[2] ^= (byte)(this.table[shuffled[3]] + vectorByte);
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: shuffled[3] -= (byte)(shuffled[0] - tableInput);
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,ShuffleIvStep,The following statement contains a magic number: unchecked              {                  uint merged = (uint)((shuffled[3] << 24) | (shuffled[2] << 16) | (shuffled[1] << 8) | shuffled[0]);                  uint shifted = (merged << 3) | (merged >> 29);                    shuffled[0] = (byte)shifted;                  shuffled[1] = (byte)(shifted >> 8);                  shuffled[2] = (byte)(shifted >> 16);                  shuffled[3] = (byte)(shifted >> 24);              }
Magic Number,OpenStory.Cryptography,CryptoTransformBase,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CryptoTransformBase.cs,TransformWithIv,The following statement contains a magic number: if (vector.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes);              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,Encrypt,The following statement contains a magic number: for (int j = 0; j < 6; j++)              {                  if ((j & 1) != 0)                  {                      OddEncryptTransform(data' length' truncatedLength);                  }                  else                  {                      EvenEncryptTransform(data' length' truncatedLength);                  }              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,EvenEncryptTransform,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  byte current = RollLeft(data[i]' 3);                  current += lengthByte;                    current ^= remember;                  remember = current;                    current = RollRight(current' lengthByte);                  current = (byte)(~current & 0xFF);                  current += 0x48;                  data[i] = current;                    lengthByte--;              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,OddEncryptTransform,The following statement contains a magic number: for (int i = length - 1; i >= 0; i--)              {                  byte current = RollLeft(data[i]' 4);                  current += lengthByte;                    current ^= remember;                  remember = current;                    current ^= 0x13;                  current = RollRight(current' 3);                  data[i] = current;                    lengthByte--;              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,OddEncryptTransform,The following statement contains a magic number: for (int i = length - 1; i >= 0; i--)              {                  byte current = RollLeft(data[i]' 4);                  current += lengthByte;                    current ^= remember;                  remember = current;                    current ^= 0x13;                  current = RollRight(current' 3);                  data[i] = current;                    lengthByte--;              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,Decrypt,The following statement contains a magic number: for (int j = 1; j <= 6; j++)              {                  if ((j & 1) != 0)                  {                      OddDecryptTransform(data' length' truncatedLength);                  }                  else                  {                      EvenDecryptTransform(data' length' truncatedLength);                  }              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,EvenDecryptTransform,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  byte current = data[i];                  current -= 0x48;                  current = unchecked((byte)(~current));                  current = RollLeft(current' lengthByte);                    byte tmp = current;                  current ^= remember;                  remember = tmp;                    current -= lengthByte;                  data[i] = RollRight(current' 3);                    lengthByte--;              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,OddDecryptTransform,The following statement contains a magic number: for (int i = length - 1; i >= 0; i--)              {                  byte current = RollLeft(data[i]' 3);                  current ^= 0x13;                    byte tmp = current;                  current ^= remember;                  remember = tmp;                    current -= lengthByte;                  data[i] = RollRight(current' 4);                    lengthByte--;              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,OddDecryptTransform,The following statement contains a magic number: for (int i = length - 1; i >= 0; i--)              {                  byte current = RollLeft(data[i]' 3);                  current ^= 0x13;                    byte tmp = current;                  current ^= remember;                  remember = tmp;                    current -= lengthByte;                  data[i] = RollRight(current' 4);                    lengthByte--;              }
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,RollLeft,The following statement contains a magic number: int tmp = b << (count & 7);
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,RollLeft,The following statement contains a magic number: return unchecked((byte)(tmp | (tmp >> 8)));
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,RollRight,The following statement contains a magic number: int tmp = b << (8 - (count & 7));
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,RollRight,The following statement contains a magic number: int tmp = b << (8 - (count & 7));
Magic Number,OpenStory.Cryptography,CustomCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\CustomCrypto.cs,RollRight,The following statement contains a magic number: return unchecked((byte)(tmp | (tmp >> 8)));
Magic Number,OpenStory.Cryptography,EndpointCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\EndpointCrypto.cs,EncryptAndPack,The following statement contains a magic number: var rawData = new byte[length + 4];
Magic Number,OpenStory.Cryptography,EndpointCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\EndpointCrypto.cs,EncryptAndPack,The following statement contains a magic number: lock (this.encryptor)              {                  byte[] header = this.ConstructHeader(length);                  Buffer.BlockCopy(header' 0' rawData' 0' 4);                    CustomCrypto.Encrypt(packetData);                  this.encryptor.Transform(packetData);              }
Magic Number,OpenStory.Cryptography,EndpointCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\EndpointCrypto.cs,EncryptAndPack,The following statement contains a magic number: Buffer.BlockCopy(packetData' 0' rawData' 4' length);
Magic Number,OpenStory.Cryptography,EndpointCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\EndpointCrypto.cs,TryUnpackAndDecrypt,The following statement contains a magic number: if (this.TryGetLength(rawData' out length))              {                  decryptedData = rawData.CopySegment(4' length);                  this.Decrypt(decryptedData);                  return true;              }              else              {                  decryptedData = default(byte[]);                  return false;              }
Magic Number,OpenStory.Cryptography,HeartbeatCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\HeartbeatCrypto.cs,TransformClientRequest,The following statement contains a magic number: int left = 7 - (request & 7);
Magic Number,OpenStory.Cryptography,HeartbeatCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\HeartbeatCrypto.cs,TransformClientRequest,The following statement contains a magic number: int left = 7 - (request & 7);
Magic Number,OpenStory.Cryptography,KmstDecryptor,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\KmstDecryptor.cs,TransformArraySegment,The following statement contains a magic number: if (vector.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes' "vector");              }
Magic Number,OpenStory.Cryptography,KmstDecryptor,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\KmstDecryptor.cs,TransformArraySegment,The following statement contains a magic number: for (int i = segmentStart; i < segmentEnd; i++)              {                  byte initial = data[i];                    byte x = (byte)(initial ^ this.Table[stepIv[0]]);                  byte b = (byte)((x >> 1) & 0x55);                  byte a = (byte)((x & 0xD5) << 1);                  byte r = (byte)(a | b);                    data[i] = (byte)((r >> 4) | (r << 4));                    // NOTE: passing the new value is CORRECT.                  this.ShuffleIvStep(stepIv' data[i]);              }
Magic Number,OpenStory.Cryptography,KmstDecryptor,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\KmstDecryptor.cs,TransformArraySegment,The following statement contains a magic number: for (int i = segmentStart; i < segmentEnd; i++)              {                  byte initial = data[i];                    byte x = (byte)(initial ^ this.Table[stepIv[0]]);                  byte b = (byte)((x >> 1) & 0x55);                  byte a = (byte)((x & 0xD5) << 1);                  byte r = (byte)(a | b);                    data[i] = (byte)((r >> 4) | (r << 4));                    // NOTE: passing the new value is CORRECT.                  this.ShuffleIvStep(stepIv' data[i]);              }
Magic Number,OpenStory.Cryptography,KmstEncryptor,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\KmstEncryptor.cs,TransformArraySegment,The following statement contains a magic number: if (vector.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes' "vector");              }
Magic Number,OpenStory.Cryptography,KmstEncryptor,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\KmstEncryptor.cs,TransformArraySegment,The following statement contains a magic number: for (int i = segmentStart; i < segmentEnd; i++)              {                  byte initial = data[i];                    byte r = (byte)((initial << 4) | (initial >> 4));                  byte a = (byte)((r >> 1) & 0x55);                  byte b = (byte)((r & 0xD5) << 1);                  byte x = (byte)(a | b);                    data[i] = (byte)(this.Table[stepIv[0]] ^ x);                    // NOTE: passing the initial value is CORRECT.                  this.ShuffleIvStep(stepIv' initial);              }
Magic Number,OpenStory.Cryptography,KmstEncryptor,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\KmstEncryptor.cs,TransformArraySegment,The following statement contains a magic number: for (int i = segmentStart; i < segmentEnd; i++)              {                  byte initial = data[i];                    byte r = (byte)((initial << 4) | (initial >> 4));                  byte a = (byte)((r >> 1) & 0x55);                  byte b = (byte)((r & 0xD5) << 1);                  byte x = (byte)(a | b);                    data[i] = (byte)(this.Table[stepIv[0]] ^ x);                    // NOTE: passing the initial value is CORRECT.                  this.ShuffleIvStep(stepIv' initial);              }
Magic Number,OpenStory.Cryptography,LoginCrypto,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\LoginCrypto.cs,GeneratePatchLocation,The following statement contains a magic number: location ^= subversion << 16;
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,RollingIv,The following statement contains a magic number: if (initialIv.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes' "initialIv");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,RollingIv,The following statement contains a magic number: this.versionMask = (ushort)((versionMask >> 8) | ((versionMask & 0xFF) << 8));
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,RollingIv,The following statement contains a magic number: this.versionMask = (ushort)((versionMask >> 8) | ((versionMask & 0xFF) << 8));
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: if (length < 2)              {                  throw new ArgumentOutOfRangeException("length"' length' CommonStrings.PacketLengthMustBeMoreThan2Bytes);              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: int encodedVersion = ((this.iv[2] << 8) | this.iv[3]) ^ this.versionMask;
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: int encodedVersion = ((this.iv[2] << 8) | this.iv[3]) ^ this.versionMask;
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: int encodedVersion = ((this.iv[2] << 8) | this.iv[3]) ^ this.versionMask;
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: int encodedLength = encodedVersion ^ (((length & 0xFF) << 8) | (length >> 8));
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: int encodedLength = encodedVersion ^ (((length & 0xFF) << 8) | (length >> 8));
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: var header = new byte[4];
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: unchecked              {                  header[0] = (byte)(encodedVersion >> 8);                  header[1] = (byte)encodedVersion;                  header[2] = (byte)(encodedLength >> 8);                  header[3] = (byte)encodedLength;              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: unchecked              {                  header[0] = (byte)(encodedVersion >> 8);                  header[1] = (byte)encodedVersion;                  header[2] = (byte)(encodedLength >> 8);                  header[3] = (byte)encodedLength;              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: unchecked              {                  header[0] = (byte)(encodedVersion >> 8);                  header[1] = (byte)encodedVersion;                  header[2] = (byte)(encodedLength >> 8);                  header[3] = (byte)encodedLength;              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ConstructHeader,The following statement contains a magic number: unchecked              {                  header[0] = (byte)(encodedVersion >> 8);                  header[1] = (byte)encodedVersion;                  header[2] = (byte)(encodedLength >> 8);                  header[3] = (byte)encodedLength;              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetPacketLength,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetPacketLength,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetPacketLength,The following statement contains a magic number: return ((header[1] ^ header[3]) << 8) | (header[0] ^ header[2]);
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetPacketLength,The following statement contains a magic number: return ((header[1] ^ header[3]) << 8) | (header[0] ^ header[2]);
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetPacketLength,The following statement contains a magic number: return ((header[1] ^ header[3]) << 8) | (header[0] ^ header[2]);
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ValidateHeader,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,ValidateHeader,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,TryGetLength,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,TryGetLength,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,TryGetLength,The following statement contains a magic number: if (ValidateHeaderInternal(header' this.iv' this.versionMask))              {                  length = ((header[1] ^ header[3]) << 8) | (header[0] ^ header[2]);                  return true;              }              else              {                  length = default(int);                  return false;              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,TryGetLength,The following statement contains a magic number: if (ValidateHeaderInternal(header' this.iv' this.versionMask))              {                  length = ((header[1] ^ header[3]) << 8) | (header[0] ^ header[2]);                  return true;              }              else              {                  length = default(int);                  return false;              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,TryGetLength,The following statement contains a magic number: if (ValidateHeaderInternal(header' this.iv' this.versionMask))              {                  length = ((header[1] ^ header[3]) << 8) | (header[0] ^ header[2]);                  return true;              }              else              {                  length = default(int);                  return false;              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetVersion,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetVersion,The following statement contains a magic number: if (header.Length < 4)              {                  var message = string.Format(CommonStrings.SegmentTooShort' 4);                  throw new ArgumentException(message' "header");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetVersion,The following statement contains a magic number: if (iv.Length != 4)              {                  throw new ArgumentException(CommonStrings.IvMustBe4Bytes' "iv");              }
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetVersionInternal,The following statement contains a magic number: var encodedVersion = (ushort)((header[0] << 8) | header[1]);
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetVersionInternal,The following statement contains a magic number: var xorSegment = (ushort)((iv[2] << 8) | iv[3]);
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetVersionInternal,The following statement contains a magic number: var xorSegment = (ushort)((iv[2] << 8) | iv[3]);
Magic Number,OpenStory.Cryptography,RollingIv,C:\repos\shoftee_OpenStory\Core\OpenStory\Cryptography\RollingIv.cs,GetVersionInternal,The following statement contains a magic number: var xorSegment = (ushort)((iv[2] << 8) | iv[3]);
Magic Number,OpenStory.Networking,EncryptedNetworkSession,C:\repos\shoftee_OpenStory\Core\OpenStory\Networking\EncryptedNetworkSession.cs,EncryptedNetworkSession,The following statement contains a magic number: this.headerBuffer = new BoundedBuffer(4);
Magic Number,OpenStory.Networking,EncryptedNetworkSession,C:\repos\shoftee_OpenStory\Core\OpenStory\Networking\EncryptedNetworkSession.cs,OnDataArrived,The following statement contains a magic number: while (this.PacketBuffer.FreeSpace == 0)              {                  byte[] rawData = this.PacketBuffer.ExtractAndReset(0);                  if (rawData.Length > 0)                  {                      this.Crypto.Decrypt(rawData);                        var incomingPacketArgs = new PacketReceivedEventArgs(rawData);                      this.OnPacketReceived(incomingPacketArgs);                  }                    if (remaining == 0)                  {                      break;                  }                    int bufferred;                  int headerRemaining = this.HeaderBuffer.FreeSpace;                  if (headerRemaining > 0)                  {                      bufferred = this.HeaderBuffer.AppendFill(data' position' headerRemaining);                        // For the confused: if we didn't fill the header' it                       // means the data array didn't have enough elements.                      // We move on.                      if (bufferred < headerRemaining)                      {                          break;                      }                        position += bufferred;                      remaining -= bufferred;                  }                    byte[] header = this.HeaderBuffer.ExtractAndReset(4);                  int length;                  if (!this.Crypto.TryGetLength(header' out length))                  {                      this.Close(@"Could not decode packet length.");                      return;                  }                    this.PacketBuffer.Reset(length);                    bufferred = this.PacketBuffer.AppendFill(data' position' remaining);                  position += bufferred;                  remaining -= bufferred;              }
