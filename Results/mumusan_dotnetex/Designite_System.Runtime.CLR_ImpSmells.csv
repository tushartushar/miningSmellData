Implementation smell,Namespace,Class,File,Method,Description
Long Statement,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The length of the statement  "                      ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass)) " is 147.
Long Statement,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The length of the statement  "            else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType) " is 158.
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: fixed(EntityInfo *entity = &BasicInfo)              {                  var arr = EntityPtr.ToInstance<Array>(new IntPtr(entity));                  var elementType = arr.GetType().GetElementType();                    if(elementType.IsValueType)                  {                      var typecode = Type.GetTypeCode(elementType);                                                switch(typecode)                      {                          case TypeCode.Byte:                          case TypeCode.SByte:                          case TypeCode.Boolean:                              elementsize = 1;                              break;                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Char:                              elementsize = 2;                              break;                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Single:                              elementsize = 4;                              break;                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Double:                              elementsize = 8;                              break;                          case TypeCode.Decimal:                              elementsize = 12;                              break;                          default:                              var info = (MethodTableInfo *)elementType.TypeHandle.Value;                              elementsize = info->Size - sizeof(EntityInfo);                              break;                      }						                  }                  else                   {                      elementsize = IntPtr.Size;                  }                                // Header                  total += sizeof(EntityInfo);                  total += elementType.IsValueType ? 0 : 4; // MethodsTable for refTypes                  total += IsMultidimentional ? Dimensions * 8 : 4;               }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: fixed(EntityInfo *entity = &BasicInfo)              {                  var arr = EntityPtr.ToInstance<Array>(new IntPtr(entity));                  var elementType = arr.GetType().GetElementType();                    if(elementType.IsValueType)                  {                      var typecode = Type.GetTypeCode(elementType);                                                switch(typecode)                      {                          case TypeCode.Byte:                          case TypeCode.SByte:                          case TypeCode.Boolean:                              elementsize = 1;                              break;                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Char:                              elementsize = 2;                              break;                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Single:                              elementsize = 4;                              break;                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Double:                              elementsize = 8;                              break;                          case TypeCode.Decimal:                              elementsize = 12;                              break;                          default:                              var info = (MethodTableInfo *)elementType.TypeHandle.Value;                              elementsize = info->Size - sizeof(EntityInfo);                              break;                      }						                  }                  else                   {                      elementsize = IntPtr.Size;                  }                                // Header                  total += sizeof(EntityInfo);                  total += elementType.IsValueType ? 0 : 4; // MethodsTable for refTypes                  total += IsMultidimentional ? Dimensions * 8 : 4;               }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: fixed(EntityInfo *entity = &BasicInfo)              {                  var arr = EntityPtr.ToInstance<Array>(new IntPtr(entity));                  var elementType = arr.GetType().GetElementType();                    if(elementType.IsValueType)                  {                      var typecode = Type.GetTypeCode(elementType);                                                switch(typecode)                      {                          case TypeCode.Byte:                          case TypeCode.SByte:                          case TypeCode.Boolean:                              elementsize = 1;                              break;                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Char:                              elementsize = 2;                              break;                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Single:                              elementsize = 4;                              break;                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Double:                              elementsize = 8;                              break;                          case TypeCode.Decimal:                              elementsize = 12;                              break;                          default:                              var info = (MethodTableInfo *)elementType.TypeHandle.Value;                              elementsize = info->Size - sizeof(EntityInfo);                              break;                      }						                  }                  else                   {                      elementsize = IntPtr.Size;                  }                                // Header                  total += sizeof(EntityInfo);                  total += elementType.IsValueType ? 0 : 4; // MethodsTable for refTypes                  total += IsMultidimentional ? Dimensions * 8 : 4;               }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: fixed(EntityInfo *entity = &BasicInfo)              {                  var arr = EntityPtr.ToInstance<Array>(new IntPtr(entity));                  var elementType = arr.GetType().GetElementType();                    if(elementType.IsValueType)                  {                      var typecode = Type.GetTypeCode(elementType);                                                switch(typecode)                      {                          case TypeCode.Byte:                          case TypeCode.SByte:                          case TypeCode.Boolean:                              elementsize = 1;                              break;                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Char:                              elementsize = 2;                              break;                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Single:                              elementsize = 4;                              break;                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Double:                              elementsize = 8;                              break;                          case TypeCode.Decimal:                              elementsize = 12;                              break;                          default:                              var info = (MethodTableInfo *)elementType.TypeHandle.Value;                              elementsize = info->Size - sizeof(EntityInfo);                              break;                      }						                  }                  else                   {                      elementsize = IntPtr.Size;                  }                                // Header                  total += sizeof(EntityInfo);                  total += elementType.IsValueType ? 0 : 4; // MethodsTable for refTypes                  total += IsMultidimentional ? Dimensions * 8 : 4;               }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: fixed(EntityInfo *entity = &BasicInfo)              {                  var arr = EntityPtr.ToInstance<Array>(new IntPtr(entity));                  var elementType = arr.GetType().GetElementType();                    if(elementType.IsValueType)                  {                      var typecode = Type.GetTypeCode(elementType);                                                switch(typecode)                      {                          case TypeCode.Byte:                          case TypeCode.SByte:                          case TypeCode.Boolean:                              elementsize = 1;                              break;                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Char:                              elementsize = 2;                              break;                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Single:                              elementsize = 4;                              break;                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Double:                              elementsize = 8;                              break;                          case TypeCode.Decimal:                              elementsize = 12;                              break;                          default:                              var info = (MethodTableInfo *)elementType.TypeHandle.Value;                              elementsize = info->Size - sizeof(EntityInfo);                              break;                      }						                  }                  else                   {                      elementsize = IntPtr.Size;                  }                                // Header                  total += sizeof(EntityInfo);                  total += elementType.IsValueType ? 0 : 4; // MethodsTable for refTypes                  total += IsMultidimentional ? Dimensions * 8 : 4;               }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: fixed(EntityInfo *entity = &BasicInfo)              {                  var arr = EntityPtr.ToInstance<Array>(new IntPtr(entity));                  var elementType = arr.GetType().GetElementType();                    if(elementType.IsValueType)                  {                      var typecode = Type.GetTypeCode(elementType);                                                switch(typecode)                      {                          case TypeCode.Byte:                          case TypeCode.SByte:                          case TypeCode.Boolean:                              elementsize = 1;                              break;                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Char:                              elementsize = 2;                              break;                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Single:                              elementsize = 4;                              break;                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Double:                              elementsize = 8;                              break;                          case TypeCode.Decimal:                              elementsize = 12;                              break;                          default:                              var info = (MethodTableInfo *)elementType.TypeHandle.Value;                              elementsize = info->Size - sizeof(EntityInfo);                              break;                      }						                  }                  else                   {                      elementsize = IntPtr.Size;                  }                                // Header                  total += sizeof(EntityInfo);                  total += elementType.IsValueType ? 0 : 4; // MethodsTable for refTypes                  total += IsMultidimentional ? Dimensions * 8 : 4;               }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: fixed(EntityInfo *entity = &BasicInfo)              {                  var arr = EntityPtr.ToInstance<Array>(new IntPtr(entity));                  var elementType = arr.GetType().GetElementType();                    if(elementType.IsValueType)                  {                      var typecode = Type.GetTypeCode(elementType);                                                switch(typecode)                      {                          case TypeCode.Byte:                          case TypeCode.SByte:                          case TypeCode.Boolean:                              elementsize = 1;                              break;                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Char:                              elementsize = 2;                              break;                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Single:                              elementsize = 4;                              break;                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Double:                              elementsize = 8;                              break;                          case TypeCode.Decimal:                              elementsize = 12;                              break;                          default:                              var info = (MethodTableInfo *)elementType.TypeHandle.Value;                              elementsize = info->Size - sizeof(EntityInfo);                              break;                      }						                  }                  else                   {                      elementsize = IntPtr.Size;                  }                                // Header                  total += sizeof(EntityInfo);                  total += elementType.IsValueType ? 0 : 4; // MethodsTable for refTypes                  total += IsMultidimentional ? Dimensions * 8 : 4;               }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: if((total & 3) != 0) total += 4 - total % 4;
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: if((total & 3) != 0) total += 4 - total % 4;
Magic Number,System.Runtime.CLR,ArrayInfo,C:\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: if((total & 3) != 0) total += 4 - total % 4;
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: if ((entity->MethodTable) == StringTypeHandle.ToPointer())              {                  // TODO: on 4th nedds to be tested                  if (MajorNetVersion >= 4)                  {                      var length = *(int*)((int)entity + 8);                      return 4 * ((14 + 2 * length + 3) / 4);                  }                  else                  {                      // on 1.0 -> 3.5 string have additional RealLength field                      var length = *(int*)((int)entity + 12);                      return 4 * ((16 + 2 * length + 3) / 4);                  }              }              else if ( (flags2 & (int)MethodTableFlags2.IsInterface) != 0 ||                         ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))              {                  return entity->MethodTable->Size;              }              else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)              {                  return entity->MethodTable->Size;              }
Magic Number,System.Runtime.CLR,GCEx,C:\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,PointsToAllocated,The following statement contains a magic number: return !WinApi.IsBadReadPtr(ptr' 32);
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,ReplaceMethod,The following statement contains a magic number: unsafe              {                  if (IntPtr.Size == 8)                  {                      var d = (ulong*)destAdr.ToPointer();                      *d = *((ulong*)srcAdr.ToPointer());                  }                  else                  {                      var d = (uint*)destAdr.ToPointer();                      *d = *((uint*)srcAdr.ToPointer());                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress,The following statement contains a magic number: unsafe              {                  // Skip these                  const int skip = 10;                    // Read the method index.                  var location = (UInt64*)(method.MethodHandle.Value.ToPointer());                  var index = (int)(((*location) >> 32) & 0xFF);                    if (IntPtr.Size == 8)                  {                      // Get the method table                      var classStart = (ulong*)method.DeclaringType.TypeHandle.Value.ToPointer();                      var address = classStart + index + skip;                      return new IntPtr(address);                  }                  else                  {                      // Get the method table                      uint* classStart = (uint*)method.DeclaringType.TypeHandle.Value.ToPointer();                      uint* address = classStart + index + skip;                      return new IntPtr(address);                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress,The following statement contains a magic number: unsafe              {                  // Skip these                  const int skip = 10;                    // Read the method index.                  var location = (UInt64*)(method.MethodHandle.Value.ToPointer());                  var index = (int)(((*location) >> 32) & 0xFF);                    if (IntPtr.Size == 8)                  {                      // Get the method table                      var classStart = (ulong*)method.DeclaringType.TypeHandle.Value.ToPointer();                      var address = classStart + index + skip;                      return new IntPtr(address);                  }                  else                  {                      // Get the method table                      uint* classStart = (uint*)method.DeclaringType.TypeHandle.Value.ToPointer();                      uint* address = classStart + index + skip;                      return new IntPtr(address);                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress,The following statement contains a magic number: unsafe              {                  // Skip these                  const int skip = 10;                    // Read the method index.                  var location = (UInt64*)(method.MethodHandle.Value.ToPointer());                  var index = (int)(((*location) >> 32) & 0xFF);                    if (IntPtr.Size == 8)                  {                      // Get the method table                      var classStart = (ulong*)method.DeclaringType.TypeHandle.Value.ToPointer();                      var address = classStart + index + skip;                      return new IntPtr(address);                  }                  else                  {                      // Get the method table                      uint* classStart = (uint*)method.DeclaringType.TypeHandle.Value.ToPointer();                      uint* address = classStart + index + skip;                      return new IntPtr(address);                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetDynamicMethodAddress,The following statement contains a magic number: unsafe              {                  var handle = GetDynamicMethodRuntimeHandle(method);                  var ptr = (byte*)handle.Value.ToPointer();                  if (IsNet20Sp2OrGreater())                  {                      RuntimeHelpers.PrepareMethod(handle);                      return handle.GetFunctionPointer();                  }                  else                  {                      if (IntPtr.Size == 8)                      {                          var address = (ulong*)ptr;                          address = (ulong*)*(address + 5);                          return new IntPtr(address + 12);                      }                      else                      {                          var address = (uint*)ptr;                          address = (uint*)*(address + 5);                          return new IntPtr(address + 12);                      }                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetDynamicMethodAddress,The following statement contains a magic number: unsafe              {                  var handle = GetDynamicMethodRuntimeHandle(method);                  var ptr = (byte*)handle.Value.ToPointer();                  if (IsNet20Sp2OrGreater())                  {                      RuntimeHelpers.PrepareMethod(handle);                      return handle.GetFunctionPointer();                  }                  else                  {                      if (IntPtr.Size == 8)                      {                          var address = (ulong*)ptr;                          address = (ulong*)*(address + 5);                          return new IntPtr(address + 12);                      }                      else                      {                          var address = (uint*)ptr;                          address = (uint*)*(address + 5);                          return new IntPtr(address + 12);                      }                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetDynamicMethodAddress,The following statement contains a magic number: unsafe              {                  var handle = GetDynamicMethodRuntimeHandle(method);                  var ptr = (byte*)handle.Value.ToPointer();                  if (IsNet20Sp2OrGreater())                  {                      RuntimeHelpers.PrepareMethod(handle);                      return handle.GetFunctionPointer();                  }                  else                  {                      if (IntPtr.Size == 8)                      {                          var address = (ulong*)ptr;                          address = (ulong*)*(address + 5);                          return new IntPtr(address + 12);                      }                      else                      {                          var address = (uint*)ptr;                          address = (uint*)*(address + 5);                          return new IntPtr(address + 12);                      }                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetDynamicMethodAddress,The following statement contains a magic number: unsafe              {                  var handle = GetDynamicMethodRuntimeHandle(method);                  var ptr = (byte*)handle.Value.ToPointer();                  if (IsNet20Sp2OrGreater())                  {                      RuntimeHelpers.PrepareMethod(handle);                      return handle.GetFunctionPointer();                  }                  else                  {                      if (IntPtr.Size == 8)                      {                          var address = (ulong*)ptr;                          address = (ulong*)*(address + 5);                          return new IntPtr(address + 12);                      }                      else                      {                          var address = (uint*)ptr;                          address = (uint*)*(address + 5);                          return new IntPtr(address + 12);                      }                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetDynamicMethodAddress,The following statement contains a magic number: unsafe              {                  var handle = GetDynamicMethodRuntimeHandle(method);                  var ptr = (byte*)handle.Value.ToPointer();                  if (IsNet20Sp2OrGreater())                  {                      RuntimeHelpers.PrepareMethod(handle);                      return handle.GetFunctionPointer();                  }                  else                  {                      if (IntPtr.Size == 8)                      {                          var address = (ulong*)ptr;                          address = (ulong*)*(address + 5);                          return new IntPtr(address + 12);                      }                      else                      {                          var address = (uint*)ptr;                          address = (uint*)*(address + 5);                          return new IntPtr(address + 12);                      }                  }              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetDynamicMethodRuntimeHandle,The following statement contains a magic number: if (Environment.Version.Major == 4)              {                  MethodInfo getMethodDescriptorInfo = typeof(DynamicMethod).GetMethod("GetMethodDescriptor"'                          BindingFlags.NonPublic | BindingFlags.Instance);                  handle = (RuntimeMethodHandle)getMethodDescriptorInfo.Invoke(method' null);              }              else              {                  FieldInfo fieldInfo = typeof(DynamicMethod).GetField("m_method"' BindingFlags.NonPublic | BindingFlags.Instance);                  handle = ((RuntimeMethodHandle)fieldInfo.GetValue(method));              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress20SP2,The following statement contains a magic number: unsafe              {                  return new IntPtr(((int*)method.MethodHandle.Value.ToPointer() + 2));              }
Magic Number,System.Runtime.CLR,MethodUtil,C:\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,IsNet20Sp2OrGreater,The following statement contains a magic number: if (Environment.Version.Major == 4)              {                  return true;              }
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,UnmanagedHeap,The following statement contains a magic number: _totalSize = objectSize * capacity + capacity * IntPtr.Size * 2;
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,UnmanagedHeap,The following statement contains a magic number: _startingPointer = (void*)((long)_startingPointer + 2 * IntPtr.Size * capacity);
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,Allocate,The following statement contains a magic number: Stub.Construct(obj' 123);
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,AllocatePure,The following statement contains a magic number: _ctor.Invoke(obj' new object[]{123});
