Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,Cyclomatic complexity of the method is 9
Long Statement,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The length of the statement  "                      ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenClass))" is 147.
Long Statement,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The length of the statement  "            else if ((flags & (int)MethodTableFlags.InternalCorElementTypeExtraInfoMask) == (int)MethodTableFlags.InternalCorElementTypeExtraInfo_IfNotArrayThenValueType)" is 158.
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: switch(typecode)                     {                         case TypeCode.Byte:                         case TypeCode.SByte:                         case TypeCode.Boolean:                             elementsize = 1;                             break;                         case TypeCode.Int16:                         case TypeCode.UInt16:                         case TypeCode.Char:                             elementsize = 2;                             break;                         case TypeCode.Int32:                         case TypeCode.UInt32:                         case TypeCode.Single:                             elementsize = 4;                             break;                         case TypeCode.Int64:                         case TypeCode.UInt64:                         case TypeCode.Double:                             elementsize = 8;                             break;                         case TypeCode.Decimal:                             elementsize = 12;                             break;                         default:                             var info = (MethodTableInfo *)elementType.TypeHandle.Value;                             elementsize = info->Size - sizeof(EntityInfo);                             break;                     }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: switch(typecode)                     {                         case TypeCode.Byte:                         case TypeCode.SByte:                         case TypeCode.Boolean:                             elementsize = 1;                             break;                         case TypeCode.Int16:                         case TypeCode.UInt16:                         case TypeCode.Char:                             elementsize = 2;                             break;                         case TypeCode.Int32:                         case TypeCode.UInt32:                         case TypeCode.Single:                             elementsize = 4;                             break;                         case TypeCode.Int64:                         case TypeCode.UInt64:                         case TypeCode.Double:                             elementsize = 8;                             break;                         case TypeCode.Decimal:                             elementsize = 12;                             break;                         default:                             var info = (MethodTableInfo *)elementType.TypeHandle.Value;                             elementsize = info->Size - sizeof(EntityInfo);                             break;                     }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: switch(typecode)                     {                         case TypeCode.Byte:                         case TypeCode.SByte:                         case TypeCode.Boolean:                             elementsize = 1;                             break;                         case TypeCode.Int16:                         case TypeCode.UInt16:                         case TypeCode.Char:                             elementsize = 2;                             break;                         case TypeCode.Int32:                         case TypeCode.UInt32:                         case TypeCode.Single:                             elementsize = 4;                             break;                         case TypeCode.Int64:                         case TypeCode.UInt64:                         case TypeCode.Double:                             elementsize = 8;                             break;                         case TypeCode.Decimal:                             elementsize = 12;                             break;                         default:                             var info = (MethodTableInfo *)elementType.TypeHandle.Value;                             elementsize = info->Size - sizeof(EntityInfo);                             break;                     }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: switch(typecode)                     {                         case TypeCode.Byte:                         case TypeCode.SByte:                         case TypeCode.Boolean:                             elementsize = 1;                             break;                         case TypeCode.Int16:                         case TypeCode.UInt16:                         case TypeCode.Char:                             elementsize = 2;                             break;                         case TypeCode.Int32:                         case TypeCode.UInt32:                         case TypeCode.Single:                             elementsize = 4;                             break;                         case TypeCode.Int64:                         case TypeCode.UInt64:                         case TypeCode.Double:                             elementsize = 8;                             break;                         case TypeCode.Decimal:                             elementsize = 12;                             break;                         default:                             var info = (MethodTableInfo *)elementType.TypeHandle.Value;                             elementsize = info->Size - sizeof(EntityInfo);                             break;                     }
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: total += elementType.IsValueType ? 0 : 4;
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: total += IsMultidimentional ? Dimensions * 8 : 4;
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: total += IsMultidimentional ? Dimensions * 8 : 4;
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: total += 4 - total % 4;
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: total += 4 - total % 4;
Magic Number,System.Runtime.CLR,ArrayInfo,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\ArrayInfo.cs,SizeOf,The following statement contains a magic number: (total & 3) != 0
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: var length = *(int*)((int)entity + 8);
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: return 4 * ((14 + 2 * length + 3) / 4);
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: return 4 * ((14 + 2 * length + 3) / 4);
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: return 4 * ((14 + 2 * length + 3) / 4);
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: return 4 * ((14 + 2 * length + 3) / 4);
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: return 4 * ((14 + 2 * length + 3) / 4);
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,SizeOf,The following statement contains a magic number: MajorNetVersion >= 4
Magic Number,System.Runtime.CLR,GCEx,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\GCEx.cs,PointsToAllocated,The following statement contains a magic number: return !WinApi.IsBadReadPtr(ptr' 32);
Magic Number,System.Runtime.CLR,MethodUtil,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,ReplaceMethod,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,System.Runtime.CLR,MethodUtil,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress,The following statement contains a magic number: const int skip = 10;
Magic Number,System.Runtime.CLR,MethodUtil,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress,The following statement contains a magic number: var index = (int)(((*location) >> 32) & 0xFF);
Magic Number,System.Runtime.CLR,MethodUtil,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,System.Runtime.CLR,MethodUtil,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetDynamicMethodRuntimeHandle,The following statement contains a magic number: Environment.Version.Major == 4
Magic Number,System.Runtime.CLR,MethodUtil,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,GetMethodAddress20SP2,The following statement contains a magic number: return new IntPtr(((int*)method.MethodHandle.Value.ToPointer() + 2));
Magic Number,System.Runtime.CLR,MethodUtil,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\MethodUtil.cs,IsNet20Sp2OrGreater,The following statement contains a magic number: Environment.Version.Major == 4
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,UnmanagedHeap,The following statement contains a magic number: _totalSize = objectSize * capacity + capacity * IntPtr.Size * 2;
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,UnmanagedHeap,The following statement contains a magic number: _startingPointer = (void*)((long)_startingPointer + 2 * IntPtr.Size * capacity);
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,Allocate,The following statement contains a magic number: Stub.Construct(obj' 123);
Magic Number,System.Runtime.CLR,UnmanagedHeap<TPoolItem>,C:\research\architectureSmells\repos\mumusan_dotnetex\System.Runtime.CLR\UnmanagedHeap.cs,AllocatePure,The following statement contains a magic number: _ctor.Invoke(obj' new object[]{123});
