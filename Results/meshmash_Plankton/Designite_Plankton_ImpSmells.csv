Implementation smell,Namespace,Class,File,Method,Description
Long Method,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The method has 179 lines of code.
Complex Method,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,Cyclomatic complexity of the method is 24
Complex Method,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,CompactHelper,Cyclomatic complexity of the method is 9
Complex Method,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,CollapseEdge,Cyclomatic complexity of the method is 15
Complex Method,Plankton,PlanktonMesh,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonMesh.cs,Dual,Cyclomatic complexity of the method is 13
Complex Method,Plankton,PlanktonVertexList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonVertexList.cs,SplitVertex,Cyclomatic complexity of the method is 10
Long Statement,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,TriangleSplitEdge,The length of the statement  "            _mesh.Vertices[point_on_edge].X = 0.5F * (_mesh.Vertices[this[index].StartVertex].X + _mesh.Vertices[this.EndVertex(new_halfedge)].X); " is 134.
Long Statement,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,TriangleSplitEdge,The length of the statement  "            _mesh.Vertices[point_on_edge].Y = 0.5F * (_mesh.Vertices[this[index].StartVertex].Y + _mesh.Vertices[this.EndVertex(new_halfedge)].Y); " is 134.
Long Statement,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,TriangleSplitEdge,The length of the statement  "            _mesh.Vertices[point_on_edge].Z = 0.5F * (_mesh.Vertices[this[index].StartVertex].Z + _mesh.Vertices[this.EndVertex(new_halfedge)].Z); " is 134.
Long Statement,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,TriangleSplitEdge,The length of the statement  "            int new_face2 = _mesh.Faces.SplitFace(this.GetPairHalfedge(index)' this[this[this.GetPairHalfedge(index)].NextHalfedge].NextHalfedge); " is 134.
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The following statement contains a magic number: n < 3
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The following statement contains a magic number: id += 2;
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The following statement contains a magic number: id == 3 && vs[v2].OutgoingHalfedge > -1
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The following statement contains a magic number: switch (id)                      {                          case 1: // first is new' second is old                              // iterate through halfedges clockwise around vertex #v2 until boundary                              outer_prev = hs[loop[ii]].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 2: // second is new' first is old                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs[loop[i]].NextHalfedge;                              break;                          case 3: // both are new                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 4: // both are new (non-manifold vertex)                              // We have TWO boundaries to take care of here: first...                              outer_prev = hs[vs[v2].OutgoingHalfedge].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              hs[outer_prev].NextHalfedge = outer_next;                              hs[outer_next].PrevHalfedge = outer_prev;                              // and second...                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = vs[v2].OutgoingHalfedge;                              break;                      }
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The following statement contains a magic number: switch (id)                      {                          case 1: // first is new' second is old                              // iterate through halfedges clockwise around vertex #v2 until boundary                              outer_prev = hs[loop[ii]].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 2: // second is new' first is old                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs[loop[i]].NextHalfedge;                              break;                          case 3: // both are new                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 4: // both are new (non-manifold vertex)                              // We have TWO boundaries to take care of here: first...                              outer_prev = hs[vs[v2].OutgoingHalfedge].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              hs[outer_prev].NextHalfedge = outer_next;                              hs[outer_next].PrevHalfedge = outer_prev;                              // and second...                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = vs[v2].OutgoingHalfedge;                              break;                      }
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The following statement contains a magic number: switch (id)                      {                          case 1: // first is new' second is old                              // iterate through halfedges clockwise around vertex #v2 until boundary                              outer_prev = hs[loop[ii]].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 2: // second is new' first is old                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs[loop[i]].NextHalfedge;                              break;                          case 3: // both are new                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 4: // both are new (non-manifold vertex)                              // We have TWO boundaries to take care of here: first...                              outer_prev = hs[vs[v2].OutgoingHalfedge].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              hs[outer_prev].NextHalfedge = outer_next;                              hs[outer_next].PrevHalfedge = outer_prev;                              // and second...                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = vs[v2].OutgoingHalfedge;                              break;                      }
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,MergeFaces,The following statement contains a magic number: 3 > _mesh.Vertices.GetHalfedges(hs[index].StartVertex).Length
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,MergeFaces,The following statement contains a magic number: 3 > _mesh.Vertices.GetHalfedges(hs[pair].StartVertex).Length
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,Stellate,The following statement contains a magic number: _mesh.Halfedges.MakeConsecutive(ThisHalfEdge' CountBefore + i*2 + 3);
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,Stellate,The following statement contains a magic number: _mesh.Halfedges.MakeConsecutive(ThisHalfEdge' CountBefore + i*2 + 3);
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,Stellate,The following statement contains a magic number: _mesh.Halfedges.MakeConsecutive(CountBefore + (i*2) + 3' CountBefore + (i*2));
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,Stellate,The following statement contains a magic number: _mesh.Halfedges.MakeConsecutive(CountBefore + (i*2) + 3' CountBefore + (i*2));
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,Stellate,The following statement contains a magic number: _mesh.Halfedges.MakeConsecutive(CountBefore + (i*2) + 3' CountBefore + (i*2));
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,Stellate,The following statement contains a magic number: _mesh.Halfedges[CountBefore + (i * 2) + 3].AdjacentFace = _mesh.Halfedges[ThisHalfEdge].AdjacentFace;
Magic Number,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,Stellate,The following statement contains a magic number: _mesh.Halfedges[CountBefore + (i * 2) + 3].AdjacentFace = _mesh.Halfedges[ThisHalfEdge].AdjacentFace;
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,CompactHelper,The following statement contains a magic number: marker % 2 > 0
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,GetVertexCirculator,The following statement contains a magic number: count++ > 999
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,GetFaceCirculator,The following statement contains a magic number: count++ > 999
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,GetPairHalfedge,The following statement contains a magic number: return halfedgeIndex % 2 == 0 ? halfedgeIndex + 1 : halfedgeIndex - 1;
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,TriangleSplitEdge,The following statement contains a magic number: _mesh.Vertices[point_on_edge].X = 0.5F * (_mesh.Vertices[this[index].StartVertex].X + _mesh.Vertices[this.EndVertex(new_halfedge)].X);
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,TriangleSplitEdge,The following statement contains a magic number: _mesh.Vertices[point_on_edge].Y = 0.5F * (_mesh.Vertices[this[index].StartVertex].Y + _mesh.Vertices[this.EndVertex(new_halfedge)].Y);
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,TriangleSplitEdge,The following statement contains a magic number: _mesh.Vertices[point_on_edge].Z = 0.5F * (_mesh.Vertices[this[index].StartVertex].Z + _mesh.Vertices[this.EndVertex(new_halfedge)].Z);
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,CollapseEdge,The following statement contains a magic number: f >= 0 && fs.GetHalfedges(f).Length == 3
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,CollapseEdge,The following statement contains a magic number: f_pair >= 0 && fs.GetHalfedges(f_pair).Length == 3
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,CollapseEdge,The following statement contains a magic number: f > -1 && this.GetFaceCirculator(next).Count() < 3
Magic Number,Plankton,PlanktonHalfEdgeList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonHalfedgeList.cs,CollapseEdge,The following statement contains a magic number: f_pair > -1 && !this[pair_prev].IsUnused && this.GetFaceCirculator(pair_prev).Count() < 3
Magic Number,Plankton,PlanktonMesh,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonMesh.cs,Volume,The following statement contains a magic number: PlanktonXYZ R = this.Vertices[FaceVerts[2]].ToXYZ();
Magic Number,Plankton,PlanktonMesh,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonMesh.cs,Volume,The following statement contains a magic number: VolumeSum += (1 / 6d) * (                             P.X * Q.Y * R.Z +                             P.Y * Q.Z * R.X +                             P.Z * Q.X * R.Y -                             P.X * Q.Z * R.Y -                             P.Y * Q.X * R.Z -                             P.Z * Q.Y * R.X);
Magic Number,Plankton,PlanktonMesh,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonMesh.cs,Volume,The following statement contains a magic number: EdgeCount == 3
Magic Number,Plankton,PlanktonVertexList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonVertexList.cs,EraseCenterVertex,The following statement contains a magic number: this.GetHalfedges(v).Length < 3
Missing Default,Plankton,PlanktonFaceList,D:\research\architectureSmells\repos\meshmash_Plankton\src\Plankton\PlanktonFaceList.cs,AddFace,The following switch statement is missing a default case: switch (id)                      {                          case 1: // first is new' second is old                              // iterate through halfedges clockwise around vertex #v2 until boundary                              outer_prev = hs[loop[ii]].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 2: // second is new' first is old                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs[loop[i]].NextHalfedge;                              break;                          case 3: // both are new                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = hs.GetPairHalfedge(loop[i]);                              break;                          case 4: // both are new (non-manifold vertex)                              // We have TWO boundaries to take care of here: first...                              outer_prev = hs[vs[v2].OutgoingHalfedge].PrevHalfedge;                              outer_next = hs.GetPairHalfedge(loop[i]);                              hs[outer_prev].NextHalfedge = outer_next;                              hs[outer_next].PrevHalfedge = outer_prev;                              // and second...                              outer_prev = hs.GetPairHalfedge(loop[ii]);                              outer_next = vs[v2].OutgoingHalfedge;                              break;                      }
