Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,InsertCopy,The method has 107 lines of code.
Long Method,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21,The method has 101 lines of code.
Long Method,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The method has 226 lines of code.
Long Method,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The method has 161 lines of code.
Long Method,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The method has 167 lines of code.
Long Method,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteProperty,The method has 113 lines of code.
Long Method,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,Parse,The method has 135 lines of code.
Complex Method,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,ReplaceReferences,Cyclomatic complexity of the method is 17
Complex Method,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,InsertCopy,Cyclomatic complexity of the method is 21
Complex Method,Xbim.IO,IfcStorageTypeExtensions,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Enumerations\StorageType.cs,StorageType,Cyclomatic complexity of the method is 9
Complex Method,Xbim.Common.ExpressValidation,Validator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ExpressValidation\Validator.cs,PerformValidation,Cyclomatic complexity of the method is 14
Complex Method,Xbim.Common.ExpressValidation,Validator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ExpressValidation\Validator.cs,GetSchemaErrors,Cyclomatic complexity of the method is 14
Complex Method,Xbim.Common.ExpressValidation,Validator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ExpressValidation\Validator.cs,CheckCardinality,Cyclomatic complexity of the method is 11
Complex Method,Xbim.Common.Geometry,XbimShapeTriangulation,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeTriangulation.cs,ToPointsWithNormalsAndIndices,Cyclomatic complexity of the method is 8
Complex Method,Xbim.Common.Metadata,ExpressMetaData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Metadata\ExpressMetaData.cs,ExpressMetaData,Cyclomatic complexity of the method is 9
Complex Method,Xbim.Common.Metadata,ExpressType,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Metadata\ExpressType.cs,ExpressType,Cyclomatic complexity of the method is 16
Complex Method,Xbim.Common.Metadata,ExpressType,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Metadata\ExpressType.cs,GetIndexedValues,Cyclomatic complexity of the method is 9
Complex Method,Xbim.Common.Model,EntityCollection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\EntityCollection.cs,Where,Cyclomatic complexity of the method is 8
Complex Method,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21,Cyclomatic complexity of the method is 11
Complex Method,Xbim.Common.Step21,StepFileName,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepFileHeader.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,Cyclomatic complexity of the method is 48
Complex Method,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,Cyclomatic complexity of the method is 32
Complex Method,QUT.Gppg,ShiftReduceParser<TValue;TSpan>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\ShiftReduceParserCode.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,QUT.Gppg,ShiftReduceParser<TValue;TSpan>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\ShiftReduceParserCode.cs,DiscardInvalidTokens,Cyclomatic complexity of the method is 9
Complex Method,QUT.Gppg,ShiftReduceParser<TValue;TSpan>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\ShiftReduceParserCode.cs,CharToString,Cyclomatic complexity of the method is 9
Complex Method,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteHeader,Cyclomatic complexity of the method is 10
Complex Method,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteProperty,Cyclomatic complexity of the method is 21
Complex Method,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteValueType,Cyclomatic complexity of the method is 14
Complex Method,Xbim.IO.Step21,StepText,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepTextHelper.cs,ToPart21,Cyclomatic complexity of the method is 8
Complex Method,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,Parse,Cyclomatic complexity of the method is 26
Complex Method,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,Unescape,Cyclomatic complexity of the method is 9
Long Parameter List,Xbim.Common,EntityAttributeAttribute,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Attributes.cs,EntityAttributeAttribute,The method has 7 parameters. Parameters: order' state' entityType' memberType' minCardinality' maxCardinality' globalOrder
Long Parameter List,Xbim.Common,IModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\IModel.cs,InsertCopy,The method has 5 parameters. Parameters: toCopy' mappings' propTransform' includeInverses' keepLabels
Long Parameter List,Xbim.Common,ITransaction,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ITransaction.cs,DoReversibleAction,The method has 5 parameters. Parameters: doAction' undoAction' entity' changeType' property
Long Parameter List,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,InsertCopy,The method has 7 parameters. Parameters: model' toCopy' mappings' propTransform' includeInverses' keepLabels' getLabeledEntity
Long Parameter List,Xbim.Common,PersistEntity,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\PersistEntity.cs,SetValue,The method has 5 parameters. Parameters: setter' oldValue' newValue' notifyPropertyName' propertyOrder
Long Parameter List,Xbim.Common,PlaceboTransaction,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\PlaceboTransaction.cs,DoReversibleAction,The method has 5 parameters. Parameters: doAction' undoAction' entity' changeType' property
Long Parameter List,Xbim.Common.Collections,ExtendedSingleSet<TInner;TOuter>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Collections\ExtendedSingleSet.cs,ExtendedSingleSet,The method has 5 parameters. Parameters: getter' setter' extended' toOut' toIn
Long Parameter List,Xbim.IO,IModelProvider,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\IModelProvider.cs,Open,The method has 7 parameters. Parameters: stream' dataType' schemaVersion' modelType' accessMode' progDelegate' codePageOverride
Long Parameter List,Xbim.IO,IModelProvider,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\IModelProvider.cs,Open,The method has 6 parameters. Parameters: path' schemaVersion' ifcDatabaseSizeThreshHold' progDelegate' accessMode' codePageOverride
Long Parameter List,Xbim.Common.ExpressValidation,Validator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ExpressValidation\Validator.cs,CheckCardinality,The method has 5 parameters. Parameters: minimums' maximums' items' depth' sb
Long Parameter List,Xbim.Common.Geometry,XbimDimensionalExponents,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimDimensionalExponents.cs,XbimDimensionalExponents,The method has 7 parameters. Parameters: length' mass' time' elec' temp' substs' lumin
Long Parameter List,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,XbimGeometryData,The method has 9 parameters. Parameters: geometrylabel' productLabel' geomType' ifcTypeId' shape' dataArray2' geometryHash' styleLabel' counter
Long Parameter List,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,XbimGeometryData,The method has 7 parameters. Parameters: geometrylabel' productLabel' geomType' ifcTypeId' shape' transform' styleLabel
Long Parameter List,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,XbimMatrix3D,The method has 16 parameters. Parameters: m11' m12' m13' m14' m21' m22' m23' m24' m31' m32' m33' m34' offsetX' offsetY' offsetZ' m44
Long Parameter List,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,XbimRect3D,The method has 6 parameters. Parameters: x' y' z' sizeX' sizeY' sizeZ
Long Parameter List,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,InsertCopy,The method has 5 parameters. Parameters: toCopy' mappings' propTransform' includeInverses' keepLabels
Long Parameter List,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,InsertCopy,The method has 6 parameters. Parameters: toCopy' mappings' propTransform' includeInverses' keepLabels' noTransaction
Long Parameter List,Xbim.Common.Model,Transaction,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\Transaction.cs,DoReversibleAction,The method has 5 parameters. Parameters: doAction' undoAction' entity' changeType' propertyOrder
Long Parameter List,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,Write,The method has 5 parameters. Parameters: model' output' metadata' map' progress
Long Parameter List,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteProperty,The method has 5 parameters. Parameters: propType' propVal' output' map' metadata
Long Identifier,Xbim.Common,IModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\IModelFactors.cs,Initialise,The length of the parameter angleToRadiansConversionFactor is 30.
Long Identifier,Xbim.Common,IModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\IModelFactors.cs,Initialise,The length of the parameter lengthToMetresConversionFactor is 30.
Long Identifier,Xbim.Common.Metadata,ExpressMetaData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Metadata\ExpressMetaData.cs,,The length of the parameter _persistNameToExpressTypeLookup is 31.
Long Identifier,Xbim.Common.Metadata,ExpressMetaData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Metadata\ExpressMetaData.cs,,The length of the parameter _interfaceToExpressTypesLookup is 30.
Long Statement,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The length of the statement  "            PrecisionBoolean = Math.Max(Precision' OneMilliMetre / 10); //might need to make it courser than point precision if precision is very fine " is 138.
Long Statement,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The length of the statement  "            Rounding = Math.Abs((int)Math.Log10(Precision * 100)); //default round all points to 100 times  precision' this is used in the hash functions " is 141.
Long Statement,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,Replace,The length of the statement  "                throw new XbimException("It isn't possible to replace entities from different models. Insert copy of the entity first."); " is 121.
Long Statement,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,GetReferingTypes,The length of the statement  "                referingTypes.Add(new ReferingType { Type = type' SingleReferences = singleReferences' ListReferences = listReferences }); " is 122.
Long Statement,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,InsertCopy,The length of the statement  "                            InsertCopy(model' (IPersistEntity)value' mappings' propTransform' includeInverses' keepLabels' getLabeledEntity)' null); " is 120.
Long Statement,Xbim.Common,ModelHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelHelper.cs,InsertCopy,The length of the statement  "                                if (getAt == null) throw new Exception(string.Format("GetAt Method not found on ({0}) found"' copyColl.GetType().Name)); " is 120.
Long Statement,System.Collections.Generic,Enumerator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Collections\MultiValueDictionary.cs,MoveNext,The length of the statement  "                    current = new KeyValuePair<TKey' ICollection<TValue>>(enumerator.Current.Key' (ICollection<TValue>)enumerator.Current.Value); " is 125.
Long Statement,Xbim.Common.ExpressValidation,Validator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ExpressValidation\Validator.cs,GetSchemaErrors,The length of the statement  "            if (attr.State == EntityAttributeState.Optional && propVal is IOptionalItemSet && !((IOptionalItemSet)propVal).Initialized) " is 123.
Long Statement,Xbim.Common.ExpressValidation,Validator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ExpressValidation\Validator.cs,GetSchemaErrors,The length of the statement  "               (attr.MaxCardinality == null || attr.MaxCardinality.Length == 0 || attr.MaxCardinality.All(c => c < 1))) //we don't care how many so don't check " is 144.
Long Statement,Xbim.Common.Federation,FederatedModelInstances,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Federation\FederatedModelInstances.cs,CountOf,The length of the statement  "            return _model.ReferencingModel.Instances.CountOf<T>() + _model.ReferencedModels.Sum(refModel => refModel.Model.Instances.CountOf<T>()); " is 135.
Long Statement,Xbim.Common.Federation,FederatedModelInstances,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Federation\FederatedModelInstances.cs,GetEnumerator,The length of the statement  "            return _model.ReferencingModel.Instances.Concat(_model.ReferencedModels.SelectMany(rm => rm.Model.Instances)).GetEnumerator(); " is 126.
Long Statement,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,TransformBy,The length of the statement  "            return new XbimGeometryData(GeometryLabel' IfcProductLabel' GeometryType' IfcTypeId' ShapeData' t.ToArray()' GeometryHash' StyleLabel' Counter);" is 144.
Long Statement,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,Multiply,The length of the statement  "            return new XbimMatrix3D(mat1._m11 * mat2._m11 + mat1._m12 * mat2._m21 + mat1._m13 * mat2._m31 + mat1._m14 * mat2._offsetX' " is 122.
Long Statement,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,CreateLookAt,The length of the statement  "                -XbimVector3D.DotProduct(vector2' cameraPosition)' -XbimVector3D.DotProduct(vector3' cameraPosition)' -XbimVector3D.DotProduct(vector' cameraPosition)' 1.0); " is 157.
Long Statement,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,Decompose,The length of the statement  "            // via https://code.google.com/p/sharpdx/source/browse/Source/SharpDX/Matrix.cs?r=9f9e209b1be04f06f294bc6d72b06055ad6abdcc " is 122.
Long Statement,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,Decompose,The length of the statement  "            scale = new XbimVector3D(Math.Sqrt(M11 * M11 + M12 * M12 + M13 * M13)' Math.Sqrt(M21 * M21 + M22 * M22 + M23 * M23)' Math.Sqrt(M31 * M31 + M32 * M32 + M33 * M33)); " is 163.
Long Statement,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromArray,The length of the statement  "                double srXSz = bw.ReadSingle(); // all ToArray functions store position and size (bugfix: it was previously reading data as max) " is 128.
Long Statement,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromArray,The length of the statement  "                double srXSz = bw.ReadDouble(); // all ToArray functions store position and size (bugfix: it was previously reading data as max) " is 128.
Long Statement,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Inflate,The length of the statement  "            XbimVector3D v = new XbimVector3D(original.SizeX + (inflate* 2)' original.SizeY + (inflate * 2)' original.SizeZ + (inflate * 2)); " is 129.
Long Statement,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,ContainsCoords,The length of the statement  "            return (((((x >= this._x) && (x <= (this._x + this._sizeX))) && ((y >= this._y) && (y <= (this._y + this._sizeY)))) && (z >= this._z)) && (z <= (this._z + this._sizeZ))); " is 170.
Long Statement,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Intersects,The length of the statement  "            //Martin Cerny: I don't think this is correct as this will find only one specific intersection case but it is not general. " is 122.
Long Statement,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Intersects,The length of the statement  "            return (((((rect._x <= (this._x + this._sizeX)) && ((rect._x + rect._sizeX) >= this._x)) && ((rect._y <= (this._y + this._sizeY)) && ((rect._y + rect._sizeY) >= this._y))) && (rect._z <= (this._z + this._sizeZ))) && ((rect._z + rect._sizeZ) >= this._z)); " is 254.
Long Statement,Xbim.Common.Geometry,XbimRegionCollection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRegionCollection.cs,ToArray,The length of the statement  "                    bw.Write(Version); //write out a negative version number to indicate we are using new version which includes the coord data " is 123.
Long Statement,Xbim.Common.Geometry,XbimRegionCollection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRegionCollection.cs,FromArray,The length of the statement  "            int version = br.ReadInt32();//if version is a negative number' we have a new version model' and therefore have coord data to retrieve. Otherwise version is actually the count " is 175.
Long Statement,Xbim.Common.Geometry,XbimRegionCollection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRegionCollection.cs,FillFromArray,The length of the statement  "            int version = br.ReadInt32();//if version is a negative number' we have a new version model' and therefore have coord data to retrieve. Otherwise version is actually the count " is 175.
Long Statement,Xbim.Common.Geometry,XbimShapeGeometry,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeGeometry.cs,ToString,The length of the statement  "            return string.Format("{0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}'{8}"' _shapeLabel' _ifcShapeLabel' _geometryHash' _shapeLabel' _referenceCount' LOD' _format' _boundingBox.ToString()' _shapeData); " is 185.
Long Statement,Xbim.Common.Geometry,XbimShapeInstance,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeInstance.cs,ToString,The length of the statement  "            return string.Format("{0}'{1}'TypeId: {2}'{3}'{4}'{5}'{6}'{7}"'  _instanceLabel'_styleLabel' _expressTypeId' _shapeLabel'_ifcProductLabel'  _representationContext' _representationType' _transformation.ToString()); " is 213.
Long Statement,Xbim.Common.Metadata,ExpressMetaData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Metadata\ExpressMetaData.cs,AddParent,The length of the statement  "            if (baseParent == null || typeof(object) == baseParent || typeof(ValueType) == baseParent || typeof(PersistEntity) == baseParent) " is 129.
Long Statement,Xbim.Common.Model,EntityCollection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\EntityCollection.cs,InternalAdd,The length of the statement  "                    _model.Logger?.LogError($"Duplicate entity #{entity.EntityLabel} with different data type ({exist.ExpressType.Name}/{entity.ExpressType.Name})"' ex); " is 149.
Long Statement,Xbim.Common.Model,InMemoryGeometryStore,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\InMemoryGeometryStore.cs,EndInit,The length of the statement  "            _entityStyleLookup = ShapeInstances.GroupBy(s => s.Value.StyleLabel>0?s.Value.StyleLabel:-s.Value.IfcTypeId).ToDictionary(s => s.Key' v => " is 138.
Long Statement,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21Header,The length of the statement  "                throw new XbimParserException(string.Format("Parser failed on line {0}' column {1}"' position.EndLine' position.EndColumn)' e); " is 127.
Long Statement,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21,The length of the statement  "                    throw new XbimParserException("EntityFactory is not defined and no resolver is specified to create one. Data can't be created."); " is 129.
Long Statement,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21,The length of the statement  "                        throw new XbimParserException($"Entity factory resolver didn't resolve factory for schema '{string.Join("' "' Header.FileSchema.Schemas)}'"); " is 141.
Long Statement,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21,The length of the statement  "                throw new XbimParserException(string.Format("Parser failed on line {0}' column {1}"' position.EndLine' position.EndColumn)' e); " is 127.
Long Statement,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21,The length of the statement  "                    throw new XbimParserException($"Entity factory resolver didn't resolve factory for schema '{string.Join("' "' Header.FileSchema.Schemas)}'"); " is 141.
Long Statement,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,Write,The length of the statement  "                    var eft = instance.GetType().GetTypeInfo().Assembly.GetTypes().Where(t => typeof(IEntityFactory).GetTypeInfo().IsAssignableFrom(t)).FirstOrDefault(); " is 149.
Long Statement,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteHeader,The length of the statement  "            output.Write(@"'{0}'"' (header.FileName != null && header.FileName.Name != null) ? header.FileName.Name.ToPart21() : ""); " is 121.
Long Statement,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteHeader,The length of the statement  "                output.Write(@")' '{0}'' '{1}'' '{2}');"' header.FileName.PreprocessorVersion.ToPart21()' header.FileName.OriginatingSystem.ToPart21()' " is 135.
Long Statement,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteEntity,The length of the statement  "            if (map != null && map.Keys.Contains(entity.EntityLabel)) return; //if the entity is replaced in the map do not write it " is 120.
Long Statement,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,WriteProperty,The length of the statement  "            else if (propType.GetTypeInfo().IsValueType || propVal is string || propVal is byte[]) //it might be an in-built value type double' string etc. " is 143.
Long Statement,Xbim.IO.Step21,StepText,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepTextHelper.cs,ToPart21,The length of the statement  "                    // boundaries according to specs from http://www.buildingsmart-tech.org/downloads/accompanying-documents/guidelines/IFC2x%20Model%20Implementation%20Guide%20V2-0b.pdf " is 166.
Long Statement,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,Parse,The length of the statement  "                                throw new XbimParserException($"Unexpected scanner token {t.ToString()}' line {_scanner.yylloc.StartLine}' column {_scanner.yylloc.StartColumn}"); " is 146.
Long Statement,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,EndParse,The length of the statement  "                if (!TrySetObjectValue(defRef.HostEntity' defRef.ParameterIndex' defRef.ReferenceId' defRef.NestedIndex) && !skipping && !AllowMissingReferences) " is 145.
Long Statement,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,NewEntity,The length of the statement  "                Logger.LogError(LogEventIds.FailedEntity' $"Entity #{last.EntityLabel}={last.Entity?.GetType().Name.ToUpperInvariant()} wasn't closed and finished properly."); " is 159.
Long Statement,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,EndEntity,The length of the statement  "                        Logger?.LogError(LogEventIds.FailedEntity' $"Duplicate entity label #{p21.EntityLabel} with different types: ({existType}/{duplType})"); " is 136.
Long Statement,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,TrySetObjectValue,The length of the statement  "                    Logger?.LogError(LogEventIds.FailedPropertySetter' e' "Entity #{0'-5} {1}' error at parameter {2}"' refId' host.GetType().Name.ToUpper()' paramIndex + 1 ); " is 155.
Complex Conditional,Xbim.Common.ExpressValidation,Validator,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ExpressValidation\Validator.cs,GetSchemaErrors,The conditional expression  "(attr.MinCardinality == null || attr.MinCardinality.Length == 0 || attr.MinCardinality.All(c => c < 0)) &&                 (attr.MaxCardinality == null || attr.MaxCardinality.Length == 0 || attr.MaxCardinality.All(c => c < 1))"  is complex.
Complex Conditional,Xbim.Common.Metadata,ExpressMetaData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Metadata\ExpressMetaData.cs,AddParent,The conditional expression  "baseParent == null || typeof(object) == baseParent || typeof(ValueType) == baseParent || typeof(PersistEntity) == baseParent"  is complex.
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: SimplifyFaceCountThreshHold = 1000;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: OneMilliMeter = OneMilliMetre = OneMeter / 1000.0;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: OneKilometer = OneMeter * 1000.0;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: OneFoot = OneMeter / 3.2808;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: OneInch = OneMeter / 39.37;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: OneMile = OneMeter * 1609.344;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: DeflectionTolerance = OneMilliMetre * 5;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: DeflectionAngle = 0.5;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: VertexPointDiameter = OneMilliMetre * 10;
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: PrecisionMax = Math.Max(OneMilliMetre / 10' Precision * 100);
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: PrecisionMax = Math.Max(OneMilliMetre / 10' Precision * 100);
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: PrecisionBoolean = Math.Max(Precision' OneMilliMetre / 10);
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: PrecisionBooleanMax = Math.Max(OneMilliMetre * 100' Precision * 100);
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: PrecisionBooleanMax = Math.Max(OneMilliMetre * 100' Precision * 100);
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: Rounding = Math.Abs((int)Math.Log10(Precision * 100));
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: var exp = Math.Floor(Math.Log10(Math.Abs(OneMilliMetre / 10d)));
Magic Number,Xbim.Common,XbimModelFactors,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\ModelFactors.cs,Initialise,The following statement contains a magic number: ShortestEdgeLength = 10 * OneMilliMetre;
Magic Number,Xbim.Common.Collections,ItemSet<T>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Collections\ItemSet.cs,CreateNestedSet,The following statement contains a magic number: var result = (T)Activator.CreateInstance(toCreate' BindingFlags.NonPublic | BindingFlags.Instance' null'                  new object[] { OwningEntity' 4' Property }' null);
Magic Number,Xbim.Common.Geometry,XbimDimensionalExponents,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimDimensionalExponents.cs,XbimDimensionalExponents,The following statement contains a magic number: _exponents = new long[7];
Magic Number,Xbim.Common.Geometry,XbimDimensionalExponents,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimDimensionalExponents.cs,XbimDimensionalExponents,The following statement contains a magic number: _exponents[2] = time;
Magic Number,Xbim.Common.Geometry,XbimDimensionalExponents,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimDimensionalExponents.cs,XbimDimensionalExponents,The following statement contains a magic number: _exponents[3] = elec;
Magic Number,Xbim.Common.Geometry,XbimDimensionalExponents,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimDimensionalExponents.cs,XbimDimensionalExponents,The following statement contains a magic number: _exponents[4] = temp;
Magic Number,Xbim.Common.Geometry,XbimDimensionalExponents,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimDimensionalExponents.cs,XbimDimensionalExponents,The following statement contains a magic number: _exponents[5] = substs;
Magic Number,Xbim.Common.Geometry,XbimDimensionalExponents,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimDimensionalExponents.cs,XbimDimensionalExponents,The following statement contains a magic number: _exponents[6] = lumin;
Magic Number,Xbim.Common.Geometry,XbimFaceTriangulation,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimFaceTriangulation.cs,XbimFaceTriangulation,The following statement contains a magic number: _indices = new List<int>(numTriangles * 3);
Magic Number,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,GenerateGeometryHash,The following statement contains a magic number: const int p = 16777619;
Magic Number,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,GenerateGeometryHash,The following statement contains a magic number: var hash = array.Aggregate((int) 2166136261' (current' t) => (current ^ t)*p);
Magic Number,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,GenerateGeometryHash,The following statement contains a magic number: hash += hash << 13;
Magic Number,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,GenerateGeometryHash,The following statement contains a magic number: hash ^= hash >> 7;
Magic Number,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,GenerateGeometryHash,The following statement contains a magic number: hash += hash << 3;
Magic Number,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,GenerateGeometryHash,The following statement contains a magic number: hash ^= hash >> 17;
Magic Number,Xbim.Common.Geometry,XbimGeometryData,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimGeometryData.cs,GenerateGeometryHash,The following statement contains a magic number: hash += hash << 5;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: Debug.Assert(itms.Length == 16);
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromString,The following statement contains a magic number: return new XbimMatrix3D(                  Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[6]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[7]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[8]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[9]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[10]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[11]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[12]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[13]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[14]' System.Globalization.CultureInfo.InvariantCulture)'                  Convert.ToDouble(itms[15]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,FromArray,The following statement contains a magic number: bool useDouble = array.Length > 16 * sizeof(Single);
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,GetHashCode,The following statement contains a magic number: XbimPoint3D p = new XbimPoint3D(1' 3' 5);
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,GetHashCode,The following statement contains a magic number: XbimPoint3D p = new XbimPoint3D(1' 3' 5);
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,Decompose,The following statement contains a magic number: double ZeroTolerance = 0.000003;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: float[] ret = new float[16];
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[02] = (float)M13;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[03] = (float)M14;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[04] = (float)M21;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[05] = (float)M22;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[06] = (float)M23;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[07] = (float)M24;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[08] = (float)M31;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[09] = (float)M32;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[10] = (float)M33;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[11] = (float)M34;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[12] = (float)OffsetX;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[13] = (float)OffsetY;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[14] = (float)OffsetZ;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToFloatArray,The following statement contains a magic number: ret[15] = (float)M44;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: double[] ret = new double[16];
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[02] = M13;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[03] = M14;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[04] = M21;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[05] = M22;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[06] = M23;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[07] = M24;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[08] = M31;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[09] = M32;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[10] = M33;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[11] = M34;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[12] = OffsetX;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[13] = OffsetY;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[14] = OffsetZ;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToDoubleArray,The following statement contains a magic number: ret[15] = M44;
Magic Number,Xbim.Common.Geometry,XbimMatrix3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimMatrix3D.cs,ToArray,The following statement contains a magic number: Byte[] b = new Byte[16 * sizeof(double)];
Magic Number,Xbim.Common.Geometry,XbimPackedNormal,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimPackedNormal.cs,XbimPackedNormal,The following statement contains a magic number: _packedData = (ushort)(u << 8 | v);
Magic Number,Xbim.Common.Geometry,XbimPackedNormal,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimPackedNormal.cs,XbimPackedNormal,The following statement contains a magic number: const double tolerance = 1e-4;
Magic Number,Xbim.Common.Geometry,XbimPackedNormal,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimPackedNormal.cs,XbimPackedNormal,The following statement contains a magic number: _packedData = (byte)PackSize << 8 | (byte)PackSize;
Magic Number,Xbim.Common.Geometry,XbimPackedNormal,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimPackedNormal.cs,XbimPackedNormal,The following statement contains a magic number: lat = Math.PI/2;
Magic Number,Xbim.Common.Geometry,XbimPackedNormal,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimPackedNormal.cs,XbimPackedNormal,The following statement contains a magic number: lon = lon / (2 * Math.PI);
Magic Number,Xbim.Common.Geometry,XbimPackedNormal,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimPackedNormal.cs,XbimPackedNormal,The following statement contains a magic number: _packedData = (ushort)(u << 8 | v);
Magic Number,Xbim.Common.Geometry,XbimQuaternion,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimQuaternion.cs,RotationMatrix,The following statement contains a magic number: result.W = sqrt * 0.5f;
Magic Number,Xbim.Common.Geometry,XbimQuaternion,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimQuaternion.cs,RotationMatrix,The following statement contains a magic number: sqrt = 0.5f / sqrt;
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromArray,The following statement contains a magic number: array.Length == 6 * sizeof(float)
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromString,The following statement contains a magic number: Debug.Assert(itms.Length == 6);
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromString,The following statement contains a magic number: _z = Convert.ToSingle(itms[2]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromString,The following statement contains a magic number: _sizeX = Convert.ToSingle(itms[3]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromString,The following statement contains a magic number: _sizeY = Convert.ToSingle(itms[4]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,FromString,The following statement contains a magic number: _sizeZ = Convert.ToSingle(itms[5]' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Parse,The following statement contains a magic number: Debug.Assert(itms.Length == 6);
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Parse,The following statement contains a magic number: return new XbimRect3D(Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Parse,The following statement contains a magic number: return new XbimRect3D(Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Parse,The following statement contains a magic number: return new XbimRect3D(Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Parse,The following statement contains a magic number: return new XbimRect3D(Convert.ToDouble(itms[0]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[1]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[2]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[3]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[4]' System.Globalization.CultureInfo.InvariantCulture)'                                    Convert.ToDouble(itms[5]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Inflate,The following statement contains a magic number: XbimVector3D v = new XbimVector3D(original.SizeX + (x * 2)' original.SizeY + (y * 2)' original.SizeZ +(z * 2));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Inflate,The following statement contains a magic number: XbimVector3D v = new XbimVector3D(original.SizeX + (x * 2)' original.SizeY + (y * 2)' original.SizeZ +(z * 2));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Inflate,The following statement contains a magic number: XbimVector3D v = new XbimVector3D(original.SizeX + (x * 2)' original.SizeY + (y * 2)' original.SizeZ +(z * 2));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Inflate,The following statement contains a magic number: XbimVector3D v = new XbimVector3D(original.SizeX + (inflate* 2)' original.SizeY + (inflate * 2)' original.SizeZ + (inflate * 2));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Inflate,The following statement contains a magic number: XbimVector3D v = new XbimVector3D(original.SizeX + (inflate* 2)' original.SizeY + (inflate * 2)' original.SizeZ + (inflate * 2));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Inflate,The following statement contains a magic number: XbimVector3D v = new XbimVector3D(original.SizeX + (inflate* 2)' original.SizeY + (inflate * 2)' original.SizeZ + (inflate * 2));
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,Radius,The following statement contains a magic number: return  len / 2;
Magic Number,Xbim.Common.Geometry,XbimRect3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRect3D.cs,IsSimilar,The following statement contains a magic number: double t2 = 2 * t;
Magic Number,Xbim.Common.Geometry,XbimRegion,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimRegion.cs,ToXbimRect3D,The following statement contains a magic number: return new XbimRect3D(                  Centre - Size * 0.5'                  Size);
Magic Number,Xbim.Common.Geometry,XbimShapeTriangulation,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeTriangulation.cs,ToPointsWithNormalsAndIndices,The following statement contains a magic number: var f = new float[6];
Magic Number,Xbim.Common.Geometry,XbimShapeTriangulation,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeTriangulation.cs,ToPointsWithNormalsAndIndices,The following statement contains a magic number: f[2] = (float)p.Z;
Magic Number,Xbim.Common.Geometry,XbimShapeTriangulation,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeTriangulation.cs,ToPointsWithNormalsAndIndices,The following statement contains a magic number: f[3] = (float)v.X;
Magic Number,Xbim.Common.Geometry,XbimShapeTriangulation,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeTriangulation.cs,ToPointsWithNormalsAndIndices,The following statement contains a magic number: f[4] = (float)v.Y;
Magic Number,Xbim.Common.Geometry,XbimShapeTriangulation,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimShapeTriangulation.cs,ToPointsWithNormalsAndIndices,The following statement contains a magic number: f[5] = (float)v.Z;
Magic Number,Xbim.Common.Geometry,XbimVector3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimVector3D.cs,Angle,The following statement contains a magic number: cosinus > -0.70710678118655 && cosinus < 0.70710678118655
Magic Number,Xbim.Common.Geometry,XbimVector3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimVector3D.cs,Angle,The following statement contains a magic number: cosinus > -0.70710678118655 && cosinus < 0.70710678118655
Magic Number,Xbim.Common.Geometry,XbimVector3D,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Geometry\XbimVector3D.cs,IsNormal,The following statement contains a magic number: var ang = Math.PI / 2.0 - Angle(other);
Magic Number,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,StepModel,The following statement contains a magic number: ModelFactors = new XbimModelFactors(Math.PI / 180' 1e-3' 1e-5);
Magic Number,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,StepModel,The following statement contains a magic number: ModelFactors = new XbimModelFactors(Math.PI / 180' 1e-3' 1e-5);
Magic Number,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,StepModel,The following statement contains a magic number: ModelFactors = new XbimModelFactors(Math.PI / 180' 1e-3' 1e-5);
Magic Number,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,StepModel,The following statement contains a magic number: ModelFactors = new XbimModelFactors(Math.PI / 180' 1e-3' 1e-5);
Magic Number,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,StepModel,The following statement contains a magic number: ModelFactors = new XbimModelFactors(Math.PI / 180' 1e-3' 1e-5);
Magic Number,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,StepModel,The following statement contains a magic number: ModelFactors = new XbimModelFactors(Math.PI / 180' 1e-3' 1e-5);
Magic Number,Xbim.Common.Model,StepModel,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Model\StepModel.cs,LoadStep21Header,The following statement contains a magic number: var scanner = new XbimP21Scanner(stream' 1000);
Magic Number,Xbim.Presentation,EntitySelection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Presentation\EntitySelection.cs,ResetLog,The following statement contains a magic number: _position == _selectionLog.Count - 2
Magic Number,Xbim.Presentation,EntitySelection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Presentation\EntitySelection.cs,ResetLog,The following statement contains a magic number: _selectionLog.RemoveRange(_position + 1' _selectionLog.Count - 2);
Magic Number,Xbim.Presentation,EntitySelection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Presentation\EntitySelection.cs,ResetLog,The following statement contains a magic number: _position < _selectionLog.Count - 2
Magic Number,Xbim.Common.Step21,PropertyError,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\ParserErrorRegistry.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,Xbim.Common.Step21,PropertyError,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\ParserErrorRegistry.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Entity.GetType().GetHashCode();
Magic Number,Xbim.Common.Step21,PropertyError,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\ParserErrorRegistry.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Property.GetHashCode();
Magic Number,Xbim.Common.Step21,PropertyError,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\ParserErrorRegistry.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Exception.GetType().GetHashCode();
Magic Number,Xbim.Common.Step21,PropertyError,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\ParserErrorRegistry.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Value.GetType().GetHashCode();
Magic Number,Xbim.Common.Step21,StepFileName,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepFileHeader.cs,Parse,The following statement contains a magic number: switch (propIndex)              {                  case 0:                      _name = value.StringVal;                      break;                  case 1:                      _timeStamp = value.StringVal;                      break;                  case 2:                      _authorName.Add(value.StringVal);                      break;                  case 3:                      _organization.Add(value.StringVal);                      break;                  case 4:                      _preprocessorVersion = value.StringVal;                      break;                  case 5:                      _originatingSystem = value.StringVal;                      break;                  case 6:                      _authorizationName = value.StringVal;                      break;                  case 7:                      _authorizationMailingAddress.Add(value.StringVal);                      break;                  default:                      this.HandleUnexpectedAttribute(propIndex' value); break;              }
Magic Number,Xbim.Common.Step21,StepFileName,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepFileHeader.cs,Parse,The following statement contains a magic number: switch (propIndex)              {                  case 0:                      _name = value.StringVal;                      break;                  case 1:                      _timeStamp = value.StringVal;                      break;                  case 2:                      _authorName.Add(value.StringVal);                      break;                  case 3:                      _organization.Add(value.StringVal);                      break;                  case 4:                      _preprocessorVersion = value.StringVal;                      break;                  case 5:                      _originatingSystem = value.StringVal;                      break;                  case 6:                      _authorizationName = value.StringVal;                      break;                  case 7:                      _authorizationMailingAddress.Add(value.StringVal);                      break;                  default:                      this.HandleUnexpectedAttribute(propIndex' value); break;              }
Magic Number,Xbim.Common.Step21,StepFileName,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepFileHeader.cs,Parse,The following statement contains a magic number: switch (propIndex)              {                  case 0:                      _name = value.StringVal;                      break;                  case 1:                      _timeStamp = value.StringVal;                      break;                  case 2:                      _authorName.Add(value.StringVal);                      break;                  case 3:                      _organization.Add(value.StringVal);                      break;                  case 4:                      _preprocessorVersion = value.StringVal;                      break;                  case 5:                      _originatingSystem = value.StringVal;                      break;                  case 6:                      _authorizationName = value.StringVal;                      break;                  case 7:                      _authorizationMailingAddress.Add(value.StringVal);                      break;                  default:                      this.HandleUnexpectedAttribute(propIndex' value); break;              }
Magic Number,Xbim.Common.Step21,StepFileName,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepFileHeader.cs,Parse,The following statement contains a magic number: switch (propIndex)              {                  case 0:                      _name = value.StringVal;                      break;                  case 1:                      _timeStamp = value.StringVal;                      break;                  case 2:                      _authorName.Add(value.StringVal);                      break;                  case 3:                      _organization.Add(value.StringVal);                      break;                  case 4:                      _preprocessorVersion = value.StringVal;                      break;                  case 5:                      _originatingSystem = value.StringVal;                      break;                  case 6:                      _authorizationName = value.StringVal;                      break;                  case 7:                      _authorizationMailingAddress.Add(value.StringVal);                      break;                  default:                      this.HandleUnexpectedAttribute(propIndex' value); break;              }
Magic Number,Xbim.Common.Step21,StepFileName,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepFileHeader.cs,Parse,The following statement contains a magic number: switch (propIndex)              {                  case 0:                      _name = value.StringVal;                      break;                  case 1:                      _timeStamp = value.StringVal;                      break;                  case 2:                      _authorName.Add(value.StringVal);                      break;                  case 3:                      _organization.Add(value.StringVal);                      break;                  case 4:                      _preprocessorVersion = value.StringVal;                      break;                  case 5:                      _originatingSystem = value.StringVal;                      break;                  case 6:                      _authorizationName = value.StringVal;                      break;                  case 7:                      _authorizationMailingAddress.Add(value.StringVal);                      break;                  default:                      this.HandleUnexpectedAttribute(propIndex' value); break;              }
Magic Number,Xbim.Common.Step21,StepFileName,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepFileHeader.cs,Parse,The following statement contains a magic number: switch (propIndex)              {                  case 0:                      _name = value.StringVal;                      break;                  case 1:                      _timeStamp = value.StringVal;                      break;                  case 2:                      _authorName.Add(value.StringVal);                      break;                  case 3:                      _organization.Add(value.StringVal);                      break;                  case 4:                      _preprocessorVersion = value.StringVal;                      break;                  case 5:                      _originatingSystem = value.StringVal;                      break;                  case 6:                      _authorizationName = value.StringVal;                      break;                  case 7:                      _authorizationMailingAddress.Add(value.StringVal);                      break;                  default:                      this.HandleUnexpectedAttribute(propIndex' value); break;              }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[3] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[3] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[4] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[4] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[5] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[5] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[6] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[6] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[10] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[10] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[13] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[13] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[14] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[14] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[15] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[15] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[17] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[17] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[21] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[21] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[22] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[22] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[32] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[32] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[35] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[35] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[41] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[41] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[51] = nextState[50];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[51] = nextState[50];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[53] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[53] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[56] = nextState[23];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[56] = nextState[23];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[57] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[57] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[61] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[61] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[67] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[67] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[68] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[68] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[70] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[70] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[71] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[71] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[72] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[72] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[77] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[77] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[79] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[79] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[80] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[80] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[81] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[81] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[82] = nextState[7];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[82] = nextState[7];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[83] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[83] = nextState[2];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[98] = nextState[12];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scanner,The following statement contains a magic number: nextState[98] = nextState[12];
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,Scan,The following statement contains a magic number: switch (state)      {          case eofNum:              if (yywrap())                  return (int)Tokens.EOF;              break;          case 1: // Recognized '[\0]+''	Shortest string ""  ;              break;          case 2: // Recognized '[^)]''	Shortest string "\x01"          case 7: // Recognized '[^)]''	Shortest string "!"          case 8: // Recognized '[^)]''	Shortest string "\""          case 9: // Recognized '[^)]''	Shortest string "#"          case 11: // Recognized '[^)]''	Shortest string "&"          case 12: // Recognized '[^)]''	Shortest string "'"          case 18: // Recognized '[^)]''	Shortest string "."  SetValue();  return((int)Tokens.MISC);              break;          case 3: // Recognized '"\t"''	Shortest string "\t"  ;              break;          case 4: // Recognized '[\n]''	Shortest string "\n"  ;              break;          case 5: // Recognized '[\r]''	Shortest string "\r"  ;              break;          case 6: // Recognized '" "''	Shortest string "\x20"  ;              break;          case 10: // Recognized '[$]''	Shortest string "$"  return((int)Tokens.NONDEF);              break;          case 13: // Recognized '[(]''	Shortest string "("  return ('(');              break;          case 14: // Recognized '[)]''	Shortest string ")"  return (')');              break;          case 15: // Recognized '[\*]''	Shortest string "*"  return((int)Tokens.OVERRIDE);              break;          case 16: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+"          case 20: // Recognized '[\-\+0-9][0-9]*''	Shortest string "0"          case 63: // Recognized '[\-\+0-9][0-9]*''	Shortest string "00"          case 74: // Recognized '[\-\+0-9][0-9]*''	Shortest string "+0"  SetValue();  return((int)Tokens.INTEGER);              break;          case 17: // Recognized '[']''	Shortest string "'"  return (''');              break;          case 19: // Recognized '[/]''	Shortest string "/"  return ('/');              break;          case 21: // Recognized '[;]''	Shortest string ";"  return (';');              break;          case 22: // Recognized '[=]''	Shortest string "="  return ('=');              break;          case 23: // Recognized '[a-zA-Z0-9_]+''	Shortest string "A"          case 24: // Recognized '[a-zA-Z0-9_]+''	Shortest string "D"          case 25: // Recognized '[a-zA-Z0-9_]+''	Shortest string "E"          case 26: // Recognized '[a-zA-Z0-9_]+''	Shortest string "H"          case 27: // Recognized '[a-zA-Z0-9_]+''	Shortest string "I"          case 28: // Recognized '[a-zA-Z0-9_]+''	Shortest string "S"          case 29: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ST"          case 30: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STE"          case 31: // Recognized '[a-zA-Z0-9_]+''	Shortest string "STEP"          case 33: // Recognized '[a-zA-Z0-9_]+''	Shortest string "IS"          case 34: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ISO"          case 36: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HE"          case 37: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEA"          case 38: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEAD"          case 39: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADE"          case 40: // Recognized '[a-zA-Z0-9_]+''	Shortest string "HEADER"          case 42: // Recognized '[a-zA-Z0-9_]+''	Shortest string "EN"          case 43: // Recognized '[a-zA-Z0-9_]+''	Shortest string "END"          case 44: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDS"          case 45: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSC"          case 46: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSE"          case 47: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDST"          case 48: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTE"          case 49: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSTEP"          case 52: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSEC"          case 54: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCO"          case 55: // Recognized '[a-zA-Z0-9_]+''	Shortest string "ENDSCOP"          case 58: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DA"          case 59: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DAT"          case 60: // Recognized '[a-zA-Z0-9_]+''	Shortest string "DATA"          case 64: // Recognized '[a-zA-Z0-9_]+''	Shortest string "00E"  SetValue(); return((int)Tokens.TYPE);              break;          case 32: // Recognized 'STEP;''	Shortest string "STEP;"  return((int)Tokens.ISOSTEPSTART);              break;          case 35: // Recognized 'ISO[0-9\-]*;''	Shortest string "ISO;"  return((int)Tokens.ISOSTEPSTART);              break;          case 41: // Recognized 'HEADER;''	Shortest string "HEADER;"  return((int)Tokens.HEADER);              break;          case 50: // Recognized 'ENDSTEP;''	Shortest string "ENDSTEP;"  return((int)Tokens.ISOSTEPEND);              break;          case 51: // Recognized '"ENDSTEP;".*''	Shortest string "ENDSTEP;\x01"  return((int)Tokens.ISOSTEPEND);              break;          case 53: // Recognized 'ENDSEC;''	Shortest string "ENDSEC;"  return((int)Tokens.ENDSEC);              break;          case 56: // Recognized 'ENDSCOPE''	Shortest string "ENDSCOPE"  return((int)Tokens.ENDSCOPE);              break;          case 57: // Recognized '"END-ISO"[0-9\-]*;''	Shortest string "END-ISO;"  return((int)Tokens.ISOSTEPEND);              break;          case 61: // Recognized 'DATA;''	Shortest string "DATA;"  return((int)Tokens.DATA);              break;          case 62: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+."          case 67: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string "+.#IND"          case 69: // Recognized '[\-\+\.0-9][\.0-9]+((#INF)|(#IND))?''	Shortest string ".0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 65: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "+.E+"          case 66: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string "00E0"          case 73: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*''	Shortest string ".0E0"  SetValue(); return((int)Tokens.FLOAT);              break;          case 68: // Recognized '"/*"''	Shortest string "/*"  BEGIN(COMMENT);              break;          case 70: // Recognized '[\.][U][\.]''	Shortest string ".U."  return((int)Tokens.NONDEF);              break;          case 71: // Recognized '[\.][a-zA-Z0-9_ ]+[\.]''	Shortest string ".\x20."  SetValue(); return((int)Tokens.ENUM);              break;          case 72: // Recognized '[\.][TF][\.]''	Shortest string ".F."  SetValue(); return((int)Tokens.BOOLEAN);              break;          case 75: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "''"          case 76: // Recognized '[\']([\001-\046\050-\377]|(\'\')|(\\S\\.))*[\']''	Shortest string "'\\S\\'"  SetValue();  return((int)Tokens.STRING);              break;          case 77: // Recognized '&SCOPE''	Shortest string "&SCOPE"  return((int)Tokens.SCOPE);              break;          case 78: // Recognized '#[0-9]+''	Shortest string "#0"  SetValue(); return((int)Tokens.IDENTITY);              break;          case 79: // Recognized '#[0-9]+/=''	Shortest string "#0="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 80: // Recognized '#[0-9]+[ \t]*/=''	Shortest string "#0\t="  _yytrunc(1);   SetValue(); return((int)Tokens.ENTITY);              break;          case 81: // Recognized '[\"][0-9A-Fa-f]+[\"]''	Shortest string "\"0\""  SetValue(); return((int)Tokens.HEXA);              break;          case 82: // Recognized '![a-zA-Z0-9_]+''	Shortest string "!0"  SetValue(); return((int)Tokens.TYPE);              break;          case 83: // In <COMMENT> Recognized '"*/"''	Shortest string "*/"  BEGIN(INITIAL);              break;          default:              break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[0] = new State(new int[]{65'93'72'72'63'73}'new int[]{-1'1'-7'3'-5'4'-12'94'-13'95'-11'96'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[1] = new State(new int[]{64'2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[1] = new State(new int[]{64'2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[2] = new State(-1);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[3] = new State(-11);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[3] = new State(-11);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[4] = new State(new int[]{66'92}'new int[]{-6'5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[4] = new State(new int[]{66'92}'new int[]{-6'5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[4] = new State(new int[]{66'92}'new int[]{-6'5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[4] = new State(new int[]{66'92}'new int[]{-6'5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[4] = new State(new int[]{66'92}'new int[]{-6'5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[5] = new State(new int[]{73'54'84'55'63'84'67'17}'new int[]{-8'6'-9'85'-14'91'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[6] = new State(new int[]{67'17'73'54'84'55'63'84}'new int[]{-9'7'-14'80'-15'81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[7] = new State(new int[]{68'79}'new int[]{-10'8});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[7] = new State(new int[]{68'79}'new int[]{-10'8});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[7] = new State(new int[]{68'79}'new int[]{-10'8});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[7] = new State(new int[]{68'79}'new int[]{-10'8});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[7] = new State(new int[]{68'79}'new int[]{-10'8});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[8] = new State(new int[]{72'72'63'73}'new int[]{-11'9'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[9] = new State(new int[]{67'17'72'72'63'73}'new int[]{-9'10'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[10] = new State(new int[]{69'12}'new int[]{-4'11});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[10] = new State(new int[]{69'12}'new int[]{-4'11});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[10] = new State(new int[]{69'12}'new int[]{-4'11});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[10] = new State(new int[]{69'12}'new int[]{-4'11});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[10] = new State(new int[]{69'12}'new int[]{-4'11});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[11] = new State(-8);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[11] = new State(-8);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[12] = new State(new int[]{32'15'64'-4}'new int[]{-2'13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[12] = new State(new int[]{32'15'64'-4}'new int[]{-2'13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[12] = new State(new int[]{32'15'64'-4}'new int[]{-2'13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[12] = new State(new int[]{32'15'64'-4}'new int[]{-2'13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[12] = new State(new int[]{32'15'64'-4}'new int[]{-2'13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[12] = new State(new int[]{32'15'64'-4}'new int[]{-2'13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[12] = new State(new int[]{32'15'64'-4}'new int[]{-2'13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[13] = new State(new int[]{32'14'64'-5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[13] = new State(new int[]{32'14'64'-5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[13] = new State(new int[]{32'14'64'-5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[13] = new State(new int[]{32'14'64'-5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[13] = new State(new int[]{32'14'64'-5});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[14] = new State(-3);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[14] = new State(-3);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[15] = new State(-2);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[15] = new State(-2);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[16] = new State(-43);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[16] = new State(-43);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[17] = new State(new int[]{32'15'68'-15'69'-15}'new int[]{-2'18});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[18] = new State(new int[]{32'14'68'-16'69'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[18] = new State(new int[]{32'14'68'-16'69'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[18] = new State(new int[]{32'14'68'-16'69'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[18] = new State(new int[]{32'14'68'-16'69'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[18] = new State(new int[]{32'14'68'-16'69'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[18] = new State(new int[]{32'14'68'-16'69'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[18] = new State(new int[]{32'14'68'-16'69'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[19] = new State(new int[]{61'20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[19] = new State(new int[]{61'20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[19] = new State(new int[]{61'20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[20] = new State(new int[]{73'54'84'55'40'56'70'78}'new int[]{-24'21'-25'23'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[21] = new State(new int[]{59'22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[21] = new State(new int[]{59'22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[21] = new State(new int[]{59'22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[22] = new State(-44);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[22] = new State(-44);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[23] = new State(new int[]{72'72'63'73'71'63}'new int[]{-11'24'-26'74'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[24] = new State(new int[]{71'63'72'72'63'73}'new int[]{-26'25'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[25] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'26'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[26] = new State(new int[]{59'27});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[26] = new State(new int[]{59'27});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[26] = new State(new int[]{59'27});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[27] = new State(-45);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[27] = new State(-45);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[28] = new State(new int[]{40'46}'new int[]{-16'29'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[28] = new State(new int[]{40'46}'new int[]{-16'29'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[28] = new State(new int[]{40'46}'new int[]{-16'29'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[28] = new State(new int[]{40'46}'new int[]{-16'29'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[28] = new State(new int[]{40'46}'new int[]{-16'29'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[28] = new State(new int[]{40'46}'new int[]{-16'29'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[28] = new State(new int[]{40'46}'new int[]{-16'29'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[29] = new State(-50);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[29] = new State(-50);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[30] = new State(new int[]{63'52'41'51'78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-20'31'-21'32'-17'53'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[31] = new State(-36);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[31] = new State(-36);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[32] = new State(new int[]{44'34'63'50'41'51}'new int[]{-20'33});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[33] = new State(-37);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[33] = new State(-37);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[34] = new State(new int[]{78'36'74'37'75'38'76'39'77'40'82'41'83'42'80'43'81'44'40'46'73'49}'new int[]{-17'35'-16'45'-19'30'-18'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[35] = new State(-40);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[35] = new State(-40);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[36] = new State(-22);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[36] = new State(-22);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[37] = new State(-23);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[37] = new State(-23);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[38] = new State(-24);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[38] = new State(-24);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[39] = new State(-25);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[39] = new State(-25);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[40] = new State(-26);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[40] = new State(-26);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[41] = new State(-27);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[41] = new State(-27);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[42] = new State(-28);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[42] = new State(-28);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[43] = new State(-29);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[43] = new State(-29);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[44] = new State(-30);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[44] = new State(-30);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[45] = new State(-31);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[45] = new State(-31);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[46] = new State(-34);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[46] = new State(-34);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[47] = new State(new int[]{40'46}'new int[]{-16'48'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[47] = new State(new int[]{40'46}'new int[]{-16'48'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[47] = new State(new int[]{40'46}'new int[]{-16'48'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[47] = new State(new int[]{40'46}'new int[]{-16'48'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[47] = new State(new int[]{40'46}'new int[]{-16'48'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[47] = new State(new int[]{40'46}'new int[]{-16'48'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[47] = new State(new int[]{40'46}'new int[]{-16'48'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[48] = new State(-32);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[48] = new State(-32);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[49] = new State(-33);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[49] = new State(-33);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[50] = new State(-41);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[50] = new State(-41);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[51] = new State(-35);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[51] = new State(-35);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[52] = new State(-38);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[52] = new State(-38);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[53] = new State(-39);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[53] = new State(-39);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[54] = new State(-60);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[54] = new State(-60);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[55] = new State(-61);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[55] = new State(-61);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[56] = new State(new int[]{73'54'84'55}'new int[]{-27'57'-15'61});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[57] = new State(new int[]{41'58'73'54'84'55}'new int[]{-15'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[58] = new State(-51);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[58] = new State(-51);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[59] = new State(new int[]{40'46}'new int[]{-16'60'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[59] = new State(new int[]{40'46}'new int[]{-16'60'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[59] = new State(new int[]{40'46}'new int[]{-16'60'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[59] = new State(new int[]{40'46}'new int[]{-16'60'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[59] = new State(new int[]{40'46}'new int[]{-16'60'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[59] = new State(new int[]{40'46}'new int[]{-16'60'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[59] = new State(new int[]{40'46}'new int[]{-16'60'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[60] = new State(-49);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[60] = new State(-49);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[61] = new State(new int[]{40'46}'new int[]{-16'62'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[61] = new State(new int[]{40'46}'new int[]{-16'62'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[61] = new State(new int[]{40'46}'new int[]{-16'62'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[61] = new State(new int[]{40'46}'new int[]{-16'62'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[61] = new State(new int[]{40'46}'new int[]{-16'62'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[61] = new State(new int[]{40'46}'new int[]{-16'62'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[61] = new State(new int[]{40'46}'new int[]{-16'62'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[62] = new State(-48);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[62] = new State(-48);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[63] = new State(new int[]{47'71'73'-57'84'-57'40'-57}'new int[]{-30'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[64] = new State(new int[]{78'69}'new int[]{-29'65'-28'70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[64] = new State(new int[]{78'69}'new int[]{-29'65'-28'70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[64] = new State(new int[]{78'69}'new int[]{-29'65'-28'70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[64] = new State(new int[]{78'69}'new int[]{-29'65'-28'70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[64] = new State(new int[]{78'69}'new int[]{-29'65'-28'70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[64] = new State(new int[]{78'69}'new int[]{-29'65'-28'70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[64] = new State(new int[]{78'69}'new int[]{-29'65'-28'70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[65] = new State(new int[]{47'66'44'67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[65] = new State(new int[]{47'66'44'67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[65] = new State(new int[]{47'66'44'67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[65] = new State(new int[]{47'66'44'67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[65] = new State(new int[]{47'66'44'67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[66] = new State(-58);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[66] = new State(-58);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[67] = new State(new int[]{78'69}'new int[]{-28'68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[67] = new State(new int[]{78'69}'new int[]{-28'68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[67] = new State(new int[]{78'69}'new int[]{-28'68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[67] = new State(new int[]{78'69}'new int[]{-28'68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[67] = new State(new int[]{78'69}'new int[]{-28'68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[68] = new State(-55);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[68] = new State(-55);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[69] = new State(-53);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[69] = new State(-53);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[70] = new State(-54);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[70] = new State(-54);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[71] = new State(-56);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[71] = new State(-56);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[72] = new State(-59);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[72] = new State(-59);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[73] = new State(-47);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[73] = new State(-47);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[74] = new State(new int[]{73'54'84'55'40'56}'new int[]{-24'75'-15'28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[75] = new State(new int[]{59'76});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[75] = new State(new int[]{59'76});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[75] = new State(new int[]{59'76});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[76] = new State(-46);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[76] = new State(-46);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[77] = new State(-42);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[77] = new State(-42);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[78] = new State(-52);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[78] = new State(-52);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[79] = new State(-21);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[79] = new State(-21);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[80] = new State(-18);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[80] = new State(-18);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[81] = new State(new int[]{40'46}'new int[]{-16'82'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[81] = new State(new int[]{40'46}'new int[]{-16'82'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[81] = new State(new int[]{40'46}'new int[]{-16'82'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[81] = new State(new int[]{40'46}'new int[]{-16'82'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[81] = new State(new int[]{40'46}'new int[]{-16'82'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[81] = new State(new int[]{40'46}'new int[]{-16'82'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[81] = new State(new int[]{40'46}'new int[]{-16'82'-19'30});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[82] = new State(new int[]{59'83});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[82] = new State(new int[]{59'83});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[82] = new State(new int[]{59'83});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[83] = new State(-19);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[83] = new State(-19);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[84] = new State(-20);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[84] = new State(-20);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[85] = new State(new int[]{68'79}'new int[]{-10'86});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[85] = new State(new int[]{68'79}'new int[]{-10'86});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[85] = new State(new int[]{68'79}'new int[]{-10'86});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[85] = new State(new int[]{68'79}'new int[]{-10'86});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[85] = new State(new int[]{68'79}'new int[]{-10'86});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[86] = new State(new int[]{72'72'63'73}'new int[]{-11'87'-22'77'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[87] = new State(new int[]{63'90'67'17'72'72}'new int[]{-9'88'-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[88] = new State(new int[]{69'12}'new int[]{-4'89});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[88] = new State(new int[]{69'12}'new int[]{-4'89});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[88] = new State(new int[]{69'12}'new int[]{-4'89});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[88] = new State(new int[]{69'12}'new int[]{-4'89});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[88] = new State(new int[]{69'12}'new int[]{-4'89});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[89] = new State(-9);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[89] = new State(-9);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[90] = new State(new int[]{64'-10'63'-47'67'-47'72'-47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[91] = new State(-17);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[91] = new State(-17);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[92] = new State(-7);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[92] = new State(-7);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[93] = new State(-6);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[93] = new State(-6);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[94] = new State(-12);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[94] = new State(-12);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[95] = new State(-13);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[95] = new State(-13);
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: states[96] = new State(new int[]{72'72'63'73'64'-14}'new int[]{-22'16'-23'19});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[1] = new Rule(-3' new int[]{-1'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[1] = new Rule(-3' new int[]{-1'64});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[2] = new Rule(-2' new int[]{32});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[2] = new Rule(-2' new int[]{32});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[2] = new Rule(-2' new int[]{32});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[3] = new Rule(-2' new int[]{-2'32});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[3] = new Rule(-2' new int[]{-2'32});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[3] = new Rule(-2' new int[]{-2'32});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[3] = new Rule(-2' new int[]{-2'32});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[4] = new Rule(-4' new int[]{69});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[4] = new Rule(-4' new int[]{69});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[4] = new Rule(-4' new int[]{69});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[5] = new Rule(-4' new int[]{69'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[5] = new Rule(-4' new int[]{69'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[5] = new Rule(-4' new int[]{69'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[5] = new Rule(-4' new int[]{69'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[6] = new Rule(-5' new int[]{65});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[6] = new Rule(-5' new int[]{65});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[6] = new Rule(-5' new int[]{65});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[7] = new Rule(-6' new int[]{66});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[7] = new Rule(-6' new int[]{66});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[7] = new Rule(-6' new int[]{66});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[8] = new Rule(-7' new int[]{-5'-6'-8'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[9] = new Rule(-12' new int[]{-5'-6'-9'-10'-11'-9'-4});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[10] = new Rule(-13' new int[]{-5'-6'-9'-10'-11'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[11] = new Rule(-1' new int[]{-7});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[11] = new Rule(-1' new int[]{-7});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[12] = new Rule(-1' new int[]{-12});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[12] = new Rule(-1' new int[]{-12});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[13] = new Rule(-1' new int[]{-13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[13] = new Rule(-1' new int[]{-13});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[14] = new Rule(-1' new int[]{-11});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[14] = new Rule(-1' new int[]{-11});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[15] = new Rule(-9' new int[]{67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[15] = new Rule(-9' new int[]{67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[15] = new Rule(-9' new int[]{67});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[16] = new Rule(-9' new int[]{67'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[16] = new Rule(-9' new int[]{67'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[16] = new Rule(-9' new int[]{67'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[16] = new Rule(-9' new int[]{67'-2});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[17] = new Rule(-8' new int[]{-14});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[17] = new Rule(-8' new int[]{-14});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[17] = new Rule(-8' new int[]{-14});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[18] = new Rule(-8' new int[]{-8'-14});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[18] = new Rule(-8' new int[]{-8'-14});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[18] = new Rule(-8' new int[]{-8'-14});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[18] = new Rule(-8' new int[]{-8'-14});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[19] = new Rule(-14' new int[]{-15'-16'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[19] = new Rule(-14' new int[]{-15'-16'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[19] = new Rule(-14' new int[]{-15'-16'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[19] = new Rule(-14' new int[]{-15'-16'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[19] = new Rule(-14' new int[]{-15'-16'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[20] = new Rule(-14' new int[]{63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[20] = new Rule(-14' new int[]{63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[20] = new Rule(-14' new int[]{63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[21] = new Rule(-10' new int[]{68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[21] = new Rule(-10' new int[]{68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[21] = new Rule(-10' new int[]{68});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[22] = new Rule(-17' new int[]{78});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[22] = new Rule(-17' new int[]{78});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[22] = new Rule(-17' new int[]{78});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[23] = new Rule(-17' new int[]{74});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[23] = new Rule(-17' new int[]{74});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[23] = new Rule(-17' new int[]{74});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[24] = new Rule(-17' new int[]{75});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[24] = new Rule(-17' new int[]{75});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[24] = new Rule(-17' new int[]{75});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[25] = new Rule(-17' new int[]{76});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[25] = new Rule(-17' new int[]{76});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[25] = new Rule(-17' new int[]{76});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[26] = new Rule(-17' new int[]{77});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[26] = new Rule(-17' new int[]{77});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[26] = new Rule(-17' new int[]{77});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[27] = new Rule(-17' new int[]{82});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[27] = new Rule(-17' new int[]{82});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[27] = new Rule(-17' new int[]{82});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[28] = new Rule(-17' new int[]{83});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[28] = new Rule(-17' new int[]{83});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[28] = new Rule(-17' new int[]{83});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[29] = new Rule(-17' new int[]{80});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[29] = new Rule(-17' new int[]{80});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[29] = new Rule(-17' new int[]{80});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[30] = new Rule(-17' new int[]{81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[30] = new Rule(-17' new int[]{81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[30] = new Rule(-17' new int[]{81});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[31] = new Rule(-17' new int[]{-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[31] = new Rule(-17' new int[]{-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[31] = new Rule(-17' new int[]{-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[32] = new Rule(-17' new int[]{-18'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[32] = new Rule(-17' new int[]{-18'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[32] = new Rule(-17' new int[]{-18'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[32] = new Rule(-17' new int[]{-18'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[33] = new Rule(-18' new int[]{73});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[33] = new Rule(-18' new int[]{73});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[33] = new Rule(-18' new int[]{73});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[34] = new Rule(-19' new int[]{40});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[34] = new Rule(-19' new int[]{40});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[34] = new Rule(-19' new int[]{40});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[35] = new Rule(-20' new int[]{41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[35] = new Rule(-20' new int[]{41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[35] = new Rule(-20' new int[]{41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[36] = new Rule(-16' new int[]{-19'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[36] = new Rule(-16' new int[]{-19'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[36] = new Rule(-16' new int[]{-19'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[36] = new Rule(-16' new int[]{-19'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[37] = new Rule(-16' new int[]{-19'-21'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[37] = new Rule(-16' new int[]{-19'-21'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[37] = new Rule(-16' new int[]{-19'-21'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[37] = new Rule(-16' new int[]{-19'-21'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[37] = new Rule(-16' new int[]{-19'-21'-20});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[38] = new Rule(-16' new int[]{-19'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[38] = new Rule(-16' new int[]{-19'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[38] = new Rule(-16' new int[]{-19'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[38] = new Rule(-16' new int[]{-19'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[39] = new Rule(-21' new int[]{-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[39] = new Rule(-21' new int[]{-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[39] = new Rule(-21' new int[]{-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[40] = new Rule(-21' new int[]{-21'44'-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[40] = new Rule(-21' new int[]{-21'44'-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[40] = new Rule(-21' new int[]{-21'44'-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[40] = new Rule(-21' new int[]{-21'44'-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[40] = new Rule(-21' new int[]{-21'44'-17});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[41] = new Rule(-21' new int[]{-21'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[41] = new Rule(-21' new int[]{-21'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[41] = new Rule(-21' new int[]{-21'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[41] = new Rule(-21' new int[]{-21'63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[42] = new Rule(-11' new int[]{-22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[42] = new Rule(-11' new int[]{-22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[42] = new Rule(-11' new int[]{-22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[43] = new Rule(-11' new int[]{-11'-22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[43] = new Rule(-11' new int[]{-11'-22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[43] = new Rule(-11' new int[]{-11'-22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[43] = new Rule(-11' new int[]{-11'-22});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[44] = new Rule(-22' new int[]{-23'61'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[44] = new Rule(-22' new int[]{-23'61'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[44] = new Rule(-22' new int[]{-23'61'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[44] = new Rule(-22' new int[]{-23'61'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[44] = new Rule(-22' new int[]{-23'61'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[44] = new Rule(-22' new int[]{-23'61'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[45] = new Rule(-22' new int[]{-23'61'-25'-11'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[46] = new Rule(-22' new int[]{-23'61'-25'-26'-24'59});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[47] = new Rule(-22' new int[]{63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[47] = new Rule(-22' new int[]{63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[47] = new Rule(-22' new int[]{63});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[48] = new Rule(-27' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[48] = new Rule(-27' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[48] = new Rule(-27' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[48] = new Rule(-27' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[49] = new Rule(-27' new int[]{-27'-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[49] = new Rule(-27' new int[]{-27'-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[49] = new Rule(-27' new int[]{-27'-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[49] = new Rule(-27' new int[]{-27'-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[49] = new Rule(-27' new int[]{-27'-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[50] = new Rule(-24' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[50] = new Rule(-24' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[50] = new Rule(-24' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[50] = new Rule(-24' new int[]{-15'-16});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[51] = new Rule(-24' new int[]{40'-27'41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[51] = new Rule(-24' new int[]{40'-27'41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[51] = new Rule(-24' new int[]{40'-27'41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[51] = new Rule(-24' new int[]{40'-27'41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[51] = new Rule(-24' new int[]{40'-27'41});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[52] = new Rule(-25' new int[]{70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[52] = new Rule(-25' new int[]{70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[52] = new Rule(-25' new int[]{70});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[53] = new Rule(-28' new int[]{78});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[53] = new Rule(-28' new int[]{78});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[53] = new Rule(-28' new int[]{78});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[54] = new Rule(-29' new int[]{-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[54] = new Rule(-29' new int[]{-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[54] = new Rule(-29' new int[]{-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[55] = new Rule(-29' new int[]{-29'44'-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[55] = new Rule(-29' new int[]{-29'44'-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[55] = new Rule(-29' new int[]{-29'44'-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[55] = new Rule(-29' new int[]{-29'44'-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[55] = new Rule(-29' new int[]{-29'44'-28});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[56] = new Rule(-30' new int[]{47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[56] = new Rule(-30' new int[]{47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[56] = new Rule(-30' new int[]{47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[57] = new Rule(-26' new int[]{71});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[57] = new Rule(-26' new int[]{71});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[57] = new Rule(-26' new int[]{71});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[58] = new Rule(-26' new int[]{71'-30'-29'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[58] = new Rule(-26' new int[]{71'-30'-29'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[58] = new Rule(-26' new int[]{71'-30'-29'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[58] = new Rule(-26' new int[]{71'-30'-29'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[58] = new Rule(-26' new int[]{71'-30'-29'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[58] = new Rule(-26' new int[]{71'-30'-29'47});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[59] = new Rule(-23' new int[]{72});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[59] = new Rule(-23' new int[]{72});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[59] = new Rule(-23' new int[]{72});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[60] = new Rule(-15' new int[]{73});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[60] = new Rule(-15' new int[]{73});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[60] = new Rule(-15' new int[]{73});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[61] = new Rule(-15' new int[]{84});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[61] = new Rule(-15' new int[]{84});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,P21Parser,The following statement contains a magic number: rules[61] = new Rule(-15' new int[]{84});
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following statement contains a magic number: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Magic Number,Xbim.IO.Parser,BuildBuffer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\StepP21Lex.cs,Mark,The following statement contains a magic number: data.Mark(bPos - 2);
Magic Number,Xbim.IO.Parser,BufferElement,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\StepP21Lex.cs,Mark,The following statement contains a magic number: limit > brkIx + 16
Magic Number,Xbim.IO.Parser,CodePageHandling,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\StepP21Lex.cs,GetCodePage,The following statement contains a magic number: command = command.Substring(9);
Magic Number,Xbim.IO.Parser,XbimScanBuffer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\XbimScanBuffer.cs,Read,The following statement contains a magic number: Array.Resize(ref _buffer' _buffer.Length * 2);
Magic Number,Xbim.IO.Step21.Parser,PropertyValue,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\PropertyValue.cs,ConvertFromHex,The following statement contains a magic number: var value = Convert.ToInt32(m.Groups[1].Value' 16);
Magic Number,QUT.Gppg,ShiftReduceParser<TValue;TSpan>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\ShiftReduceParserCode.cs,Shift,The following statement contains a magic number: tokensSinceLastError > 5
Magic Number,QUT.Gppg,ShiftReduceParser<TValue;TSpan>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\ShiftReduceParserCode.cs,ReportError,The following statement contains a magic number: FsaState.ParserTable.Count < 7
Magic Number,QUT.Gppg,PushdownPrefixState<T>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\ShiftReduceParserCode.cs,Push,The following statement contains a magic number: T[] newarray = new T[array.Length * 2];
Magic Number,QUT.Gppg,PushdownPrefixState<T>,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\ShiftReduceParserCode.cs,Clear,The following statement contains a magic number: array = new T[8];
Magic Number,Xbim.IO.Step21,Part21Formatter,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Formatter.cs,Format,The following statement contains a magic number: var dt = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,Write,The following statement contains a magic number: counter % 1000 == 0
Magic Number,Xbim.IO.Step21,Part21Writer,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Part21Writer.cs,Write,The following statement contains a magic number: progress(100' null);
Magic Number,Xbim.IO.Step21,StepDateTimeHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepDateTimeHelper.cs,ToStep21,The following statement contains a magic number: var dt = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: var data2 = BitConverter.ToUInt16(winBytes' 4);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: var data3 = BitConverter.ToUInt16(winBytes' 6);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: var num = new uint[6];
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[0] = (data1 / 16777216);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[1] = (data1 % 16777216);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[2] = (uint)(data2 * 256 + data3 / 256);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[2] = (uint)(data2 * 256 + data3 / 256);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[2] = (uint)(data2 * 256 + data3 / 256);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[3] = (uint)((data3 % 256) * 65536 + winBytes[8] * 256 + winBytes[9]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[3] = (uint)((data3 % 256) * 65536 + winBytes[8] * 256 + winBytes[9]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[3] = (uint)((data3 % 256) * 65536 + winBytes[8] * 256 + winBytes[9]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[3] = (uint)((data3 % 256) * 65536 + winBytes[8] * 256 + winBytes[9]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[3] = (uint)((data3 % 256) * 65536 + winBytes[8] * 256 + winBytes[9]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[3] = (uint)((data3 % 256) * 65536 + winBytes[8] * 256 + winBytes[9]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[4] = (uint)(winBytes[10] * 65536 + winBytes[11] * 256 + winBytes[12]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[4] = (uint)(winBytes[10] * 65536 + winBytes[11] * 256 + winBytes[12]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[4] = (uint)(winBytes[10] * 65536 + winBytes[11] * 256 + winBytes[12]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[4] = (uint)(winBytes[10] * 65536 + winBytes[11] * 256 + winBytes[12]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[4] = (uint)(winBytes[10] * 65536 + winBytes[11] * 256 + winBytes[12]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[4] = (uint)(winBytes[10] * 65536 + winBytes[11] * 256 + winBytes[12]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[5] = (uint)(winBytes[13] * 65536 + winBytes[14] * 256 + winBytes[15]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[5] = (uint)(winBytes[13] * 65536 + winBytes[14] * 256 + winBytes[15]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[5] = (uint)(winBytes[13] * 65536 + winBytes[14] * 256 + winBytes[15]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[5] = (uint)(winBytes[13] * 65536 + winBytes[14] * 256 + winBytes[15]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[5] = (uint)(winBytes[13] * 65536 + winBytes[14] * 256 + winBytes[15]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: num[5] = (uint)(winBytes[13] * 65536 + winBytes[14] * 256 + winBytes[15]);
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: var digits = 2;
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: digits = 4;
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,ConvertToBase64,The following statement contains a magic number: i < 6
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,To64String,The following statement contains a magic number: result[nDigits - iDigit - 1] = CConversionTable[(int)(act % 64)];
Magic Number,Xbim.IO.Step21,StepGuidHelper,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepGuidHelper.cs,To64String,The following statement contains a magic number: act /= 64;
Magic Number,Xbim.IO.Step21,StepText,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepTextHelper.cs,ToPart21,The following statement contains a magic number: var sb = new StringBuilder(source.Length * 2);
Magic Number,Xbim.IO.Step21,XbimP21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Parser.cs,XbimP21Parser,The following statement contains a magic number: var entityApproxCount = 5000;
Magic Number,Xbim.IO.Step21,XbimP21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Parser.cs,XbimP21Parser,The following statement contains a magic number: entityApproxCount = Convert.ToInt32(_streamSize / 50);
Magic Number,Xbim.IO.Step21,XbimP21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Parser.cs,XbimP21Parser,The following statement contains a magic number: _deferredReferences = new List<DeferredReference>(entityApproxCount / 2);
Magic Number,Xbim.IO.Step21,XbimP21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Parser.cs,XbimP21Parser,The following statement contains a magic number: const int entityApproxCount = 5000;
Magic Number,Xbim.IO.Step21,XbimP21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Parser.cs,XbimP21Parser,The following statement contains a magic number: _deferredReferences = new List<DeferredReference>(entityApproxCount / 2);
Magic Number,Xbim.IO.Step21,XbimP21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Parser.cs,BeginList,The following statement contains a magic number: ListNestLevel < 2
Magic Number,Xbim.IO.Step21,XbimP21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Parser.cs,NewEntity,The following statement contains a magic number: var newPercentage = Convert.ToInt32(pos / _streamSize * 100.0);
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: var entityApproxCount = 50000;
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: entityApproxCount = Convert.ToInt32(_streamSize / 50);
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: double adjustRatio = 1.0 - (SkipTypes.Count / 600d);
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: entityApproxCount = 4;
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: _deferredReferences = new List<DeferredReference>(entityApproxCount / 4);
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: var entityApproxCount = (int)_streamSize / 50;
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: double adjustRatio = 1-((double)(SkipTypes.Count)) / 560;
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,XbimP21Scanner,The following statement contains a magic number: _deferredReferences = new List<DeferredReference>(entityApproxCount / 4);
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,Parse,The following statement contains a magic number: tok >= 63
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,EndParse,The following statement contains a magic number: _progressStatus?.Invoke(100' "Parsing finished.");
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,BeginList,The following statement contains a magic number: ListNestLevel < 2
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,NewEntity,The following statement contains a magic number: _reportEntityCount++ < 500
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,NewEntity,The following statement contains a magic number: var percentage = Convert.ToInt32(pos / _streamSize * 100.0);
Magic Number,Xbim.IO.Step21,XbimP21Scanner,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21Scanner.cs,GetLabel,The following statement contains a magic number: component < 0 || component > 9
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,ParseCodeTable,The following statement contains a magic number: eof || !HasLength(2)
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,ParseHex8,The following statement contains a magic number: eof || !HasLength(2)
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,ParseHex8,The following statement contains a magic number: var byteval = GetHexLength(2);
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,GetHexLength,The following statement contains a magic number: StringLenght /= 2;
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,GetHexLength,The following statement contains a magic number: var hex = p21.Substring(iCurChar' 2);
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,GetHexLength,The following statement contains a magic number: ret[i] = Convert.ToByte(hex' 16);
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,GetHexLength,The following statement contains a magic number: Move(2);
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,ParseTerminatedHex,The following statement contains a magic number: Move(4);
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,ParseTerminatedHex,The following statement contains a magic number: stringLenght == 8
Magic Number,Xbim.IO.Step21,XbimP21StringDecoder,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\XbimP21StringDecoder.cs,ParseTerminatedHex,The following statement contains a magic number: builder.Append(enc.GetChars(byteval' 0' stringLenght / 2));
Missing Default,Xbim.Presentation,EntitySelection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Presentation\EntitySelection.cs,RollBack,The following switch statement is missing a default case: switch (e.Action)              {                  case Action.Add:                      RemoveRange(e.Entities);                      break;                  case Action.Remove:                      AddRange(e.Entities);                      break;              }
Missing Default,Xbim.Presentation,EntitySelection,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Presentation\EntitySelection.cs,RollForward,The following switch statement is missing a default case: switch (e.Action)              {                  case Action.Add:                      AddRange(e.Entities);                      break;                  case Action.Remove:                      RemoveRange(e.Entities);                      break;              }
Missing Default,Xbim.IO.Parser,P21Parser,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\Parser\Parser.cs,DoAction,The following switch statement is missing a default case: switch (action)      {        case 4: // endStep -> ISOSTEPEND  #line 38 "StepP21Parser.y"                      {EndParse();}  #line default          break;        case 5: // endStep -> ISOSTEPEND' trailingSpace  #line 40 "StepP21Parser.y"   {EndParse();}  #line default          break;        case 6: // beginStep -> ISOSTEPSTART  #line 43 "StepP21Parser.y"      {BeginParse(); }  #line default          break;        case 7: // startHeader -> HEADER  #line 48 "StepP21Parser.y"      {InHeader=true; BeginHeader();}  #line default          break;        case 14: // stepFile -> model  #line 59 "StepP21Parser.y"           { EndParse(); }  #line default          break;        case 15: // endSec -> ENDSEC  #line 62 "StepP21Parser.y"                 {EndSec();}  #line default          break;        case 16: // endSec -> ENDSEC' trailingSpace  #line 63 "StepP21Parser.y"                          {EndSec();}  #line default          break;        case 19: // headerEntity -> entityType' listArgument' ';'  #line 69 "StepP21Parser.y"                                             {EndHeaderEntity();}  #line default          break;        case 21: // endOfHeader -> DATA  #line 73 "StepP21Parser.y"   {  InHeader=false; EndHeader();  }  #line default          break;        case 22: // argument -> IDENTITY  #line 76 "StepP21Parser.y"                              {SetObjectValue(CurrentSemanticValue.strVal);}  #line default          break;        case 23: // argument -> INTEGER  #line 77 "StepP21Parser.y"                          {SetIntegerValue(CurrentSemanticValue.strVal);}  #line default          break;        case 24: // argument -> FLOAT  #line 78 "StepP21Parser.y"                            {SetFloatValue(CurrentSemanticValue.strVal);}  #line default          break;        case 25: // argument -> STRING  #line 79 "StepP21Parser.y"                         {SetStringValue(CurrentSemanticValue.strVal);}  #line default          break;        case 26: // argument -> BOOLEAN  #line 80 "StepP21Parser.y"                          {SetBooleanValue(CurrentSemanticValue.strVal);}  #line default          break;        case 27: // argument -> ENUM  #line 81 "StepP21Parser.y"                           {SetEnumValue(CurrentSemanticValue.strVal);}  #line default          break;        case 28: // argument -> HEXA  #line 82 "StepP21Parser.y"                           {SetHexValue(CurrentSemanticValue.strVal);}  #line default          break;        case 29: // argument -> NONDEF  #line 83 "StepP21Parser.y"                         {SetNonDefinedValue();}  #line default          break;        case 30: // argument -> OVERRIDE  #line 84 "StepP21Parser.y"                           {SetOverrideValue();}  #line default          break;        case 32: // argument -> listType' listArgument  #line 86 "StepP21Parser.y"                            {EndNestedType(CurrentSemanticValue.strVal);}  #line default          break;        case 33: // listType -> TYPE  #line 90 "StepP21Parser.y"   {  BeginNestedType(CurrentSemanticValue.strVal);  }  #line default          break;        case 34: // beginList -> '('  #line 93 "StepP21Parser.y"   {  BeginList(); }  #line default          break;        case 35: // endList -> ')'  #line 96 "StepP21Parser.y"   { EndList(); }  #line default          break;        case 41: // argumentList -> argumentList' error  #line 104 "StepP21Parser.y"                        {SetErrorMessage();}  #line default          break;        case 44: // bloc -> entityLabel' '='' entity' ';'  #line 109 "StepP21Parser.y"                                    {EndEntity();}  #line default          break;        case 45: // bloc -> entityLabel' '='' beginScope' model' endScope' entity' ';'  #line 110 "StepP21Parser.y"                                                         {EndEntity();}  #line default          break;        case 46: // bloc -> entityLabel' '='' beginScope' endScope' entity' ';'  #line 111 "StepP21Parser.y"                                                   {EndEntity();}  #line default          break;        case 47: // bloc -> error  #line 112 "StepP21Parser.y"            {SetErrorMessage();EndEntity();}  #line default          break;        case 53: // uniqueID -> IDENTITY  #line 124 "StepP21Parser.y"   {   SetObjectValue(CurrentSemanticValue.strVal);  }  #line default          break;        case 56: // beginExport -> '/'  #line 130 "StepP21Parser.y"   {  BeginList();  }  #line default          break;        case 59: // entityLabel -> ENTITY  #line 139 "StepP21Parser.y"   {  NewEntity(CurrentSemanticValue.strVal);  }  #line default          break;        case 60: // entityType -> TYPE  #line 142 "StepP21Parser.y"   {  SetType(CurrentSemanticValue.strVal);  }  #line default          break;        case 61: // entityType -> ILLEGALCHAR  #line 145 "StepP21Parser.y"   {  CharacterError();  }  #line default          break;      }
Missing Default,Xbim.IO.Step21,StepText,D:\research\architectureSmells\repos\xBimTeam_XbimEssentials\Xbim.Common\Step21\StepTextHelper.cs,ToDouble,The following switch statement is missing a default case: switch (val)              {                  case "-1.#INF":                      return double.NegativeInfinity;                  case "1.#INF":                      return double.PositiveInfinity;                  case "-1.#IND":                      return double.NaN;              }
