Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The method has 136 lines of code.
Complex Method,Xbim.IO.TableStore,ClassMapping,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\ClassMapping.cs,GetContext,Cyclomatic complexity of the method is 18
Complex Method,Xbim.IO.TableStore,ForwardReference,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\ForwardReference.cs,AddToPath,Cyclomatic complexity of the method is 9
Complex Method,Xbim.IO.TableStore,ReferenceContext,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\ReferenceContext.cs,LoadData,Cyclomatic complexity of the method is 14
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ProcessPartialSheets,Cyclomatic complexity of the method is 9
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ResolveContext,Cyclomatic complexity of the method is 17
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ResolveMultiContext,Cyclomatic complexity of the method is 12
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,IsMultiRow,Cyclomatic complexity of the method is 9
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetConcreteType,Cyclomatic complexity of the method is 10
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,AdjustMapping,Cyclomatic complexity of the method is 15
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,Cyclomatic complexity of the method is 11
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,Cyclomatic complexity of the method is 16
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,Store,Cyclomatic complexity of the method is 11
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetValue,Cyclomatic complexity of the method is 19
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetFallbackValue,Cyclomatic complexity of the method is 8
Complex Method,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,Cyclomatic complexity of the method is 8
Long Parameter List,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,Store,The method has 5 parameters. Parameters: sheet' entity' mapping' expType' context
Long Statement,Xbim.IO.TableStore,ForwardReference,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\ForwardReference.cs,ResolveParent,The length of the statement  "                Store.Log.WriteLine("There is more than one parent of type {0} for type {1}. All parents will be used."' Context.SegmentType.ExpressName' " is 137.
Long Statement,Xbim.IO.TableStore,ReferenceContext,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\ReferenceContext.cs,LoadData,The length of the statement  "                if (tableCell != null && tableCell.CellType == CellType.String && !string.IsNullOrWhiteSpace(tableCell.StringCellValue)) " is 120.
Long Statement,Xbim.IO.TableStore,ReferenceContext,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\ReferenceContext.cs,LoadData,The length of the statement  "                if (cell == null || cell.CellType != CellType.String || string.Equals(cell.StringCellValue' Mapping.DefaultValue' StringComparison.OrdinalIgnoreCase))  " is 150.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CacheMultiRowIndices,The length of the statement  "                    Log.WriteLine("Table {0} is defined in multiple class mappings with different key columns for a multi-value records"' mapping.TableName); " is 137.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetReferencedEntities,The length of the statement  "            if (context.TypeHintMapping == null && context.TableHintMapping == null && context.ScalarChildren.Any() && !context.HasData) " is 124.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,AdjustMapping,The length of the statement  "            var headings = headerRow.Cells.Where(c => c.CellType == CellType.String || !string.IsNullOrWhiteSpace(c.StringCellValue)).ToList(); " is 131.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetNonNullableType,The length of the statement  "            return type.IsGenericType && type.GetGenericTypeDefinition() == typeof (Nullable<>) ? Nullable.GetUnderlyingType(type) : type; " is 126.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                        Log.WriteLine("There is no suitable value for {0} in cell {1}{2}' sheet {3}"' propType.Name' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                        Log.WriteLine("There is no suitable value for {0} in cell {1}{2}' sheet {3}"' propType.Name' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                        Log.WriteLine("There is no suitable value for {0} in cell {1}{2}' sheet {3}"' propType.Name' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                        Log.WriteLine("There is no suitable value for {0} in cell {1}{2}' sheet {3}"' propType.Name' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                            Log.WriteLine("Wrong boolean format of {0} in cell {1}{2}' sheet {3}"' cell.StringCellValue' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                            Log.WriteLine("There is no suitable value for {0} in cell {1}{2}' sheet {3}"' propType.Name' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                    Log.WriteLine("There is no suitable value for {0} in cell {1}{2}' sheet {3}"' propType.Name' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,CreateSimpleValue,The length of the statement  "                    Log.WriteLine("There is no suitable value for {0} in cell {1}{2}' sheet {3}"' propType.Name' CellReference.ConvertNumToColString(cell.ColumnIndex)' cell.RowIndex + 1' cell.Sheet.SheetName); " is 189.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,Store,The length of the statement  "            if ((context?.RootEntity != null) && (expType?.ExpressNameUpper == "TYPEORCOMPONENT") ) //without CobieExpress reference and not using reflection this is as good as it gets to ID Assembly " is 187.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,Store,The length of the statement  "            if (value is double || value is float || value is int || value is long || value is short || value is byte || value is uint || value is ulong || " is 143.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetPropertyInfo,The length of the statement  "                    throw new XbimException(string.Format("{0} doesn't have an index access for type {1}"' type.Name' index.GetType().Name)); " is 121.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetPropertyInfo,The length of the statement  "                    throw new XbimException(string.Format("It wasn't possible to find property {0} in the object of type {1}"' name' type.Name)); " is 125.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetPropertyInfo,The length of the statement  "                        throw new XbimException(string.Format("Property {0} in the object of type {1} doesn't have an index access for type {2}"' name' type.Name' index.GetType().Name)); " is 162.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,SetUpTables,The length of the statement  "            foreach (var classMapping in Mapping.ClassMappings.Where(classMapping => string.IsNullOrWhiteSpace(classMapping.TableName))) " is 124.
Long Statement,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The length of the statement  "                var props = typeof (IndexedColors).GetFields(BindingFlags.Static | BindingFlags.Public).Where(p => p.FieldType == typeof (IndexedColors)); " is 138.
Complex Conditional,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,LoadFromSheet,The conditional expression  "!row.Cells.Any()  ||                       row.Cells.All(c => c.CellType == CellType.Blank) ||                      row.Cells.All(c => c.CellType == CellType.String &&  string.IsNullOrWhiteSpace(c.StringCellValue))"  is complex.
Complex Conditional,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetReferencedEntities,The conditional expression  "context.TypeHintMapping == null && context.TableHintMapping == null && context.ScalarChildren.Any() && !context.HasData"  is complex.
Complex Conditional,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,Store,The conditional expression  "value is double || value is float || value is int || value is long || value is short || value is byte || value is uint || value is ulong ||                  value is ushort"  is complex.
Complex Conditional,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,SetUpHeader,The conditional expression  "existStyle != null &&                       existStyle.FillForegroundColor == style.FillForegroundColor &&                      existStyle.BorderTop == style.BorderTop &&                      existStyle.TopBorderColor == style.TopBorderColor"  is complex.
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ProcessPartialSheets,The following statement contains a magic number: foreach (var sheet in partialSheets)              {                  var mapping =                      Mapping.ClassMappings.FirstOrDefault(                          m => string.Equals(sheet.SheetName' m.TableName' StringComparison.OrdinalIgnoreCase));                  if (mapping == null)                      continue;                    AdjustMapping(sheet' mapping);                  CacheColumnIndices(mapping);                  var context = GetReferenceContext(mapping);                    var enumerator = sheet.GetRowEnumerator();                  var emptyRows = 0;                  while (enumerator.MoveNext())                  {                      var row = enumerator.Current as IRow;                      //skip header row                      if (row == null || row.RowNum == 0)                          continue;                        if (!row.Cells.Any() || row.Cells.All(c => c.CellType == CellType.Blank))                      {                          emptyRows++;                          if (emptyRows == 3)                              //break processing if this is third empty row                              break;                          //skip empty row                          continue;                      }                      emptyRows = 0;                        context.LoadData(row' false);                      var entities = GetReferencedEntities(context);                      var parentContext = context.Children.FirstOrDefault(c => c.ContextType == ReferenceContextType.Parent);                      if (parentContext == null)                      {                          Log.WriteLine("Table {0} is marked as a partial table but it doesn't have any parent mapping defined");                          continue;                      }                      foreach (var entity in entities)                      {                          _forwardReferences.Enqueue(new ForwardReference(entity' parentContext' this));                      }                  }              }
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,LoadFromSheet,The following statement contains a magic number: while (enumerator.MoveNext())              {                  var row = enumerator.Current as IRow;                  //skip header row                  if (row == null || row.RowNum == 0)                      continue;                    if (!row.Cells.Any()  ||                       row.Cells.All(c => c.CellType == CellType.Blank) ||                      row.Cells.All(c => c.CellType == CellType.String &&  string.IsNullOrWhiteSpace(c.StringCellValue)))                  {                      emptyCells++;                      if (emptyCells == 3)                          //break processing if this is third empty row                          break;                      //skip empty row                      continue;                  }                  emptyCells = 0;                    //last row might be used in case this is a MultiRow                  lastEntity = LoadFromRow(row' context' lastRow' lastEntity);                  lastRow = row;              }
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,IsMultiRow,The following statement contains a magic number: foreach (var index in keyIndices)              {                  var cellA = row.GetCell(index);                  var cellB = lastRow.GetCell(index);                    if(cellA == null || cellB == null)                      return false;                    if (cellA.CellType == CellType.Blank || cellB.CellType == CellType.Blank)                      return false;                    if (cellA.CellType != cellB.CellType)                      return false;                    switch (cellA.CellType)                  {                      case CellType.Numeric:                          if (Math.Abs(cellA.NumericCellValue - cellB.NumericCellValue) > 1e-9)                              return false;                          break;                      case CellType.String:                          if (cellA.StringCellValue != cellB.StringCellValue)                              return false;                          break;                      case CellType.Boolean:                          if (cellA.BooleanCellValue != cellB.BooleanCellValue)                              return false;                          break;                  }              }
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,Store,The following statement contains a magic number: if (row.RowNum == 1 || row.RowNum == 8)                  AdjustAllColumns(sheet' mapping);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetValue,The following statement contains a magic number: while (true)              {                  if (string.IsNullOrWhiteSpace(path))                      return null;                    //if it is parent' skip to the root of the context                  //optimization: check first letter before StartsWith() function.                   if (path[0] == 'p' && path.StartsWith("parent."))                  {                      if (context == null)                          return null;                        path = path.Substring(7); //trim "parent." from the beginning                      entity = context.RootEntity;                      type = entity.ExpressType;                      context = null;                      continue;                  }                    //one level up in the context hierarchy                  //optimization: check first letter before StartsWith() function.                   if (path[0] == '(' && path.StartsWith("()."))                  {                      if (context == null)                          return null;                        path = path.Substring(3); //trim "()." from the beginning                      entity = context.Parent.Entity;                      type = entity.ExpressType;                      context = context.Parent;                      continue;                  }                    if (string.Equals(path' "[table]"' StringComparison.Ordinal))                  {                      var mapping = GetTable(type);                      return mapping.TableName;                  }                    if (string.Equals(path' "[type]"' StringComparison.Ordinal))                  {                      return entity.ExpressType.ExpressName;                  }                    var parts = path.Split('.');                  var multiResult = new List<string>();                  for (var i = 0; i < parts.Length; i++)                  {                      var value = GetPropertyValue(parts[i]' entity' type);                        if (value == null)                          return null;                        var ent = value as IPersistEntity;                      if (ent != null)                      {                          entity = ent;                          type = ent.ExpressType;                          continue;                      }                        var expVal = value as IExpressValueType;                      if (expVal != null)                      {                          //if the type of the value is what we want                          if (i < parts.Length - 1 && parts[parts.Length - 1] == "[type]")                              return expVal.GetType().Name;                          //return actual value as an underlying system type                          return expVal.Value;                      }                        var expValEnum = value as IEnumerable<IExpressValueType>;                      if (expValEnum != null)                          return expValEnum.Select(v => v.Value);                        var entEnum = value as IEnumerable<IPersistEntity>;                      //it must be a simple value                      if (entEnum == null) return value;                        //it is a multivalue result                      var subParts = parts.ToList().GetRange(i + 1' parts.Length - i - 1);                      var subPath = string.Join("."' subParts);                      foreach (var persistEntity in entEnum)                      {                          var subValue = GetValue(persistEntity' persistEntity.ExpressType' subPath' null);                          if (subValue == null) continue;                          var subString = subValue as string;                          if (subString != null)                          {                              multiResult.Add(subString);                              continue;                          }                          multiResult.Add(subValue.ToString());                      }                      return multiResult;                    }                    //if there is only entity itself to return' try to get 'Name' or 'Value' property as a fallback                  return GetFallbackValue(entity' type);              }
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetValue,The following statement contains a magic number: while (true)              {                  if (string.IsNullOrWhiteSpace(path))                      return null;                    //if it is parent' skip to the root of the context                  //optimization: check first letter before StartsWith() function.                   if (path[0] == 'p' && path.StartsWith("parent."))                  {                      if (context == null)                          return null;                        path = path.Substring(7); //trim "parent." from the beginning                      entity = context.RootEntity;                      type = entity.ExpressType;                      context = null;                      continue;                  }                    //one level up in the context hierarchy                  //optimization: check first letter before StartsWith() function.                   if (path[0] == '(' && path.StartsWith("()."))                  {                      if (context == null)                          return null;                        path = path.Substring(3); //trim "()." from the beginning                      entity = context.Parent.Entity;                      type = entity.ExpressType;                      context = context.Parent;                      continue;                  }                    if (string.Equals(path' "[table]"' StringComparison.Ordinal))                  {                      var mapping = GetTable(type);                      return mapping.TableName;                  }                    if (string.Equals(path' "[type]"' StringComparison.Ordinal))                  {                      return entity.ExpressType.ExpressName;                  }                    var parts = path.Split('.');                  var multiResult = new List<string>();                  for (var i = 0; i < parts.Length; i++)                  {                      var value = GetPropertyValue(parts[i]' entity' type);                        if (value == null)                          return null;                        var ent = value as IPersistEntity;                      if (ent != null)                      {                          entity = ent;                          type = ent.ExpressType;                          continue;                      }                        var expVal = value as IExpressValueType;                      if (expVal != null)                      {                          //if the type of the value is what we want                          if (i < parts.Length - 1 && parts[parts.Length - 1] == "[type]")                              return expVal.GetType().Name;                          //return actual value as an underlying system type                          return expVal.Value;                      }                        var expValEnum = value as IEnumerable<IExpressValueType>;                      if (expValEnum != null)                          return expValEnum.Select(v => v.Value);                        var entEnum = value as IEnumerable<IPersistEntity>;                      //it must be a simple value                      if (entEnum == null) return value;                        //it is a multivalue result                      var subParts = parts.ToList().GetRange(i + 1' parts.Length - i - 1);                      var subPath = string.Join("."' subParts);                      foreach (var persistEntity in entEnum)                      {                          var subValue = GetValue(persistEntity' persistEntity.ExpressType' subPath' null);                          if (subValue == null) continue;                          var subString = subValue as string;                          if (subString != null)                          {                              multiResult.Add(subString);                              continue;                          }                          multiResult.Add(subValue.ToString());                      }                      return multiResult;                    }                    //if there is only entity itself to return' try to get 'Name' or 'Value' property as a fallback                  return GetFallbackValue(entity' type);              }
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,SetUpHeader,The following statement contains a magic number: foreach (var mapping in classMapping.PropertyMappings)              {                  var cellIndex = CellReference.ConvertColStringToIndex(mapping.Column);                  var cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);                  cell.SetCellType(CellType.String);                  cell.SetCellValue(mapping.Header);                  cell.CellStyle = GetStyle(DataStatus.Header' workbook);                    //set default column style if not defined but available                  var style = GetStyle(mapping.Status' workbook);                  if(mapping.Status == DataStatus.None) continue;                  var existStyle = sheet.GetColumnStyle(cellIndex);                  if (                      existStyle != null &&                       existStyle.FillForegroundColor == style.FillForegroundColor &&                      existStyle.BorderTop == style.BorderTop &&                      existStyle.TopBorderColor == style.TopBorderColor                      ) continue;                    //create new style                  sheet.SetDefaultColumnStyle(cellIndex' style);                  sheet.SetColumnHidden(cellIndex' false);                  //set default width                  sheet.SetColumnWidth(cellIndex' 256*15);                  //hide if defined                  if (mapping.Hidden)                      sheet.SetColumnHidden(cellIndex' true);              }
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,SetUpHeader,The following statement contains a magic number: foreach (var mapping in classMapping.PropertyMappings)              {                  var cellIndex = CellReference.ConvertColStringToIndex(mapping.Column);                  var cell = row.GetCell(cellIndex) ?? row.CreateCell(cellIndex);                  cell.SetCellType(CellType.String);                  cell.SetCellValue(mapping.Header);                  cell.CellStyle = GetStyle(DataStatus.Header' workbook);                    //set default column style if not defined but available                  var style = GetStyle(mapping.Status' workbook);                  if(mapping.Status == DataStatus.None) continue;                  var existStyle = sheet.GetColumnStyle(cellIndex);                  if (                      existStyle != null &&                       existStyle.FillForegroundColor == style.FillForegroundColor &&                      existStyle.BorderTop == style.BorderTop &&                      existStyle.TopBorderColor == style.TopBorderColor                      ) continue;                    //create new style                  sheet.SetDefaultColumnStyle(cellIndex' style);                  sheet.SetColumnHidden(cellIndex' false);                  //set default width                  sheet.SetColumnWidth(cellIndex' 256*15);                  //hide if defined                  if (mapping.Hidden)                      sheet.SetColumnHidden(cellIndex' true);              }
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var triplet = rgb.Length == 3;
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var hR = triplet ? rgb.Substring(0' 1) + rgb.Substring(0' 1) : rgb.Substring(0' 2);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var hG = triplet ? rgb.Substring(1' 1) + rgb.Substring(1' 1) : rgb.Substring(2' 2);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var hG = triplet ? rgb.Substring(1' 1) + rgb.Substring(1' 1) : rgb.Substring(2' 2);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var hB = triplet ? rgb.Substring(2' 1) + rgb.Substring(1' 1) : rgb.Substring(4' 2);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var hB = triplet ? rgb.Substring(2' 1) + rgb.Substring(1' 1) : rgb.Substring(4' 2);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var hB = triplet ? rgb.Substring(2' 1) + rgb.Substring(1' 1) : rgb.Substring(4' 2);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var r = Convert.ToByte(hR' 16);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var g = Convert.ToByte(hG' 16);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,GetClosestColour,The following statement contains a magic number: var b = Convert.ToByte(hB' 16);
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ColourDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(a[0] - b[0]' 2) + Math.Pow(a[1] - b[1]' 2) + Math.Pow(a[2] - b[2]' 2));
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ColourDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(a[0] - b[0]' 2) + Math.Pow(a[1] - b[1]' 2) + Math.Pow(a[2] - b[2]' 2));
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ColourDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(a[0] - b[0]' 2) + Math.Pow(a[1] - b[1]' 2) + Math.Pow(a[2] - b[2]' 2));
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ColourDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(a[0] - b[0]' 2) + Math.Pow(a[1] - b[1]' 2) + Math.Pow(a[2] - b[2]' 2));
Magic Number,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,ColourDistance,The following statement contains a magic number: return Math.Sqrt(Math.Pow(a[0] - b[0]' 2) + Math.Pow(a[1] - b[1]' 2) + Math.Pow(a[2] - b[2]' 2));
Missing Default,Xbim.IO.TableStore,ReferenceContext,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\ReferenceContext.cs,AddMapping,The following switch statement is missing a default case: switch (segment)              {                  case "[table]":                      TableHintMapping = pMapping;                      return;                  case "[type]":                      TypeHintMapping = pMapping;                      return;              }
Missing Default,Xbim.IO.TableStore,TableStore,C:\repos\xBimTeam_XbimEssentials\Xbim.IO.TableStore\TableRestore.cs,IsMultiRow,The following switch statement is missing a default case: switch (cellA.CellType)                  {                      case CellType.Numeric:                          if (Math.Abs(cellA.NumericCellValue - cellB.NumericCellValue) > 1e-9)                              return false;                          break;                      case CellType.String:                          if (cellA.StringCellValue != cellB.StringCellValue)                              return false;                          break;                      case CellType.Boolean:                          if (cellA.BooleanCellValue != cellB.BooleanCellValue)                              return false;                          break;                  }
