Implementation smell,Namespace,Class,File,Method,Description
Long Method,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CheckValidity,The method has 105 lines of code.
Complex Method,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,ConvertToBOrSNode,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AssociateValue,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,Cyclomatic complexity of the method is 17
Complex Method,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CreateChildWithCommonPrefix,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,Cyclomatic complexity of the method is 11
Complex Method,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CheckValidity,Cyclomatic complexity of the method is 13
Complex Method,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCells,Cyclomatic complexity of the method is 11
Complex Method,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests,Cyclomatic complexity of the method is 9
Complex Method,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,Cyclomatic complexity of the method is 13
Complex Method,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,DenseNodeTest,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int32Tests,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int64Tests,Cyclomatic complexity of the method is 9
Complex Method,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,CheckBaseClassAndGetConstructor,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateMembersOfWrapperType,Cyclomatic complexity of the method is 12
Complex Method,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateWrapperMethod,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateForwardingCode,Cyclomatic complexity of the method is 11
Complex Method,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GetMatchingParameterCount,Cyclomatic complexity of the method is 9
Complex Method,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,ImplicitConvType,Cyclomatic complexity of the method is 8
Complex Method,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,PrimSize,Cyclomatic complexity of the method is 10
Complex Method,Loyc.Utilities,UG,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,ProcessArgument,Cyclomatic complexity of the method is 8
Complex Method,Loyc.LLParserGenerator,IntSet,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,Optimize,Cyclomatic complexity of the method is 10
Long Parameter List,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Copy,The method has 5 parameters. Parameters: sourceCells' sIndex' destCells' dIndex' length
Long Parameter List,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetIntClusters,The method has 5 parameters. Parameters: numKeys' clusterMax' spacerMax' clusterSpread' minKey
Long Parameter List,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetLongClusters,The method has 5 parameters. Parameters: numKeys' clusterMax' spacerMax' clusterSpread' minKey
Long Parameter List,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The method has 5 parameters. Parameters: bytesPerKey' name' reps' keys' value
Long Parameter List,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The method has 5 parameters. Parameters: name' words' sectionSize' reps' optimizeTrie
Long Parameter List,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The method has 6 parameters. Parameters: name' words' sectionSize' reps' optimizeTrie' wordCount
Long Parameter List,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,Fill,The method has 5 parameters. Parameters: words' wordCount' sectionSize' dicts' factory
Long Parameter List,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitInputParameterConversion,The method has 5 parameters. Parameters: il' i' from' to' locals
Long Parameter List,Loyc.Utilities,UG,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,ProcessCommandLineArguments,The method has 8 parameters. Parameters: args' options' atFolder' shortOptions' twoArgOptions' argLimit' expandEnvVars' caseSensitiveLongOpts
Long Parameter List,Loyc.Utilities,UG,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,ProcessArgument,The method has 9 parameters. Parameters: args' i' options' atFolder' shortOptions' twoArgOptions' argLimit' expandEnvVars' caseSensitiveLongOpts
Long Parameter List,Loyc.LLParserGenerator,IntSet,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,TryParse,The method has 5 parameters. Parameters: s' isCharSet' ranges' inverted' errorIndex
Long Identifier,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,,The length of the parameter _numberOfMethodsMissingParameters is 33.
Long Identifier,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,,The length of the parameter _numberOfMethodsWithRefMismatch is 31.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The length of the statement  "			Console.WriteLine("                                      |-Int Dictionary--|   |-SortedDictionary-|   |----CPIntTrie----|");" is 124.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The length of the statement  "			Console.WriteLine("Scenario              Reps Set size   Fill   Scan  Memory   Fill   Scan   Memory   Fill   Scan  Memory");" is 124.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The length of the statement  "			Console.WriteLine("--------              ---- --------   ----   ----  ------   ----   ----   ------   ----   ----  ------");" is 124.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The length of the statement  "			DoIntBenchmarkLine(8' "Clusters(25'50000'9)"' 10' GetLongClusters(100000' 25' 50000'  9' 0x0123456789ABCDEF)' "not null");" is 122.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The length of the statement  "			DoIntBenchmarkLine(8' "Clusters(50'20000'5)"' 10' GetLongClusters(100000' 50' 20000' 5' 0x0123456789ABCDEF)' "not null");" is 121.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The length of the statement  "			Console.WriteLine("                                 |--String Dictionary---|  |----SortedDictionary----|  |--CPStringTrie---|");" is 128.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The length of the statement  "			Console.WriteLine("Scenario          Reps Sec.size  Fill   Scan  Memory+Keys  Fill    Scan   Memory+Keys  Fill   Scan  Memory");" is 128.
Long Statement,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The length of the statement  "			Console.WriteLine("--------          ---- --------  ----   ----  ------ ----  ----    ----   -----------  ----   ----  ------");" is 128.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,DefineCustomWrapperCreator,The length of the statement  "				throw new InvalidOperationException(string.Format("A wrapper for GoInterface<{0}'{1}> is already defined."' typeof(Interface).Name' typeof(T).Name));" is 149.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateWrapperClass,The length of the statement  "			TypeAttributes typeFlags = TypeAttributes.Public | TypeAttributes.Class | TypeAttributes.Sealed | TypeAttributes.BeforeFieldInit;" is 129.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateWrapperClass,The length of the statement  "			string typeName = string.Format("{0}_{1:X}_{2:X}"' typeof(T).Name' typeof(Interface).TypeHandle.Value.ToInt64()' typeof(T).TypeHandle.Value.ToInt64());" is 151.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateWrapperClass,The length of the statement  "				_forceFrom = _from = (GoWrapperCreator)Delegate.CreateDelegate(typeof(GoWrapperCreator)' _wrapperType.GetMethod("Invalid"));" is 124.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateWrapperClass,The length of the statement  "					_refMismatchMsg = baseMsg + string.Format("{0} method{1} have mismatched 'ref' parameters"' NumberOfMethodsWithRefMismatch' NumberOfMethodsWithRefMismatch > 1 ? "s" : "");" is 171.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateWrapperClass,The length of the statement  "					_omittedParamMsg = baseMsg + string.Format("{0} method{1} have omitted parameters"' NumberOfMethodsMissingParameters' NumberOfMethodsMissingParameters > 1 ? "s" : "");" is 167.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateWrapperClass,The length of the statement  "			_forceFrom = (GoWrapperCreator)Delegate.CreateDelegate(typeof(GoWrapperCreator)' ReacquireMethod(_wrapperType' forceFromMB));" is 125.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateDummyWrapperForInvalidInterface,The length of the statement  "					: "GoInterface: Cannot wrap \"{0}\". Make sure it is public' abstract' has a default constructor' and that there are no abstract events or abstract generic methods."'" is 166.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,CheckBaseClassAndGetConstructor,The length of the statement  "			c = type.GetConstructor(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.ExactBinding' null' Array(typeof(T))' null);" is 152.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GetDefaultConstructor,The length of the statement  "			return type.GetConstructor(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance' null' System.Type.EmptyTypes' null);" is 133.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateFieldAndConstructor,The length of the statement  "			ConstructorBuilder constructor = typeBuilder.DefineConstructor(MethodAttributes.Public | MethodAttributes.HideBySig' CallingConventions.Standard' Array(typeof(T)));" is 164.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,ImplementIGoInterfaceWrapper,The length of the statement  "			MethodBuilder method = typeBuilder.DefineMethod("get_IGoInterfaceWrapper.WrappedObject"' flags' typeof(object)' Type.EmptyTypes);" is 129.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,ImplementIGoInterfaceWrapper,The length of the statement  "			PropertyBuilder prop = typeBuilder.DefineProperty("IGoInterfaceWrapper.WrappedObject"' PropertyAttributes.None' typeof(object)' null);" is 134.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateForwardingCode,The length of the statement  "			int commonCount = GetMatchingParameterCount(myParams' bestMatchInT.GetParameters()' out refMismatches' out missingParams);" is 122.
Long Statement,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdc,The length of the statement  "			// The primitive types are Boolean' Byte' SByte' Int16' UInt16' Int32' UInt32' Int64' UInt64' IntPtr' UIntPtr' Char' Double' and Single." is 136.
Long Statement,Loyc.Utilities,UG,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,ProcessCommandLineArguments,The length of the statement  "				ProcessArgument(args' i' options' atFolder' shortOptions' twoArgOptions' argLimit' expandEnvVars' caseSensitiveLongOpts);" is 121.
Long Statement,Loyc.Utilities,UGTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,TestProcessCommandLineArguments1,The length of the statement  "			ExpectList(options' P("a"' null)' P("banana"' "123")' P("a"' "Foo")' P("apple"' "No")' P("banana"' "plantain")' P("a"' null)' P("banana"' null)' P("empty"' ""));" is 161.
Long Statement,Loyc.LLParserGenerator,IntSet,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,IsEmptyOrFull,The length of the statement  "			return IsInverted ^ full ? (_ranges.Count == 1 && _ranges[0].Lo <= int.MinValue && _ranges[0].Hi >= int.MaxValue) : _ranges.Count == 0;" is 135.
Complex Conditional,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Set,The conditional expression  "_count == 16 && _valuesUsed == 0 && (mode & CPMode.FixedStructure) == (CPMode)0  					&& ShouldBeBitArrayNode()"  is complex.
Complex Conditional,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCells,The conditional expression  "c1.K0 == c2.K0 && c1.K1 == c2.K1 && c1.K2 == c2.K2 && cellLen1 == cellLen2"  is complex.
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,IsPresent,The following statement contains a magic number: return (_flags[k >> 5] & (1 << (k & 0x1F))) != 0;
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,GetValueIndex,The following statement contains a magic number: if (_indices != null && _indices[k >> 5] != null) 				return _indices[k >> 5][k & 0x1F];
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,GetValueIndex,The following statement contains a magic number: if (_indices != null && _indices[k >> 5] != null) 				return _indices[k >> 5][k & 0x1F];
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,GetValueAt,The following statement contains a magic number: if (_indices != null && _indices[k >> 5] != null && (P = _indices[k >> 5][k & 0x1F]) < (uint)_values.Length) 				return _values[P];
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,GetValueAt,The following statement contains a magic number: if (_indices != null && _indices[k >> 5] != null && (P = _indices[k >> 5][k & 0x1F]) < (uint)_values.Length) 				return _values[P];
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FindNextInUse,The following statement contains a magic number: for(;;) { 				if (k == 0x100) 					return -1; 				f = _flags[k >> 5]; 				if ((f & (-1 << (k & 0x1F))) != 0) 					break; 				// Move to next section 				k = (k & ~0x1F) + 0x20; 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FindPrevInUse,The following statement contains a magic number: uint f = _flags[k >> 5] & ((1u << (k & 0x1F)) - 1u);
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FindPrevInUse,The following statement contains a magic number: for (int section = (k >> 5) - 1; section >= 0; section--) 			{ 				if (_flags[section] != 0) 					return (section << 5) | MathEx.FindLastOne(_flags[section]); 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FindPrevInUse,The following statement contains a magic number: for (int section = (k >> 5) - 1; section >= 0; section--) 			{ 				if (_flags[section] != 0) 					return (section << 5) | MathEx.FindLastOne(_flags[section]); 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,Set,The following statement contains a magic number: if (key.Left == 1 && IsPresent(k)) 			{ 				T newValue = value; 				int P = GetValueIndex(k); 				if (P < 0x100 && P < _values.Length) { 					value = _values[P]; 					if ((mode & CPMode.Set) != (CPMode)0) 						_values[P] = newValue; 				} else { 					value = default(T); 					if ((mode & CPMode.Set) != (CPMode)0) 						Assign(k' newValue); 				} 				return true; 			} 			else if ((mode & CPMode.Create) != (CPMode)0) 			{ 				if (key.Left == 1) 				{ 					Assign(k' value); 					_localCount++; 				} 				else 				{ 					// Must convert back to bitmap or sparse node! 					ConvertToBOrSNode(ref self' key.Left / 3 + 1); 					self.Set(ref key' ref value' ref self' mode); 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,ConvertToBOrSNode,The following statement contains a magic number: if (_localCount < 32) 				self = new CPSNode<T>(_localCount + extraCells); 			else 				self = new CPBNode<T>();
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,ConvertToBOrSNode,The following statement contains a magic number: for (int section = 0; section < 8; section++) { 				uint f = _flags[section]; 				if (f == 0) 					continue; 				for (int i = MathEx.FindFirstOne(f); i < 32; i++) { 					if ((f & (1 << i)) != 0) // IsPresent(k) 					{ 						// Get the key and value 						int k = (section << 5) + i; 						kw.Buffer[0] = (byte)k;  						T value = default(T); 						if (_values != null) { 							int P = GetValueIndex(k); 							if (P < _values.Length) 								value = _values[P]; 						}  						// Assign them to the new node 						bool existed = self.Set(ref kw' ref value' ref self' CPMode.Create | CPMode.FixedStructure); 						Debug.Assert(!existed); 						kw.Reset(); 					} 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,ConvertToBOrSNode,The following statement contains a magic number: for (int section = 0; section < 8; section++) { 				uint f = _flags[section]; 				if (f == 0) 					continue; 				for (int i = MathEx.FindFirstOne(f); i < 32; i++) { 					if ((f & (1 << i)) != 0) // IsPresent(k) 					{ 						// Get the key and value 						int k = (section << 5) + i; 						kw.Buffer[0] = (byte)k;  						T value = default(T); 						if (_values != null) { 							int P = GetValueIndex(k); 							if (P < _values.Length) 								value = _values[P]; 						}  						// Assign them to the new node 						bool existed = self.Set(ref kw' ref value' ref self' CPMode.Create | CPMode.FixedStructure); 						Debug.Assert(!existed); 						kw.Reset(); 					} 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,ConvertToBOrSNode,The following statement contains a magic number: for (int section = 0; section < 8; section++) { 				uint f = _flags[section]; 				if (f == 0) 					continue; 				for (int i = MathEx.FindFirstOne(f); i < 32; i++) { 					if ((f & (1 << i)) != 0) // IsPresent(k) 					{ 						// Get the key and value 						int k = (section << 5) + i; 						kw.Buffer[0] = (byte)k;  						T value = default(T); 						if (_values != null) { 							int P = GetValueIndex(k); 							if (P < _values.Length) 								value = _values[P]; 						}  						// Assign them to the new node 						bool existed = self.Set(ref kw' ref value' ref self' CPMode.Create | CPMode.FixedStructure); 						Debug.Assert(!existed); 						kw.Reset(); 					} 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,Assign,The following statement contains a magic number: _flags[k >> 5] |= 1u << (k & 0x1F);
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AllocValueSlot,The following statement contains a magic number: for (int i = 8; i < _flags.Length; i++) 			{ 				if (_flags[i] != 0xFFFFFFFF) 				{ 					int fz = MathEx.FindFirstZero(_flags[i]); 					_flags[i] |= (1u << fz); 					_valueCount++; 					return ((i - 8) << 5) + fz; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AllocValueSlot,The following statement contains a magic number: for (int i = 8; i < _flags.Length; i++) 			{ 				if (_flags[i] != 0xFFFFFFFF) 				{ 					int fz = MathEx.FindFirstZero(_flags[i]); 					_flags[i] |= (1u << fz); 					_valueCount++; 					return ((i - 8) << 5) + fz; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AllocValueSlot,The following statement contains a magic number: for (int i = 8; i < _flags.Length; i++) 			{ 				if (_flags[i] != 0xFFFFFFFF) 				{ 					int fz = MathEx.FindFirstZero(_flags[i]); 					_flags[i] |= (1u << fz); 					_valueCount++; 					return ((i - 8) << 5) + fz; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AllocValue,The following statement contains a magic number: if (_values == null) { 				Debug.Assert(slot == 0); 				_values = new T[4]; 			} else if (slot >= _values.Length) { 				_values = InternalList.CopyToNewArray(_values' _values.Length'  				                             Math.Min(_values.Length << 1' 256)); 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AllocValue,The following statement contains a magic number: if (_values == null) { 				Debug.Assert(slot == 0); 				_values = new T[4]; 			} else if (slot >= _values.Length) { 				_values = InternalList.CopyToNewArray(_values' _values.Length'  				                             Math.Min(_values.Length << 1' 256)); 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AssociateValue,The following statement contains a magic number: int section = k >> 5;
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AssociateValue,The following statement contains a magic number: if (_indices == null) { 				if (P == 0xFF) 					return; 				_indices = new byte[8][]; 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AssociateValue,The following statement contains a magic number: if (_indices[section] == null) { 				if (P == 0xFF) 					return; 				byte[] sec = _indices[section] = new byte[32]; 				if (_flags[section] != 0) { 					// One or more null values already exist in this section' even 					// though there was no array for it in _indices. Here' we must 					// be careful to init such null entries properly. Normally it 					// suffices to init all bytes to 0xFF' unless _values.Length is 					// 256 (very rare). 					for (int i = 0; i < sec.Length; i++) { 						sec[i] = 0xFF; 						if (_values.Length == 256 && IsPresent((section << 5) + i)) 							sec[i] = (byte)AllocValue(default(T)); 					} 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AssociateValue,The following statement contains a magic number: if (_indices[section] == null) { 				if (P == 0xFF) 					return; 				byte[] sec = _indices[section] = new byte[32]; 				if (_flags[section] != 0) { 					// One or more null values already exist in this section' even 					// though there was no array for it in _indices. Here' we must 					// be careful to init such null entries properly. Normally it 					// suffices to init all bytes to 0xFF' unless _values.Length is 					// 256 (very rare). 					for (int i = 0; i < sec.Length; i++) { 						sec[i] = 0xFF; 						if (_values.Length == 256 && IsPresent((section << 5) + i)) 							sec[i] = (byte)AllocValue(default(T)); 					} 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AssociateValue,The following statement contains a magic number: if (_indices[section] == null) { 				if (P == 0xFF) 					return; 				byte[] sec = _indices[section] = new byte[32]; 				if (_flags[section] != 0) { 					// One or more null values already exist in this section' even 					// though there was no array for it in _indices. Here' we must 					// be careful to init such null entries properly. Normally it 					// suffices to init all bytes to 0xFF' unless _values.Length is 					// 256 (very rare). 					for (int i = 0; i < sec.Length; i++) { 						sec[i] = 0xFF; 						if (_values.Length == 256 && IsPresent((section << 5) + i)) 							sec[i] = (byte)AllocValue(default(T)); 					} 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,AddChild,The following statement contains a magic number: ConvertToBOrSNode(ref self' key.Left / 3 + 1);
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,Remove,The following statement contains a magic number: _flags[k >> 5] &= ~(1u << (k & 0x1F));
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,Remove,The following statement contains a magic number: if (_localCount < 24 && (_valueCount > 0 || _localCount < 12)) 				ConvertToBOrSNode(ref self' 0);
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,Remove,The following statement contains a magic number: if (_localCount < 24 && (_valueCount > 0 || _localCount < 12)) 				ConvertToBOrSNode(ref self' 0);
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FreeValueSlot,The following statement contains a magic number: int i = 8 + (P >> 5);
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FreeValueSlot,The following statement contains a magic number: int i = 8 + (P >> 5);
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: int size = (6 + 3 + _flags.Length) * 4;
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: int size = (6 + 3 + _flags.Length) * 4;
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: int size = (6 + 3 + _flags.Length) * 4;
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: if (_values != null) { 				size += 3 * 4 + _values.Length * sizeOfT; 				// TODO: size is 4 bytes more if T is a reference type; detect 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: if (_values != null) { 				size += 3 * 4 + _values.Length * sizeOfT; 				// TODO: size is 4 bytes more if T is a reference type; detect 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: if (_indices != null) { 				size += (4 + _indices.Length) * 4; 				for (int i = 0; i < _indices.Length; i++) { 					if (_indices[i] != null) 						size += (3 + _indices[i].Length) * 4; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: if (_indices != null) { 				size += (4 + _indices.Length) * 4; 				for (int i = 0; i < _indices.Length; i++) { 					if (_indices[i] != null) 						size += (3 + _indices[i].Length) * 4; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: if (_indices != null) { 				size += (4 + _indices.Length) * 4; 				for (int i = 0; i < _indices.Length; i++) { 					if (_indices[i] != null) 						size += (3 + _indices[i].Length) * 4; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,CountMemoryUsage,The following statement contains a magic number: if (_indices != null) { 				size += (4 + _indices.Length) * 4; 				for (int i = 0; i < _indices.Length; i++) { 					if (_indices[i] != null) 						size += (3 + _indices[i].Length) * 4; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FirstKeyInUse,The following statement contains a magic number: for (int section = 0; ; section++) { 				Debug.Assert(section < 8); 				uint f = _flags[section]; 				if (f != 0) 					return MathEx.FindFirstOne(f) + (section << 5); 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,FirstKeyInUse,The following statement contains a magic number: for (int section = 0; ; section++) { 				Debug.Assert(section < 8); 				uint f = _flags[section]; 				if (f != 0) 					return MathEx.FindFirstOne(f) + (section << 5); 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,LastKeyInUse,The following statement contains a magic number: for (int section = 7; ; section--) { 				Debug.Assert(section >= 0); 				uint f = _flags[section]; 				if (f != 0) 					return MathEx.FindFirstOne(f) + (section << 5); 			}
Magic Number,Loyc.Collections.Impl,CPBitArrayLeaf<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBitArrayLeaf.cs,LastKeyInUse,The following statement contains a magic number: for (int section = 7; ; section--) { 				Debug.Assert(section >= 0); 				uint f = _flags[section]; 				if (f != 0) 					return MathEx.FindFirstOne(f) + (section << 5); 			}
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,Find,The following statement contains a magic number: if (key.Left == 0) { 				MoveFirst(e); 				return _zlk != NoZLK; 			} else { 				int i = key[0] >> 5; 				e.Stack.Add(new CPEnumerator<T>.Entry(this' i' e.Key.Offset)); 				if (_children[i] != null) 					return _children[i].Find(ref key' e); 				else { 					e.MoveNext(); 					return false; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,Set,The following statement contains a magic number: if (key.Left > 0) 			{ 				int i = key[0] >> 5; 				if (_children[i] != null) { 					CPSNode<T> child = _children[i]; 					CPNode<T> child2 = child; 					_localCount -= child.LocalCount; 					bool existed = child.Set(ref key' ref value' ref child2' mode | CPMode.FixedStructure); 					_localCount += child.LocalCount; 					Debug.Assert(child == child2); 					return existed; 				} else { 					if ((mode & CPMode.Create) != (CPMode)0) { 						_children[i] = new CPSNode<T>(ref key' value); 						_localCount++; 					} 					return false; 				} 			} 			else 			{ 				// key.Left == 0 				if (_zlk == NoZLK) 				{ 					if ((mode & CPMode.Create) != (CPMode)0) { 						_zlk = value; 						_localCount++; 					} 					return false; 				} 				else 				{ 					T oldValue = (T)_zlk; 					if ((mode & CPMode.Set) != (CPMode)0) 						_zlk = value; 					value = oldValue; 					return true; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,AddChild,The following statement contains a magic number: int i = key[0] >> 5;
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,Remove,The following statement contains a magic number: if (key.Left > 0) 			{ 				int i = key[0] >> 5; 				if (_children[i] != null) { 					CPSNode<T> child = _children[i]; 					CPNode<T> child2 = child; 					int childLCount = child.LocalCount; 					if (child.Remove(ref key' ref oldValue' ref child2)) { 						_localCount -= childLCount; 						if (child2 == null) 							_children[i] = null; 						else { 							_localCount += child.LocalCount; 							Debug.Assert(child == child2); 						} 						if (_localCount < 24) 							ConvertToSNode(ref self); 						return true; 					} 					Debug.Assert(child == _children[i]); 				} 				return false; 			} 			else 			{ 				// key.Left == 0 				if (_zlk == NoZLK) 					return false; 				else { 					oldValue = (T)_zlk; 					_zlk = NoZLK; 					_localCount--; 					if (IsEmpty) 						self = null; 					return true; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,Remove,The following statement contains a magic number: if (key.Left > 0) 			{ 				int i = key[0] >> 5; 				if (_children[i] != null) { 					CPSNode<T> child = _children[i]; 					CPNode<T> child2 = child; 					int childLCount = child.LocalCount; 					if (child.Remove(ref key' ref oldValue' ref child2)) { 						_localCount -= childLCount; 						if (child2 == null) 							_children[i] = null; 						else { 							_localCount += child.LocalCount; 							Debug.Assert(child == child2); 						} 						if (_localCount < 24) 							ConvertToSNode(ref self); 						return true; 					} 					Debug.Assert(child == _children[i]); 				} 				return false; 			} 			else 			{ 				// key.Left == 0 				if (_zlk == NoZLK) 					return false; 				else { 					oldValue = (T)_zlk; 					_zlk = NoZLK; 					_localCount--; 					if (IsEmpty) 						self = null; 					return true; 				} 			}
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,ConvertToSNode,The following statement contains a magic number: Debug.Assert(_localCount <= 32);
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,CountMemoryUsage,The following statement contains a magic number: int size = 16 + 16 + _children.Length * 4;
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,CountMemoryUsage,The following statement contains a magic number: int size = 16 + 16 + _children.Length * 4;
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,CountMemoryUsage,The following statement contains a magic number: int size = 16 + 16 + _children.Length * 4;
Magic Number,Loyc.Collections.Impl,CPBNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPBNode.cs,CountMemoryUsage,The following statement contains a magic number: if (_zlk != NoZLK && _zlk != null) 				size += 8 + sizeOfT;
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeShort,The following statement contains a magic number: buf[2] = (byte)key;
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeShort,The following statement contains a magic number: buf[1] = (byte)(key2 >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeShort,The following statement contains a magic number: buf[0] = (byte)(key2 >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeShort,The following statement contains a magic number: return new KeyWalker(buf' 3);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[5] = (byte)key;
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[4] = (byte)(key >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[4] = (byte)(key >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[3] = (byte)(key >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[3] = (byte)(key >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[2] = (byte)(key >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[2] = (byte)(key >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: return new KeyWalker(buf' 6);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[5] = (byte)key32;
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[4] = (byte)(key32 >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[4] = (byte)(key32 >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[3] = (byte)(key32 >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[3] = (byte)(key32 >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[2] = (byte)(key32 >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[2] = (byte)(key32 >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: buf[1] = (byte)(key >> 32);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeMed,The following statement contains a magic number: return new KeyWalker(buf' 6);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[8] = (byte)(key32);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[7] = (byte)(key32 >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[7] = (byte)(key32 >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[6] = (byte)(key32 >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[6] = (byte)(key32 >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[5] = (byte)(key32 >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[5] = (byte)(key32 >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[4] = (byte)(key >> 32);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[4] = (byte)(key >> 32);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[3] = (byte)(key >> 40);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[3] = (byte)(key >> 40);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[2] = (byte)(key >> 48);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[2] = (byte)(key >> 48);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[1] = (byte)(key >> 56);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: return new KeyWalker(buf' 9);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[8] = (byte)(key32);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[7] = (byte)(key32 >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[7] = (byte)(key32 >> 8);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[6] = (byte)(key32 >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[6] = (byte)(key32 >> 16);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[5] = (byte)(key32 >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[5] = (byte)(key32 >> 24);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[4] = (byte)(key >> 32);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[4] = (byte)(key >> 32);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[3] = (byte)(key >> 40);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[3] = (byte)(key >> 40);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[2] = (byte)(key >> 48);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[2] = (byte)(key >> 48);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: buf[1] = (byte)(key >> 56);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,EncodeLong,The following statement contains a magic number: return new KeyWalker(buf' 9);
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				return (buf[5] + (buf[4] << 8)) + ((buf[3] << 16) + (buf[2] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeInt,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return (buf[8] + (buf[7] << 8)) + ((buf[6] << 16) + (buf[5] << 24)); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 3) 			{ 				Debug.Assert(buf[0] > 1 && buf[0] < 0xFE); 				return (buf[2] + (buf[1] << 8) + (buf[0] << 16)) - 0x30000; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 6) 			{ 				Debug.Assert(buf[0] == 1 || buf[0] == 0xFE); 				long res = (buf[5] + (buf[4] << 8) + (buf[3] << 16)) 					+ (((uint)buf[2] << 24) + ((long)buf[1] << 32)); 				if (buf[0] <= 1) 					res |= unchecked((long)0xFFFFFF0000000000); 				return res; 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPIntTrie<TValue>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPIntTrie.cs,DecodeLong,The following statement contains a magic number: if (len == 9) 			{ 				Debug.Assert(buf[0] == 0 || buf[0] == 0xFF); 				return   (buf[8] + (buf[7] << 8) + (buf[6] << 16) + ((uint)buf[5] << 24)) + 				  ((long)(buf[4] + (buf[3] << 8) + (buf[2] << 16) + ((uint)buf[1] << 24)) << 32); 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (key.Left == 2) 			{ 				if (cellLen == LengthTwo) { 					key.Advance(2); 					return 0; 				} else 					return 1; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (key.Left == 2) 			{ 				if (cellLen == LengthTwo) { 					key.Advance(2); 					return 0; 				} else 					return 1; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (cellLen == LengthTwo) 			{ 				if (IsChildP(P)) { 					key.Advance(2); 					return 0; 				} else 					return -1; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (((dif = ((int)k2 - key[2]))) != 0) 				return dif;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (key.Left == 3) 			{ 				key.Advance(3); 				if (!haveNextCell) 					return 0; 				else 					return ContinueComparing; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (key.Left == 3) 			{ 				key.Advance(3); 				if (!haveNextCell) 					return 0; 				else 					return ContinueComparing; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (haveNextCell) { 				key.Advance(3); 				return ContinueComparing; 			} else if (IsChildP(P)) { 				key.Advance(3); 				return 0; 			} else 				return -1;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CompareCell,The following statement contains a magic number: if (haveNextCell) { 				key.Advance(3); 				return ContinueComparing; 			} else if (IsChildP(P)) { 				key.Advance(3); 				return 0; 			} else 				return -1;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Set,The following statement contains a magic number: if (finalCell >= 0) 			{ 				int P = _cells[finalCell].P; 				if (IsChildP(P)) 					return _children[P].Set(ref key' ref value' ref _children[P]' mode); 				else { 					int vIndex = NullP - 1 - P; 					if (NullP > P) { 						T oldValue = _values[vIndex]; 						if ((mode & CPMode.Set) != (CPMode)0) 							_values[vIndex] = value; 						value = oldValue; 					} else { 						if ((mode & CPMode.Set) != (CPMode)0) 							_cells[finalCell].P = (byte)AllocValueP(value); 						value = default(T); // old value 					} 					return true; 				} 			} 			else if ((mode & CPMode.Create) != (CPMode)0) 			{ 				Insert(index' ref key' value' ref self);  				if (_count == 16 && _valuesUsed == 0 && (mode & CPMode.FixedStructure) == (CPMode)0  					&& ShouldBeBitArrayNode()) 				{ 					self = new CPBitArrayLeaf<T>(); 					MoveAllTo(self); 				} 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CountMemoryUsage,The following statement contains a magic number: int size = 7 * 4;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CountMemoryUsage,The following statement contains a magic number: int size = 7 * 4;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CountMemoryUsage,The following statement contains a magic number: if (_cells != null) 				size += 12 + _cells.Length * 4;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CountMemoryUsage,The following statement contains a magic number: if (_cells != null) 				size += 12 + _cells.Length * 4;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CountMemoryUsage,The following statement contains a magic number: if (_values != null) 				// Oops' we don't know whether _values contains values or references. 				size += 12 + _values.Length * sizeOfT;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CountMemoryUsage,The following statement contains a magic number: if (_children != null) 			{ 				size += 16 + _children.Length * 4; 				for (int i = 0; i < _children.Length; i++) 					if (_children[i] != null) 						size += _children[i].CountMemoryUsage(sizeOfT); 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CountMemoryUsage,The following statement contains a magic number: if (_children != null) 			{ 				size += 16 + _children.Length * 4; 				for (int i = 0; i < _children.Length; i++) 					if (_children[i] != null) 						size += _children[i].CountMemoryUsage(sizeOfT); 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,LLInsertKey,The following statement contains a magic number: for (int i = _count - 1; i >= index; i -= 2) 			{ 				cells[i + 1] = cells[i]; 				if (i > 0) 					cells[i] = cells[i - 1]; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,LLWriteCell,The following statement contains a magic number: if (left > 0) { 				cells[to].K0 = key[0]; 				if (left >= 2) { 					cells[to].K1 = key[1]; 					if (left > 2) { 						byte K2 = key[2]; 						cells[to].K2 = K2; 						if (left > 3 || K2 >= LengthTwo) 						{ 							key.Advance(3); 							return cells[to].P = (byte)AllocCell(); 						} 					} else 						cells[to].K2 = LengthTwo; 				} else 					cells[to].K2 = LengthOne; 			} else 				cells[to].K2 = LengthZero;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,LLWriteCell,The following statement contains a magic number: if (left > 0) { 				cells[to].K0 = key[0]; 				if (left >= 2) { 					cells[to].K1 = key[1]; 					if (left > 2) { 						byte K2 = key[2]; 						cells[to].K2 = K2; 						if (left > 3 || K2 >= LengthTwo) 						{ 							key.Advance(3); 							return cells[to].P = (byte)AllocCell(); 						} 					} else 						cells[to].K2 = LengthTwo; 				} else 					cells[to].K2 = LengthOne; 			} else 				cells[to].K2 = LengthZero;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,LLWriteCell,The following statement contains a magic number: if (left > 0) { 				cells[to].K0 = key[0]; 				if (left >= 2) { 					cells[to].K1 = key[1]; 					if (left > 2) { 						byte K2 = key[2]; 						cells[to].K2 = K2; 						if (left > 3 || K2 >= LengthTwo) 						{ 							key.Advance(3); 							return cells[to].P = (byte)AllocCell(); 						} 					} else 						cells[to].K2 = LengthTwo; 				} else 					cells[to].K2 = LengthOne; 			} else 				cells[to].K2 = LengthZero;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,LLWriteCell,The following statement contains a magic number: if (left > 0) { 				cells[to].K0 = key[0]; 				if (left >= 2) { 					cells[to].K1 = key[1]; 					if (left > 2) { 						byte K2 = key[2]; 						cells[to].K2 = K2; 						if (left > 3 || K2 >= LengthTwo) 						{ 							key.Advance(3); 							return cells[to].P = (byte)AllocCell(); 						} 					} else 						cells[to].K2 = LengthTwo; 				} else 					cells[to].K2 = LengthOne; 			} else 				cells[to].K2 = LengthZero;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,LLWriteCell,The following statement contains a magic number: if (left > 0) { 				cells[to].K0 = key[0]; 				if (left >= 2) { 					cells[to].K1 = key[1]; 					if (left > 2) { 						byte K2 = key[2]; 						cells[to].K2 = K2; 						if (left > 3 || K2 >= LengthTwo) 						{ 							key.Advance(3); 							return cells[to].P = (byte)AllocCell(); 						} 					} else 						cells[to].K2 = LengthTwo; 				} else 					cells[to].K2 = LengthOne; 			} else 				cells[to].K2 = LengthZero;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,AllocValueP,The following statement contains a magic number: if (_values == null) 			{ 				_values = new T[4]; 				_valuesUsed = 1; 				_values[0] = value; 				return NullP - 1; 			} 			else 			{ 				int v = MathEx.FindFirstZero(_valuesUsed); 				if (v >= _values.Length) 					_values = InternalList.CopyToNewArray(_values' _values.Length' _values.Length + 1 + (_values.Length >> 1)); 				_values[v] = value; 				_valuesUsed |= (1u << v); 				return NullP - 1 - v; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,AllocChildP,The following statement contains a magic number: if (_children == null) 			{ 				Debug.Assert(_childrenUsed == 0); 				_children = new CPNode<T>[4]; 				_children[0] = child; 				_childrenUsed = 1; 				return 0; 			} 			else if (_childrenUsed == _children.Length) 			{ 				_children = InternalList.CopyToNewArray(_children' _children.Length' _children.Length << 1); 				_children[_childrenUsed] = child; 				return _childrenUsed++; 			} 			else 			{ 				int c = 0; 				for (c = 0; _children[c] != null; c++) {} 				_children[c] = child; 				_childrenUsed++; 				return (byte)c; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,PrepareSpace,The following statement contains a magic number: int cellsNeeded = keyLeft / 3 + 1;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Reorganize,The following statement contains a magic number: if (_count <= 4) { 				Enlarge(cellsNeeded); 				return firstIndexAffected; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CreateChildWithCommonPrefix,The following statement contains a magic number: for (i = index; i < index + length; i++) 			{ 				kw.Reset(); 				ExtractKey(i' ref kw' out finalP); 				kw.Reset(prefixBytes); 				if (child == null) 					child = new CPSNode<T>(3 + (kw.Left >> 1)); 				if (finalP < _count) { 					child.AddChild(ref kw' _children[finalP]' ref child); 				} else { 					value = finalP != NullP ? _values[PtoValueIndex(finalP)] : default(T); 					existed = child.Set(ref kw' ref value' ref child' CPMode.Create); 				} 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,EliminateIllegalChildIndices,The following statement contains a magic number: if (newCount <= (_children.Length >> 1) && _children.Length >= 6) 				_children = InternalList.CopyToNewArray(_children' newCount' newCount);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,LLFreeValueOrChild,The following statement contains a magic number: if (P < _count) 			{ 				_children[P] = null;  				if (_childrenUsed-- == 1) 					_children = null; 			} 			else if (P != NullP) 			{ 				int v = PtoValueIndex(P); 				Debug.Assert(v < _values.Length); 				_values[v] = default(T); 				_valuesUsed &= ~(1u << v); 				 				int half = _values.Length >> 1; 				if (_valuesUsed < (1 << half) && half > 2) 					_values = InternalList.CopyToNewArray(_values' half' half); 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,ExtractKey,The following statement contains a magic number: do { 				SCell cell = _cells[index]; 				int cellLen = 3; 				if (!IsNextCellP(finalP = cell.P)) 				{ 					done = true; 					if (cell.LengthOrK2 >= LengthTwo) { 						cellLen = LengthZero - cell.LengthOrK2; 					} 				} 				 				byte[] buf = kw.Buffer; 				if (cellLen > 0) 				{ 					int bufLeft = buf.Length - kw.Offset; 					if (bufLeft < cellLen) 						buf = InternalList.CopyToNewArray(buf' kw.Offset' kw.Offset + 4 + (kw.Offset >> 1));  					buf[kw.Offset] = cell.K0; 					if (cellLen >= 2) 						buf[kw.Offset + 1] = cell.K1; 					if (cellLen > 2) 						buf[kw.Offset + 2] = cell.K2; 				}  				kw = new KeyWalker(buf' kw.Offset + cellLen' 0); 				index = cell.P; 			} while (!done);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,ExtractKey,The following statement contains a magic number: do { 				SCell cell = _cells[index]; 				int cellLen = 3; 				if (!IsNextCellP(finalP = cell.P)) 				{ 					done = true; 					if (cell.LengthOrK2 >= LengthTwo) { 						cellLen = LengthZero - cell.LengthOrK2; 					} 				} 				 				byte[] buf = kw.Buffer; 				if (cellLen > 0) 				{ 					int bufLeft = buf.Length - kw.Offset; 					if (bufLeft < cellLen) 						buf = InternalList.CopyToNewArray(buf' kw.Offset' kw.Offset + 4 + (kw.Offset >> 1));  					buf[kw.Offset] = cell.K0; 					if (cellLen >= 2) 						buf[kw.Offset + 1] = cell.K1; 					if (cellLen > 2) 						buf[kw.Offset + 2] = cell.K2; 				}  				kw = new KeyWalker(buf' kw.Offset + cellLen' 0); 				index = cell.P; 			} while (!done);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,ExtractKey,The following statement contains a magic number: do { 				SCell cell = _cells[index]; 				int cellLen = 3; 				if (!IsNextCellP(finalP = cell.P)) 				{ 					done = true; 					if (cell.LengthOrK2 >= LengthTwo) { 						cellLen = LengthZero - cell.LengthOrK2; 					} 				} 				 				byte[] buf = kw.Buffer; 				if (cellLen > 0) 				{ 					int bufLeft = buf.Length - kw.Offset; 					if (bufLeft < cellLen) 						buf = InternalList.CopyToNewArray(buf' kw.Offset' kw.Offset + 4 + (kw.Offset >> 1));  					buf[kw.Offset] = cell.K0; 					if (cellLen >= 2) 						buf[kw.Offset + 1] = cell.K1; 					if (cellLen > 2) 						buf[kw.Offset + 2] = cell.K2; 				}  				kw = new KeyWalker(buf' kw.Offset + cellLen' 0); 				index = cell.P; 			} while (!done);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,ExtractKey,The following statement contains a magic number: do { 				SCell cell = _cells[index]; 				int cellLen = 3; 				if (!IsNextCellP(finalP = cell.P)) 				{ 					done = true; 					if (cell.LengthOrK2 >= LengthTwo) { 						cellLen = LengthZero - cell.LengthOrK2; 					} 				} 				 				byte[] buf = kw.Buffer; 				if (cellLen > 0) 				{ 					int bufLeft = buf.Length - kw.Offset; 					if (bufLeft < cellLen) 						buf = InternalList.CopyToNewArray(buf' kw.Offset' kw.Offset + 4 + (kw.Offset >> 1));  					buf[kw.Offset] = cell.K0; 					if (cellLen >= 2) 						buf[kw.Offset + 1] = cell.K1; 					if (cellLen > 2) 						buf[kw.Offset + 2] = cell.K2; 				}  				kw = new KeyWalker(buf' kw.Offset + cellLen' 0); 				index = cell.P; 			} while (!done);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,ExtractKey,The following statement contains a magic number: do { 				SCell cell = _cells[index]; 				int cellLen = 3; 				if (!IsNextCellP(finalP = cell.P)) 				{ 					done = true; 					if (cell.LengthOrK2 >= LengthTwo) { 						cellLen = LengthZero - cell.LengthOrK2; 					} 				} 				 				byte[] buf = kw.Buffer; 				if (cellLen > 0) 				{ 					int bufLeft = buf.Length - kw.Offset; 					if (bufLeft < cellLen) 						buf = InternalList.CopyToNewArray(buf' kw.Offset' kw.Offset + 4 + (kw.Offset >> 1));  					buf[kw.Offset] = cell.K0; 					if (cellLen >= 2) 						buf[kw.Offset + 1] = cell.K1; 					if (cellLen > 2) 						buf[kw.Offset + 2] = cell.K2; 				}  				kw = new KeyWalker(buf' kw.Offset + cellLen' 0); 				index = cell.P; 			} while (!done);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MoveAllTo,The following statement contains a magic number: KeyWalker kw = new KeyWalker(new byte[8]' 0);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,FindCommonPrefix,The following statement contains a magic number: bestSavings = (bestSavings + 2) / 3;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,FindCommonPrefix,The following statement contains a magic number: bestSavings = (bestSavings + 2) / 3;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: for (end3 = start + 1; end3 < _count; end3++) { 				common = MeasureCommonPrefix(start' end3); 				if (common < 3) 					break; 				if (common < common3N || common3N == 0) 					common3N = common; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: if (common == 2) 				for (end2++; end2 < _count; end2++) 				{ 					common = MeasureCommonPrefix(start' end2); 					if (common < 2) 						break; 				}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: if (common == 2) 				for (end2++; end2 < _count; end2++) 				{ 					common = MeasureCommonPrefix(start' end2); 					if (common < 2) 						break; 				}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: if (savingsN > savings2 && savingsN > savings1) 			{ 				length = end3 - start; 				return common3N; 			} 			else if (savings2 > savings1) 			{ 				length = end2 - start; 				return 2; 			} 			else 			{ 				length = end1 - start; 				return 1; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: for (;;) { 				SCell cell1 = _cells[i1]' cell2 = _cells[i2]; 				if (cell1.K0 != cell2.K0) 					return settled;  				int minLen = Math.Max(CellLength(cell1)' CellLength(cell2)); 				if (minLen == LengthZero) 					return settled; 				if (minLen == LengthOne) 					return settled + 1;  				if (cell1.K1 != cell2.K1) 					return settled + 1; 				else if (minLen == LengthTwo) 					return settled + 2; 				else if (cell1.K2 != cell2.K2) 					return settled + 2; 				else if (!IsNextCellP(cell1.P) || !IsNextCellP(cell2.P)) 					return settled + 3;  				// Move to the next cell 				settled += 3; 				i1 = cell1.P; 				i2 = cell2.P; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: for (;;) { 				SCell cell1 = _cells[i1]' cell2 = _cells[i2]; 				if (cell1.K0 != cell2.K0) 					return settled;  				int minLen = Math.Max(CellLength(cell1)' CellLength(cell2)); 				if (minLen == LengthZero) 					return settled; 				if (minLen == LengthOne) 					return settled + 1;  				if (cell1.K1 != cell2.K1) 					return settled + 1; 				else if (minLen == LengthTwo) 					return settled + 2; 				else if (cell1.K2 != cell2.K2) 					return settled + 2; 				else if (!IsNextCellP(cell1.P) || !IsNextCellP(cell2.P)) 					return settled + 3;  				// Move to the next cell 				settled += 3; 				i1 = cell1.P; 				i2 = cell2.P; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: for (;;) { 				SCell cell1 = _cells[i1]' cell2 = _cells[i2]; 				if (cell1.K0 != cell2.K0) 					return settled;  				int minLen = Math.Max(CellLength(cell1)' CellLength(cell2)); 				if (minLen == LengthZero) 					return settled; 				if (minLen == LengthOne) 					return settled + 1;  				if (cell1.K1 != cell2.K1) 					return settled + 1; 				else if (minLen == LengthTwo) 					return settled + 2; 				else if (cell1.K2 != cell2.K2) 					return settled + 2; 				else if (!IsNextCellP(cell1.P) || !IsNextCellP(cell2.P)) 					return settled + 3;  				// Move to the next cell 				settled += 3; 				i1 = cell1.P; 				i2 = cell2.P; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,MeasureCommonPrefix,The following statement contains a magic number: for (;;) { 				SCell cell1 = _cells[i1]' cell2 = _cells[i2]; 				if (cell1.K0 != cell2.K0) 					return settled;  				int minLen = Math.Max(CellLength(cell1)' CellLength(cell2)); 				if (minLen == LengthZero) 					return settled; 				if (minLen == LengthOne) 					return settled + 1;  				if (cell1.K1 != cell2.K1) 					return settled + 1; 				else if (minLen == LengthTwo) 					return settled + 2; 				else if (cell1.K2 != cell2.K2) 					return settled + 2; 				else if (!IsNextCellP(cell1.P) || !IsNextCellP(cell2.P)) 					return settled + 3;  				// Move to the next cell 				settled += 3; 				i1 = cell1.P; 				i2 = cell2.P; 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CellLengthAsInt,The following statement contains a magic number: return IsNextCellP(_cells[i].P) ? 3 : Math.Min(LengthZero - _cells[i].K2' 3);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,CellLengthAsInt,The following statement contains a magic number: return IsNextCellP(_cells[i].P) ? 3 : Math.Min(LengthZero - _cells[i].K2' 3);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,ResizeAndDefrag,The following statement contains a magic number: if (newSize >= MaxCells - (MaxCells >> 3)) 				newSize = MaxCells;
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Copy,The following statement contains a magic number: if (length <= 32) { 				int destStop = dIndex + length; 				while (dIndex < destStop) 					destCells[dIndex++] = sourceCells[sIndex++]; 			} else 				Array.Copy(sourceCells' sIndex' destCells' dIndex' length);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Append,The following statement contains a magic number: if (p >= 32 && p < 128) { 				if ((char)p == '\\') 					sb.Append('\\'); 				sb.Append((char)p); 			} else if (p == 0) { 				sb.Append(@"\0"); 			} else if (p == (byte)'\n') { 				sb.Append(@"\n"); 			} else { 				sb.Append(@"\x"); 				sb.Append(HexDigitChar(p >> 4)); 				sb.Append(HexDigitChar(p & 0xF)); 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Append,The following statement contains a magic number: if (p >= 32 && p < 128) { 				if ((char)p == '\\') 					sb.Append('\\'); 				sb.Append((char)p); 			} else if (p == 0) { 				sb.Append(@"\0"); 			} else if (p == (byte)'\n') { 				sb.Append(@"\n"); 			} else { 				sb.Append(@"\x"); 				sb.Append(HexDigitChar(p >> 4)); 				sb.Append(HexDigitChar(p & 0xF)); 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,Append,The following statement contains a magic number: if (p >= 32 && p < 128) { 				if ((char)p == '\\') 					sb.Append('\\'); 				sb.Append((char)p); 			} else if (p == 0) { 				sb.Append(@"\0"); 			} else if (p == (byte)'\n') { 				sb.Append(@"\n"); 			} else { 				sb.Append(@"\x"); 				sb.Append(HexDigitChar(p >> 4)); 				sb.Append(HexDigitChar(p & 0xF)); 			}
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,HexDigitChar,The following statement contains a magic number: if ((uint)value < 10) 				return (char)('0' + value); 			else 				return (char)('A' - 10 + value);
Magic Number,Loyc.Collections.Impl,CPSNode<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPSNode.cs,HexDigitChar,The following statement contains a magic number: if ((uint)value < 10) 				return (char)('0' + value); 			else 				return (char)('A' - 10 + value);
Magic Number,Loyc.Collections.Impl,KeylessHashtable<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,New,The following statement contains a magic number: if (maxCount < 256) 				return new KeylessHashtable<T' byte' MathU8>(numBuckets); 			else if (maxCount < 65536) 				return new KeylessHashtable<T' ushort' MathU16>(numBuckets); 			else 				return new KeylessHashtable<T' int' MathI>(numBuckets);
Magic Number,Loyc.Collections.Impl,KeylessHashtable<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,New,The following statement contains a magic number: if (maxCount < 256) 				return new KeylessHashtable<T' byte' MathU8>(numBuckets); 			else if (maxCount < 65536) 				return new KeylessHashtable<T' ushort' MathU16>(numBuckets); 			else 				return new KeylessHashtable<T' int' MathI>(numBuckets);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests5,The following statement contains a magic number: BasicTests(3' 5);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests5,The following statement contains a magic number: BasicTests(3' 5);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests10,The following statement contains a magic number: BasicTests(11' 10);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests10,The following statement contains a magic number: BasicTests(11' 10);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests100,The following statement contains a magic number: BasicTests(101' 100);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests100,The following statement contains a magic number: BasicTests(101' 100);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests300,The following statement contains a magic number: BasicTests(199' 300);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests300,The following statement contains a magic number: BasicTests(199' 300);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests1000,The following statement contains a magic number: BasicTests(997' 1000);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests1000,The following statement contains a magic number: BasicTests(997' 1000);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests10000,The following statement contains a magic number: BasicTests(65537' 10000);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests10000,The following statement contains a magic number: BasicTests(65537' 10000);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests,The following statement contains a magic number: for (int i = 0; i < maxCount; i++) 			{ 				int k = r.Next(maxCount * 2); 				ht.Add(k' k); 				 				ht2.TryGetValue(k' out count); 				ht2[k] = count + 1; 				Assert.AreEqual(i + 1' ht.Count); 			}
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests,The following statement contains a magic number: Assert.Less(falsePositives' 2 * maxCount * maxCount / buckets);
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests,The following statement contains a magic number: foreach (var kvp in ht2) 			{ 				if (r.Next(2) == 0) 				{ 					// Method 1: remove by key-value pair (removes one at a time) 					for (int i = 0; i < kvp.Value; i++) 						Assert.That(ht.Remove(kvp.Key' kvp.Key)); 					Assert.IsFalse(ht.Remove(kvp.Key' kvp.Key)); 				} 				else 				{ 					// Method 2: remove by predicate with removal limit 					int removed' total = 0; 					do { 						total += (removed = ht.Remove((uint)kvp.Key' v => v == kvp.Key' 2)); 						Assert.That(removed >= 0 && removed <= 2); 					} while (removed == 2); 					Assert.AreEqual(kvp.Value' total); 				} 			}
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests,The following statement contains a magic number: foreach (var kvp in ht2) 			{ 				if (r.Next(2) == 0) 				{ 					// Method 1: remove by key-value pair (removes one at a time) 					for (int i = 0; i < kvp.Value; i++) 						Assert.That(ht.Remove(kvp.Key' kvp.Key)); 					Assert.IsFalse(ht.Remove(kvp.Key' kvp.Key)); 				} 				else 				{ 					// Method 2: remove by predicate with removal limit 					int removed' total = 0; 					do { 						total += (removed = ht.Remove((uint)kvp.Key' v => v == kvp.Key' 2)); 						Assert.That(removed >= 0 && removed <= 2); 					} while (removed == 2); 					Assert.AreEqual(kvp.Value' total); 				} 			}
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests,The following statement contains a magic number: foreach (var kvp in ht2) 			{ 				if (r.Next(2) == 0) 				{ 					// Method 1: remove by key-value pair (removes one at a time) 					for (int i = 0; i < kvp.Value; i++) 						Assert.That(ht.Remove(kvp.Key' kvp.Key)); 					Assert.IsFalse(ht.Remove(kvp.Key' kvp.Key)); 				} 				else 				{ 					// Method 2: remove by predicate with removal limit 					int removed' total = 0; 					do { 						total += (removed = ht.Remove((uint)kvp.Key' v => v == kvp.Key' 2)); 						Assert.That(removed >= 0 && removed <= 2); 					} while (removed == 2); 					Assert.AreEqual(kvp.Value' total); 				} 			}
Magic Number,Loyc.Collections.Impl,KeylessHashtableTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\KeylessHashtable.cs,BasicTests,The following statement contains a magic number: foreach (var kvp in ht2) 			{ 				if (r.Next(2) == 0) 				{ 					// Method 1: remove by key-value pair (removes one at a time) 					for (int i = 0; i < kvp.Value; i++) 						Assert.That(ht.Remove(kvp.Key' kvp.Key)); 					Assert.IsFalse(ht.Remove(kvp.Key' kvp.Key)); 				} 				else 				{ 					// Method 2: remove by predicate with removal limit 					int removed' total = 0; 					do { 						total += (removed = ht.Remove((uint)kvp.Key' v => v == kvp.Key' 2)); 						Assert.That(removed >= 0 && removed <= 2); 					} while (removed == 2); 					Assert.AreEqual(kvp.Value' total); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: if (outSize > StringScratchBufferLen/3) { 				// Need to compute exact length if the scratch buffer might be too small 				for (int i = 0; i < key.Length; i++) { 					int c = (int)key[i]; 					if (c >= 0x80) 						outSize += (c >= (1 << 11) ? 2 : 1); 				} 				if (outSize > StringScratchBufferLen) 					buf = new byte[outSize]; 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: if (outSize > StringScratchBufferLen/3) { 				// Need to compute exact length if the scratch buffer might be too small 				for (int i = 0; i < key.Length; i++) { 					int c = (int)key[i]; 					if (c >= 0x80) 						outSize += (c >= (1 << 11) ? 2 : 1); 				} 				if (outSize > StringScratchBufferLen) 					buf = new byte[outSize]; 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: if (outSize > StringScratchBufferLen/3) { 				// Need to compute exact length if the scratch buffer might be too small 				for (int i = 0; i < key.Length; i++) { 					int c = (int)key[i]; 					if (c >= 0x80) 						outSize += (c >= (1 << 11) ? 2 : 1); 				} 				if (outSize > StringScratchBufferLen) 					buf = new byte[outSize]; 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: for (int i = 0; i < key.Length; i++) { 				int c = (int)key[i]; 				if (c < 0x80) { 					buf[B++] = (byte)c; 				} else if (c < (1 << 11)) { 					buf[B++] = (byte)((c >> 6) | 0xC0); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} else { 					buf[B++] = (byte)((c >> 12) | 0xE0); 					buf[B++] = (byte)(((c >> 6) & 0x3F) | 0x80); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: for (int i = 0; i < key.Length; i++) { 				int c = (int)key[i]; 				if (c < 0x80) { 					buf[B++] = (byte)c; 				} else if (c < (1 << 11)) { 					buf[B++] = (byte)((c >> 6) | 0xC0); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} else { 					buf[B++] = (byte)((c >> 12) | 0xE0); 					buf[B++] = (byte)(((c >> 6) & 0x3F) | 0x80); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: for (int i = 0; i < key.Length; i++) { 				int c = (int)key[i]; 				if (c < 0x80) { 					buf[B++] = (byte)c; 				} else if (c < (1 << 11)) { 					buf[B++] = (byte)((c >> 6) | 0xC0); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} else { 					buf[B++] = (byte)((c >> 12) | 0xE0); 					buf[B++] = (byte)(((c >> 6) & 0x3F) | 0x80); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: for (int i = 0; i < key.Length; i++) { 				int c = (int)key[i]; 				if (c < 0x80) { 					buf[B++] = (byte)c; 				} else if (c < (1 << 11)) { 					buf[B++] = (byte)((c >> 6) | 0xC0); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} else { 					buf[B++] = (byte)((c >> 12) | 0xE0); 					buf[B++] = (byte)(((c >> 6) & 0x3F) | 0x80); 					buf[B++] = (byte)((c & 0x3F) | 0x80); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,StringToBytes,The following statement contains a magic number: Debug.Assert(outSize <= StringScratchBufferLen/3 || outSize == B);
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,BytesToStringBuilder,The following statement contains a magic number: for (int B = 0; B < keyLength; B++) 			{ 				byte k = key[B]; 				if (k < 0x80) { 					sb.Append((char)k); 				} else if (k < 0xE0) { 					Debug.Assert(k >= 0xC2); 					byte k2 = key[++B]; 					Debug.Assert(k2 >= 0x80 && k2 <= 0xBF); 					sb.Append((char)(((k & 0x1F) << 6) + (k2 & 0x3F))); 				} else { 					Debug.Assert(k < 0xF0); 					byte k2 = key[++B]; 					byte k3 = key[++B]; 					Debug.Assert(k2 >= 0x80 && k2 <= 0xBF); 					Debug.Assert(k3 >= 0x80 && k3 <= 0xBF); 					sb.Append((char)(((k & 0xF) << 12) + ((k2 & 0x3F) << 6) + (k2 & 0x3F))); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,BytesToStringBuilder,The following statement contains a magic number: for (int B = 0; B < keyLength; B++) 			{ 				byte k = key[B]; 				if (k < 0x80) { 					sb.Append((char)k); 				} else if (k < 0xE0) { 					Debug.Assert(k >= 0xC2); 					byte k2 = key[++B]; 					Debug.Assert(k2 >= 0x80 && k2 <= 0xBF); 					sb.Append((char)(((k & 0x1F) << 6) + (k2 & 0x3F))); 				} else { 					Debug.Assert(k < 0xF0); 					byte k2 = key[++B]; 					byte k3 = key[++B]; 					Debug.Assert(k2 >= 0x80 && k2 <= 0xBF); 					Debug.Assert(k3 >= 0x80 && k3 <= 0xBF); 					sb.Append((char)(((k & 0xF) << 12) + ((k2 & 0x3F) << 6) + (k2 & 0x3F))); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,BytesToStringBuilder,The following statement contains a magic number: for (int B = 0; B < keyLength; B++) 			{ 				byte k = key[B]; 				if (k < 0x80) { 					sb.Append((char)k); 				} else if (k < 0xE0) { 					Debug.Assert(k >= 0xC2); 					byte k2 = key[++B]; 					Debug.Assert(k2 >= 0x80 && k2 <= 0xBF); 					sb.Append((char)(((k & 0x1F) << 6) + (k2 & 0x3F))); 				} else { 					Debug.Assert(k < 0xF0); 					byte k2 = key[++B]; 					byte k3 = key[++B]; 					Debug.Assert(k2 >= 0x80 && k2 <= 0xBF); 					Debug.Assert(k3 >= 0x80 && k3 <= 0xBF); 					sb.Append((char)(((k & 0xF) << 12) + ((k2 & 0x3F) << 6) + (k2 & 0x3F))); 				} 			}
Magic Number,Loyc.Collections,CPTrie<T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrie.cs,CountMemoryUsage,The following statement contains a magic number: int size = 16;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: int[] ints = GetLinearInts(100000' 1);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "1-100'000' sorted"' 10' ints' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "1-100'000' sorted"' 10' ints' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "1-100'000' random"' 10' ints' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "1-100'000' random"' 10' ints' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "1-100'000 w/ null vals"' 10' ints' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "1-100'000 w/ null vals"' 10' ints' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 24-bit ints"' 10' GetRandomInts(100000' 0' 0xFFFFFF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 24-bit ints"' 10' GetRandomInts(100000' 0' 0xFFFFFF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 24-bit ints"' 10' GetRandomInts(100000' 0' 0xFFFFFF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random set (null vals.)"' 10' GetRandomInts(100000' 0' 0xFFFFFF)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random set (null vals.)"' 10' GetRandomInts(100000' 0' 0xFFFFFF)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random set (null vals.)"' 10' GetRandomInts(100000' 0' 0xFFFFFF)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'2)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'2)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'2)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'2)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'2)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'2)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(same w/ nulls)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(same w/ nulls)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(same w/ nulls)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(same w/ nulls)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(same w/ nulls)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(same w/ nulls)"' 10' GetIntClusters(100000' 20' 100' 2' 0)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'9)"' 10' GetIntClusters(100000' 20'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'9)"' 10' GetIntClusters(100000' 20'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'9)"' 10' GetIntClusters(100000' 20'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'9)"' 10' GetIntClusters(100000' 20'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'9)"' 10' GetIntClusters(100000' 20'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20' 100'9)"' 10' GetIntClusters(100000' 20'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'2)"' 10' GetIntClusters(100000' 20' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'2)"' 10' GetIntClusters(100000' 20' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'2)"' 10' GetIntClusters(100000' 20' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'2)"' 10' GetIntClusters(100000' 20' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'2)"' 10' GetIntClusters(100000' 20' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'2)"' 10' GetIntClusters(100000' 20' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'9)"' 10' GetIntClusters(100000' 20' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'9)"' 10' GetIntClusters(100000' 20' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'9)"' 10' GetIntClusters(100000' 20' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'9)"' 10' GetIntClusters(100000' 20' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'9)"' 10' GetIntClusters(100000' 20' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(20'1000'9)"' 10' GetIntClusters(100000' 20' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'2)"' 10' GetIntClusters(100000' 50'  100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'2)"' 10' GetIntClusters(100000' 50'  100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'2)"' 10' GetIntClusters(100000' 50'  100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'2)"' 10' GetIntClusters(100000' 50'  100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'2)"' 10' GetIntClusters(100000' 50'  100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'2)"' 10' GetIntClusters(100000' 50'  100' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'9)"' 10' GetIntClusters(100000' 50'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'9)"' 10' GetIntClusters(100000' 50'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'9)"' 10' GetIntClusters(100000' 50'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'9)"' 10' GetIntClusters(100000' 50'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'9)"' 10' GetIntClusters(100000' 50'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50' 100'9)"' 10' GetIntClusters(100000' 50'  100' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'2)"' 10' GetIntClusters(100000' 50' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'2)"' 10' GetIntClusters(100000' 50' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'2)"' 10' GetIntClusters(100000' 50' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'2)"' 10' GetIntClusters(100000' 50' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'2)"' 10' GetIntClusters(100000' 50' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'2)"' 10' GetIntClusters(100000' 50' 1000' 2' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'9)"' 10' GetIntClusters(100000' 50' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'9)"' 10' GetIntClusters(100000' 50' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'9)"' 10' GetIntClusters(100000' 50' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'9)"' 10' GetIntClusters(100000' 50' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'9)"' 10' GetIntClusters(100000' 50' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'1000'9)"' 10' GetIntClusters(100000' 50' 1000' 9' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 10' GetRandomInts(100000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 10' GetRandomInts(100000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 10' GetRandomInts(100000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 5' GetRandomInts(200000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 5' GetRandomInts(200000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 5' GetRandomInts(200000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 3' GetRandomInts(500000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 3' GetRandomInts(500000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 3' GetRandomInts(500000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 2' GetRandomInts(1000000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 2' GetRandomInts(1000000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Random 32-bit ints"' 2' GetRandomInts(1000000' int.MinValue' int.MaxValue)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 10' GetExponentialInts(100000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 10' GetExponentialInts(100000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 10' GetExponentialInts(100000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 5' GetExponentialInts(200000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 5' GetExponentialInts(200000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 5' GetExponentialInts(200000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 3' GetExponentialInts(500000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 3' GetExponentialInts(500000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 3' GetExponentialInts(500000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 2' GetExponentialInts(1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 2' GetExponentialInts(1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Exponential 32-bit"' 2' GetExponentialInts(1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'25'1)"' 10' GetIntClusters(100000' 25' 25' 1' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'25'1)"' 10' GetIntClusters(100000' 25' 25' 1' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'25'1)"' 10' GetIntClusters(100000' 25' 25' 1' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'25'1)"' 10' GetIntClusters(100000' 25' 25' 1' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'25'1)"' 10' GetIntClusters(100000' 25' 25' 1' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'30000'5)"' 10' GetIntClusters(100000' 25' 30000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'30000'5)"' 10' GetIntClusters(100000' 25' 30000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'30000'5)"' 10' GetIntClusters(100000' 25' 30000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'30000'5)"' 10' GetIntClusters(100000' 25' 30000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'30000'5)"' 10' GetIntClusters(100000' 25' 30000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(25'30000'5)"' 10' GetIntClusters(100000' 25' 30000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'50000'5)"' 10' GetIntClusters(100000' 50' 50000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'50000'5)"' 10' GetIntClusters(100000' 50' 50000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'50000'5)"' 10' GetIntClusters(100000' 50' 50000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'50000'5)"' 10' GetIntClusters(100000' 50' 50000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'50000'5)"' 10' GetIntClusters(100000' 50' 50000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(50'50000'5)"' 10' GetIntClusters(100000' 50' 50000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 10' GetIntClusters(100000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 10' GetIntClusters(100000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 10' GetIntClusters(100000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 10' GetIntClusters(100000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 10' GetIntClusters(100000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 10' GetIntClusters(100000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 5' GetIntClusters(200000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 5' GetIntClusters(200000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 5' GetIntClusters(200000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 5' GetIntClusters(200000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 5' GetIntClusters(200000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 5' GetIntClusters(200000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 3' GetIntClusters(500000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 3' GetIntClusters(500000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 3' GetIntClusters(500000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 3' GetIntClusters(500000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 3' GetIntClusters(500000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 3' GetIntClusters(500000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 2' GetIntClusters(1000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 2' GetIntClusters(1000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 2' GetIntClusters(1000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 2' GetIntClusters(1000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 2' GetIntClusters(1000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 2' GetIntClusters(1000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 1' GetIntClusters(2000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 1' GetIntClusters(2000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 1' GetIntClusters(2000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 1' GetIntClusters(2000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(75'90000'5)"' 1' GetIntClusters(2000000' 75' 90000' 5' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(99'90000'2)"' 1' GetIntClusters(2000000' 9' 90000' 2' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(99'90000'2)"' 1' GetIntClusters(2000000' 9' 90000' 2' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(99'90000'2)"' 1' GetIntClusters(2000000' 9' 90000' 2' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(99'90000'2)"' 1' GetIntClusters(2000000' 9' 90000' 2' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(4' "Clusters(99'90000'2)"' 1' GetIntClusters(2000000' 9' 90000' 2' 0x1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: ints = GetRandomInts(int.MinValue' int.MaxValue' 100000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(25'50000'9)"' 10' GetLongClusters(100000' 25' 50000'  9' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(25'50000'9)"' 10' GetLongClusters(100000' 25' 50000'  9' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(25'50000'9)"' 10' GetLongClusters(100000' 25' 50000'  9' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(25'50000'9)"' 10' GetLongClusters(100000' 25' 50000'  9' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(25'50000'9)"' 10' GetLongClusters(100000' 25' 50000'  9' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(25'50000'9)"' 10' GetLongClusters(100000' 25' 50000'  9' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(50'20000'5)"' 10' GetLongClusters(100000' 50' 20000' 5' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(50'20000'5)"' 10' GetLongClusters(100000' 50' 20000' 5' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(50'20000'5)"' 10' GetLongClusters(100000' 50' 20000' 5' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(50'20000'5)"' 10' GetLongClusters(100000' 50' 20000' 5' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(50'20000'5)"' 10' GetLongClusters(100000' 50' 20000' 5' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(50'20000'5)"' 10' GetLongClusters(100000' 50' 20000' 5' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(75'1000'3)"' 10' GetLongClusters(100000' 75' 1000' 3' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(75'1000'3)"' 10' GetLongClusters(100000' 75' 1000' 3' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(75'1000'3)"' 10' GetLongClusters(100000' 75' 1000' 3' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(75'1000'3)"' 10' GetLongClusters(100000' 75' 1000' 3' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(75'1000'3)"' 10' GetLongClusters(100000' 75' 1000' 3' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Clusters(75'1000'3)"' 10' GetLongClusters(100000' 75' 1000' 3' 0x0123456789ABCDEF)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 32-bit longs"' 10' GetRandomLongs(100000' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 32-bit longs"' 10' GetRandomLongs(100000' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 32-bit longs"' 10' GetRandomLongs(100000' 0)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 40-bit longs"' 10' GetRandomLongs(100000' 8)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 40-bit longs"' 10' GetRandomLongs(100000' 8)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 40-bit longs"' 10' GetRandomLongs(100000' 8)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 40-bit longs"' 10' GetRandomLongs(100000' 8)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 64-bit longs"' 10' GetRandomLongs(100000' 32)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 64-bit longs"' 10' GetRandomLongs(100000' 32)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 64-bit longs"' 10' GetRandomLongs(100000' 32)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random 64-bit longs"' 10' GetRandomLongs(100000' 32)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random set (null vals.)"' 10' GetRandomLongs(100000' 32)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random set (null vals.)"' 10' GetRandomLongs(100000' 32)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random set (null vals.)"' 10' GetRandomLongs(100000' 32)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Random set (null vals.)"' 10' GetRandomLongs(100000' 32)' null);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 10' GetExponentialLongs(100000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 10' GetExponentialLongs(100000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 10' GetExponentialLongs(100000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 5'  GetExponentialLongs(200000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 5'  GetExponentialLongs(200000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 5'  GetExponentialLongs(200000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 3'  GetExponentialLongs(500000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 3'  GetExponentialLongs(500000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 3'  GetExponentialLongs(500000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 2'  GetExponentialLongs(1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 2'  GetExponentialLongs(1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkInts,The following statement contains a magic number: DoIntBenchmarkLine(8' "Exponential longs"' 2'  GetExponentialLongs(1000000)' "not null");
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetIntClusters,The following statement contains a magic number: for (int i = 0; i < keys.Length; i += clusterSize) 			{ 				clusterSize = _random.Next(clusterMax/2' clusterMax+1); 				for (int j = 0; j < clusterSize && i + j < keys.Length; j++) 				{ 					key += _random.Next(clusterSpread) + 1; 					keys[i + j] = key; 				} 				key += _random.Next(spacerMax) + 1; 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetLongClusters,The following statement contains a magic number: for (int i = 0; i < keys.Length; i += clusterSize) 			{ 				clusterSize = _random.Next(clusterMax / 2' clusterMax + 1); 				for (int j = 0; j < clusterSize && i + j < keys.Length; j++) 				{ 					key += _random.Next(clusterSpread) + 1; 					keys[i + j] = key; 				} 				key += (long)((0.5 + _random.NextDouble() * 0.5) * (spacerMax + 1)); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetLongClusters,The following statement contains a magic number: for (int i = 0; i < keys.Length; i += clusterSize) 			{ 				clusterSize = _random.Next(clusterMax / 2' clusterMax + 1); 				for (int j = 0; j < clusterSize && i + j < keys.Length; j++) 				{ 					key += _random.Next(clusterSpread) + 1; 					keys[i + j] = key; 				} 				key += (long)((0.5 + _random.NextDouble() * 0.5) * (spacerMax + 1)); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetLongClusters,The following statement contains a magic number: for (int i = 0; i < keys.Length; i += clusterSize) 			{ 				clusterSize = _random.Next(clusterMax / 2' clusterMax + 1); 				for (int j = 0; j < clusterSize && i + j < keys.Length; j++) 				{ 					key += _random.Next(clusterSpread) + 1; 					keys[i + j] = key; 				} 				key += (long)((0.5 + _random.NextDouble() * 0.5) * (spacerMax + 1)); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetRandomLongs,The following statement contains a magic number: while (keys.Count < numKeys) 			{ 				// The low bits shouldn't matter' so let them be zero 				long k = (long)_random.Next() << shift; 				if (_random.Next(0' 2) == 0) 					k = -k; 				keys[k] = true; 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetExponentialInts,The following statement contains a magic number: while (keys.Count < numKeys) 			{ 				int key = _random.Next() >> _random.Next(17); 				if (_random.Next(0' 2) == 0) 					key = ~key; 				keys[key] = true; 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetExponentialInts,The following statement contains a magic number: while (keys.Count < numKeys) 			{ 				int key = _random.Next() >> _random.Next(17); 				if (_random.Next(0' 2) == 0) 					key = ~key; 				keys[key] = true; 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetExponentialLongs,The following statement contains a magic number: while (keys.Count < numKeys) 			{ 				long key = (long)_random.Next() << _random.Next(33); 				if (_random.Next(0' 2) == 0) 					key = ~key; 				keys[key] = true; 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,GetExponentialLongs,The following statement contains a magic number: while (keys.Count < numKeys) 			{ 				long key = (long)_random.Next() << _random.Next(33); 				if (_random.Next(0' 2) == 0) 					key = ~key; 				keys[key] = true; 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) 			{ 				IDictionary<T' object> dict' sdic' trie;  				GC.Collect(); 				dictFillTime += Fill(keys' dict = new Dictionary<T' object>()' value); 				sdicFillTime += Fill(keys' sdic = new SortedDictionary<T' object>()' value); 				trieFillTime += Fill(keys' trie = (IDictionary<T'object>) new CPIntTrie<object>()' value);  				dictMemory += CountMemoryUsage((Dictionary<T' object>)dict' bytesPerKey' 4); 				sdicMemory += CountMemoryUsage((SortedDictionary<T' object>)sdic' bytesPerKey' 4); 				trieMemory += ((CPIntTrie<object>)trie).CountMemoryUsage(4);  				Randomize(keys);  				GC.Collect();  				dictScanTime += Scan(keys' dict); 				sdicScanTime += Scan(keys' sdic); 				trieScanTime += Scan(keys' trie); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) 			{ 				IDictionary<T' object> dict' sdic' trie;  				GC.Collect(); 				dictFillTime += Fill(keys' dict = new Dictionary<T' object>()' value); 				sdicFillTime += Fill(keys' sdic = new SortedDictionary<T' object>()' value); 				trieFillTime += Fill(keys' trie = (IDictionary<T'object>) new CPIntTrie<object>()' value);  				dictMemory += CountMemoryUsage((Dictionary<T' object>)dict' bytesPerKey' 4); 				sdicMemory += CountMemoryUsage((SortedDictionary<T' object>)sdic' bytesPerKey' 4); 				trieMemory += ((CPIntTrie<object>)trie).CountMemoryUsage(4);  				Randomize(keys);  				GC.Collect();  				dictScanTime += Scan(keys' dict); 				sdicScanTime += Scan(keys' sdic); 				trieScanTime += Scan(keys' trie); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) 			{ 				IDictionary<T' object> dict' sdic' trie;  				GC.Collect(); 				dictFillTime += Fill(keys' dict = new Dictionary<T' object>()' value); 				sdicFillTime += Fill(keys' sdic = new SortedDictionary<T' object>()' value); 				trieFillTime += Fill(keys' trie = (IDictionary<T'object>) new CPIntTrie<object>()' value);  				dictMemory += CountMemoryUsage((Dictionary<T' object>)dict' bytesPerKey' 4); 				sdicMemory += CountMemoryUsage((SortedDictionary<T' object>)sdic' bytesPerKey' 4); 				trieMemory += ((CPIntTrie<object>)trie).CountMemoryUsage(4);  				Randomize(keys);  				GC.Collect();  				dictScanTime += Scan(keys' dict); 				sdicScanTime += Scan(keys' sdic); 				trieScanTime += Scan(keys' trie); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0); 				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				string info0 = string.Format("{0'-24}{1'2} {2'8} "' name' reps' keys.Length); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'5:#0.0}M  "' 					dictFillTime / reps' dictScanTime / reps' dictMB); 				string info2 = string.Format("{0'5}ms{1'5}ms {2'5:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB); 				string info3 = string.Format("{0'5}ms{1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB);  				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0); 				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				string info0 = string.Format("{0'-24}{1'2} {2'8} "' name' reps' keys.Length); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'5:#0.0}M  "' 					dictFillTime / reps' dictScanTime / reps' dictMB); 				string info2 = string.Format("{0'5}ms{1'5}ms {2'5:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB); 				string info3 = string.Format("{0'5}ms{1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB);  				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0); 				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				string info0 = string.Format("{0'-24}{1'2} {2'8} "' name' reps' keys.Length); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'5:#0.0}M  "' 					dictFillTime / reps' dictScanTime / reps' dictMB); 				string info2 = string.Format("{0'5}ms{1'5}ms {2'5:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB); 				string info3 = string.Format("{0'5}ms{1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB);  				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0); 				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				string info0 = string.Format("{0'-24}{1'2} {2'8} "' name' reps' keys.Length); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'5:#0.0}M  "' 					dictFillTime / reps' dictScanTime / reps' dictMB); 				string info2 = string.Format("{0'5}ms{1'5}ms {2'5:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB); 				string info3 = string.Format("{0'5}ms{1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB);  				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0); 				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				string info0 = string.Format("{0'-24}{1'2} {2'8} "' name' reps' keys.Length); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'5:#0.0}M  "' 					dictFillTime / reps' dictScanTime / reps' dictMB); 				string info2 = string.Format("{0'5}ms{1'5}ms {2'5:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB); 				string info3 = string.Format("{0'5}ms{1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB);  				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,DoIntBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0); 				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				string info0 = string.Format("{0'-24}{1'2} {2'8} "' name' reps' keys.Length); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'5:#0.0}M  "' 					dictFillTime / reps' dictScanTime / reps' dictMB); 				string info2 = string.Format("{0'5}ms{1'5}ms {2'5:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB); 				string info3 = string.Format("{0'5}ms{1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB);  				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("Basic word list"' words' words.Length' 10' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("Basic words opt."' words' words.Length' 10' true);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: string[] pairs1 = BuildPairs(words' words' " "' 1000000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'  200000' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'  200000' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'  200000' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'  200000' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'  200000' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'  200000' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'    1000' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'    1000' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'    1000' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     500' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     500' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     500' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     250' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     250' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     250' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     125' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     125' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'     125' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'     125' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'     125' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'     125' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      64' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      64' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      64' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      32' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      32' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      32' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      16' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      16' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'      16' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'       8' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'       8' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'       8' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'       4' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'       4' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs"'      pairs1'       4' 2' false' 200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'       4' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'       4' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("200K pairs opt."' pairs1'       4' 2' true'  200000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("1M pairs"'        pairs1' 1000000' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine("1M pairs opt."'   pairs1' 1000000' 1' true);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: string[] pairs2 = BuildPairs(prefixes' words' " "' 1000000);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 1000000' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name2' pairs2' 1000000' 1' true);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 500' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 250' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 125' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 64' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 32' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 16' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 8' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,BenchmarkStrings,The following statement contains a magic number: StringBenchmarkLine(name1' pairs2' 4' 1' false);
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) { 				IDictionary<string' string>[] dicts = null' sdics = null' tries;  				GC.Collect(); 				if (!optimizeTrie) 				{	 					// Each line where we optimize the trie is paired with another  					// line where we don't; there is no need to repeat the non-trie 					// benchmarks. 					dictFillTime += Fill(words' wordCount' sectionSize' out dicts'  						delegate() { return new Dictionary<string'string>(); }); 					sdicFillTime += Fill(words' wordCount' sectionSize' out sdics' 						delegate() { return new SortedDictionary<string' string>(StringComparer.Ordinal); }); 				} 				trieFillTime += Fill(words' wordCount' sectionSize' out tries'  					delegate() { return new CPStringTrie<string>(); });  				if (optimizeTrie) 				{ 					EzStopwatch t = new EzStopwatch(true);  					for (int i = 0; i < tries.Length; i++) 						tries[i] = ((CPStringTrie<string>)tries[i]).Clone();  					trieFillTime += t.Millisec; 				}  				if (!optimizeTrie) 				{ 					for (int i = 0; i < dicts.Length; i++) 						dictMemory += CountMemoryUsage((Dictionary<string' string>)dicts[i]' 4' 4); 					for (int i = 0; i < sdics.Length; i++) 						sdicMemory += CountMemoryUsage((SortedDictionary<string' string>)sdics[i]' 4' 4); 				} 				for (int i = 0; i < tries.Length; i++) 					trieMemory += ((CPStringTrie<string>)tries[i]).CountMemoryUsage(4);  				Scramble(words' wordCount' sectionSize); 				 				GC.Collect();  				if (!optimizeTrie) 				{ 					dictScanTime += Scan(words' wordCount' sectionSize' dicts); 					sdicScanTime += Scan(words' wordCount' sectionSize' sdics); 				} 				trieScanTime += Scan(words' wordCount' sectionSize' tries); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) { 				IDictionary<string' string>[] dicts = null' sdics = null' tries;  				GC.Collect(); 				if (!optimizeTrie) 				{	 					// Each line where we optimize the trie is paired with another  					// line where we don't; there is no need to repeat the non-trie 					// benchmarks. 					dictFillTime += Fill(words' wordCount' sectionSize' out dicts'  						delegate() { return new Dictionary<string'string>(); }); 					sdicFillTime += Fill(words' wordCount' sectionSize' out sdics' 						delegate() { return new SortedDictionary<string' string>(StringComparer.Ordinal); }); 				} 				trieFillTime += Fill(words' wordCount' sectionSize' out tries'  					delegate() { return new CPStringTrie<string>(); });  				if (optimizeTrie) 				{ 					EzStopwatch t = new EzStopwatch(true);  					for (int i = 0; i < tries.Length; i++) 						tries[i] = ((CPStringTrie<string>)tries[i]).Clone();  					trieFillTime += t.Millisec; 				}  				if (!optimizeTrie) 				{ 					for (int i = 0; i < dicts.Length; i++) 						dictMemory += CountMemoryUsage((Dictionary<string' string>)dicts[i]' 4' 4); 					for (int i = 0; i < sdics.Length; i++) 						sdicMemory += CountMemoryUsage((SortedDictionary<string' string>)sdics[i]' 4' 4); 				} 				for (int i = 0; i < tries.Length; i++) 					trieMemory += ((CPStringTrie<string>)tries[i]).CountMemoryUsage(4);  				Scramble(words' wordCount' sectionSize); 				 				GC.Collect();  				if (!optimizeTrie) 				{ 					dictScanTime += Scan(words' wordCount' sectionSize' dicts); 					sdicScanTime += Scan(words' wordCount' sectionSize' sdics); 				} 				trieScanTime += Scan(words' wordCount' sectionSize' tries); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) { 				IDictionary<string' string>[] dicts = null' sdics = null' tries;  				GC.Collect(); 				if (!optimizeTrie) 				{	 					// Each line where we optimize the trie is paired with another  					// line where we don't; there is no need to repeat the non-trie 					// benchmarks. 					dictFillTime += Fill(words' wordCount' sectionSize' out dicts'  						delegate() { return new Dictionary<string'string>(); }); 					sdicFillTime += Fill(words' wordCount' sectionSize' out sdics' 						delegate() { return new SortedDictionary<string' string>(StringComparer.Ordinal); }); 				} 				trieFillTime += Fill(words' wordCount' sectionSize' out tries'  					delegate() { return new CPStringTrie<string>(); });  				if (optimizeTrie) 				{ 					EzStopwatch t = new EzStopwatch(true);  					for (int i = 0; i < tries.Length; i++) 						tries[i] = ((CPStringTrie<string>)tries[i]).Clone();  					trieFillTime += t.Millisec; 				}  				if (!optimizeTrie) 				{ 					for (int i = 0; i < dicts.Length; i++) 						dictMemory += CountMemoryUsage((Dictionary<string' string>)dicts[i]' 4' 4); 					for (int i = 0; i < sdics.Length; i++) 						sdicMemory += CountMemoryUsage((SortedDictionary<string' string>)sdics[i]' 4' 4); 				} 				for (int i = 0; i < tries.Length; i++) 					trieMemory += ((CPStringTrie<string>)tries[i]).CountMemoryUsage(4);  				Scramble(words' wordCount' sectionSize); 				 				GC.Collect();  				if (!optimizeTrie) 				{ 					dictScanTime += Scan(words' wordCount' sectionSize' dicts); 					sdicScanTime += Scan(words' wordCount' sectionSize' sdics); 				} 				trieScanTime += Scan(words' wordCount' sectionSize' tries); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) { 				IDictionary<string' string>[] dicts = null' sdics = null' tries;  				GC.Collect(); 				if (!optimizeTrie) 				{	 					// Each line where we optimize the trie is paired with another  					// line where we don't; there is no need to repeat the non-trie 					// benchmarks. 					dictFillTime += Fill(words' wordCount' sectionSize' out dicts'  						delegate() { return new Dictionary<string'string>(); }); 					sdicFillTime += Fill(words' wordCount' sectionSize' out sdics' 						delegate() { return new SortedDictionary<string' string>(StringComparer.Ordinal); }); 				} 				trieFillTime += Fill(words' wordCount' sectionSize' out tries'  					delegate() { return new CPStringTrie<string>(); });  				if (optimizeTrie) 				{ 					EzStopwatch t = new EzStopwatch(true);  					for (int i = 0; i < tries.Length; i++) 						tries[i] = ((CPStringTrie<string>)tries[i]).Clone();  					trieFillTime += t.Millisec; 				}  				if (!optimizeTrie) 				{ 					for (int i = 0; i < dicts.Length; i++) 						dictMemory += CountMemoryUsage((Dictionary<string' string>)dicts[i]' 4' 4); 					for (int i = 0; i < sdics.Length; i++) 						sdicMemory += CountMemoryUsage((SortedDictionary<string' string>)sdics[i]' 4' 4); 				} 				for (int i = 0; i < tries.Length; i++) 					trieMemory += ((CPStringTrie<string>)tries[i]).CountMemoryUsage(4);  				Scramble(words' wordCount' sectionSize); 				 				GC.Collect();  				if (!optimizeTrie) 				{ 					dictScanTime += Scan(words' wordCount' sectionSize' dicts); 					sdicScanTime += Scan(words' wordCount' sectionSize' sdics); 				} 				trieScanTime += Scan(words' wordCount' sectionSize' tries); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: for (int rep = 0; rep < reps; rep++) { 				IDictionary<string' string>[] dicts = null' sdics = null' tries;  				GC.Collect(); 				if (!optimizeTrie) 				{	 					// Each line where we optimize the trie is paired with another  					// line where we don't; there is no need to repeat the non-trie 					// benchmarks. 					dictFillTime += Fill(words' wordCount' sectionSize' out dicts'  						delegate() { return new Dictionary<string'string>(); }); 					sdicFillTime += Fill(words' wordCount' sectionSize' out sdics' 						delegate() { return new SortedDictionary<string' string>(StringComparer.Ordinal); }); 				} 				trieFillTime += Fill(words' wordCount' sectionSize' out tries'  					delegate() { return new CPStringTrie<string>(); });  				if (optimizeTrie) 				{ 					EzStopwatch t = new EzStopwatch(true);  					for (int i = 0; i < tries.Length; i++) 						tries[i] = ((CPStringTrie<string>)tries[i]).Clone();  					trieFillTime += t.Millisec; 				}  				if (!optimizeTrie) 				{ 					for (int i = 0; i < dicts.Length; i++) 						dictMemory += CountMemoryUsage((Dictionary<string' string>)dicts[i]' 4' 4); 					for (int i = 0; i < sdics.Length; i++) 						sdicMemory += CountMemoryUsage((SortedDictionary<string' string>)sdics[i]' 4' 4); 				} 				for (int i = 0; i < tries.Length; i++) 					trieMemory += ((CPStringTrie<string>)tries[i]).CountMemoryUsage(4);  				Scramble(words' wordCount' sectionSize); 				 				GC.Collect();  				if (!optimizeTrie) 				{ 					dictScanTime += Scan(words' wordCount' sectionSize' dicts); 					sdicScanTime += Scan(words' wordCount' sectionSize' sdics); 				} 				trieScanTime += Scan(words' wordCount' sectionSize' tries); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: for (int i = 0; i < wordCount; i++) 				// Note: I'm guessing the overhead of System.String. I assume each  				// string has a 12-byte header (8-byte object header plus Length)  				// and a null terminator (for native interop). 				keyMemory += 16 + (words[i].Length & ~1) * 2;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: for (int i = 0; i < wordCount; i++) 				// Note: I'm guessing the overhead of System.String. I assume each  				// string has a 12-byte header (8-byte object header plus Length)  				// and a null terminator (for native interop). 				keyMemory += 16 + (words[i].Length & ~1) * 2;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,StringBenchmarkLine,The following statement contains a magic number: if (name != null) 			{ 				Debug.Assert(reps > 0);  				double dictMB = (double)dictMemory / (1024 * 1024) / reps; 				double sdicMB = (double)sdicMemory / (1024 * 1024) / reps; 				double trieMB = (double)trieMemory / (1024 * 1024) / reps; 				double  keyMB = (double) keyMemory / (1024 * 1024); 				string info0 = string.Format("{0'-20}{1'2} {2'8} "' name' reps' sectionSize); 				string info1 = string.Format("{0'4}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M "' 					dictFillTime / reps' dictScanTime / reps' dictMB' keyMB); 				string info2 = string.Format("{0'5}ms {1'4}ms {2'4:#0.0}M+{3'4:#0.0}M  "' 					sdicFillTime / reps' sdicScanTime / reps' sdicMB' keyMB); 				string info3 = string.Format("{0'5}ms {1'5}ms {2'4:#0.0}M"' 					trieFillTime / reps' trieScanTime / reps' trieMB); 				if (optimizeTrie) 				{ 					info1 = "  --ms   --ms  -- M+ -- M "; 					info2 = "  -- ms  -- ms  -- M+ -- M  "; 				} 				Console.WriteLine(info0 + info1 + info2 + info3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size = (11 + 2) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size = (11 + 2) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size = (11 + 2) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: if (dict.Count > 0) 			{ 				size += 12 + 12; // Array overheads  				// The size per element is sizeof(Key) + sizeof(Value) + 12 (4 bytes 				// are in "buckets" and the rest are in "entries"). 				//     There is no Capacity property so we can't tell how big the 				// arrays are currently' but on average' 25% of the entries (1/3 of 				// of the number of entries used) are unused' so assume that amount  				// of overhead. 				int elemSize = 12 + keySize + valueSize; 				int usedSize = elemSize * dict.Count; 				size += usedSize + (usedSize / 3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: if (dict.Count > 0) 			{ 				size += 12 + 12; // Array overheads  				// The size per element is sizeof(Key) + sizeof(Value) + 12 (4 bytes 				// are in "buckets" and the rest are in "entries"). 				//     There is no Capacity property so we can't tell how big the 				// arrays are currently' but on average' 25% of the entries (1/3 of 				// of the number of entries used) are unused' so assume that amount  				// of overhead. 				int elemSize = 12 + keySize + valueSize; 				int usedSize = elemSize * dict.Count; 				size += usedSize + (usedSize / 3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: if (dict.Count > 0) 			{ 				size += 12 + 12; // Array overheads  				// The size per element is sizeof(Key) + sizeof(Value) + 12 (4 bytes 				// are in "buckets" and the rest are in "entries"). 				//     There is no Capacity property so we can't tell how big the 				// arrays are currently' but on average' 25% of the entries (1/3 of 				// of the number of entries used) are unused' so assume that amount  				// of overhead. 				int elemSize = 12 + keySize + valueSize; 				int usedSize = elemSize * dict.Count; 				size += usedSize + (usedSize / 3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: if (dict.Count > 0) 			{ 				size += 12 + 12; // Array overheads  				// The size per element is sizeof(Key) + sizeof(Value) + 12 (4 bytes 				// are in "buckets" and the rest are in "entries"). 				//     There is no Capacity property so we can't tell how big the 				// arrays are currently' but on average' 25% of the entries (1/3 of 				// of the number of entries used) are unused' so assume that amount  				// of overhead. 				int elemSize = 12 + keySize + valueSize; 				int usedSize = elemSize * dict.Count; 				size += usedSize + (usedSize / 3); 			}
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size =  				( 3 + 2 // SortedDictionary instance 				+ 6 + 2 // TreeSet instance 				+ 1 + 2 // KeyValuePairComparer instance 				) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size =  				( 3 + 2 // SortedDictionary instance 				+ 6 + 2 // TreeSet instance 				+ 1 + 2 // KeyValuePairComparer instance 				) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size =  				( 3 + 2 // SortedDictionary instance 				+ 6 + 2 // TreeSet instance 				+ 1 + 2 // KeyValuePairComparer instance 				) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size =  				( 3 + 2 // SortedDictionary instance 				+ 6 + 2 // TreeSet instance 				+ 1 + 2 // KeyValuePairComparer instance 				) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size =  				( 3 + 2 // SortedDictionary instance 				+ 6 + 2 // TreeSet instance 				+ 1 + 2 // KeyValuePairComparer instance 				) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: int size =  				( 3 + 2 // SortedDictionary instance 				+ 6 + 2 // TreeSet instance 				+ 1 + 2 // KeyValuePairComparer instance 				) * 4;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: size += ((2 + 3) * 4 + keySize + valueSize) * dict.Count;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: size += ((2 + 3) * 4 + keySize + valueSize) * dict.Count;
Magic Number,Loyc.Collections,CPTrieBenchmark,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieBenchmark.cs,CountMemoryUsage,The following statement contains a magic number: size += ((2 + 3) * 4 + keySize + valueSize) * dict.Count;
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,BasicTestStrings,The following statement contains a magic number: for (int set = 0; set < 16; set++) 			{ 				string prefix = ""; 				if (set > 0) 					prefix = (1 << set).ToString();  				for (int i = 0; i < ss.Length; i++) 					yield return prefix + ss[i]; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,BasicTests,The following statement contains a magic number: Debug.Assert(testStrings.Count % 16 == 0);
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,BasicEnumeratorTests,The following statement contains a magic number: TestFind(trie' 500);
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,DenseNodeTest,The following statement contains a magic number: for (int i = 0; i < 256; i++) 			{ 				int suffixLen = rand.Next(suffix.Length + 1); 				byte[] key1 = new byte[2 + suffixLen]; 				byte[] key2 = new byte[2 + suffixLen]; 				byte[] key3 = new byte[1 + suffixLen]; 				key1[0] = (byte)'A'; 				key1[1] = (byte)i; 				key2[0] = (byte)'B'; 				key2[suffixLen + 1] = (byte)i; 				key3[0] = (byte)i; 				for (int s = 0; s < suffixLen; s++) { 					key1[s + 2] = suffix[s]; 					key2[s + 1] = suffix[s]; 					key3[s + 1] = suffix[s]; 				} 				if (trie.TryAdd(key1' key1)) 					hash.Add(key1' key1); 				trie[key2] = null; 				trie[key3] = null; 				hash[key2] = null; 				hash[key3] = null;  				Assert.AreEqual(trie.Count' hash.Count); 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,DenseNodeTest,The following statement contains a magic number: for (int i = 0; i < 256; i++) 			{ 				int suffixLen = rand.Next(suffix.Length + 1); 				byte[] key1 = new byte[2 + suffixLen]; 				byte[] key2 = new byte[2 + suffixLen]; 				byte[] key3 = new byte[1 + suffixLen]; 				key1[0] = (byte)'A'; 				key1[1] = (byte)i; 				key2[0] = (byte)'B'; 				key2[suffixLen + 1] = (byte)i; 				key3[0] = (byte)i; 				for (int s = 0; s < suffixLen; s++) { 					key1[s + 2] = suffix[s]; 					key2[s + 1] = suffix[s]; 					key3[s + 1] = suffix[s]; 				} 				if (trie.TryAdd(key1' key1)) 					hash.Add(key1' key1); 				trie[key2] = null; 				trie[key3] = null; 				hash[key2] = null; 				hash[key3] = null;  				Assert.AreEqual(trie.Count' hash.Count); 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,DenseNodeTest,The following statement contains a magic number: for (int i = 0; i < 256; i++) 			{ 				int suffixLen = rand.Next(suffix.Length + 1); 				byte[] key1 = new byte[2 + suffixLen]; 				byte[] key2 = new byte[2 + suffixLen]; 				byte[] key3 = new byte[1 + suffixLen]; 				key1[0] = (byte)'A'; 				key1[1] = (byte)i; 				key2[0] = (byte)'B'; 				key2[suffixLen + 1] = (byte)i; 				key3[0] = (byte)i; 				for (int s = 0; s < suffixLen; s++) { 					key1[s + 2] = suffix[s]; 					key2[s + 1] = suffix[s]; 					key3[s + 1] = suffix[s]; 				} 				if (trie.TryAdd(key1' key1)) 					hash.Add(key1' key1); 				trie[key2] = null; 				trie[key3] = null; 				hash[key2] = null; 				hash[key3] = null;  				Assert.AreEqual(trie.Count' hash.Count); 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,DenseNodeTest,The following statement contains a magic number: for (int i = 0; i < 256; i++) 			{ 				int suffixLen = rand.Next(suffix.Length + 1); 				byte[] key1 = new byte[2 + suffixLen]; 				byte[] key2 = new byte[2 + suffixLen]; 				byte[] key3 = new byte[1 + suffixLen]; 				key1[0] = (byte)'A'; 				key1[1] = (byte)i; 				key2[0] = (byte)'B'; 				key2[suffixLen + 1] = (byte)i; 				key3[0] = (byte)i; 				for (int s = 0; s < suffixLen; s++) { 					key1[s + 2] = suffix[s]; 					key2[s + 1] = suffix[s]; 					key3[s + 1] = suffix[s]; 				} 				if (trie.TryAdd(key1' key1)) 					hash.Add(key1' key1); 				trie[key2] = null; 				trie[key3] = null; 				hash[key2] = null; 				hash[key3] = null;  				Assert.AreEqual(trie.Count' hash.Count); 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,DenseNodeTest,The following statement contains a magic number: while (e.MoveNext()) 			{ 				curKey = e.CurrentKey; 				Assert.That(hash.ContainsKey(curKey)); 				Assert.That(ByteArrayComparer.Compare(prevKey' curKey) < 0);  				if (prevKey != null && rand.Next(3) == 0) 				{ 					// Enumerate backward 					Assert.That(e.MovePrev()); 					Assert.That(ByteArrayComparer.Compare(prevKey' e.CurrentKey) == 0);  					// Find() our way back to the current item 					Assert.That(trie.Find(curKey' out e)); 					Assert.That(ByteArrayComparer.Compare(curKey' e.CurrentKey) == 0); 				} 				 				prevKey = curKey; 				count++; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int16Tests,The following statement contains a magic number: for (short i = short.MinValue; i < short.MaxValue - 100; i += (short)rand.Next(3' 100)) 			{ 				trie[i + 2] = i + 2; 				trie.Add(i + 1' i + 1); 				trie.Add(new KeyValuePair<int' float>(i' i)); 				count += 3; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int16Tests,The following statement contains a magic number: for (short i = short.MinValue; i < short.MaxValue - 100; i += (short)rand.Next(3' 100)) 			{ 				trie[i + 2] = i + 2; 				trie.Add(i + 1' i + 1); 				trie.Add(new KeyValuePair<int' float>(i' i)); 				count += 3; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int16Tests,The following statement contains a magic number: for (short i = short.MinValue; i < short.MaxValue - 100; i += (short)rand.Next(3' 100)) 			{ 				trie[i + 2] = i + 2; 				trie.Add(i + 1' i + 1); 				trie.Add(new KeyValuePair<int' float>(i' i)); 				count += 3; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int16Tests,The following statement contains a magic number: for (short i = short.MinValue; i < short.MaxValue - 100; i += (short)rand.Next(3' 100)) 			{ 				trie[i + 2] = i + 2; 				trie.Add(i + 1' i + 1); 				trie.Add(new KeyValuePair<int' float>(i' i)); 				count += 3; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int16Tests,The following statement contains a magic number: for (short i = short.MinValue; i < short.MaxValue - 100; i += (short)rand.Next(3' 100)) 			{ 				trie[i + 2] = i + 2; 				trie.Add(i + 1' i + 1); 				trie.Add(new KeyValuePair<int' float>(i' i)); 				count += 3; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int16Tests,The following statement contains a magic number: for (short i = short.MinValue; i < short.MaxValue - 100; i += (short)rand.Next(3' 100)) 			{ 				trie[i + 2] = i + 2; 				trie.Add(i + 1' i + 1); 				trie.Add(new KeyValuePair<int' float>(i' i)); 				count += 3; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int16Tests,The following statement contains a magic number: for (int i = 0; i < 100; i++) 			{ 				short keyF = (short)rand.Next(short.MinValue' short.MaxValue); 				CPIntTrie<float>.IntEnumerator e = trie.FindAtLeast(keyF); 				if (!e.IsValid) 					Assert.That(e.MovePrev()); 				else 					Assert.LessOrEqual(keyF' e.CurrentKey); 				Assert.AreEqual(e.CurrentKey' e.CurrentValue); 				Assert.That(trie.Remove((short)e.CurrentKey)); 				Assert.That(!trie.Remove((short)e.CurrentKey)); 				count--; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int32Tests,The following statement contains a magic number: while (count < 1000) 			{ 				int key = rand.Next(int.MinValue' int.MaxValue - 2); 				if (!trie.ContainsKey(key)) 					count++; 				trie[key] = key;  				key++; 				if (trie.TryAdd(key' key)) 					count++;  				key++; 				if (!trie.ContainsKey(key)) { 					trie.Add(new KeyValuePair<int' int>(key' key)); 					count++; 				} 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int32Tests,The following statement contains a magic number: while (count < 1000) 			{ 				int key = rand.Next(int.MinValue' int.MaxValue - 2); 				if (!trie.ContainsKey(key)) 					count++; 				trie[key] = key;  				key++; 				if (trie.TryAdd(key' key)) 					count++;  				key++; 				if (!trie.ContainsKey(key)) { 					trie.Add(new KeyValuePair<int' int>(key' key)); 					count++; 				} 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int64Tests,The following statement contains a magic number: while (count < 2000) 			{ 				int key32 = rand.Next(int.MinValue + 1' int.MaxValue - 2); 				long key = (long)key32 << rand.Next(0' 33);  				if (trie.FindExact(key) == null) { 					trie.Add(new KeyValuePair<long' long>(key' key)); 					count++; 				}  				// Add key as ulong (a negative key becomes positive) 				key++; 				if (!trie.ContainsKey((ulong)key)) 					count++; 				trie[(ulong)key] = key;  				// Again as ulong 				key++; 				if (trie.TryAdd((ulong)key' key)) 					count++; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int64Tests,The following statement contains a magic number: while (count < 2000) 			{ 				int key32 = rand.Next(int.MinValue + 1' int.MaxValue - 2); 				long key = (long)key32 << rand.Next(0' 33);  				if (trie.FindExact(key) == null) { 					trie.Add(new KeyValuePair<long' long>(key' key)); 					count++; 				}  				// Add key as ulong (a negative key becomes positive) 				key++; 				if (!trie.ContainsKey((ulong)key)) 					count++; 				trie[(ulong)key] = key;  				// Again as ulong 				key++; 				if (trie.TryAdd((ulong)key' key)) 					count++; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int64Tests,The following statement contains a magic number: while (count < 2000) 			{ 				int key32 = rand.Next(int.MinValue + 1' int.MaxValue - 2); 				long key = (long)key32 << rand.Next(0' 33);  				if (trie.FindExact(key) == null) { 					trie.Add(new KeyValuePair<long' long>(key' key)); 					count++; 				}  				// Add key as ulong (a negative key becomes positive) 				key++; 				if (!trie.ContainsKey((ulong)key)) 					count++; 				trie[(ulong)key] = key;  				// Again as ulong 				key++; 				if (trie.TryAdd((ulong)key' key)) 					count++; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,Int64Tests,The following statement contains a magic number: while (!trie.IsEmpty) 			{ 				int keyF32 = rand.Next(int.MinValue' int.MaxValue); 				long keyF = (long)keyF32 << rand.Next(0' 33); 				CPIntTrie<long>.LongEnumerator e = trie.FindAtLeast(keyF); 				long key; 				if (!e.IsValid) { 					Assert.That(e.MovePrev()); 					key = e.CurrentKey; 				} else { 					key = e.CurrentKey; 					Assert.That(keyF <= key || (key < 0 && trie.ContainsKey((ulong)key))); 				}  				Assert.AreEqual(e.CurrentKey' e.CurrentValue);  				if (trie.ContainsKey(key)) 					Assert.That(trie.Remove(e.Current)); 				else 					Assert.That(trie.Remove((ulong)key)); 				Assert.That(!trie.Remove(key)); 				count--; 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,NullBitArrayTest,The following statement contains a magic number: for (int i = 0; i < 50000; i++) { 				num = num + rand.Next(1' 4); 				trie.Add(num' rand.Next(500) == 0 ? "rarity" : null); 				ints.Add(num); 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,NullBitArrayTest,The following statement contains a magic number: for (int i = 0; i < 50000; i++) { 				num = num + rand.Next(1' 4); 				trie.Add(num' rand.Next(500) == 0 ? "rarity" : null); 				ints.Add(num); 			}
Magic Number,Loyc.Collections,CPTrieTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,NullBitArrayTest,The following statement contains a magic number: for (int i = 0; i < 50000; i++) { 				num = num + rand.Next(1' 4); 				trie.Add(num' rand.Next(500) == 0 ? "rarity" : null); 				ints.Add(num); 			}
Magic Number,Loyc.Collections,ByteArrayComparer,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Collections\CPTrie\CPTrieTests.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < obj.Length; i++) 				hc = hc * 257 ^ obj[i];
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,GenerateForwardingForToStringEtc,The following statement contains a magic number: List<MethodAndParams> methods = new List<MethodAndParams>(3);
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Ldind_Ref); 			else { 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Ldind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Ldind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Ldind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Ldind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Ldind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Ldind_R8); 				else 					il.Emit(OpCodes.Ldobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Ldind_Ref); 			else { 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Ldind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Ldind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Ldind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Ldind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Ldind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Ldind_R8); 				else 					il.Emit(OpCodes.Ldobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Ldind_Ref); 			else { 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Ldind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Ldind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Ldind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Ldind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Ldind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Ldind_R8); 				else 					il.Emit(OpCodes.Ldobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Ldind_Ref); 			else { 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Ldind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Ldind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Ldind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Ldind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Ldind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Ldind_R8); 				else 					il.Emit(OpCodes.Ldobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Ldind_Ref); 			else { 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Ldind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Ldind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Ldind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Ldind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Ldind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Ldind_R8); 				else 					il.Emit(OpCodes.Ldobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitStInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Stind_Ref); 			else 			{ 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Stind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Stind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Stind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Stind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Stind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Stind_R8); 				else 					il.Emit(OpCodes.Stobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitStInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Stind_Ref); 			else 			{ 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Stind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Stind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Stind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Stind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Stind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Stind_R8); 				else 					il.Emit(OpCodes.Stobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitStInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Stind_Ref); 			else 			{ 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Stind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Stind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Stind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Stind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Stind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Stind_R8); 				else 					il.Emit(OpCodes.Stobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitStInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Stind_Ref); 			else 			{ 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Stind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Stind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Stind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Stind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Stind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Stind_R8); 				else 					il.Emit(OpCodes.Stobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitStInd,The following statement contains a magic number: if (!type.IsValueType) 				il.Emit(OpCodes.Stind_Ref); 			else 			{ 				bool unsigned; 				int size = PrimSize(type' out unsigned); 				if (size == 1) 					il.Emit(OpCodes.Stind_I1); 				else if (size == 2) 					il.Emit(OpCodes.Stind_I2); 				else if (size == 4) 					il.Emit(OpCodes.Stind_I4); 				else if (size == 8) 					il.Emit(OpCodes.Stind_I8); 				else if (size == -4) 					il.Emit(OpCodes.Stind_R4); 				else if (size == -8) 					il.Emit(OpCodes.Stind_R8); 				else 					il.Emit(OpCodes.Stobj' type); 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,PrimSize,The following statement contains a magic number: if (t.IsPrimitive) 			{ 				if (t == typeof(byte) || t == typeof(ushort)) 					unsigned = true; 				if (t == typeof(byte) || t == typeof(sbyte)) 					return 1; 				if (t == typeof(short) || t == typeof(ushort)) 					return 2; 				if (t == typeof(uint) || t == typeof(ulong)) 					unsigned = true; 				if (t == typeof(int) || t == typeof(uint)) 					return 4; 				if (t == typeof(long) || t == typeof(ulong)) 					return 8; 				if (t == typeof(float)) 					return -4; 				if (t == typeof(double)) 					return -8; 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,PrimSize,The following statement contains a magic number: if (t.IsPrimitive) 			{ 				if (t == typeof(byte) || t == typeof(ushort)) 					unsigned = true; 				if (t == typeof(byte) || t == typeof(sbyte)) 					return 1; 				if (t == typeof(short) || t == typeof(ushort)) 					return 2; 				if (t == typeof(uint) || t == typeof(ulong)) 					unsigned = true; 				if (t == typeof(int) || t == typeof(uint)) 					return 4; 				if (t == typeof(long) || t == typeof(ulong)) 					return 8; 				if (t == typeof(float)) 					return -4; 				if (t == typeof(double)) 					return -8; 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,PrimSize,The following statement contains a magic number: if (t.IsPrimitive) 			{ 				if (t == typeof(byte) || t == typeof(ushort)) 					unsigned = true; 				if (t == typeof(byte) || t == typeof(sbyte)) 					return 1; 				if (t == typeof(short) || t == typeof(ushort)) 					return 2; 				if (t == typeof(uint) || t == typeof(ulong)) 					unsigned = true; 				if (t == typeof(int) || t == typeof(uint)) 					return 4; 				if (t == typeof(long) || t == typeof(ulong)) 					return 8; 				if (t == typeof(float)) 					return -4; 				if (t == typeof(double)) 					return -8; 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,PrimSize,The following statement contains a magic number: if (t.IsPrimitive) 			{ 				if (t == typeof(byte) || t == typeof(ushort)) 					unsigned = true; 				if (t == typeof(byte) || t == typeof(sbyte)) 					return 1; 				if (t == typeof(short) || t == typeof(ushort)) 					return 2; 				if (t == typeof(uint) || t == typeof(ulong)) 					unsigned = true; 				if (t == typeof(int) || t == typeof(uint)) 					return 4; 				if (t == typeof(long) || t == typeof(ulong)) 					return 8; 				if (t == typeof(float)) 					return -4; 				if (t == typeof(double)) 					return -8; 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,PrimSize,The following statement contains a magic number: if (t.IsPrimitive) 			{ 				if (t == typeof(byte) || t == typeof(ushort)) 					unsigned = true; 				if (t == typeof(byte) || t == typeof(sbyte)) 					return 1; 				if (t == typeof(short) || t == typeof(ushort)) 					return 2; 				if (t == typeof(uint) || t == typeof(ulong)) 					unsigned = true; 				if (t == typeof(int) || t == typeof(uint)) 					return 4; 				if (t == typeof(long) || t == typeof(ulong)) 					return 8; 				if (t == typeof(float)) 					return -4; 				if (t == typeof(double)) 					return -8; 			}
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdArg,The following statement contains a magic number: if (i == 0) 				il.Emit(OpCodes.Ldarg_1); 			else if (i == 1) 				il.Emit(OpCodes.Ldarg_2); 			else if (i == 2) 				il.Emit(OpCodes.Ldarg_3); 			else if (i < 255) 				il.Emit(OpCodes.Ldarg_S' (byte)(i + 1)); 			else 				il.Emit(OpCodes.Ldarg' i + 1);
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdArg,The following statement contains a magic number: if (i == 0) 				il.Emit(OpCodes.Ldarg_1); 			else if (i == 1) 				il.Emit(OpCodes.Ldarg_2); 			else if (i == 2) 				il.Emit(OpCodes.Ldarg_3); 			else if (i < 255) 				il.Emit(OpCodes.Ldarg_S' (byte)(i + 1)); 			else 				il.Emit(OpCodes.Ldarg' i + 1);
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdArga,The following statement contains a magic number: if (i < 255) 				il.Emit(OpCodes.Ldarga_S' i + 1); 			else 				il.Emit(OpCodes.Ldarga' i + 1);
Magic Number,Loyc.Utilities,GoInterface<Interface;T>,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\GoInterface.cs,EmitLdc,The following statement contains a magic number: if (value == 0) 				il.Emit(OpCodes.Ldc_I4_0); 			else if (value == 1) 				il.Emit(OpCodes.Ldc_I4_1); 			else if (value == 2) 				il.Emit(OpCodes.Ldc_I4_2); 			else if (value == -1) 				il.Emit(OpCodes.Ldc_I4_M1); 			else 				il.Emit(OpCodes.Ldc_I4' value);
Magic Number,Loyc.Utilities,Statistic,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\Statistic.cs,StdDeviation,The following statement contains a magic number: Debug.Assert(double.IsNaN(v) || v > -0.00001);
Magic Number,Loyc.Utilities,UG,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,ProcessArgument,The following statement contains a magic number: if (s.StartsWith("-")) { 				Match m = CmdLineLongOptRegex.Match(s); 				if (m.Success) 				{ 					// it's an --option 					string name = m.Groups[1].ToString(); 					string value = m.Groups[3].ToString(); 					if (value == "" && m.Groups[2].ToString() == "") 						value = null; // no value present (value=="" means value is present but empty)  					if (!caseSensitiveLongOpts) 						name = name.ToLowerInvariant();  					args[i] = null; 					if (twoArgOptions != null && twoArgOptions.Contains(name)) 						MaybeRemoveArg(args' i + 1' expandEnvVars' ref value); 					AddPair(options' s' name' value); 				} 				else if (shortOptions != null) 				{ 					// Check if short option(s) are valid 					bool reject = false; 					int div; 					char ch = '\0'; 					for (div = 1; div < s.Length; div++) { 						ch = s[div]; 						if (!shortOptions.ContainsKey(ch)) { 							if (char.IsLetter(ch)) 								reject = true; 							break; 						} 					}  					int afterDiv = (ch == ':' || ch == '=' ? div + 1 : div); 					string value = div < s.Length ? s.Substring(afterDiv) : null;  					if (div > 1 && !reject) // is s entirely valid? 					{ 						// detect space-separated argument 						ch = s[div - 1]; 						if (twoArgOptions != null && twoArgOptions.Contains(shortOptions[ch] ?? ch.ToString())) 							MaybeRemoveArg(args' i + 1' expandEnvVars' ref value);  						args[i] = null; 						for (int c = 1; c < div; c++) { 							ch = s[c]; 							string longName = shortOptions[ch] ?? ch.ToString(); 							string curValue = c + 1 == div ? value : null; 							AddPair(options' s' longName' curValue); 						} 					} 				} 			} 			else if (atFolder != null && s.StartsWith("@")) 			{ 				// e.g. "@list of options.txt" 				string atFile = s.Substring(1); 				string fileContents = null; 				try { 					string fullpath = Path.Combine(atFolder' atFile); 					if (File.Exists(fullpath)) 						fileContents = File.OpenText(fullpath).ReadToEnd(); 				} catch (Exception e) { 					MessageSink.Default.Error(s' "Unable to use option file \"{0}\": {1}"' atFile' e.Message); 				} 				if (fileContents != null) { 					List<string> list = G.SplitCommandLineArguments(fileContents);  					int maxMore = System.Math.Max(0' argLimit - args.Count); 					if (list.Count > maxMore) { 						// oops' command limit exceeded 						MessageSink.Default.Warning(s' "Limit of {0} commands exceeded"' argLimit); 						list.RemoveRange(maxMore' list.Count - maxMore); 					}  					args.InsertRange(i + 1' (IList<string>) list); 				} 			}
Magic Number,Loyc.Utilities,UG,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,ProcessArgument,The following statement contains a magic number: if (s.StartsWith("-")) { 				Match m = CmdLineLongOptRegex.Match(s); 				if (m.Success) 				{ 					// it's an --option 					string name = m.Groups[1].ToString(); 					string value = m.Groups[3].ToString(); 					if (value == "" && m.Groups[2].ToString() == "") 						value = null; // no value present (value=="" means value is present but empty)  					if (!caseSensitiveLongOpts) 						name = name.ToLowerInvariant();  					args[i] = null; 					if (twoArgOptions != null && twoArgOptions.Contains(name)) 						MaybeRemoveArg(args' i + 1' expandEnvVars' ref value); 					AddPair(options' s' name' value); 				} 				else if (shortOptions != null) 				{ 					// Check if short option(s) are valid 					bool reject = false; 					int div; 					char ch = '\0'; 					for (div = 1; div < s.Length; div++) { 						ch = s[div]; 						if (!shortOptions.ContainsKey(ch)) { 							if (char.IsLetter(ch)) 								reject = true; 							break; 						} 					}  					int afterDiv = (ch == ':' || ch == '=' ? div + 1 : div); 					string value = div < s.Length ? s.Substring(afterDiv) : null;  					if (div > 1 && !reject) // is s entirely valid? 					{ 						// detect space-separated argument 						ch = s[div - 1]; 						if (twoArgOptions != null && twoArgOptions.Contains(shortOptions[ch] ?? ch.ToString())) 							MaybeRemoveArg(args' i + 1' expandEnvVars' ref value);  						args[i] = null; 						for (int c = 1; c < div; c++) { 							ch = s[c]; 							string longName = shortOptions[ch] ?? ch.ToString(); 							string curValue = c + 1 == div ? value : null; 							AddPair(options' s' longName' curValue); 						} 					} 				} 			} 			else if (atFolder != null && s.StartsWith("@")) 			{ 				// e.g. "@list of options.txt" 				string atFile = s.Substring(1); 				string fileContents = null; 				try { 					string fullpath = Path.Combine(atFolder' atFile); 					if (File.Exists(fullpath)) 						fileContents = File.OpenText(fullpath).ReadToEnd(); 				} catch (Exception e) { 					MessageSink.Default.Error(s' "Unable to use option file \"{0}\": {1}"' atFile' e.Message); 				} 				if (fileContents != null) { 					List<string> list = G.SplitCommandLineArguments(fileContents);  					int maxMore = System.Math.Max(0' argLimit - args.Count); 					if (list.Count > maxMore) { 						// oops' command limit exceeded 						MessageSink.Default.Warning(s' "Limit of {0} commands exceeded"' argLimit); 						list.RemoveRange(maxMore' list.Count - maxMore); 					}  					args.InsertRange(i + 1' (IList<string>) list); 				} 			}
Magic Number,Loyc.Utilities,UGTests,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\UG.cs,TestProcessCommandLineArguments2,The following statement contains a magic number: using (MessageSink.SetDefault(msgs)) 				UG.ProcessCommandLineArguments(args' options' atFolder' null' null' 5);
Magic Number,Loyc.LLParserGenerator,IntSet,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,TryParse,The following statement contains a magic number: if (s.StartsWith("[") && s.EndsWith("]")) 			{ 				isCharSet = true; 				if (inverted = s[1] == '^') 					i++;  				success = true; 				while (i + 1 < s.Length) 				{ 					int lo = ParseChar(s' ref i); 					if (i >= s.Length) { 						Debug.Assert(s.EndsWith("\\]")); 						i = s.Length - 1; 						success = false; 					} else if (s[i] == '-') { 						i++; 						int hi = ParseChar(s' ref i); 						ranges.Add(new IntRange(lo' hi)); 					} else { 						ranges.Add(new IntRange(lo)); 					} 				} 			} 			else if (s.EndsWith(")") && (s.StartsWith("(") || (inverted = s.StartsWith("~(")))) 			{ 				isCharSet = false; 				if (inverted) 					i++;  				for(;;) { 					int lo' hi; 					if (!ParseHelpers.TryParseInt(s' ref i' out lo)) { 						if (i + 1 == s.Length && lo == 0) 							success = true; 						break; 					} 					hi = lo; 					if (s[i] == '.' && s[i + 1] == '.') { 						i += 2; 						if (!ParseHelpers.TryParseInt(s' ref i' out hi)) break; 					} 					if (s[i] == ''') 						i++; 					else if (s[i] != ')') 						break; 					ranges.Add(new IntRange(lo' hi)); 				} 			}
Magic Number,Loyc.LLParserGenerator,IntSet,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,IntSet,The following statement contains a magic number: if (ranges) { 				_ranges = new InternalList<IntRange>(list.Length >> 1); 				for (int i = 0; i < list.Length; i += 2) 					_ranges.Add(new IntRange(list[i]' list[i + 1])); 			} else { 				_ranges = new InternalList<IntRange>(list.Length); 				for (int i = 0; i < list.Length; i++) 					_ranges.Add(new IntRange(list[i])); 			}
Magic Number,Loyc.LLParserGenerator,IntSet,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,Simplify,The following statement contains a magic number: if (ranges.Count < 2) 				return;
Magic Number,Loyc.LLParserGenerator,IntSet,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < _ranges.Count; i++) 				hc = (hc * 13) ^ _ranges[i].GetHashCode();
Magic Number,Loyc.LLParserGenerator,IntRange,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder("("' 8);
Magic Number,Loyc.LLParserGenerator,IntRange,C:\repos\qwertie_Loyc\Core\Loyc.Utilities\IntSet.cs,Append,The following statement contains a magic number: if (c < 32 || c == '\\' || c == ']') { 				if (c <= -1) 					sb.Append(@"\$"); 				else 					sb.Append(PrintHelpers.EscapeCStyle(((char)c).ToString()' EscapeC.Default' ']')); 			} else if (c == '-' || c == '^' && sb.Length == 1) { 				sb.Append('\\'); 				sb.Append((char)c); 			} else 				sb.Append((char)c);
