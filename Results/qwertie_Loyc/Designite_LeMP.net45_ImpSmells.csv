Implementation smell,Namespace,Class,File,Method,Description
Long Method,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,ProcessArguments,The method has 115 lines of code.
Long Method,LeMP.Tests,TestAlgebraicDataTypes,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestAlgebraicDataTypes.cs,TestAlgebraicDataTypesAdvanced,The method has 156 lines of code.
Long Method,LeMP.Tests,TestMatchCodeMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestMatchCodeMacro.cs,TestMatchCode,The method has 139 lines of code.
Long Method,LeMP.Tests,TestMatchMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestMatchMacro.cs,TestMatch1,The method has 100 lines of code.
Complex Method,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,ProcessArguments,Cyclomatic complexity of the method is 28
Complex Method,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,CompleteInputOutputOptions,Cyclomatic complexity of the method is 12
Complex Method,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PreProcess,Cyclomatic complexity of the method is 8
Complex Method,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacros,Cyclomatic complexity of the method is 11
Complex Method,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacrosFound,Cyclomatic complexity of the method is 8
Complex Method,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacrosToChildrenOf,Cyclomatic complexity of the method is 8
Complex Method,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PrintMessages,Cyclomatic complexity of the method is 10
Long Parameter List,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,ParseNumericOption,The method has 5 parameters. Parameters: options' key' sink' min' max
Long Parameter List,LeMP,InputOutput,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessor.cs,InputOutput,The method has 5 parameters. Parameters: text' fileName' input' outPrinter' outFileName
Long Parameter List,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PreProcess,The method has 6 parameters. Parameters: list' single' asRoot' resetOpenNamespaces' resetProperties' areAttributesOrIsTarget
Long Parameter List,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacros,The method has 5 parameters. Parameters: input' maxExpansions' isTargetNode' isSingleNode' nodeQueue
Long Parameter List,LeMP,Scope,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PreProcess,The method has 5 parameters. Parameters: input' asRoot' resetOpenNamespaces' resetProperties' areAttributes
Long Parameter List,LeMP,Scope,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PreProcess,The method has 5 parameters. Parameters: input' asRoot' resetOpenNamespaces' resetProperties' isTarget
Long Parameter List,LeMP,Scope,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,Write,The method has 5 parameters. Parameters: type' context' format' arg0' arg1
Long Parameter List,LeMP,TestCompiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,Test,The method has 5 parameters. Parameters: input' output' sink' maxExpand' plainCS
Long Parameter List,LeMP.Tests,MacroTesterBase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroTesterBase.cs,Test,The method has 5 parameters. Parameters: input' inLang' expected' outLang' maxExpand
Long Statement,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,SetPropertyHelper,The length of the statement  "				Sink.Error("Command line"' "--snippet: syntax error. Expected `key=code` where `key` is a literal or identifier with which to associate a code snippet.");" is 154.
Long Statement,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,SetPropertyHelper,The length of the statement  "				Sink.Error("Command line"' "--set: syntax error. Expected `key=value` where `key` is a literal or identifier with which to associate a value.");" is 144.
Long Statement,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,OnImport,The length of the statement  "					context.Sink.Warning(node' "Namespace '{0}' does not contain any macros. Use #printKnownMacros to put a list of known macros in the output."' namespaceSym);" is 156.
Long Statement,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,getScopedProperty,The length of the statement  "			context.Sink.Error(node' "Expected one argument' a key literal' with the default code as an optional second argument.");" is 120.
Long Statement,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacros,The length of the statement  "						bool skipTarget = curNode.HasSimpleHeadWithoutPAttrs() && !_s.FoundMacros.Any(m => (m.Mode & MacroMode.MatchIdentifier) != 0);" is 126.
Long Statement,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacrosFound2,The length of the statement  "					s.Results.Add(new MacroResult(macro' output' messageList.Slice(mhi' messageList.Count - mhi)' s.DropRemainingNodesRequested));" is 126.
Long Statement,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacrosFound2,The length of the statement  "				s.Results.Add(new MacroResult(macro' output' messageList.Slice(mhi' messageList.Count - mhi)' s.DropRemainingNodesRequested));" is 126.
Long Statement,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PrintMessages,The length of the statement  "						_sink.Warning(input' "Ambiguous macro call. {0} macros accepted the input and produced equal results: {1}"' accepted' list);" is 124.
Long Statement,LeMP,MacroProcessorTests,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,RegisterMacros,The length of the statement  "			Test("{ import_macros LeMP.Tests; Hi(1); replaceTarget(Hi' Hello); { Hi(2); overrideTarget(Hi' Bye); Hi(3); }; Hi(4); }"'" is 121.
Long Statement,LeMP.Tests,TestMacroCombinations,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestMacroCombinations.cs,MixingFeatures,The length of the statement  "			        get { { var return_value = _foo; Contract.Assert(return_value != null' ""Postcondition failed: return_value != null""); return return_value; } }" is 144.
Long Statement,LeMP.Tests,TestSetOrCreateMemberMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestSetOrCreateMemberMacro.cs,TestAttributeTransfer,The length of the statement  "					[Spanish] int hola' int hello' long goodbye = 8' [Hawaii] string aloha = 5' [French] string Bonjour = 7' [Other] readonly int _ciao = 4)" is 136.
Long Statement,LeMP.Tests,TestAlgebraicDataTypes,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestAlgebraicDataTypes.cs,TestAlgebraicDataTypesAdvanced,The length of the statement  "						public LCall(LNode[] Attributes' LNode Target' params LNode [] Args) : base(Attributes) { this.Target = Target; this.Args = Args; }" is 131.
Long Statement,LeMP.Tests,TestCodeContractMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeContractMacros.cs,EnsuresOnThrowTest,The length of the statement  "			                if (!(Member != null)) throw new InvalidOperationException(""Postcondition failed after throwing an exception: Member != null""' __exception__);" is 144.
Long Statement,LeMP.Tests,TestCodeContractMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeContractMacros.cs,EnsuresOnThrowTest,The length of the statement  "			                if (!(Member != null)) throw new InvalidOperationException(""Postcondition failed after throwing an exception: Member != null""' __exception__);" is 144.
Long Statement,LeMP.Tests,TestCodeQuoteMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeQuoteMacro.cs,TestCodeQuote,The length of the statement  "				   @"LNode.Call(CodeSymbols.Assign' LNode.List(LNode.Id((Symbol) ""x"")' LNode.Call(CodeSymbols.Add' LNode.List(LNode.Id((Symbol) ""x"")' LNode.Literal(1))).SetStyle(NodeStyle.Operator))).SetStyle(NodeStyle.Operator);");" is 217.
Long Statement,LeMP.Tests,TestCodeQuoteMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeQuoteMacro.cs,TestCodeQuote,The length of the statement  "				   @"LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) ""Console"")' LNode.Id((Symbol) ""WriteLine""))).SetStyle(NodeStyle.Operator)' LNode.List(LNode.Literal(""Hello"")));");" is 190.
Long Statement,LeMP.Tests,TestCodeQuoteMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeQuoteMacro.cs,TestCodeQuote,The length of the statement  "				   @"q = LNode.Call(CodeSymbols.While' LNode.List(LNode.Call(CodeSymbols.Of' LNode.List(LNode.Id((Symbol) ""Foo"")' LNode.Id((Symbol) ""T""))).SetStyle(NodeStyle.Operator)' LNode.Call((Symbol) ""Yay"")));");" is 204.
Long Statement,LeMP.Tests,TestCodeQuoteMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeQuoteMacro.cs,TestCodeQuote,The length of the statement  "				   @"q = LNode.Call(CodeSymbols.If' LNode.List(LNode.Literal(true)' LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call((Symbol) ""Yay""))).SetStyle(NodeStyle.Statement)));");" is 173.
Long Statement,LeMP.Tests,TestCodeQuoteMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeQuoteMacro.cs,TestCodeQuote,The length of the statement  "					@"LNode.Call((Symbol) ""Func""' LNode.List(LNode.Call(CodeSymbols.Substitute' LNode.List(LNode.Id((Symbol) ""Foo""))).SetStyle(NodeStyle.Operator)));");" is 152.
Long Statement,LeMP.Tests,TestCodeQuoteMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestCodeQuoteMacro.cs,TestCodeQuoteWithTrivia,The length of the statement  "			       @"LNode.Call(LNode.List(LNode.Trivia(CodeSymbols.TriviaMLComment' "" cool! ""))' CodeSymbols.Substitute' LNode.List(LNode.Id((Symbol) ""foo""))).SetStyle(NodeStyle.Operator);");" is 177.
Long Statement,LeMP.Tests,TestMatchCodeMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestMatchCodeMacro.cs,TestMatchCode,The length of the statement  "					if (code.CallsMin(CodeSymbols.Tuple' 3) && (a = code.Args[0]) != null && (b = code.Args[1]) != null && (c = code.Args[code.Args.Count - 1]) != null) {" is 150.
Long Statement,LeMP.Tests,TestMatchCodeMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestMatchCodeMacro.cs,TestMatchCode,The length of the statement  "					} else if (code.CallsMin(CodeSymbols.Tuple' 1) && code.Args[0].Value == null && (args = new VList<LNode>(code.Args.Slice(1))).IsEmpty | true " is 140.
Long Statement,LeMP.Tests,TestMatchCodeMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestMatchCodeMacro.cs,TestMatchCode,The length of the statement  "						|| code.CallsMin(CodeSymbols.Tuple' 1) && (first = code.Args[0]) != null && (args = new VList<LNode>(code.Args.Slice(1))).IsEmpty | true)" is 137.
Complex Conditional,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,ParseNumericOption,The conditional expression  "(min == null || num >= min.Value) &&  					(max == null || num <= max.Value)"  is complex.
Complex Conditional,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ApplyMacros,The conditional expression  "_s.FoundMacros.Count == 0 && curNode.ArgCount == 0  						&& curNode.HasSimpleHead() && !curNode.HasAttrs"  is complex.
Complex Conditional,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PrintMessages,The conditional expression  "accepted == 0 && input.IsCall && _sink.IsEnabled(maxSeverity) && rejected.Any(r => r.Msgs.Count == 0)"  is complex.
Complex Conditional,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,PrintMessages,The conditional expression  "_sink.IsEnabled(msg.Severity) && (result.NewNode != null 						|| msg.Severity >= Severity.WarningDetail 						|| macroStyleCall)"  is complex.
Complex Conditional,LeMP.Prelude,BuiltinMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\BuiltinMacros.cs,_set,The conditional expression  "(isSnippet || name == _hash_set) && node.ArgCount == 2 && lhs.IsId"  is complex.
Empty Catch Block,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ProcessFile,The method has an empty catch block.
Empty Catch Block,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,ProcessFile,The method has an empty catch block.
Magic Number,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,ProcessArguments,The following statement contains a magic number: (num = ParseNumericOption(options' "max-expand"' sink' 0' 99999)) != null
Magic Number,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,ProcessArguments,The following statement contains a magic number: (num = ParseNumericOption(options' "o-indent-spaces"' sink' 0' 20)) != null
Magic Number,LeMP,Compiler,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Compiler.cs,SetPropertyHelper,The following statement contains a magic number: expr.Calls(CodeSymbols.Assign' 2) && !expr[0].IsCall
Magic Number,LeMP,MacroProcessor,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessor.cs,MacroProcessor,The following statement contains a magic number: AbortTimeout = TimeSpan.FromSeconds(30);
Magic Number,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,setScopedProperty,The following statement contains a magic number: node.ArgCount == 2 && (key = context.PreProcess(node[0])).IsLiteral && node[1].IsLiteral
Magic Number,LeMP,MacroProcessorTask,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\MacroProcessorTask.cs,setScopedPropertyQuote,The following statement contains a magic number: node.ArgCount == 2 && (key = context.PreProcess(node[0])).IsLiteral
Magic Number,LeMP,MacroProcessorTests,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,ExpandLimit,The following statement contains a magic number: Test("{ x::Foo; y::int; }"' 				"{ Foo x; int y; }"' 2);
Magic Number,LeMP,MacroProcessorTests,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,ExpandLimit,The following statement contains a magic number: Test("@[static] fn Main()::void { var x::int = `default` int; }"' 				"static void Main() { @int x = @default(@int); }"' 2);
Magic Number,LeMP,MacroProcessorTests,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,ExpandLimit,The following statement contains a magic number: Test("@[static] fn Main()::void { var x::int = `default` int; }"' 				"static void Main() { int x = default(@int); }"' 3);
Magic Number,LeMP,MacroProcessorTests,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,ExpandLimit,The following statement contains a magic number: Test("@[static] fn Main()::void { var x::int = `default` int; }"' 				"static void Main() { int x = default(int); }"' 4);
Magic Number,LeMP.Tests,TestStaticDeconstructMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestStaticDeconstructMacro.cs,TrivialCase,The following statement contains a magic number: Assert.AreEqual(2' _msgHolder.List.Count' "expected errors because $X and $Y don't exist");
Magic Number,LeMP.Tests,TestMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,priorityTest,The following statement contains a magic number: node.ArgCount == 2
Magic Number,LeMP.Tests,TestMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\MacroProcessorTests.cs,priorityTestPCB,The following statement contains a magic number: node.ArgCount == 2
Magic Number,LeMP.Tests,TestReplaceMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestReplaceMacro.cs,TestReplaceFn,The following statement contains a magic number: Assert.AreEqual(2' _msgHolder.List.Count);
Magic Number,LeMP.Tests,TestReplaceMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestReplaceMacro.cs,TestReplaceFn,The following statement contains a magic number: Assert.AreEqual(4' _msgHolder.List.Count);
Magic Number,LeMP.Tests,TestUseSequenceExpressionsMacro,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\Tests\TestSequenceExpressionMacro.cs,TestBasics,The following statement contains a magic number: TestCs(@"#useSequenceExpressions; 				void f() { 					Foo(a' #runSequence(PrepareB()' GetB())' c' #runSequence(var d = D()' d) + 1' e); 				}"' @" 				void f() { 					var a_1 = a; 					PrepareB(); 					var GetB_2 = GetB(); 					var c_3 = c; 					var d = D(); 					Foo(a_1' GetB_2' c_3' d + 1' e); 				} 				".Replace("a_1"' "a_" + n) 				.Replace("GetB_2"' "GetB_" + (n+1)) 				.Replace("c_3"' "c_" + (n+2)));
Magic Number,LeMP.Prelude,BuiltinMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\BuiltinMacros.cs,_set,The following statement contains a magic number: var stmts = node.Args.Slice(1).Select(key => 					{ 						LNode value = F.@true; 						if (key.Calls(S.Assign' 2)) 						{ 							value = key.Args[1]; 							value = context.PreProcess(value); 							key = key.Args[0]; 							if (isSnippet && value.Calls(S.Braces)) 								value = value.Args.AsLNode(S.Splice); 						}  						if (!key.IsId) 							context.Write(Severity.Error' key' "Invalid key; expected an identifier."); 						return (LNode)node.With(newTarget' LNode.Literal(key.Name' key)' value); 					});
Magic Number,LeMP.Prelude,BuiltinMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\BuiltinMacros.cs,_set,The following statement contains a magic number: (isSnippet || name == _hash_set) && node.ArgCount == 2 && lhs.IsId
Magic Number,LeMP.Prelude,BuiltinMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP\BuiltinMacros.cs,_get,The following statement contains a magic number: node.ArgCount.IsInRange(1' 2)
