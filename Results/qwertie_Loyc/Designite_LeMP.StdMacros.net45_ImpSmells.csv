Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,BackingField,Cyclomatic complexity of the method is 12
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnProperty,Cyclomatic complexity of the method is 11
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DoDeconstruct,Cyclomatic complexity of the method is 8
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,In,Cyclomatic complexity of the method is 12
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,matchCode,Cyclomatic complexity of the method is 18
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,match,Cyclomatic complexity of the method is 10
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,Cyclomatic complexity of the method is 8
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,replace,Cyclomatic complexity of the method is 12
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,Cyclomatic complexity of the method is 13
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectSetOrCreateMember,Cyclomatic complexity of the method is 8
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,LooksLikeSimpleValue,Cyclomatic complexity of the method is 8
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,NextStatementMayBeReachable,Cyclomatic complexity of the method is 17
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,concatId,Cyclomatic complexity of the method is 8
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ReduceBooleanExpr,Cyclomatic complexity of the method is 12
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,unroll,Cyclomatic complexity of the method is 14
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ReplaceInTokenTree,Cyclomatic complexity of the method is 10
Complex Method,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,IsExpressionContext,Cyclomatic complexity of the method is 8
Complex Method,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,Cyclomatic complexity of the method is 8
Complex Method,LeMP,CodeQuoter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\CodeQuoteMacro.cs,QuoteOne,Cyclomatic complexity of the method is 13
Complex Method,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,Cyclomatic complexity of the method is 16
Complex Method,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,Cyclomatic complexity of the method is 15
Complex Method,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,Cyclomatic complexity of the method is 10
Complex Method,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,GetSubstitutionVar,Cyclomatic complexity of the method is 9
Complex Method,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GenCodeForPattern,Cyclomatic complexity of the method is 17
Complex Method,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,Cyclomatic complexity of the method is 25
Complex Method,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressions,Cyclomatic complexity of the method is 13
Complex Method,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,Cyclomatic complexity of the method is 17
Complex Method,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,Cyclomatic complexity of the method is 13
Complex Method,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUp_GeneralCall2,Cyclomatic complexity of the method is 11
Complex Method,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,TranslateSpaceDefinition,Cyclomatic complexity of the method is 12
Complex Method,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,DefOrConstructor,Cyclomatic complexity of the method is 11
Complex Method,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,var,Cyclomatic complexity of the method is 12
Complex Method,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,try,Cyclomatic complexity of the method is 13
Long Parameter List,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,TryReplaceHere,The method has 5 parameters. Parameters: node' pattern' replacement' captures' allPatterns
Long Parameter List,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectSetOrCreateMember,The method has 6 parameters. Parameters: arg' relevantAttribute' fieldName' paramName' newArg' propOrFieldDecl
Long Parameter List,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UseSymbolsCore,The method has 5 parameters. Parameters: symbolAttrs' options' body' context' inType
Long Parameter List,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessAttribute,The method has 5 parameters. Parameters: attr' mode' exceptionType' variableName' isPropSetter
Long Parameter List,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The method has 9 parameters. Parameters: pattern' propName' varBinding' refExistingVar' cmpExpr' isType' inRange' subPatterns' conditions
Long Parameter List,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,ESEInForLoop,The method has 6 parameters. Parameters: stmt' attrs' init' cond' inc' block
Long Identifier,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,,The length of the parameter sy__numassertMethodForRequires is 30.
Long Identifier,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,,The length of the parameter sy__numassertMethodForEnsuresFinally is 36.
Long Identifier,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,,The length of the parameter sy__numexceptionTypeForEnsuresOnThrow is 37.
Long Identifier,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,,The length of the parameter _useSequenceExpressionsIsRunning is 32.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,AlgebraicDataType,The length of the statement  "				if ((attrs = classDecl.Attrs).IsEmpty | true && (i = attrs.IndexWhere(a => a.IsIdNamed(__alt))) > -1 && classDecl.Calls(CodeSymbols.Class' 3) && (baseName = classDecl.Args[0]) != null && classDecl.Args[1].Calls(CodeSymbols.AltList) && classDecl.Args[2].Calls(CodeSymbols.Braces)) {" is 281.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetFnAndClassName,The length of the statement  "					if (name == S.Struct || name == S.Class || name == S.Namespace || name == S.Interface || name == S.Trait || name == S.Alias) {" is 126.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,BackingField,The length of the statement  "				sink.Warning(fieldAttr' "The body of the property does not contain a 'get;' or 'set;' statement without a body' so no code was generated to get or set the backing field.");" is 172.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnMethod,The length of the statement  "						body = LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Return' LNode.List(body)))).SetStyle(NodeStyle.Statement);" is 130.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnLambda,The length of the statement  "						body = LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Return' LNode.List(body)))).SetStyle(NodeStyle.Statement);" is 130.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnProperty,The length of the statement  "					getter = LNode.Call(CodeSymbols.get' LNode.List(LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Return' LNode.List(braces)))).SetStyle(NodeStyle.Statement))).SetStyle(NodeStyle.Special);" is 203.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetVarName,The length of the statement  "				if (arg.Calls(CodeSymbols.Var' 2) && (tmp_10 = arg.Args[1]) != null && tmp_10.Calls(CodeSymbols.Assign' 2) && (variableName = tmp_10.Args[0]) != null || arg.Calls(CodeSymbols.Var' 2) && (variableName = arg.Args[1]) != null)" is 223.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,In,The length of the statement  "									return LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(x' LNode.Id((Symbol) "IsInRangeExcludeHi"))).SetStyle(NodeStyle.Operator)' LNode.List(lo' hi));" is 152.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,In,The length of the statement  "									return LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(x' LNode.Id((Symbol) "IsInRange"))).SetStyle(NodeStyle.Operator)' LNode.List(lo' hi));" is 143.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,In,The length of the statement  "					return LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(range' LNode.Id((Symbol) "Contains"))).SetStyle(NodeStyle.Operator)' LNode.List(x));" is 141.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,RangeExcl,The length of the statement  "				if (node.Args.Count == 2 && (lo = node.Args[0]) != null && (hi = node.Args[1]) != null || node.Args.Count == 1 && (hi = node.Args[0]) != null)" is 142.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,RangeIncl,The length of the statement  "				if (node.Args.Count == 2 && (lo = node.Args[0]) != null && (hi = node.Args[1]) != null || node.Args.Count == 1 && (hi = node.Args[0]) != null)" is 142.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,matchCode,The length of the statement  "				//          && (x = tmp9.Args[0]) != null // this will never be null' but we want to put it the assignment in the 'if' statement" is 128.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,matchCode,The length of the statement  "				cmc.NodeVars.OrderBy(v => v.Key.Name).Select(kvp => kvp.Value ? F.Call(S.Assign' F.Id(kvp.Key)' F.Null) : F.Id(kvp.Key)))));" is 124.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,matchCode,The length of the statement  "				LNode type = LNode.Call(CodeSymbols.Of' LNode.List(LNode.Id((Symbol) "VList")' LNode.Id((Symbol) "LNode"))).SetStyle(NodeStyle.Operator);" is 137.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,matchCode,The length of the statement  "				cmc.ListVars.OrderBy(v => v.Key.Name).Select(kvp => kvp.Value ? LNode.Call(CodeSymbols.Assign' LNode.List(F.Id(kvp.Key)' LNode.Call(CodeSymbols.Default' LNode.List(type)))).SetStyle(NodeStyle.Operator) : F.Id(kvp.Key)))));" is 222.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,IsCaseLabel,The length of the statement  "			if (@case.Calls(CodeSymbols.Case) || @case.Calls(CodeSymbols.Label' 1) && @case.Args[0].IsIdNamed((Symbol) "#default")) return true;" is 132.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "					if (varDecl.Calls(CodeSymbols.Var' 2) && (tmp_10 = varDecl.Args[1]) != null && tmp_10.Calls(CodeSymbols.Assign' 2) && (varName = tmp_10.Args[0]) != null)" is 153.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "						context.Sink.Error(varName' "The return value cannot be assigned here. The value of this variable must be placed on the return statement(s).");" is 143.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "					else if (varDecl.Calls(CodeSymbols.Var' 2) && (varName = varDecl.Args[1]) != null) { } else if ((varName = varDecl).IsId)" is 121.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "						return Reject(context' varDecl' "The first parameter to on_return must be a simple identifier (the name of a variable to return) or a variable declaration (for a variable to be returned).");" is 190.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "						return LNode.Call(CodeSymbols.Braces' LNode.List().AddRange(bracedHandler.Args).Add(rnode)).SetStyle(NodeStyle.Statement);" is 122.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "						var retValDecl = varDecl.WithArgChanged(1' LNode.Call(CodeSymbols.Assign' LNode.List(varName' retVal)).SetStyle(NodeStyle.Operator));" is 133.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "						return LNode.Call(CodeSymbols.Braces' LNode.List().Add(retValDecl).AddRange(bracedHandler.Args).Add(rnode)).SetStyle(NodeStyle.Statement);" is 138.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The length of the statement  "				context.Sink.Warning(node' "'on_return': no 'return' statements were found in this context' so this macro had no effect.");" is 123.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,replace,The length of the statement  "								context.Write(Severity.Error' pattern' "The braces must contain only a single statement. To search for braces literally' use `{{ ... }}`");" is 139.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,define,The length of the statement  "			if (EcsValidators.MethodDefinitionKind(node' out replaceKw' out macroName' out args' out body' allowDelegate: false) != S.Fn || body == null)" is 141.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,saveAndRestore,The length of the statement  "					if (tmp_11.Calls(CodeSymbols.Assign' 2) && (property = tmp_11.Args[0]) != null && (newValue = tmp_11.Args[1]) != null || (property = tmp_11) != null) {" is 151.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,saveAndRestore,The length of the statement  "						LNode tryFinally = LNode.Call(CodeSymbols.Try' LNode.List(LNode.Call(CodeSymbols.Braces' LNode.List(body)).SetStyle(NodeStyle.Statement)' LNode.Call(CodeSymbols.Finally' LNode.List(LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Assign' LNode.List(property' varName)).SetStyle(NodeStyle.Operator))).SetStyle(NodeStyle.Statement)))));" is 350.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,saveAndRestore,The length of the statement  "							return LNode.Call(CodeSymbols.Splice' LNode.List(varDecl' LNode.Call(CodeSymbols.Assign' LNode.List(property' newValue)).SetStyle(NodeStyle.Operator)' tryFinally));" is 164.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The length of the statement  "				if (DetectSetOrCreateMember(arg' out relevantAttribute' out fieldName' out paramName' out plainArg' out propOrFieldDecl))" is 121.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The length of the statement  "						return Reject(sink' arg' Localize.Localized("'{0}': to set or create a field or property' the method must have a body in braces {{}}."' relevantAttribute));" is 156.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectSetOrCreateMember,The length of the statement  "			if (EcsValidators.IsPropertyDefinition(arg' out type' out name' out propArgs' out _' out defaultValue) && propArgs.ArgCount == 0) {" is 131.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,static_matchCode,The length of the statement  "				context.Write(Severity.Error' node' "The `default:` case must be the last one' because the cases are tested in the order they appear' so no case after `default:` can be matched.");" is 180.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,unroll,The length of the statement  "					sink.Error(replacement' "iteration {0}: Expected {1} replacement items' got {2}"' iteration' replacements.Count' count);" is 120.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UseSymbolsCore,The length of the statement  "				else if (pair.Key.Name.Name == "inherit" && (pair.Value.Calls(S.Braces) || pair.Value.Calls(S.Tuple)) && pair.Value.Args.All(n => n.Value is Symbol))" is 149.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UsingMulti,The length of the statement  "						return LNode.Call(CodeSymbols.Splice' LNode.List(list.Select(namespc => (LNode) LNode.Call(CodeSymbols.Import' LNode.List(namespc)))));" is 135.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetNamespaces,The length of the statement  "				if (multiName.Calls(CodeSymbols.Dot) || multiName.Calls(CodeSymbols.Of)) { } else if (multiName.IsCall && (outerNamespace = multiName.Target) != null) {" is 152.
Long Statement,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,MergeIdentifiers,The length of the statement  "					throw new LogException(Severity.Note' right' "Multi-using statement seems malformed. Correct example: `using System(.Text' .Linq));`");" is 135.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,ScanClassBody,The length of the statement  "						if ((attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Fn' 3) && stmt.Args[0].IsIdNamed((Symbol) "alt") && (altName = stmt.Args[1]) != null && stmt.Args[2].Calls(CodeSymbols.AltList) && (parts = stmt.Args[2].Args).IsEmpty | true || (attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Fn' 4) && stmt.Args[0].IsIdNamed((Symbol) "alt") && (altName = stmt.Args[1]) != null && stmt.Args[2].Calls(CodeSymbols.AltList) && (parts = stmt.Args[2].Args).IsEmpty | true && stmt.Args[3].Calls(CodeSymbols.Braces) && (childBody = stmt.Args[3].Args).IsEmpty | true) {" is 573.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,ScanClassBody,The length of the statement  "								genericAltName = LNode.Call(CodeSymbols.Of' LNode.List().Add(altName).AddRange(_genericArgs.ToVList())).SetStyle(NodeStyle.Operator);" is 133.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,ScanClassBody,The length of the statement  "						} else if ((attrs = stmt.Attrs).IsEmpty | true && (i = attrs.IndexWhere(a => a.IsIdNamed(__alt))) > -1 && stmt.CallsMin(CodeSymbols.Constructor' 3) && stmt.Args[1].IsIdNamed((Symbol) "#this") && stmt.Args[2].Calls(CodeSymbols.AltList) && (rest = new VList<LNode>(stmt.Args.Slice(3))).IsEmpty | true && rest.Count <= 1) {" is 320.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GenerateOutput,The length of the statement  "				var initialization = Parts.Select(p => LNode.Call(CodeSymbols.Assign' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id(CodeSymbols.This)' p.NameId)).SetStyle(NodeStyle.Operator)' p.NameId)).SetStyle(NodeStyle.Operator)).ToList();" is 239.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GenerateOutput,The length of the statement  "				LNode constructor = LNode.Call(LNode.List(_constructorAttrs)' CodeSymbols.Constructor' LNode.List(LNode.Missing' _typeNameStem' LNode.Call(CodeSymbols.AltList' LNode.List(args))' LNode.Call(CodeSymbols.Braces' LNode.List().AddRange(initialization).AddRange(_extraConstrLogic)).SetStyle(NodeStyle.Statement)));" is 309.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GenerateOutput,The length of the statement  "				list.Add(LNode.Call(LNode.List(_classAttrs)' CodeSymbols.Class' LNode.List(TypeName' LNode.Call(CodeSymbols.AltList' LNode.List(BaseTypes))' LNode.Call(CodeSymbols.Braces' LNode.List(outBody)).SetStyle(NodeStyle.Statement))));" is 226.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GenerateOutput,The length of the statement  "					list.Add(LNode.Call(LNode.List().AddRange(_classAttrs).Add(LNode.Id(CodeSymbols.Static)).Add(LNode.Id(CodeSymbols.Partial))' CodeSymbols.Class' LNode.List(_typeNameStem' LNode.Call(CodeSymbols.AltList)' LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(LNode.List(LNode.Id(CodeSymbols.Public)' LNode.Id(CodeSymbols.Static))' CodeSymbols.Fn' LNode.List(TypeNameWithoutAttrs' LNode.Call(CodeSymbols.Of' LNode.List().Add(LNode.Id((Symbol) "New")).AddRange(_genericArgs)).SetStyle(NodeStyle.Operator)' LNode.Call(CodeSymbols.AltList' LNode.List(args))' LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Return' LNode.List(LNode.Call(CodeSymbols.New' LNode.List(LNode.Call(TypeNameWithoutAttrs' LNode.List(argNames)))))))).SetStyle(NodeStyle.Statement))))).SetStyle(NodeStyle.Statement))));" is 803.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GetWithFn,The length of the statement  "					method = LNode.Call(LNode.List(attrs)' CodeSymbols.Fn' LNode.List(retType' withField' LNode.Call(CodeSymbols.AltList' LNode.List(LNode.Call(LNode.List(part.OriginalDecl.Attrs)' CodeSymbols.Var' LNode.List(type' LNode.Id((Symbol) "newValue")))))));" is 247.
Long Statement,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GetWithFn,The length of the statement  "					method = LNode.Call(LNode.List(attrs)' CodeSymbols.Fn' LNode.List(retType' withField' LNode.Call(CodeSymbols.AltList' LNode.List(LNode.Call(LNode.List(part.OriginalDecl.Attrs)' CodeSymbols.Var' LNode.List(type' LNode.Id((Symbol) "newValue")))))' LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Return' LNode.List(LNode.Call(CodeSymbols.New' LNode.List(LNode.Call(TypeNameWithoutAttrs' LNode.List(args)))))))).SetStyle(NodeStyle.Statement)));" is 458.
Long Statement,LeMP,AdtParam,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GetFieldDecl,The length of the statement  "				return LNode.Call(LNode.List(LNode.Id(CodeSymbols.Public))' CodeSymbols.Property' LNode.List(Type' NameId' LNode.Missing' LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Id(CodeSymbols.get)' LNode.Id(LNode.List(LNode.Id(CodeSymbols.Private))' CodeSymbols.set))).SetStyle(NodeStyle.Statement)));" is 294.
Long Statement,LeMP,AdtParam,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,GetItemDecl,The length of the statement  "				return LNode.Call(LNode.List(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) "System")' LNode.Id((Symbol) "ComponentModel"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "EditorBrowsable"))).SetStyle(NodeStyle.Operator)' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) "System")' LNode.Id((Symbol) "ComponentModel"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "EditorBrowsableState"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "Never"))).SetStyle(NodeStyle.Operator)))' LNode.Id(CodeSymbols.Public))' CodeSymbols.Property' LNode.List(Type' ItemN' LNode.Missing' LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.get' LNode.List(LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Return' LNode.List(NameId)))).SetStyle(NodeStyle.Statement))).SetStyle(NodeStyle.Special))).SetStyle(NodeStyle.Statement)));" is 1006.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessAttribute,The length of the statement  "					conditions.Add(LNode.Call(CodeSymbols.Neq' LNode.List(LNode.Id((Symbol) "_")' LNode.Literal(null))).SetStyle(NodeStyle.Operator));" is 130.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessRequiresAttribute,The length of the statement  "						PrependStmts.Add(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) "Contract")' LNode.Id((Symbol) "Requires"))).SetStyle(NodeStyle.Operator)' LNode.List(condition)));" is 184.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "						contractResult = haveCCRewriter ? LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) "Contract")' LNode.Call(CodeSymbols.Of' LNode.List(LNode.Id((Symbol) "Result")' ReturnType)).SetStyle(NodeStyle.Operator))).SetStyle(NodeStyle.Operator)) : Id_return_value;" is 274.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "							underscoreError = "The macro for `{0}` does not support `_` in this context when MS Code Contracts are enabled' because the return type is unknown.";" is 149.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "							? LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) "Contract")' LNode.Call(CodeSymbols.Of' LNode.List(LNode.Id((Symbol) "EnsuresOnThrow")' exceptionType)).SetStyle(NodeStyle.Operator))).SetStyle(NodeStyle.Operator)' LNode.List(condition)) : LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) "Contract")' LNode.Id((Symbol) "EnsuresOnThrow"))).SetStyle(NodeStyle.Operator)' LNode.List(condition)));" is 433.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "							checks.Add(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Id((Symbol) "Contract")' LNode.Id((Symbol) "Ensures"))).SetStyle(NodeStyle.Operator)' LNode.List(condition)));" is 177.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "							checks.Add(LNode.Call(CodeSymbols.If' LNode.List(LNode.Call(CodeSymbols.Not' LNode.List(condition)).SetStyle(NodeStyle.Operator)' LNode.Call(CodeSymbols.Throw' LNode.List(LNode.Call(CodeSymbols.New' LNode.List(LNode.Call(excType' LNode.List(conditionStr' Id__exception__)))))))));" is 280.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "						LNode excSpec = exceptionType == null ? Id__exception__ : LNode.Call(CodeSymbols.Var' LNode.List(exceptionType' Id__exception__));" is 130.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "						PrependStmts.Add(LNode.Call((Symbol) "on_throw"' LNode.List(excSpec' LNode.Call(CodeSymbols.Braces' LNode.List(checks)).SetStyle(NodeStyle.Statement))).SetStyle(NodeStyle.Special));" is 181.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "						PrependStmts.Add(LNode.Call((Symbol) "on_finally"' LNode.List(LNode.Call(CodeSymbols.Braces' LNode.List(checks)).SetStyle(NodeStyle.Statement))).SetStyle(NodeStyle.Special));" is 174.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ProcessEnsuresAttribute,The length of the statement  "						PrependStmts.Add(LNode.Call((Symbol) "on_return"' LNode.List(Id_return_value' LNode.Call(CodeSymbols.Braces' LNode.List(checks)).SetStyle(NodeStyle.Statement))).SetStyle(NodeStyle.Special));" is 190.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,GetAssertMethodForEnsuresFinally,The length of the statement  "				return (Context.ScopedProperties.TryGetValue(sy__numassertMethodForEnsuresFinally' null)as LNode) ?? defaultContractAssert;" is 123.
Long Statement,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,PrependStmtsToGetterOrSetter,The length of the statement  "							body = LNode.Call(CodeSymbols.Braces' LNode.List(LNode.Call(CodeSymbols.Return' LNode.List(body)))).SetStyle(NodeStyle.Statement);" is 130.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "							Tests.Add(LNode.Call(CodeSymbols.Neq' LNode.List(assignment.PlusAttrs(LNode.List(LNode.InParensTrivia))' LNode.Literal(null))).SetStyle(NodeStyle.Operator));" is 157.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "					Tests.Add(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "IsIdNamed"))).SetStyle(NodeStyle.Operator)' LNode.List(LNode.Call(CodeSymbols.Cast' LNode.List(F.Literal(pattern.Name.Name)' LNode.Id((Symbol) "Symbol"))).SetStyle(NodeStyle.Operator))));" is 277.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "						Tests.Add(LNode.Call(CodeSymbols.Eq' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Value"))).SetStyle(NodeStyle.Operator)' LNode.Literal(null))).SetStyle(NodeStyle.Operator));" is 209.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "						Tests.Add(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(pattern' LNode.Id((Symbol) "Equals"))).SetStyle(NodeStyle.Operator)' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Value"))).SetStyle(NodeStyle.Operator))));" is 251.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "							targetTest = LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Calls"))).SetStyle(NodeStyle.Operator)' LNode.List(quoteTarget));" is 158.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "							targetTest = LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "CallsMin"))).SetStyle(NodeStyle.Operator)' LNode.List(quoteTarget' F.Literal(fixedArgC)));" is 183.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "							targetTest = LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Calls"))).SetStyle(NodeStyle.Operator)' LNode.List(quoteTarget' F.Literal(fixedArgC)));" is 180.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "							Tests.Add(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "IsCall"))).SetStyle(NodeStyle.Operator));" is 120.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "								Tests.Add(LNode.Call(CodeSymbols.Eq' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "Count"))).SetStyle(NodeStyle.Operator)' LNode.Literal(0))).SetStyle(NodeStyle.Operator));" is 303.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "							Tests.Add(LNode.Call(op' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "Count"))).SetStyle(NodeStyle.Operator)' F.Literal(fixedArgC))));" is 266.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeTestExpr,The length of the statement  "						MakeTestExpr(pTarget' LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Target"))).SetStyle(NodeStyle.Operator));" is 132.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MaybePutCandidateInTempVar,The length of the statement  "					Tests.Add(LNode.Call(CodeSymbols.Neq' LNode.List(LNode.Call(LNode.List(LNode.InParensTrivia)' CodeSymbols.Assign' LNode.List(targetTmpId' candidate)).SetStyle(NodeStyle.Operator)' LNode.Literal(null))).SetStyle(NodeStyle.Operator));" is 232.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MatchAttributes,The length of the statement  "				if (pAttrs.Count == 1 && (listVar = GetSubstitutionVar(pAttrs[0]' out condition' out isParams' out refExistingVar)) != null && isParams) {" is 138.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MatchAttributes,The length of the statement  "						Tests.Add(LNode.Call(CodeSymbols.OrBits' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(LNode.List(LNode.InParensTrivia)' CodeSymbols.Assign' LNode.List(F.Id(listVar)' LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Attrs"))).SetStyle(NodeStyle.Operator))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "IsEmpty"))).SetStyle(NodeStyle.Operator)' LNode.Literal(true))).SetStyle(NodeStyle.Operator));" is 435.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "					MakeTestExpr(patternArgs[i]' LNode.Call(CodeSymbols.IndexBracks' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' F.Literal(i)))' out varArgSym' out varArgCond);" is 231.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "					MakeTestExpr(patternArgs[i2]' LNode.Call(CodeSymbols.IndexBracks' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Call(CodeSymbols.Sub' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "Count"))).SetStyle(NodeStyle.Operator)' F.Literal(left))).SetStyle(NodeStyle.Operator)))' out varArgSym2' out varArgCond2);" is 513.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "						Context.Sink.Error(patternArgs[i2]' "More than a single $(...varargs) variable is not supported in a single argument list.");" is 125.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "						grabVarArgs = LNode.Call(CodeSymbols.Assign' LNode.List(varArgSymId' LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator))).SetStyle(NodeStyle.Operator);" is 207.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "						grabVarArgs = LNode.Call(CodeSymbols.Assign' LNode.List(varArgSymId' LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "WithoutLast"))).SetStyle(NodeStyle.Operator)' LNode.List(fixedArgsLit)))).SetStyle(NodeStyle.Operator);" is 349.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "							grabVarArgs = LNode.Call(CodeSymbols.Assign' LNode.List(varArgSymId' LNode.Call(CodeSymbols.New' LNode.List(LNode.Call(LNode.Call(CodeSymbols.Of' LNode.List(LNode.Id((Symbol) "VList")' LNode.Id((Symbol) "LNode"))).SetStyle(NodeStyle.Operator)' LNode.List(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "Slice"))).SetStyle(NodeStyle.Operator)' LNode.List(varArgStartLit)))))))).SetStyle(NodeStyle.Operator);" is 535.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "							grabVarArgs = LNode.Call(CodeSymbols.Assign' LNode.List(varArgSymId' LNode.Call(CodeSymbols.New' LNode.List(LNode.Call(LNode.Call(CodeSymbols.Of' LNode.List(LNode.Id((Symbol) "VList")' LNode.Id((Symbol) "LNode"))).SetStyle(NodeStyle.Operator)' LNode.List(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "Slice"))).SetStyle(NodeStyle.Operator)' LNode.List(varArgStartLit' LNode.Call(CodeSymbols.Sub' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(candidate' LNode.Id((Symbol) "Args"))).SetStyle(NodeStyle.Operator)' LNode.Id((Symbol) "Count"))).SetStyle(NodeStyle.Operator)' fixedArgsLit)).SetStyle(NodeStyle.Operator))))))))).SetStyle(NodeStyle.Operator);" is 825.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,MakeArgListTests,The length of the statement  "						Tests.Add(LNode.Call(CodeSymbols.OrBits' LNode.List(LNode.Call(CodeSymbols.Dot' LNode.List(grabVarArgs.PlusAttrs(LNode.List(LNode.InParensTrivia))' LNode.Id((Symbol) "IsEmpty"))).SetStyle(NodeStyle.Operator)' LNode.Literal(true))).SetStyle(NodeStyle.Operator));" is 261.
Long Statement,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,GetSubstitutionVar,The length of the statement  "							condition = condition == null ? id.Args[1] : LNode.Call(CodeSymbols.And' LNode.List(id.Args[1]' condition)).SetStyle(NodeStyle.Operator);" is 137.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GenCodeForPattern,The length of the statement  "				GetPatternComponents(pattern' out propName' out varBinding' out refExistingVar' out cmpExpr' out isType' out inRange' out subPatterns' out conditions);" is 151.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GenCodeForPattern,The length of the statement  "							PutStmt(LNode.Call(CodeSymbols.Assign' LNode.List(varBinding' LNode.Call(CodeSymbols.Cast' LNode.List(input' isType)).SetStyle(NodeStyle.Operator))).SetStyle(NodeStyle.Operator));" is 179.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GenCodeForPattern,The length of the statement  "							PutStmt(LNode.Call(CodeSymbols.Var' LNode.List(isType' LNode.Call(CodeSymbols.Assign' LNode.List(varBinding' LNode.Call(CodeSymbols.Cast' LNode.List(input' isType)).SetStyle(NodeStyle.Operator))))));" is 199.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GenCodeForPattern,The length of the statement  "							PutStmt(LNode.Call(CodeSymbols.Var' LNode.List(LNode.Missing' LNode.Call(CodeSymbols.Assign' LNode.List(varBinding' input)))));" is 127.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GenCodeForPattern,The length of the statement  "						PutCond(LNode.Call(LNode.Call(CodeSymbols.Dot' LNode.List(cmpExpr' LNode.Id((Symbol) "Equals"))).SetStyle(NodeStyle.Operator)' LNode.List(input)));" is 147.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The length of the statement  "					if (pattern.Calls(CodeSymbols.In' 2) && (lhs = pattern.Args[0]) != null && (inRange = pattern.Args[1]) != null || pattern.Calls((Symbol) "in"' 2) && (lhs = pattern.Args[0]) != null && (inRange = pattern.Args[1]) != null || pattern.Calls(CodeSymbols.In' 2) && (lhs = pattern.Args[0]) != null && (inRange = pattern.Args[1]) != null)" is 330.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The length of the statement  "					if (pattern.Calls(CodeSymbols.Is' 2) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null || pattern.Calls(CodeSymbols.Is' 3) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null && (subpatterns = pattern.Args[2]) != null || pattern.Calls((Symbol) "is"' 2) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null || pattern.Calls((Symbol) "'is"' 2) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null) {" is 473.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The length of the statement  "							if (type.Calls((Symbol) "with"' 2) && (isType = type.Args[0]) != null && (subpatterns = type.Args[1]) != null || type.Calls((Symbol) "'with"' 2) && (isType = type.Args[0]) != null && (subpatterns = type.Args[1]) != null) { }" is 224.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The length of the statement  "						if (type.Calls(CodeSymbols.Var' 2) && (isType = type.Args[0]) != null && (varBinding = type.Args[1]) != null) { } else isType = type;" is 133.
Long Statement,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The length of the statement  "					} else if (pattern.Calls(CodeSymbols.DotDotDot' 2) || pattern.Calls(CodeSymbols.DotDot' 2) || pattern.Calls(CodeSymbols.DotDotDot' 1) || pattern.Calls(CodeSymbols.DotDot' 1))" is 174.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInLambdaExpr,The length of the statement  "							Context.Sink.Warning(expr' "This lambda must be converted to a braced block' but in LeMP it's not possible to tell whether the return keyword is needed. The output assumes `return` is required.");" is 196.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "					else if (stmt.CallsMin(CodeSymbols.If' 1) || stmt.Calls(CodeSymbols.UsingStmt' 2) || stmt.Calls(CodeSymbols.Lock' 2) || stmt.Calls(CodeSymbols.Switch' 2) && stmt.Args[1].Calls(CodeSymbols.Braces))" is 196.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "					else if ((attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Fixed' 2) && (init = stmt.Args[0]) != null && (block = stmt.Args[1]) != null) {" is 150.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "							return LNode.Call(LNode.List(attrs)' CodeSymbols.Braces' LNode.List().AddRange(init.Args.WithoutLast(1)).Add(LNode.Call(CodeSymbols.Fixed' LNode.List(init.Args.Last' block)))).SetStyle(NodeStyle.Statement);" is 206.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "					} else if ((attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.While' 2) && (cond = stmt.Args[0]) != null && (block = stmt.Args[1]) != null) {" is 152.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "							return LNode.Call(LNode.List(attrs)' CodeSymbols.For' LNode.List(LNode.Call(CodeSymbols.AltList)' LNode.Missing' LNode.Call(CodeSymbols.AltList)' LNode.Call(CodeSymbols.Braces' LNode.List().AddRange(cond.Args.WithoutLast(1)).Add(LNode.Call(CodeSymbols.If' LNode.List(cond.Args.Last' block' LNode.Call(CodeSymbols.Break))))).SetStyle(NodeStyle.Statement)));" is 356.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "					} else if ((attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.DoWhile' 2) && (block = stmt.Args[0]) != null && (cond = stmt.Args[1]) != null) {" is 154.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "							return LNode.Call(LNode.List(attrs)' CodeSymbols.For' LNode.List(LNode.Call(CodeSymbols.AltList' LNode.List(LNode.Call(CodeSymbols.Var' LNode.List(LNode.Id(CodeSymbols.Bool)' LNode.Call(CodeSymbols.Assign' LNode.List(continue_N' LNode.Literal(true)))))))' continue_N' LNode.Call(CodeSymbols.AltList)' LNode.Call(CodeSymbols.Braces' LNode.List(bodyStmts)).SetStyle(NodeStyle.Statement)));" is 387.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "					} else if ((attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.For' 4) && stmt.Args[0].Calls(CodeSymbols.AltList) && (cond = stmt.Args[1]) != null && stmt.Args[2].Calls(CodeSymbols.AltList) && (block = stmt.Args[3]) != null) {" is 236.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "					} else if ((attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.ForEach' 3) && (tmp_11 = stmt.Args[0]) != null && tmp_11.Calls(CodeSymbols.Var' 2) && (type = tmp_11.Args[0]) != null && (loopVar = tmp_11.Args[1]) != null && (collection = stmt.Args[1]) != null && (block = stmt.Args[2]) != null) {" is 304.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "							return LNode.Call(LNode.List(attrs)' CodeSymbols.Braces' LNode.List().AddRange(collection.Args.WithoutLast(1)).Add(LNode.Call(CodeSymbols.ForEach' LNode.List(LNode.Call(CodeSymbols.Var' LNode.List(type' loopVar))' collection.Args.Last' block)))).SetStyle(NodeStyle.Statement);" is 276.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "					} else if ((attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Var' 2) && (type = stmt.Args[0]) != null && (tmp_12 = stmt.Args[1]) != null && tmp_12.Calls(CodeSymbols.Assign' 2) && (name = tmp_12.Args[0]) != null && (initValue = tmp_12.Args[1]) != null) {" is 265.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "								if (initValue_apos.CallsMin((Symbol) "#runSequence"' 1) && (last = initValue_apos.Args[initValue_apos.Args.Count - 1]) != null) {" is 129.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "									return LNode.Call((Symbol) "#runSequence"' LNode.List().AddRange(stmts).Add(LNode.Call(LNode.List(attrs)' CodeSymbols.Var' LNode.List(type' LNode.Call(CodeSymbols.Assign' LNode.List(name' last))))));" is 199.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The length of the statement  "									return LNode.Call(LNode.List(attrs)' CodeSymbols.Var' LNode.List(type' LNode.Call(CodeSymbols.Assign' LNode.List(name' initValue_apos))));" is 138.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,ESEInForLoop,The length of the statement  "						stmt = LNode.Call(CodeSymbols.For' LNode.List(LNode.Call(CodeSymbols.AltList' LNode.List(init))' LNode.Missing' LNode.Call(CodeSymbols.AltList' LNode.List(inc))' LNode.Call(CodeSymbols.Braces' LNode.List().AddRange(preCond).Add(LNode.Call(CodeSymbols.If' LNode.List(cond' block' LNode.Call(CodeSymbols.Break))))).SetStyle(NodeStyle.Statement)));" is 345.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,ESEInForLoop,The length of the statement  "						stmt = LNode.Call(LNode.List(attrs)' CodeSymbols.For' LNode.List(LNode.Call(CodeSymbols.AltList' LNode.List(init))' cond' LNode.Call(CodeSymbols.AltList' LNode.List(inc))' block));" is 180.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateRunSeqFromInitializer,The length of the statement  "					return LNode.Call(LNode.List(LNode.Id(CodeSymbols.Static))' CodeSymbols.Fn' LNode.List(retType' methodName' LNode.Call(CodeSymbols.AltList)' LNode.Call(CodeSymbols.Braces' LNode.List().AddRange(statements).Add(LNode.Call(CodeSymbols.Return' LNode.List(finalResult)))).SetStyle(NodeStyle.Statement)));" is 300.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The length of the statement  "							Context.Sink.Warning(expr' "A braced block is not supported directly within an expression. Did you mean to use `#runSequence {...}`?");" is 135.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The length of the statement  "						} else if ((attrs = expr.Attrs).IsEmpty | true && attrs.NodeNamed(S.Out) != null && expr.Calls(CodeSymbols.Var' 2) && (varType = expr.Args[0]) != null && (varName = expr.Args[1]) != null && varName.IsId) {" is 205.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The length of the statement  "								Context.Sink.Error(expr' "#useSequenceExpressions: the data type of this variable declaration cannot be inferred and must be stated explicitly.");" is 146.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The length of the statement  "							result = LNode.Call(LNode.List(_trivia_pure)' (Symbol) "#runSequence"' LNode.List(expr.WithoutAttrNamed(S.Out)' varName.PlusAttrs(LNode.List(LNode.Id(CodeSymbols.Out)))));" is 171.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The length of the statement  "						} else if ((attrs = expr.Attrs).IsEmpty | true && expr.Calls(CodeSymbols.Var' 2) && (varType = expr.Args[0]) != null && (tmp_14 = expr.Args[1]) != null && tmp_14.Calls(CodeSymbols.Assign' 2) && (varName = tmp_14.Args[0]) != null && (value = tmp_14.Args[1]) != null)" is 265.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The length of the statement  "						if ((attrs = expr.Attrs).IsEmpty | true && expr.Calls(CodeSymbols.ColonColon' 2) && (value = expr.Args[0]) != null && IsQuickBindLhs(value) && (varName = expr.Args[1]) != null && varName.IsId)" is 192.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The length of the statement  "						else if ((attrs = expr.Attrs).IsEmpty | true && expr.Calls(CodeSymbols.Lambda' 2) && (args = expr.Args[0]) != null && (code = expr.Args[1]) != null)" is 148.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUp_GeneralCall2,The length of the statement  "					(args.Count == 2 && (target.IsIdNamed(S.And) || target.IsIdNamed(S.Or)) || args.Count == 3 && target.IsIdNamed(S.QuestionMark)))" is 128.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUp_GeneralCall2,The length of the statement  "						"#useSequenceExpressions is not designed to support sequences or variable declarations on the right-hand side of the `&&`' `||` or `?` operators. The generated code will be incorrect.");" is 186.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,MaybeCreateTemporaryForLValue,The length of the statement  "					if (expr.Calls(CodeSymbols.Dot' 2) && (lhs = expr.Args[0]) != null || expr.CallsMin(CodeSymbols.Of' 1) && (lhs = expr.Args[0]) != null)" is 135.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,ConvertVarDeclToRunSequence,The length of the statement  "					if (initValue.CallsMin((Symbol) "#runSequence"' 1) && (resultValue = initValue.Args[initValue.Args.Count - 1]) != null) {" is 121.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,ConvertVarDeclToRunSequence,The length of the statement  "						var newVarDecl = LNode.Call(LNode.List(attrs)' CodeSymbols.Var' LNode.List(varType' LNode.Call(CodeSymbols.Assign' LNode.List(varName' resultValue))));" is 151.
Long Statement,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,ConvertVarDeclToRunSequence,The length of the statement  "						var newVarDecl = LNode.Call(LNode.List(attrs)' CodeSymbols.Var' LNode.List(varType' LNode.Call(CodeSymbols.Assign' LNode.List(varName' initValue))));" is 149.
Long Statement,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,TranslateSpaceDefinition,The length of the statement  "					return Reject(context' node' "A type definition must have the form kind(Name' { Body }) or kind(Name(Bases)' { Body }) (where «kind» is struct/class/enum/trait/alias)");" is 169.
Long Statement,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,TranslateSpaceDefinition,The length of the statement  "					return Reject(context' node' "An 'alias' (or 'using') definition must have the form alias(NewName = OldName' { Body }) or alias(NewName(Interfaces) = OldName' { Body })");" is 171.
Long Statement,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,prop,The length of the statement  "				return Reject(sink' node' "A property definition must have the form prop(Name' { Body })' or prop(Name::type' { Body })");" is 122.
Long Statement,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,var,The length of the statement  "				return Reject(sink' node' "A variable definition must have the form var(Name::Type)' var(Name = value)' or var(Name::Type = value)");" is 133.
Long Statement,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,default1,The length of the statement  "				return F.Call(S.Splice' new VList<LNode>(node.With(S.Label' new VList<LNode>(F.Id(S.Default))).SetBaseStyle(NodeStyle.Default)' node.Args[0]));" is 143.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,AlgebraicDataType,The conditional expression  "(attrs = classDecl.Attrs).IsEmpty | true && (i = attrs.IndexWhere(a => a.IsIdNamed(__alt))) > -1 && classDecl.Calls(CodeSymbols.Class' 3) && (baseName = classDecl.Args[0]) != null && classDecl.Args[1].Calls(CodeSymbols.AltList) && classDecl.Args[2].Calls(CodeSymbols.Braces)"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetFnAndClassName,The conditional expression  "name == S.Fn || name == S.Property || name == S.Constructor || name == S.Event"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetFnAndClassName,The conditional expression  "name == S.Struct || name == S.Class || name == S.Namespace || name == S.Interface || name == S.Trait || name == S.Alias"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetVarName,The conditional expression  "arg.Calls(CodeSymbols.Var' 2) && (tmp_10 = arg.Args[1]) != null && tmp_10.Calls(CodeSymbols.Assign' 2) && (variableName = tmp_10.Args[0]) != null || arg.Calls(CodeSymbols.Var' 2) && (variableName = arg.Args[1]) != null"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetContractAttrMode,The conditional expression  "mode == sy_ensuresOnThrow || mode == sy_requires || mode == sy_notnull || mode == sy_assert ||  			mode == sy_ensures || mode == sy_ensuresAssert || mode == sy_ensuresFinally"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,RangeExcl,The conditional expression  "node.Args.Count == 2 && (lo = node.Args[0]) != null && (hi = node.Args[1]) != null || node.Args.Count == 1 && (hi = node.Args[0]) != null"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,RangeIncl,The conditional expression  "node.Args.Count == 2 && (lo = node.Args[0]) != null && (hi = node.Args[1]) != null || node.Args.Count == 1 && (hi = node.Args[0]) != null"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The conditional expression  "varDecl.Calls(CodeSymbols.Var' 2) && (tmp_10 = varDecl.Args[1]) != null && tmp_10.Calls(CodeSymbols.Assign' 2) && (varName = tmp_10.Args[0]) != null"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,saveAndRestore,The conditional expression  "tmp_11.Calls(CodeSymbols.Assign' 2) && (property = tmp_11.Args[0]) != null && (newValue = tmp_11.Args[1]) != null || (property = tmp_11) != null"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,unroll,The conditional expression  "(var.Calls(S.Tuple) || var.Calls(S.Braces)) && vars.All(a => a.IsId && !a.HasPAttrs())"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UseSymbolsCore,The conditional expression  "pair.Key.Name.Name == "inherit" && (pair.Value.Calls(S.Braces) || pair.Value.Calls(S.Tuple)) && pair.Value.Args.All(n => n.Value is Symbol)"  is complex.
Complex Conditional,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UseSymbolsCore,The conditional expression  "kind == S.Class || kind == S.Struct || kind == S.Interface || kind == S.Alias || kind == S.Trait"  is complex.
Complex Conditional,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,The conditional expression  "TypeName.CallsMin(CodeSymbols.Of' 1) && (stem = TypeName.Args[0]) != null && (a = new VList<LNode>(TypeName.Args.Slice(1))).IsEmpty | true || (stem = TypeName) != null"  is complex.
Complex Conditional,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,ScanClassBody,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Fn' 3) && stmt.Args[0].IsIdNamed((Symbol) "alt") && (altName = stmt.Args[1]) != null && stmt.Args[2].Calls(CodeSymbols.AltList) && (parts = stmt.Args[2].Args).IsEmpty | true || (attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Fn' 4) && stmt.Args[0].IsIdNamed((Symbol) "alt") && (altName = stmt.Args[1]) != null && stmt.Args[2].Calls(CodeSymbols.AltList) && (parts = stmt.Args[2].Args).IsEmpty | true && stmt.Args[3].Calls(CodeSymbols.Braces) && (childBody = stmt.Args[3].Args).IsEmpty | true"  is complex.
Complex Conditional,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,ScanClassBody,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && (i = attrs.IndexWhere(a => a.IsIdNamed(__alt))) > -1 && stmt.CallsMin(CodeSymbols.Constructor' 3) && stmt.Args[1].IsIdNamed((Symbol) "#this") && stmt.Args[2].Calls(CodeSymbols.AltList) && (rest = new VList<LNode>(stmt.Args.Slice(3))).IsEmpty | true && rest.Count <= 1"  is complex.
Complex Conditional,LeMP,CodeQuoter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\CodeQuoteMacro.cs,QuoteOne,The conditional expression  "!_ignoreTrivia && node.ArgCount == 1 && node.TriviaValue != NoValue.Value && node.Target.IsId"  is complex.
Complex Conditional,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The conditional expression  "pattern.Calls(CodeSymbols.In' 2) && (lhs = pattern.Args[0]) != null && (inRange = pattern.Args[1]) != null || pattern.Calls((Symbol) "in"' 2) && (lhs = pattern.Args[0]) != null && (inRange = pattern.Args[1]) != null || pattern.Calls(CodeSymbols.In' 2) && (lhs = pattern.Args[0]) != null && (inRange = pattern.Args[1]) != null"  is complex.
Complex Conditional,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The conditional expression  "pattern.Calls(CodeSymbols.Is' 2) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null || pattern.Calls(CodeSymbols.Is' 3) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null && (subpatterns = pattern.Args[2]) != null || pattern.Calls((Symbol) "is"' 2) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null || pattern.Calls((Symbol) "'is"' 2) && (lhs = pattern.Args[0]) != null && (type = pattern.Args[1]) != null"  is complex.
Complex Conditional,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The conditional expression  "type.Calls((Symbol) "with"' 2) && (isType = type.Args[0]) != null && (subpatterns = type.Args[1]) != null || type.Calls((Symbol) "'with"' 2) && (isType = type.Args[0]) != null && (subpatterns = type.Args[1]) != null"  is complex.
Complex Conditional,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The conditional expression  "pattern.Calls(CodeSymbols.DotDotDot' 2) || pattern.Calls(CodeSymbols.DotDot' 2) || pattern.Calls(CodeSymbols.DotDotDot' 1) || pattern.Calls(CodeSymbols.DotDot' 1)"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The conditional expression  "stmt.CallsMin(CodeSymbols.If' 1) || stmt.Calls(CodeSymbols.UsingStmt' 2) || stmt.Calls(CodeSymbols.Lock' 2) || stmt.Calls(CodeSymbols.Switch' 2) && stmt.Args[1].Calls(CodeSymbols.Braces)"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Fixed' 2) && (init = stmt.Args[0]) != null && (block = stmt.Args[1]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.While' 2) && (cond = stmt.Args[0]) != null && (block = stmt.Args[1]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.DoWhile' 2) && (block = stmt.Args[0]) != null && (cond = stmt.Args[1]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.For' 4) && stmt.Args[0].Calls(CodeSymbols.AltList) && (cond = stmt.Args[1]) != null && stmt.Args[2].Calls(CodeSymbols.AltList) && (block = stmt.Args[3]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.ForEach' 3) && (tmp_11 = stmt.Args[0]) != null && tmp_11.Calls(CodeSymbols.Var' 2) && (type = tmp_11.Args[0]) != null && (loopVar = tmp_11.Args[1]) != null && (collection = stmt.Args[1]) != null && (block = stmt.Args[2]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressionsInExecStmt,The conditional expression  "(attrs = stmt.Attrs).IsEmpty | true && stmt.Calls(CodeSymbols.Var' 2) && (type = stmt.Args[0]) != null && (tmp_12 = stmt.Args[1]) != null && tmp_12.Calls(CodeSymbols.Assign' 2) && (name = tmp_12.Args[0]) != null && (initValue = tmp_12.Args[1]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The conditional expression  "(attrs = expr.Attrs).IsEmpty | true && attrs.NodeNamed(S.Out) != null && expr.Calls(CodeSymbols.Var' 2) && (varType = expr.Args[0]) != null && (varName = expr.Args[1]) != null && varName.IsId"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The conditional expression  "(attrs = expr.Attrs).IsEmpty | true && expr.Calls(CodeSymbols.Var' 2) && (varType = expr.Args[0]) != null && (tmp_14 = expr.Args[1]) != null && tmp_14.Calls(CodeSymbols.Assign' 2) && (varName = tmp_14.Args[0]) != null && (value = tmp_14.Args[1]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The conditional expression  "(attrs = expr.Attrs).IsEmpty | true && expr.Calls(CodeSymbols.ColonColon' 2) && (value = expr.Args[0]) != null && IsQuickBindLhs(value) && (varName = expr.Args[1]) != null && varName.IsId"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUpBlocks,The conditional expression  "(attrs = expr.Attrs).IsEmpty | true && expr.Calls(CodeSymbols.Lambda' 2) && (args = expr.Args[0]) != null && (code = expr.Args[1]) != null"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUp_GeneralCall2,The conditional expression  "lastRunSeq > 0 &&  					(args.Count == 2 && (target.IsIdNamed(S.And) || target.IsIdNamed(S.Or)) || args.Count == 3 && target.IsIdNamed(S.QuestionMark))"  is complex.
Complex Conditional,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,MaybeCreateTemporaryForLValue,The conditional expression  "expr.Calls(CodeSymbols.Dot' 2) && (lhs = expr.Args[0]) != null || expr.CallsMin(CodeSymbols.Of' 1) && (lhs = expr.Args[0]) != null"  is complex.
Complex Conditional,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,DefOrConstructor,The conditional expression  "!parts.Count.IsInRange(1' 2) || !sig.IsCall || (body != null && !body.Calls(S.Braces))"  is complex.
Complex Conditional,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,new,The conditional expression  "consExpr == null || node.ArgCount > 2 || (csharpInitializer != null && !csharpInitializer.Calls(S.Braces))"  is complex.
Virtual Method Call from Constructor,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,The constructor "AltType" calls a virtual method "CallsMin".
Virtual Method Call from Constructor,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,The constructor "AltType" calls a virtual method "IsIdNamed".
Virtual Method Call from Constructor,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,The constructor "AltType" calls a virtual method "WithAttrs".
Virtual Method Call from Constructor,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,The constructor "AltType" calls a virtual method "Calls".
Virtual Method Call from Constructor,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,The constructor "AltType" calls a virtual method "Select".
Virtual Method Call from Constructor,LeMP,AltType,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AltType,The constructor "AltType" calls a virtual method "WithoutAttrs".
Virtual Method Call from Constructor,LeMP,AdtParam,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AdtParam,The constructor "AdtParam" calls a virtual method "Calls".
Virtual Method Call from Constructor,LeMP,AdtParam,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AdtParam,The constructor "AdtParam" calls a virtual method "Calls".
Virtual Method Call from Constructor,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,CodeGeneratorForMatchCase,The constructor "CodeGeneratorForMatchCase" calls a virtual method "Call".
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,AlgebraicDataType,The following statement contains a magic number: body = classDecl.Args[2].Args;
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetFnAndClassName,The following statement contains a magic number: anc[i].ArgCount >= 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,BackingField,The following statement contains a magic number: prop.ArgCount != 4 || !(body = prop.Args[3]).Calls(S.Braces)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,BackingField,The following statement contains a magic number: prop.ArgCount != 4 || !(body = prop.Args[3]).Calls(S.Braces)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,BackingField,The following statement contains a magic number: propArgs = prop.Args[2];
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,BackingField,The following statement contains a magic number: prop = prop.WithAttrs(prop.Attrs.RemoveAt(i)).WithArgChanged(3' newBody);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnMethod,The following statement contains a magic number: fn = ProcessArgContractAttributes(fn' 2' rw);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnMethod,The following statement contains a magic number: fn.ArgCount >= 4
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnLambda,The following statement contains a magic number: fn.ArgCount == 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnProperty,The following statement contains a magic number: LNode braces = prop[3];
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnProperty,The following statement contains a magic number: prop = ProcessArgContractAttributes(prop' 2' rw);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ContractsOnProperty,The following statement contains a magic number: prop.ArgCount == 4
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetContractAttrMode,The following statement contains a magic number: target.Calls(S.Of' 2) && target.Args[0].IsIdNamed(sy_ensuresOnThrow)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DoDeconstruct,The following statement contains a magic number: arg.Calls(S.Lambda' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DoDeconstruct,The following statement contains a magic number: !arg.Calls(S.Assign' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DoDeconstruct,The following statement contains a magic number: patternSpec.Calls(S.OrBits' 2) && !patternSpec.IsParenthesizedExpr()
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ForwardMethod,The following statement contains a magic number: fn.ArgCount != 4 || !(fwd = fn.Args[3]).Calls(S.Forward' 1) || !(args = fn.Args[2]).Calls(S.AltList)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ForwardMethod,The following statement contains a magic number: fn.ArgCount != 4 || !(fwd = fn.Args[3]).Calls(S.Forward' 1) || !(args = fn.Args[2]).Calls(S.AltList)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ForwardMethod,The following statement contains a magic number: fn.ArgCount != 4 || !(fwd = fn.Args[3]).Calls(S.Forward' 1) || !(args = fn.Args[2]).Calls(S.AltList)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ForwardMethod,The following statement contains a magic number: return fn.WithArgChanged(3' body);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetArgNamesFromFormalArgList,The following statement contains a magic number: !formalArg.Calls(S.Var' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ForwardProperty,The following statement contains a magic number: prop.ArgCount != 4
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ForwardProperty,The following statement contains a magic number: LNode target = GetForwardingTarget(name = prop.Args[1]' fwd = prop.Args[3]);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ForwardProperty,The following statement contains a magic number: return prop.WithArgChanged(3' body);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetForwardingTarget,The following statement contains a magic number: target.Calls(S.Dot' 2) && (target.Args[1].IsIdNamed(_hash) || target.Args[1].IsIdNamed(__))
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,In,The following statement contains a magic number: range.Calls(CodeSymbols.DotDot' 2) && (lo = range.Args[0]) != null && (hi = range.Args[1]) != null
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,GetCases,The following statement contains a magic number: body[i].Calls(S.Lambda' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ValidateOnStmt,The following statement contains a magic number: a.Count == 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,scope,The following statement contains a magic number: a.Count == 2 && a[1].Calls(S.Braces) && a[0].IsId
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,on_return,The following statement contains a magic number: rest = rest.SmartSelect(arg => arg.ReplaceRecursive(rnode => { 				{ 					LNode retVal; 					if (rnode.Calls(CodeSymbols.Lambda' 2)) 						return rnode;	// ignore children of lambda expression or delegate(){} 					else if (rnode.Calls(CodeSymbols.Return' 0)) { 						foundReturn = true; 						return LNode.Call(CodeSymbols.Braces' LNode.List().AddRange(bracedHandler.Args).Add(rnode)).SetStyle(NodeStyle.Statement); 					} else if (rnode.Calls(CodeSymbols.Return' 1) && (retVal = rnode.Args[0]) != null) { 						foundReturn = true; 						var retValDecl = varDecl.WithArgChanged(1' LNode.Call(CodeSymbols.Assign' LNode.List(varName' retVal)).SetStyle(NodeStyle.Operator)); 						rnode = rnode.WithArgs(varName); 						return LNode.Call(CodeSymbols.Braces' LNode.List().Add(retValDecl).AddRange(bracedHandler.Args).Add(rnode)).SetStyle(NodeStyle.Statement); 					} else 						return null; 				} 			}));
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectMissingVoidReturn,The following statement contains a magic number: var parent = anc.TryGet(anc.Count - 2' LNode.Missing);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectMissingVoidReturn,The following statement contains a magic number: var grandparent = anc.TryGet(anc.Count - 3' LNode.Missing);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectMissingVoidReturn,The following statement contains a magic number: grandparent.CallsMin(S.Fn' 4) && grandparent.Args[0].IsIdNamed(S.Void)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectMissingVoidReturn,The following statement contains a magic number: grandparent.Calls(S.Lambda' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,replace,The following statement contains a magic number: pair.Calls(S.Lambda' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: fn.ArgCount < 3 || !fn.Args[2].Calls(S.AltList)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: fn.ArgCount < 3 || !fn.Args[2].Calls(S.AltList)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: var args = fn.Args[2].Args;
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: fn.ArgCount < 4
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: parts[2] = parts[2].WithArgs(args);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: parts[2] = parts[2].WithArgs(args);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: var body = parts[3];
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,SetOrCreateMember,The following statement contains a magic number: parts[3] = body.WithArgs(bodyStmts.InsertRange(indexAtWhichToDoAssignments' assignments.Select(p => { 					if (p.Key == p.Value.Name) 						return F.Call(S.Assign' F.Dot(F.@this' F.Id(p.Key))' p.Value); 					else 						return F.Call(S.Assign' F.Id(p.Key)' p.Value); 				}).ToList()));
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,DetectSetOrCreateMember,The following statement contains a magic number: propOrFieldDecl = arg.WithArgs(arg.Args.First(4));
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,NextStatementMayBeReachable,The following statement contains a magic number: stmt.Calls(S.If' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,treeEquals,The following statement contains a magic number: node.ArgCount < 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,static_if,The following statement contains a magic number: !@if.ArgCount.IsInRange(2' 3)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,static_if,The following statement contains a magic number: !@if.ArgCount.IsInRange(2' 3)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,static_if,The following statement contains a magic number: LNode output = (bool)@bool ? @if.Args[1] : @if.Args.TryGet(2' null) ?? F.Call(S.Splice);
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ReduceBooleanExpr,The following statement contains a magic number: node.ArgCount == 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,NullCoalesceSet,The following statement contains a magic number: a.Count != 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,QuickBind,The following statement contains a magic number: a.Count == 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,ColonEquals,The following statement contains a magic number: a.Count == 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,Namespace,The following statement contains a magic number: node.ArgCount == 2 && !node.Args.Last.Calls(S.Braces)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,includeFileBinary,The following statement contains a magic number: bytes.Length <= 1024
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,staticMatches,The following statement contains a magic number: node.ArgCount != 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,Constructor,The following statement contains a magic number: LNode space = anc.TryGet(anc.Count - 3' LNode.Missing)' typeName;
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,Constructor,The following statement contains a magic number: type != null && anc[anc.Count - 2] == space.Args[2]
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,Constructor,The following statement contains a magic number: type != null && anc[anc.Count - 2] == space.Args[2]
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,Constructor,The following statement contains a magic number: cons.ArgCount >= 3 && cons.Args[1].IsIdNamed(S.This)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,setTupleType,The following statement contains a magic number: !rest.Count.IsInRange(1' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,Tuple,The following statement contains a magic number: context.Parent == null || (context.Parent.Calls(S.Lambda' 2) && context.Parent.Args[0].Equals(node))
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UnpackTuple,The following statement contains a magic number: tuple[i].Calls(S.Var' 2)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UnpackTuple,The following statement contains a magic number: a.Count == 2 && a[0].CallsMin(S.Tuple' 1)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,unroll,The following statement contains a magic number: node.ArgCount == 2 && ((clause = node.Args[0]).Calls(@in' 2) || clause.Calls(S.In' 2))
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,unroll,The following statement contains a magic number: node.ArgCount == 2 && ((clause = node.Args[0]).Calls(@in' 2) || clause.Calls(S.In' 2))
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,unroll,The following statement contains a magic number: node.ArgCount == 2 && ((clause = node.Args[0]).Calls(@in' 2) || clause.Calls(S.In' 2))
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UseSymbolsCore,The following statement contains a magic number: VList<LNode> output = body.SmartSelect(stmt => stmt.ReplaceRecursive(n => { 				if (!inType && n.ArgCount == 3) { 					// Since we're outside any type' we must avoid creating symbol  					// fields. When we cross into a type then we can start making 					// Symbols by calling ourself recursively with inType=true 					var kind = EcsValidators.SpaceDefinitionKind(n); 					if (kind == S.Class || kind == S.Struct || kind == S.Interface || kind == S.Alias || kind == S.Trait) { 						var body2 = n.Args[2]; 						return n.WithArgChanged(2' UseSymbolsCore(symbolAttrs' options' body2.Args' context' true).WithName(body2.Name)); 					} 				} 				var sym = n.Value as Symbol; 				if (n.IsLiteral && sym != null) 					return symbols[sym] = LNode.Id(prefix + sym.Name); 				return null; 			}));
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UseSymbolsCore,The following statement contains a magic number: VList<LNode> output = body.SmartSelect(stmt => stmt.ReplaceRecursive(n => { 				if (!inType && n.ArgCount == 3) { 					// Since we're outside any type' we must avoid creating symbol  					// fields. When we cross into a type then we can start making 					// Symbols by calling ourself recursively with inType=true 					var kind = EcsValidators.SpaceDefinitionKind(n); 					if (kind == S.Class || kind == S.Struct || kind == S.Interface || kind == S.Alias || kind == S.Trait) { 						var body2 = n.Args[2]; 						return n.WithArgChanged(2' UseSymbolsCore(symbolAttrs' options' body2.Args' context' true).WithName(body2.Name)); 					} 				} 				var sym = n.Value as Symbol; 				if (n.IsLiteral && sym != null) 					return symbols[sym] = LNode.Id(prefix + sym.Name); 				return null; 			}));
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,UseSymbolsCore,The following statement contains a magic number: VList<LNode> output = body.SmartSelect(stmt => stmt.ReplaceRecursive(n => { 				if (!inType && n.ArgCount == 3) { 					// Since we're outside any type' we must avoid creating symbol  					// fields. When we cross into a type then we can start making 					// Symbols by calling ourself recursively with inType=true 					var kind = EcsValidators.SpaceDefinitionKind(n); 					if (kind == S.Class || kind == S.Struct || kind == S.Interface || kind == S.Alias || kind == S.Trait) { 						var body2 = n.Args[2]; 						return n.WithArgChanged(2' UseSymbolsCore(symbolAttrs' options' body2.Args' context' true).WithName(body2.Name)); 					} 				} 				var sym = n.Value as Symbol; 				if (n.IsLiteral && sym != null) 					return symbols[sym] = LNode.Id(prefix + sym.Name); 				return null; 			}));
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,with,The following statement contains a magic number: fn.ArgCount != 2 || !(braces = fn.Args[1]).Calls(S.Braces)
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,IsExpressionContext,The following statement contains a magic number: parent.Name == S.For && index == 3
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,IsExpressionContext,The following statement contains a magic number: parent.Name == S.ForEach && index == 2
Magic Number,LeMP,StandardMacros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AddLineDirectivesMacro.cs,IsExpressionContext,The following statement contains a magic number: ctx.Ancestors.Count <= 2
Magic Number,LeMP,AdtParam,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AdtParam,The following statement contains a magic number: !OriginalDecl.Calls(S.Var' 2)
Magic Number,LeMP,AdtParam,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\AlgebraicDataType.out.cs,AdtParam,The following statement contains a magic number: NameId.Calls(S.Assign' 2)
Magic Number,LeMP,CodeContractRewriter,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\ContractsMacro.out.cs,ConditionToStringLit,The following statement contains a magic number: methodName.CallsMin(S.Dot' 2)
Magic Number,LeMP,CodeMatchContext,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchCode.out.cs,GetSubstitutionVar,The following statement contains a magic number: id.Calls(S.IndexBracks' 2)
Magic Number,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The following statement contains a magic number: pattern.Calls(S.NamedArg' 2) || pattern.Calls(S.Colon' 2)
Magic Number,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The following statement contains a magic number: pattern.Calls(S.NamedArg' 2) || pattern.Calls(S.Colon' 2)
Magic Number,LeMP,CodeGeneratorForMatchCase,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\MatchMacro.out.cs,GetPatternComponents,The following statement contains a magic number: pattern.Calls(S.And' 2)
Magic Number,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,EliminateSequenceExpressions,The following statement contains a magic number: return body == null ? stmt : stmt.WithArgChanged(2' EliminateSequenceExpressions(body' true));
Magic Number,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,ESEInTryStmt,The following statement contains a magic number: part.Calls(S.Finally' 1) || part.Calls(S.Catch' 3)
Magic Number,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUp_GeneralCall2,The following statement contains a magic number: lastRunSeq > 0 &&  					(args.Count == 2 && (target.IsIdNamed(S.And) || target.IsIdNamed(S.Or)) || args.Count == 3 && target.IsIdNamed(S.QuestionMark))
Magic Number,LeMP,EliminateRunSequences,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\UseSequenceExpressions.out.cs,BubbleUp_GeneralCall2,The following statement contains a magic number: lastRunSeq > 0 &&  					(args.Count == 2 && (target.IsIdNamed(S.And) || target.IsIdNamed(S.Or)) || args.Count == 3 && target.IsIdNamed(S.QuestionMark))
Magic Number,LeMP.CSharp6,CSharp6Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\CSharp6Macro.cs,NullDot,The following statement contains a magic number: !node.Calls(S.NullDot' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,TranslateSpaceDefinition,The following statement contains a magic number: args.Count == 1 ? !isAlias : (args.Count != 2 || !body.Calls(S.Braces))
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,TranslateSpaceDefinition,The following statement contains a magic number: !nameEtc.Calls(S.Assign' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,DefOrConstructor,The following statement contains a magic number: !parts.Count.IsInRange(1' 2) || !sig.IsCall || (body != null && !body.Calls(S.Braces))
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,DefOrConstructor,The following statement contains a magic number: sig.Calls(S.Forward' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,DefOrConstructor,The following statement contains a magic number: sig.Calls(S._RightArrow' 2) || sig.Calls(S.ColonColon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,DefOrConstructor,The following statement contains a magic number: sig.Calls(S._RightArrow' 2) || sig.Calls(S.ColonColon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,prop,The following statement contains a magic number: parts.Count != 2 || !body.Calls(S.Braces)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,prop,The following statement contains a magic number: sig.Calls(S._RightArrow' 2) || sig.Calls(S.ColonColon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,prop,The following statement contains a magic number: sig.Calls(S._RightArrow' 2) || sig.Calls(S.ColonColon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,var,The following statement contains a magic number: part.Calls(S.Assign' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,var,The following statement contains a magic number: part.Calls(S.ColonColon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,var,The following statement contains a magic number: init == null && part.Calls(S.Assign' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,for,The following statement contains a magic number: return node.With(S.For'  					asAltList(tuple.Args[0])'  					tuple.Args[1]'  					asAltList(tuple.Args[2' LNode.Missing])' 					node.Args[1]);
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,for,The following statement contains a magic number: node.ArgCount == 2 && ((tuple = node.Args[0]).Calls(S.Tuple' 3) || tuple.Calls(S.Tuple' 2))
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,for,The following statement contains a magic number: node.ArgCount == 2 && ((tuple = node.Args[0]).Calls(S.Tuple' 3) || tuple.Calls(S.Tuple' 2))
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,for,The following statement contains a magic number: node.ArgCount == 2 && ((tuple = node.Args[0]).Calls(S.Tuple' 3) || tuple.Calls(S.Tuple' 2))
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,foreach,The following statement contains a magic number: args.Count == 2 && args[0].Calls(_in' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,foreach,The following statement contains a magic number: args.Count == 2 && args[0].Calls(_in' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,do,The following statement contains a magic number: node.ArgCount == 2 && args.Last.Calls(_while' 1)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,IfUnless,The following statement contains a magic number: LNode cond = args.TryGet(0' null)' then = args.TryGet(1' null)' 				elseKW = args.TryGet(2' null)' @else = args.TryGet(3' null);
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,IfUnless,The following statement contains a magic number: LNode cond = args.TryGet(0' null)' then = args.TryGet(1' null)' 				elseKW = args.TryGet(2' null)' @else = args.TryGet(3' null);
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,IfUnless,The following statement contains a magic number: @else = LNode.Call(@else.Name' new VList<LNode>(args.Slice(4))' node);
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,IfUnless,The following statement contains a magic number: @else.IsId && args.Count > 4
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,case,The following statement contains a magic number: node.ArgCount >= 2 && node.Args.Last.Calls(S.Braces)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,GotoCase,The following statement contains a magic number: node.ArgCount == 2 && node.Args[0].IsIdNamed(_case)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,try,The following statement contains a magic number: i == 2
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,using2,The following statement contains a magic number: node.ArgCount == 2
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,new,The following statement contains a magic number: consExpr == null || node.ArgCount > 2 || (csharpInitializer != null && !csharpInitializer.Calls(S.Braces))
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,cast,The following statement contains a magic number: node.ArgCount == 2
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,as,The following statement contains a magic number: node.ArgCount == 2
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,is,The following statement contains a magic number: node.ArgCount == 2
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,QuestionMark,The following statement contains a magic number: node.ArgCount == 2 && node.Args[1].Calls(S.Colon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,QuestionMark,The following statement contains a magic number: node.ArgCount == 2 && node.Args[1].Calls(S.Colon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,NamedArg,The following statement contains a magic number: node.Calls(S.Colon' 2) && node.Args[0].IsId
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,of,The following statement contains a magic number: node.ArgCount == 2 && (kind = node.Args[0]).IsId
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,ColonColon,The following statement contains a magic number: a.Count == 2
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,ColonColonInit,The following statement contains a magic number: name.Calls(S.ColonColon' 2)
Magic Number,LeMP.Prelude.Les,Macros,C:\research\architectureSmells\repos\qwertie_Loyc\Main\LeMP.StdMacros\Prelude.Les.cs,ColonColonInit,The following statement contains a magic number: a.Count == 2
