Implementation smell,Namespace,Class,File,Method,Description
Long Method,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The method has 405 lines of code.
Long Method,Loyc,GoInterfaceBenchmark,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\GoInterfaceBenchmark.cs,DoBenchmark,The method has 104 lines of code.
Complex Method,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ThreadLocalStorage,Cyclomatic complexity of the method is 9
Complex Method,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,Cyclomatic complexity of the method is 56
Complex Method,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,Cyclomatic complexity of the method is 9
Complex Method,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,RunPublicBenchmarks,Cyclomatic complexity of the method is 15
Complex Method,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,PrintResults,Cyclomatic complexity of the method is 8
Complex Method,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialSetOperation,Cyclomatic complexity of the method is 10
Complex Method,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,UpdateGraph,Cyclomatic complexity of the method is 10
Long Parameter List,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,RunCore,The method has 5 parameters. Parameters: minMillisec' code' loopTimes' noGC' totalTime
Long Parameter List,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,RunPublicBenchmarks,The method has 5 parameters. Parameters: subject' randomOrder' postprocess' prefix' clearOldResults
Long Parameter List,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,PrintResults,The method has 7 parameters. Parameters: writer' results' separator' addPadding' userDataFormatter' userDataColumnName' numberFormat
Long Parameter List,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialMembershipTests,The method has 5 parameters. Parameters: data' start' stop' time' set
Long Parameter List,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialMembershipTests,The method has 5 parameters. Parameters: data' start' stop' time' set
Long Statement,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The length of the statement  "			Console.WriteLine("However' Iterator.MoveNext needs {0:0.0}% as much time as Iterator used directly."' total2b * 100.0 / total2);" is 129.
Long Statement,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,RunPublicBenchmarks,The length of the statement  "						var methodDelegate = (Func<Benchmarker' object>)Delegate.CreateDelegate(typeof(Func<Benchmarker' object>)' subject' method' false);" is 131.
Long Statement,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The length of the statement  "				HashSet_buckets = set.GetType().GetField("m_buckets"' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.IgnoreCase);" is 128.
Long Statement,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The length of the statement  "			// size of Dictionary<T'T> itself (buckets' entries' KeyCollection' ValueCollection' SyncRoot' SerializationInfo' Comparer' count' version' freeList' freeCount)" is 160.
Long Statement,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The length of the statement  "				Dict_buckets = set.GetType().GetField("buckets"' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.IgnoreCase);" is 123.
Long Statement,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The length of the statement  "			this._tabs.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 141.
Long Statement,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The length of the statement  "			this.btnSaveAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));" is 149.
Long Statement,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The length of the statement  "			this.btnSaveCurrent.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));" is 153.
Long Statement,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The length of the statement  "				model.PlotMargins = new OxyThickness(double.NaN' double.NaN' 12' double.NaN); // avoid cutting off "1000000" (NaN=autodetect)" is 125.
Complex Conditional,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The conditional expression  "total1 != total2 || total2 != total3 || total2 != total2b || total3 != total5"  is complex.
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ThreadLocalStorage,The following statement contains a magic number: const int Iterations = 10000000;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ThreadLocalStorage,The following statement contains a magic number: i < Iterations/5
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ThreadLocalStorage,The following statement contains a magic number: time = t.Restart() * 5;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: byte[] array1 = new byte[256];
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: byte[] array2 = new byte[256];
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: const int Iterations = 2000000;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: int length2 = array1.Length >> 2;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: uint B = (uint)dw << 2;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: p2[dw] = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: p2[dw] = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: p2[dw] = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: p2[dw] = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: p2[dw] = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: int left2 = array1.Length >> 2;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: B += 4;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: *p2++ = B | ((B + 1) << 8) | ((B + 2) << 16) | ((B + 3) << 24);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: int left2 = array1.Length >> 2;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total3 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total3 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total3 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: int left2 = array1.Length >> 2;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: int lengthDW = array1.Length >> 2;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total5 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total5 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total5 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total5 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total5 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: total5 += (int)((v >> 24) + (byte)(v >> 16) + (byte)(v >> 8) + (byte)v);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: int left2 = array1.Length >> 2;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: fixed (byte* p2 = &array2[dw << 2]) 					{ 						uint* dw1 = (uint*)p1; 						uint* dw2 = (uint*)p2; 						*dw1 = *dw2; 					}
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: dw < (array1.Length >> 2)
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: Array.Copy(array1' B' array2' B' 16);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: Cell[] cells = new Cell[64];
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ByteArrayAccess,The following statement contains a magic number: Cell[] cells2 = new Cell[64];
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The following statement contains a magic number: const int Limit = 333333333;
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The following statement contains a magic number: Console.WriteLine("{0} seconds"' t.Millisec * 0.001);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The following statement contains a magic number: Console.WriteLine("{0} seconds"' t.Millisec * 0.001);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The following statement contains a magic number: Console.WriteLine("{0} seconds"' t.Millisec * 0.001);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The following statement contains a magic number: i < 3
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The following statement contains a magic number: Console.WriteLine("On average' IEnumerator consumes {0:0.0}% as much time as Iterator."' total1 * 100.0 / total2);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,EnumeratorVsIterator,The following statement contains a magic number: Console.WriteLine("However' Iterator.MoveNext needs {0:0.0}% as much time as Iterator used directly."' total2b * 100.0 / total2);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,BenchmarkSets,The following statement contains a magic number: Debug.Assert(words.Length * words.Length >= 250000);
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,BenchmarkSets,The following statement contains a magic number: words2.Count < 200000
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: numbers.Add(r.Next(1000000));
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: i < 1000000
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: numbers2 = (from n in numbers where n < 100000 select n + 1).ToList();
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: trial < 200
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: n < 100000
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: trial < 200
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: n < 100000
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,LinqVsForLoop,The following statement contains a magic number: trial < 200
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: int[] testSizes = new int[] { 12345' 100' 316' 1000' 3160' 10000' 31600' 100000' 316000' 1000000' 3160000' 10000000 };
Magic Number,Benchmark,Benchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmark.cs,ConvexHull,The following statement contains a magic number: double ang = r.NextDouble() * (Math.PI * 2);
Magic Number,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,PrintResults,The following statement contains a magic number: results.Any(p => p.Value.Count >= 2)
Magic Number,Benchmark,Benchmarker,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\Benchmarker.cs,PrintResults,The following statement contains a magic number: results.Any(p => p.Value.Count >= 3)
Magic Number,Benchmark,Result,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,ToString,The following statement contains a magic number: msg += string.Format("'{0}%"' Math.Round((double)MSetMemory / (double)HSetMemory * 100.0));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: int size50 = _data.Length * 2 / 3;
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: int size50 = _data.Length * 2 / 3;
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: int size0 = _data.Length / 2;
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Add items' half new"'         size50'  size => DoAddTests(size' size/2));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Remove items' half found"'    size50'  size => DoRemoveTests(size' size/2));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Union' half overlap"'         size50'  size => DoSetOperationTests(size' size/2' Op.Or));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Intersect' half overlap"'     size50'  size => DoSetOperationTests(size' size/2' Op.And));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Subtract' half overlap"'      size50'  size => DoSetOperationTests(size' size/2' Op.Sub));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Xor' half overlap"'           size50'  size => DoSetOperationTests(size' size/2' Op.Xor));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Membership' half found"'      size50'  size => DoMembershipTests(size' size/2));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoEnumeratorTests,The following statement contains a magic number: i = (i + 2) % (_data.Length - size);
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoEnumeratorTests,The following statement contains a magic number: DoTimes(10' TrialEnumerateSets);
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialEnumerateSets,The following statement contains a magic number: Debug.Assert(count == _hSet.Count * 3);
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: int bytes = IntPtr.Size * 6 + 4 * 4;
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: int bytes = IntPtr.Size * 6 + 4 * 4;
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: int bytes = IntPtr.Size * 6 + 4 * 4;
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: bytes += IntPtr.Size * 6;
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: bytes += arrayLength * (sizeOfT + 12);
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoMembershipTests,The following statement contains a magic number: i0 = (i0 + 2) % (_data.Length - (size + phase));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoMembershipTests,The following statement contains a magic number: DoTimes(10' () => TrialMembershipTests(_data' i1' i1 + size));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoAddTests,The following statement contains a magic number: i = (i + 2) % (_data.Length - size);
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoRemoveTests,The following statement contains a magic number: i0 = (i0 + 2) % (_data.Length - (size + phase));
Magic Number,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoSetOperationTests,The following statement contains a magic number: i0 = (i0 + 2) % (_data.Length - (size + phase));
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: int size50 = _data.Length * 2 / 3;
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: int size50 = _data.Length * 2 / 3;
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: int size0 = _data.Length / 2;
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Add items' half new"'         size50'  size => DoAddTests(size' size/2));
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Remove items' half found"'    size50'  size => DoRemoveTests(size' size/2));
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,Run,The following statement contains a magic number: DoForVariousSizes("Membership' half found"'      size50'  size => DoMembershipTests(size' size/2));
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoEnumeratorTests,The following statement contains a magic number: i = (i + 2) % (_data.Length - size);
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoEnumeratorTests,The following statement contains a magic number: DoTimes(10' TrialEnumerateSets);
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialEnumerateSets,The following statement contains a magic number: Debug.Assert(count == _hSet.Count * 3);
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: int bytes = IntPtr.Size * 7 + 4 * 4;
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: int bytes = IntPtr.Size * 7 + 4 * 4;
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: int bytes = IntPtr.Size * 7 + 4 * 4;
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: bytes += IntPtr.Size * 6;
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,CountMemory,The following statement contains a magic number: bytes += arrayLength * (sizeOfPair + 12);
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoMembershipTests,The following statement contains a magic number: i0 = (i0 + 2) % (_data.Length - (size + phase));
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoMembershipTests,The following statement contains a magic number: DoTimes(10' () => TrialMembershipTests(_data' i1' i1 + size));
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoAddTests,The following statement contains a magic number: i = (i + 2) % (_data.Length - size);
Magic Number,Benchmark,BenchmarkMaps<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,DoRemoveTests,The following statement contains a magic number: i0 = (i0 + 2) % (_data.Length - (size + phase));
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,EzChartForm,The following statement contains a magic number: Add("Example"' "Series B"' i' i * i / 10.0);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,EzChartForm,The following statement contains a magic number: i <= 11
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,UpdateGraphs,The following statement contains a magic number: page = new ChartPage(pair.Key' pair.Value' pair.Value.Title.Left(25));
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this._tabs.Location = new System.Drawing.Point(4' 3);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this._tabs.Location = new System.Drawing.Point(4' 3);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this._tabs.Size = new System.Drawing.Size(577' 429);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this._tabs.Size = new System.Drawing.Size(577' 429);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAll.Location = new System.Drawing.Point(485' 434);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAll.Location = new System.Drawing.Point(485' 434);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAll.Size = new System.Drawing.Size(96' 23);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAll.Size = new System.Drawing.Size(96' 23);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAll.TabIndex = 2;
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveCurrent.Location = new System.Drawing.Point(345' 434);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveCurrent.Location = new System.Drawing.Point(345' 434);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveCurrent.Size = new System.Drawing.Size(134' 23);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveCurrent.Size = new System.Drawing.Size(134' 23);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveCurrent.TabIndex = 2;
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(584' 462);
Magic Number,Benchmark,EzChartForm,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\EzChartForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(584' 462);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: graph.InitDefaultModel = (id' model) => 			{ 				model.LegendPosition = LegendPosition.TopLeft; 				model.PlotMargins = new OxyThickness(double.NaN' double.NaN' 12' double.NaN); // avoid cutting off "1000000" (NaN=autodetect) 				model.Axes.Add(new LogarithmicAxis { 					Position = AxisPosition.Bottom' 					Title = "List size"' 					MajorGridlineStyle = LineStyle.Solid' 					MinorGridlineStyle = LineStyle.Dot 				}); 				int X = id.ToString().StartsWith("Scan by") ? StdIterations * 100 : StdIterations; 				model.Axes.Add(new LinearAxis {  					Position = AxisPosition.Left'  					Title = string.Format("Milliseconds to perform {0:n0} iterations"' X)' 					MajorGridlineStyle = LineStyle.Solid' 					MinorGridlineStyle = LineStyle.Dot' 					Minimum = -1' 				}); 			};
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: graph.InitDefaultModel = (id' model) => 			{ 				model.LegendPosition = LegendPosition.TopLeft; 				model.PlotMargins = new OxyThickness(double.NaN' double.NaN' 12' double.NaN); // avoid cutting off "1000000" (NaN=autodetect) 				model.Axes.Add(new LogarithmicAxis { 					Position = AxisPosition.Bottom' 					Title = "List size"' 					MajorGridlineStyle = LineStyle.Solid' 					MinorGridlineStyle = LineStyle.Dot 				}); 				int X = id.ToString().StartsWith("Scan by") ? StdIterations * 100 : StdIterations; 				model.Axes.Add(new LinearAxis {  					Position = AxisPosition.Left'  					Title = string.Format("Milliseconds to perform {0:n0} iterations"' X)' 					MajorGridlineStyle = LineStyle.Solid' 					MinorGridlineStyle = LineStyle.Dot' 					Minimum = -1' 				}); 			};
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 30);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 100);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 300);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 1000);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 3000);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 10000);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 30000);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 100000);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 300000);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: Run(b' 1000000);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,Run,The following statement contains a magic number: b.RunPublicBenchmarks(this' false' () => 			{ 				int start = Console.CursorTop; 				b.PrintResults(Console.Out); 				end = Console.CursorTop; 				Console.CursorTop = start;  				// Send results to _graph 				if (_graph != null) { 					foreach (var row in b.Results) { 						string rowName = row.Key; 						var result = row.Value; 						var pair1 = rowName.SplitAt(": "); 						var pair2 = pair1.B.SplitAt(": "); 						var graphName = pair2.A.ToString(); 						if (graphName.StartsWith("Scan by") && graphName.EndsWith("x")) 							// avoid creating separate graphs for "Scan by ... 1000x" and "Scan by ... 333x" 							graphName = graphName.Left(graphName.LastIndexOf(' '));  						var dp = new EzDataPoint { 							Parameter = double.Parse(pair1.A.ToString())' 							GraphId = graphName' 							Series = pair2.B.ToString()' 							Value = result.Avg() 						}; 						Add(dp);  						// Make a second version of the dictionary graph without SortedList 						if (dp.GraphId.ToString().StartsWith("Dictionary") && dp.Series != "SortedList") { 							dp = dp.Clone(); 							dp.GraphId = dp.GraphId.ToString() + " (no SortedList)"; 							Add(dp); 						} 						 						// Make a second version of the "@ random indexes" graphs for small lists 						if (dp.GraphId.ToString().Contains("random index") && (double)dp.Parameter < 10000) { 							dp = dp.Clone(); 							dp.GraphId = dp.GraphId.ToString() + " "; // extra space just to change the graph ID 							Add(dp); 						} 					} 				} 			}' 			string.Format("{0'8}: "' listCount)' true);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("List"' () => 			{ 				var list = MakeList(new List<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("List"' () => 			{ 				var list = MakeList(new List<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("List"' () => 			{ 				var list = MakeList(new List<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("InternalList"' () => 			{ 				var list = MakeList(InternalList<long>.Empty' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("InternalList"' () => 			{ 				var list = MakeList(InternalList<long>.Empty' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("InternalList"' () => 			{ 				var list = MakeList(InternalList<long>.Empty' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("DList"' () => 			{ 				var list = MakeList(new DList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("DList"' () => 			{ 				var list = MakeList(new DList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("DList"' () => 			{ 				var list = MakeList(new DList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("AList"' () => 			{ 				var list = MakeList(new AList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("AList"' () => 			{ 				var list = MakeList(new AList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,InsertRandom,The following statement contains a magic number: b.Run("AList"' () => 			{ 				var list = MakeList(new AList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.Insert(_r.Next(c + 1)' i); 					if (c >= _count + 5) list.RemoveRange(list.Count - 10' 10); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: var more = new long[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' };
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: b.Run("List"' () => 			{ 				var list = MakeList(new List<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.RemoveAt(_r.Next(c)); 					if (c <= _count - 5) list.AddRange(more); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: b.Run("InternalList"' () => 			{ 				var list = MakeList(InternalList<long>.Empty' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.RemoveAt(_r.Next(c)); 					if (c <= _count - 5) list.AddRange((IList<long>)more); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: b.Run("DList"' () => 			{ 				var list = MakeList(new DList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.RemoveAt(_r.Next(c)); 					if (c <= _count - 5) list.AddRange((ICollection<long>)more); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,RemoveRandom,The following statement contains a magic number: b.Run("AList"' () => 			{ 				var list = MakeList(new AList<long>()' b); 				for (int i = 0; i < StdIterations; i++) { 					int c = list.Count; 					list.RemoveAt(_r.Next(c)); 					if (c <= _count - 5) list.AddRange(more); 				} 			});
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,ScanIndexer,The following statement contains a magic number: int Cycles = Math.Max(MathEx.MulDiv(StdIterations' 100' _count)' 1);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,ScanIEnumerator,The following statement contains a magic number: int Cycles = Math.Max(MathEx.MulDiv(StdIterations' 100' _count)' 1);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,DictionaryBenchmarks,The following statement contains a magic number: _count < 10000 || b.CurrentTrialNumber == 1
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,MakeDict,The following statement contains a magic number: k += _r.Next(50' 150);
Magic Number,Benchmark,ListBenchmarks,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\ListBenchmarks.cs,MakeDict,The following statement contains a magic number: k += _r.Next(50' 150);
Magic Number,Loyc,GoInterfaceBenchmark,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\GoInterfaceBenchmark.cs,DoBenchmark,The following statement contains a magic number: const int Iterations = 10000000;
Magic Number,Loyc,GoInterfaceBenchmark,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\GoInterfaceBenchmark.cs,DoBenchmark,The following statement contains a magic number: list.Add(2);
Magic Number,Loyc,GoInterfaceBenchmark,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\GoInterfaceBenchmark.cs,DoBenchmark,The following statement contains a magic number: list.Add(3);
Magic Number,Loyc,GoInterfaceBenchmark,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\GoInterfaceBenchmark.cs,DoBenchmark,The following statement contains a magic number: total0 += list[i & 3];
Magic Number,Loyc,GoInterfaceBenchmark,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\GoInterfaceBenchmark.cs,DoBenchmark,The following statement contains a magic number: total1 += ilist[i & 3];
Magic Number,Loyc,GoInterfaceBenchmark,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\GoInterfaceBenchmark.cs,DoBenchmark,The following statement contains a magic number: total2 += rolist[i & 3];
Missing Default,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialSetOperation,The following switch statement is missing a default case: switch(op) { 				case Op.Or:  hSet.UnionWith(hSet2); break; 				case Op.And: hSet.IntersectWith(hSet2); break; 				case Op.Sub: hSet.ExceptWith(hSet2); break; 				case Op.Xor: hSet.SymmetricExceptWith(hSet2); break; 			}
Missing Default,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialSetOperation,The following switch statement is missing a default case: switch(op) { 				case Op.Or:  oSet = oSet1 | oSet2; break; 				case Op.And: oSet = oSet1 & oSet2; break; 				case Op.Sub: oSet = oSet1 - oSet2; break; 				case Op.Xor: oSet = oSet1 ^ oSet2; break; 			}
Missing Default,Benchmark,BenchmarkSets<T>,C:\research\architectureSmells\repos\qwertie_Loyc\Core\LoycCore.Benchmarks\Benchmarks\BenchmarkSets.cs,TrialSetOperation,The following switch statement is missing a default case: switch(op) { 				case Op.Or:  iSet = iSet1 | iSet2; break; 				case Op.And: iSet = iSet1 & iSet2; break; 				case Op.Sub: iSet = iSet1 - iSet2; break; 				case Op.Xor: iSet = iSet1 ^ iSet2; break; 			}
