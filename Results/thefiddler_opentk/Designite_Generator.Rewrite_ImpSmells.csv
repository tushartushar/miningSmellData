Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,EmitParameters,The method has 135 lines of code.
Complex Method,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,Rewrite,Cyclomatic complexity of the method is 10
Complex Method,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,ProcessMethod,Cyclomatic complexity of the method is 10
Long Parameter List,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,ProcessMethod,The method has 5 parameters. Parameters: wrapper' native' slot' entry_points' options
Long Parameter List,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,EmitConvenienceWrapper,The method has 5 parameters. Parameters: wrapper' native' difference' body' il
Long Statement,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,EmitStringArrayParameter,The length of the statement  "            var marshal_str_array_to_ptr = wrapper.Module.Import(TypeBindingsBase.Methods.First(m => m.Name == "MarshalStringArrayToPtr")); " is 127.
Complex Conditional,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,EmitDebugPrologue,The conditional expression  "module == "OpenTK.Graphics.OpenGL4" ||                      module == "OpenTK.Graphics.OpenGL" ||                      module == "OpenTK.Graphics.ES10" ||                      module == "OpenTK.Graphics.ES11" ||                      module == "OpenTK.Graphics.ES20" ||                      module == "OpenTK.Graphics.ES30""  is complex.
Magic Number,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,EmitConvenienceWrapper,The following statement contains a magic number: if (wrapper.Parameters.Count > 2)              {                  // Todo: emit all parameters bar the last two                  throw new NotImplementedException();              }
Magic Number,OpenTK.Rewrite,Program,C:\repos\thefiddler_opentk\Source\Generator.Rewrite\Program.cs,EmitConvenienceWrapper,The following statement contains a magic number: if (wrapper.ReturnType.Name != "Void")              {                  if (difference == 2)                  {                      // Convert sized out-array/reference to return value' for example:                      // void GenTextures(int n' int[] textures) -> int GenTexture()                      // {                      //  const int n = 1;                      //  int buffers;                      //  calli GenTextures(n' &textures);                      //  return result;                      // }                      body.Variables.Add(new VariableDefinition(wrapper.ReturnType));                      il.Emit(OpCodes.Ldc_I4' 1); // const int n = 1                      il.Emit(OpCodes.Ldloca' body.Variables.Count - 1); // &buffers                  }                  else if (difference == 1)                  {                      // Convert unsized out-array/reference to return value' for example:                      // void GetBoolean(GetPName pname' out bool data) -> bool GetBoolean(GetPName pname)                      // {                      //   bool result;                      //   GetBooleanv(pname' &result);                      //   return result;                      // }                      body.Variables.Add(new VariableDefinition(wrapper.ReturnType));                      EmitParameters(wrapper' body' il);                      il.Emit(OpCodes.Ldloca' body.Variables.Count - 1);                  }                  else                  {                      Console.Error.WriteLine("Unknown wrapper type for ({0})"' native.Name);                  }              }              else              {                  if (difference == 1)                  {                      // Convert in-array/reference to single element' for example:                      // void DeleteTextures(int n' ref int textures) -> void DeleteTexture(int texture)                      // {                      //   const int n = 1;                      //   calli DeleteTextures(n' &textures);                      // }                      il.Emit(OpCodes.Ldc_I4' 1); // const int n = 1                      il.Emit(OpCodes.Ldarga' wrapper.Parameters.Last()); // &textures                  }                  else                  {                      Console.Error.WriteLine("Unknown wrapper type for ({0})"' native.Name);                  }              }
