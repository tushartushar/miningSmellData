Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
Magic Number,ExampleCesiumLanguageServer,InfoHandler,C:\repos\AnalyticalGraphicsInc_czml-writer\DotNet\ExampleCesiumLanguageServer\InfoHandler.cs,ProcessRequest,The following statement contains a magic number: using (var outputStream = new StreamWriter(context.Response.OutputStream))              {                  var cesiumWriter = new CesiumStreamWriter();                  var output = new CesiumOutputStream(outputStream)                  {                      // Since this is a demo' turning on PrettyFormatting makes the response easier to view                      // with web browser developer tools.  It just adds whitespace and newlines to the response'                      // so production environments would typically leave this turned off.                      PrettyFormatting = true                  };                    // The whole body of CZML must be wrapped in a JSON array' opened here.                  output.WriteStartSequence();                    // The first packet (JSON object) of CZML must be the document packet.                  using (var entity = cesiumWriter.OpenPacket(output))                  {                      entity.WriteId("document");                      entity.WriteVersion("1.0");                  }                    // Now we generate some sample points and send them down.                  for (int y = -3; y <= 3; ++y)                  {                      double lat = y * 10.0;                      for (int x = -18; x <= 18; ++x)                      {                          double lon = x * 9.99999999;                            // Open a new CZML packet for each point.                          using (var entity = cesiumWriter.OpenPacket(output))                          {                              entity.WriteId("point " + (x * 10) + " " + (y * 10));                                using (var position = entity.OpenPositionProperty())                              {                                  position.WriteCartographicDegrees(new Cartographic(lon' lat' 0.0));                              }                                using (var point = entity.OpenPointProperty())                              {                                  point.WritePixelSizeProperty(10.0);                                  point.WriteColorProperty(Color.Yellow);                              }                                // Click any dot in Cesium Viewer to read its description.                              using (var description = entity.OpenDescriptionProperty())                              {                                  description.WriteString($@"  <table class=""cesium-infoBox-defaultTable"">  <tbody>   <tr>    <td>Longitude</td>    <td>{lon:0} degrees</td>   </tr>   <tr>    <td>Latitude</td>    <td>{lat:0} degrees</td>   </tr>  </tbody></table>");                              }                          }                      }                  }                    // Close the JSON array that wraps the entire CZML document.                  output.WriteEndSequence();              }
