Implementation smell,Namespace,Class,File,Method,Description
Long Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The method has 105 lines of code.
Complex Method,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,Cyclomatic complexity of the method is 19
Complex Method,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,Cyclomatic complexity of the method is 8
Complex Method,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,Cyclomatic complexity of the method is 23
Complex Method,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,CanGo,Cyclomatic complexity of the method is 22
Complex Method,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,SetWalls,Cyclomatic complexity of the method is 15
Complex Method,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Go_go_go,Cyclomatic complexity of the method is 16
Complex Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,TrunRight,Cyclomatic complexity of the method is 14
Complex Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,TrunLeft,Cyclomatic complexity of the method is 14
Complex Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,TrunBack,Cyclomatic complexity of the method is 14
Complex Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,Go,Cyclomatic complexity of the method is 18
Complex Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,Cyclomatic complexity of the method is 8
Complex Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetPrevCell,Cyclomatic complexity of the method is 14
Complex Method,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,Cyclomatic complexity of the method is 8
Complex Method,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,Cyclomatic complexity of the method is 8
Complex Method,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,Cyclomatic complexity of the method is 15
Complex Method,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnRun_Click,Cyclomatic complexity of the method is 10
Complex Method,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,Cyclomatic complexity of the method is 11
Long Parameter List,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,ReorderChoices,The method has 5 parameters.
Long Parameter List,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The method has 6 parameters.
Long Parameter List,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The method has 5 parameters.
Long Statement,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The length of the statement  "	g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24)); " is 135.
Long Statement,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The length of the statement  "			MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 145.
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,DeadEnd,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		cellWatched [i' j] = 0;  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,DeadEnd,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		cellWatched [i' j] = 0;  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,DeadEnd,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	cellWatched [i' j] = 0;  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,The following statement contains a magic number: if (ndeCount == 0) {  	cellWatched [robot.YLocation' robot.XLocation] = -1;  	return enumRobotAction.TurnBack;  }  else if (ndeCount == 1) {  	try {  		if (robot.GetPrevCell<int> (cellWatched) == -1)  			cellWatched [robot.YLocation' robot.XLocation] = -1;  		else  			cellWatched [robot.YLocation' robot.XLocation]++;  	}  	catch {  		cellWatched [robot.YLocation' robot.XLocation]++;  	}  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 2) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 3) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,The following statement contains a magic number: if (ndeCount == 0) {  	cellWatched [robot.YLocation' robot.XLocation] = -1;  	return enumRobotAction.TurnBack;  }  else if (ndeCount == 1) {  	try {  		if (robot.GetPrevCell<int> (cellWatched) == -1)  			cellWatched [robot.YLocation' robot.XLocation] = -1;  		else  			cellWatched [robot.YLocation' robot.XLocation]++;  	}  	catch {  		cellWatched [robot.YLocation' robot.XLocation]++;  	}  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 2) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 3) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,The following statement contains a magic number: if (ndeCount == 1) {  	try {  		if (robot.GetPrevCell<int> (cellWatched) == -1)  			cellWatched [robot.YLocation' robot.XLocation] = -1;  		else  			cellWatched [robot.YLocation' robot.XLocation]++;  	}  	catch {  		cellWatched [robot.YLocation' robot.XLocation]++;  	}  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 2) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 3) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,The following statement contains a magic number: if (ndeCount == 1) {  	try {  		if (robot.GetPrevCell<int> (cellWatched) == -1)  			cellWatched [robot.YLocation' robot.XLocation] = -1;  		else  			cellWatched [robot.YLocation' robot.XLocation]++;  	}  	catch {  		cellWatched [robot.YLocation' robot.XLocation]++;  	}  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 2) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 3) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,The following statement contains a magic number: if (ndeCount == 2) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 3) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,The following statement contains a magic number: if (ndeCount == 2) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  else if (ndeCount == 3) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,DeadEnd,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\DeadEnd.cs,Think,The following statement contains a magic number: if (ndeCount == 3) {  	cellWatched [robot.YLocation' robot.XLocation]++;  	switch (orederdChoices [0]) {  	case enumSide.Front:  		return enumRobotAction.GoStraight;  	case enumSide.Right:  		return enumRobotAction.TurnRight;  	case enumSide.Left:  		return enumRobotAction.TurnLeft;  	default:  		throw new Exception ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		cells [i' j] = new Cell ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		cells [i' j] = new Cell ();  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	cells [i' j] = new Cell ();  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	cells [i' 0].SetWestWall ();  	cells [i' 15].SetEastWall ();  	cells [0' i].SetSouthWall ();  	cells [15' i].SetNorthWall ();  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	cells [i' 0].SetWestWall ();  	cells [i' 15].SetEastWall ();  	cells [0' i].SetSouthWall ();  	cells [15' i].SetNorthWall ();  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	cells [i' 0].SetWestWall ();  	cells [i' 15].SetEastWall ();  	cells [0' i].SetSouthWall ();  	cells [15' i].SetNorthWall ();  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cells [i' 15].SetEastWall ();  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cells [15' i].SetNorthWall ();  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	for (int j = 0; j < 16; j++)  		cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	for (int j = 0; j < 16; j++)  		cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	for (int j = 0; j < 16; j++)  		cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int j = 0; j < 16; j++)  	cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: for (int j = 0; j < 16; j++)  	cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [7' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [7' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [7' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [7' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [8' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [8' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [8' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,FloodFill,The following statement contains a magic number: cellVlas [8' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	for (int j = 0; j < 16; j++)  		cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	for (int j = 0; j < 16; j++)  		cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	for (int j = 0; j < 16; j++)  		cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int j = 0; j < 16; j++)  	cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int j = 0; j < 16; j++)  	cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [i' j] = 255;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [7' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [7' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [7' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [7' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [8' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [8' 7] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [8' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: cellVlas [8' 8] = 0;  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int n = 0; n < 256; n++) {  	for (int i = 0; i < 16; i++) {  		for (int j = 0; j < 16; j++) {  			if (!cells [i' j].NorthWall)  				//if (!cells[i+1'j].SouthWall)  				if (cellVlas [i + 1' j] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i + 1' j] + 1;  			if (!cells [i' j].EastWall)  				//if ((cell[Divareha][i + 1][j] / DEAD) % 2 == 0)  				if (cellVlas [i' j + 1] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i' j + 1] + 1;  			if (!cells [i' j].SouthWall)  				//if ((cell[Divareha][i][j - 1] / DEAD) % 2 == 0)  				if (cellVlas [i - 1' j] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i - 1' j] + 1;  			if (!cells [i' j].WestWall)  				//if ((cell[Divareha][i - 1][j] / DEAD) % 2 == 0)  				if (cellVlas [i' j - 1] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i' j - 1] + 1;  		}  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int n = 0; n < 256; n++) {  	for (int i = 0; i < 16; i++) {  		for (int j = 0; j < 16; j++) {  			if (!cells [i' j].NorthWall)  				//if (!cells[i+1'j].SouthWall)  				if (cellVlas [i + 1' j] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i + 1' j] + 1;  			if (!cells [i' j].EastWall)  				//if ((cell[Divareha][i + 1][j] / DEAD) % 2 == 0)  				if (cellVlas [i' j + 1] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i' j + 1] + 1;  			if (!cells [i' j].SouthWall)  				//if ((cell[Divareha][i][j - 1] / DEAD) % 2 == 0)  				if (cellVlas [i - 1' j] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i - 1' j] + 1;  			if (!cells [i' j].WestWall)  				//if ((cell[Divareha][i - 1][j] / DEAD) % 2 == 0)  				if (cellVlas [i' j - 1] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i' j - 1] + 1;  		}  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int n = 0; n < 256; n++) {  	for (int i = 0; i < 16; i++) {  		for (int j = 0; j < 16; j++) {  			if (!cells [i' j].NorthWall)  				//if (!cells[i+1'j].SouthWall)  				if (cellVlas [i + 1' j] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i + 1' j] + 1;  			if (!cells [i' j].EastWall)  				//if ((cell[Divareha][i + 1][j] / DEAD) % 2 == 0)  				if (cellVlas [i' j + 1] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i' j + 1] + 1;  			if (!cells [i' j].SouthWall)  				//if ((cell[Divareha][i][j - 1] / DEAD) % 2 == 0)  				if (cellVlas [i - 1' j] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i - 1' j] + 1;  			if (!cells [i' j].WestWall)  				//if ((cell[Divareha][i - 1][j] / DEAD) % 2 == 0)  				if (cellVlas [i' j - 1] < cellVlas [i' j])  					cellVlas [i' j] = cellVlas [i' j - 1] + 1;  		}  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		if (!cells [i' j].NorthWall)  			//if (!cells[i+1'j].SouthWall)  			if (cellVlas [i + 1' j] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i + 1' j] + 1;  		if (!cells [i' j].EastWall)  			//if ((cell[Divareha][i + 1][j] / DEAD) % 2 == 0)  			if (cellVlas [i' j + 1] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i' j + 1] + 1;  		if (!cells [i' j].SouthWall)  			//if ((cell[Divareha][i][j - 1] / DEAD) % 2 == 0)  			if (cellVlas [i - 1' j] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i - 1' j] + 1;  		if (!cells [i' j].WestWall)  			//if ((cell[Divareha][i - 1][j] / DEAD) % 2 == 0)  			if (cellVlas [i' j - 1] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i' j - 1] + 1;  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		if (!cells [i' j].NorthWall)  			//if (!cells[i+1'j].SouthWall)  			if (cellVlas [i + 1' j] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i + 1' j] + 1;  		if (!cells [i' j].EastWall)  			//if ((cell[Divareha][i + 1][j] / DEAD) % 2 == 0)  			if (cellVlas [i' j + 1] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i' j + 1] + 1;  		if (!cells [i' j].SouthWall)  			//if ((cell[Divareha][i][j - 1] / DEAD) % 2 == 0)  			if (cellVlas [i - 1' j] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i - 1' j] + 1;  		if (!cells [i' j].WestWall)  			//if ((cell[Divareha][i - 1][j] / DEAD) % 2 == 0)  			if (cellVlas [i' j - 1] < cellVlas [i' j])  				cellVlas [i' j] = cellVlas [i' j - 1] + 1;  	}  }  
Magic Number,MicroMouseSimul.Algorithms,FloodFill,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\FloodFill.cs,Think,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (!cells [i' j].NorthWall)  		//if (!cells[i+1'j].SouthWall)  		if (cellVlas [i + 1' j] < cellVlas [i' j])  			cellVlas [i' j] = cellVlas [i + 1' j] + 1;  	if (!cells [i' j].EastWall)  		//if ((cell[Divareha][i + 1][j] / DEAD) % 2 == 0)  		if (cellVlas [i' j + 1] < cellVlas [i' j])  			cellVlas [i' j] = cellVlas [i' j + 1] + 1;  	if (!cells [i' j].SouthWall)  		//if ((cell[Divareha][i][j - 1] / DEAD) % 2 == 0)  		if (cellVlas [i - 1' j] < cellVlas [i' j])  			cellVlas [i' j] = cellVlas [i - 1' j] + 1;  	if (!cells [i' j].WestWall)  		//if ((cell[Divareha][i - 1][j] / DEAD) % 2 == 0)  		if (cellVlas [i' j - 1] < cellVlas [i' j])  			cellVlas [i' j] = cellVlas [i' j - 1] + 1;  }  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: if (i > 7)  	iCenter = 8;  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: if (i > 7)  	iCenter = 8;  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: iCenter = 8;  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: if (j > 7)  	jCenter = 8;  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: if (j > 7)  	jCenter = 8;  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: jCenter = 8;  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: return Math.Sqrt (Math.Pow (i - iCenter' 2) + Math.Pow (j - jCenter' 2));  
Magic Number,MicroMouseSimul.Algorithms,IAlgorithm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\Algorithms\IAlgorithm.cs,GetPerfectLengthToGoal,The following statement contains a magic number: return Math.Sqrt (Math.Pow (i - iCenter' 2) + Math.Pow (j - jCenter' 2));  
Magic Number,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,construct,The following statement contains a magic number: _northWall = (pWalls % 2 != 0);  
Magic Number,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,construct,The following statement contains a magic number: _eastWall = ((pWalls / 2) % 2 != 0);  
Magic Number,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,construct,The following statement contains a magic number: _eastWall = ((pWalls / 2) % 2 != 0);  
Magic Number,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,construct,The following statement contains a magic number: _southWall = ((pWalls / 4) % 2 != 0);  
Magic Number,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,construct,The following statement contains a magic number: _southWall = ((pWalls / 4) % 2 != 0);  
Magic Number,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,construct,The following statement contains a magic number: _westWall = ((pWalls / 8) % 2 != 0);  
Magic Number,MicroMouseSimul.MicroMouse,Cell,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Cell.cs,construct,The following statement contains a magic number: _westWall = ((pWalls / 8) % 2 != 0);  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,Maze,The following statement contains a magic number: if (pWalls.GetLength (0) != 16 || pWalls.GetLength (1) != 16) {  	throw new ArgumentOutOfRangeException ("pWalls"' "Should be int[16'16] array.");  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,Maze,The following statement contains a magic number: if (pWalls.GetLength (0) != 16 || pWalls.GetLength (1) != 16) {  	throw new ArgumentOutOfRangeException ("pWalls"' "Should be int[16'16] array.");  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,Maze,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		_cells [i' j] = new Cell (pWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,Maze,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		_cells [i' j] = new Cell (pWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,Maze,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	_cells [i' j] = new Cell (pWalls [i' j]);  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		if (_cells [i' j].NorthWall && i < 15)  			_cells [i + 1' j].SetSouthWall ();  		if (_cells [i' j].EastWall && j < 15)  			_cells [i' j + 1].SetWestWall ();  		if (_cells [i' j].SouthWall && i > 0)  			_cells [i - 1' j].SetNorthWall ();  		if (_cells [i' j].WestWall && j > 0)  			_cells [i' j - 1].SetEastWall ();  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		if (_cells [i' j].NorthWall && i < 15)  			_cells [i + 1' j].SetSouthWall ();  		if (_cells [i' j].EastWall && j < 15)  			_cells [i' j + 1].SetWestWall ();  		if (_cells [i' j].SouthWall && i > 0)  			_cells [i - 1' j].SetNorthWall ();  		if (_cells [i' j].WestWall && j > 0)  			_cells [i' j - 1].SetEastWall ();  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		if (_cells [i' j].NorthWall && i < 15)  			_cells [i + 1' j].SetSouthWall ();  		if (_cells [i' j].EastWall && j < 15)  			_cells [i' j + 1].SetWestWall ();  		if (_cells [i' j].SouthWall && i > 0)  			_cells [i - 1' j].SetNorthWall ();  		if (_cells [i' j].WestWall && j > 0)  			_cells [i' j - 1].SetEastWall ();  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		if (_cells [i' j].NorthWall && i < 15)  			_cells [i + 1' j].SetSouthWall ();  		if (_cells [i' j].EastWall && j < 15)  			_cells [i' j + 1].SetWestWall ();  		if (_cells [i' j].SouthWall && i > 0)  			_cells [i - 1' j].SetNorthWall ();  		if (_cells [i' j].WestWall && j > 0)  			_cells [i' j - 1].SetEastWall ();  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (_cells [i' j].NorthWall && i < 15)  		_cells [i + 1' j].SetSouthWall ();  	if (_cells [i' j].EastWall && j < 15)  		_cells [i' j + 1].SetWestWall ();  	if (_cells [i' j].SouthWall && i > 0)  		_cells [i - 1' j].SetNorthWall ();  	if (_cells [i' j].WestWall && j > 0)  		_cells [i' j - 1].SetEastWall ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (_cells [i' j].NorthWall && i < 15)  		_cells [i + 1' j].SetSouthWall ();  	if (_cells [i' j].EastWall && j < 15)  		_cells [i' j + 1].SetWestWall ();  	if (_cells [i' j].SouthWall && i > 0)  		_cells [i - 1' j].SetNorthWall ();  	if (_cells [i' j].WestWall && j > 0)  		_cells [i' j - 1].SetEastWall ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (_cells [i' j].NorthWall && i < 15)  		_cells [i + 1' j].SetSouthWall ();  	if (_cells [i' j].EastWall && j < 15)  		_cells [i' j + 1].SetWestWall ();  	if (_cells [i' j].SouthWall && i > 0)  		_cells [i - 1' j].SetNorthWall ();  	if (_cells [i' j].WestWall && j > 0)  		_cells [i' j - 1].SetEastWall ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: if (_cells [i' j].NorthWall && i < 15)  	_cells [i + 1' j].SetSouthWall ();  
Magic Number,MicroMouseSimul.MicroMouse,Maze,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Maze.cs,ValidateCells,The following statement contains a magic number: if (_cells [i' j].EastWall && j < 15)  	_cells [i' j + 1].SetWestWall ();  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	_iWalls [i' 0] += 8;  	_iWalls [i' 15] += 2;  	_iWalls [0' i] += 4;  	_iWalls [15' i] += 1;  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	_iWalls [i' 0] += 8;  	_iWalls [i' 15] += 2;  	_iWalls [0' i] += 4;  	_iWalls [15' i] += 1;  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	_iWalls [i' 0] += 8;  	_iWalls [i' 15] += 2;  	_iWalls [0' i] += 4;  	_iWalls [15' i] += 1;  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	_iWalls [i' 0] += 8;  	_iWalls [i' 15] += 2;  	_iWalls [0' i] += 4;  	_iWalls [15' i] += 1;  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	_iWalls [i' 0] += 8;  	_iWalls [i' 15] += 2;  	_iWalls [0' i] += 4;  	_iWalls [15' i] += 1;  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	_iWalls [i' 0] += 8;  	_iWalls [i' 15] += 2;  	_iWalls [0' i] += 4;  	_iWalls [15' i] += 1;  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [i' 0] += 8;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [i' 15] += 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [i' 15] += 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [0' i] += 4;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [15' i] += 1;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [0' 0] = 14;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [0' 1] = 12;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 7] = 12;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 7] = 12;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 7] = 12;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 6] = 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 6] = 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 6] = 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [6' 7] = 1;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [6' 7] = 1;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 8] = 6;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 8] = 6;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 8] = 6;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 9] = 8;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 9] = 8;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [7' 9] = 8;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [6' 8] = 1;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [6' 8] = 1;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 7] = 9;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 7] = 9;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 7] = 9;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 6] = 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 6] = 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 6] = 2;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [9' 7] = 4;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [9' 7] = 4;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [9' 7] = 4;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 8] = 1;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [8' 8] = 1;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [9' 8] = 4;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [9' 8] = 4;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,MouseWorld,The following statement contains a magic number: _iWalls [9' 8] = 4;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,NotFinished,The following statement contains a magic number: return (_robot.XLocation < 7 || _robot.XLocation > 8) || (_robot.YLocation < 7 || _robot.YLocation > 8);  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,NotFinished,The following statement contains a magic number: return (_robot.XLocation < 7 || _robot.XLocation > 8) || (_robot.YLocation < 7 || _robot.YLocation > 8);  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,NotFinished,The following statement contains a magic number: return (_robot.XLocation < 7 || _robot.XLocation > 8) || (_robot.YLocation < 7 || _robot.YLocation > 8);  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,NotFinished,The following statement contains a magic number: return (_robot.XLocation < 7 || _robot.XLocation > 8) || (_robot.YLocation < 7 || _robot.YLocation > 8);  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Go_go_go,The following statement contains a magic number: if (!uniqueCells.ContainsKey (_robot.XLocation * 100 + _robot.YLocation)) {  	uniqueCells.Add (_robot.XLocation * 100 + _robot.YLocation' 0);  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Go_go_go,The following statement contains a magic number: if (!uniqueCells.ContainsKey (_robot.XLocation * 100 + _robot.YLocation)) {  	uniqueCells.Add (_robot.XLocation * 100 + _robot.YLocation' 0);  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Go_go_go,The following statement contains a magic number: uniqueCells.Add (_robot.XLocation * 100 + _robot.YLocation' 0);  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Go_go_go,The following statement contains a magic number: uniqueCells [_robot.XLocation * 100 + _robot.YLocation]++;  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Start,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		cellVisited [i' j] = false;  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Start,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		cellVisited [i' j] = false;  	}  }  
Magic Number,MicroMouseSimul.MicroMouse,MouseWorld,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\MouseWorld.cs,Start,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	cellVisited [i' j] = false;  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,Robot,The following statement contains a magic number: if (pX > 15 || pX < 0) {  	throw new ArgumentOutOfRangeException ("pX"' "Should be in [0'15]");  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,Robot,The following statement contains a magic number: if (pY > 15 || pY < 0) {  	throw new ArgumentOutOfRangeException ("pY"' "Should be in [0'15]");  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,Go,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (_iYLocation == 15) {  		throw new Exception ();  	}  	else {  		_iYLocation++;  	}  	break;  case enumDirection.South:  	if (_iYLocation == 0) {  		throw new Exception ();  	}  	else {  		_iYLocation--;  	}  	break;  case enumDirection.East:  	if (_iXLocation == 15) {  		throw new Exception ();  	}  	else {  		_iXLocation++;  	}  	break;  case enumDirection.West:  	if (_iXLocation == 0) {  		throw new Exception ();  	}  	else {  		_iXLocation--;  	}  	break;  default:  	throw new Exception ("Robot Direction is not Valid. But How!? Fuck you!");  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,Go,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (_iYLocation == 15) {  		throw new Exception ();  	}  	else {  		_iYLocation++;  	}  	break;  case enumDirection.South:  	if (_iYLocation == 0) {  		throw new Exception ();  	}  	else {  		_iYLocation--;  	}  	break;  case enumDirection.East:  	if (_iXLocation == 15) {  		throw new Exception ();  	}  	else {  		_iXLocation++;  	}  	break;  case enumDirection.West:  	if (_iXLocation == 0) {  		throw new Exception ();  	}  	else {  		_iXLocation--;  	}  	break;  default:  	throw new Exception ("Robot Direction is not Valid. But How!? Fuck you!");  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,Go,The following statement contains a magic number: if (_iYLocation == 15) {  	throw new Exception ();  }  else {  	_iYLocation++;  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,Go,The following statement contains a magic number: if (_iXLocation == 15) {  	throw new Exception ();  }  else {  	_iXLocation++;  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return cell [YLocation' XLocation - 1];  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return cell [YLocation' XLocation + 1];  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return cell [YLocation + 1' XLocation];  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return cell [YLocation - 1' XLocation];  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (YLocation == 15)  		throw new Exception ();  	return cell [YLocation + 1' XLocation];  case enumDirection.South:  	if (YLocation == 0)  		throw new Exception ();  	return cell [YLocation - 1' XLocation];  case enumDirection.East:  	if (XLocation == 15)  		throw new Exception ();  	return cell [YLocation' XLocation + 1];  case enumDirection.West:  	if (XLocation == 0)  		throw new Exception ();  	return cell [YLocation' XLocation - 1];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (YLocation == 15)  		throw new Exception ();  	return cell [YLocation + 1' XLocation];  case enumDirection.South:  	if (YLocation == 0)  		throw new Exception ();  	return cell [YLocation - 1' XLocation];  case enumDirection.East:  	if (XLocation == 15)  		throw new Exception ();  	return cell [YLocation' XLocation + 1];  case enumDirection.West:  	if (XLocation == 0)  		throw new Exception ();  	return cell [YLocation' XLocation - 1];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: if (YLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: if (XLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 15)  		throw new Exception ();  	return cell [YLocation' XLocation + 1];  case enumDirection.South:  	if (XLocation == 0)  		throw new Exception ();  	return cell [YLocation' XLocation - 1];  case enumDirection.East:  	if (YLocation == 0)  		throw new Exception ();  	return cell [YLocation - 1' XLocation];  case enumDirection.West:  	if (YLocation == 15)  		throw new Exception ();  	return cell [YLocation + 1' XLocation];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 15)  		throw new Exception ();  	return cell [YLocation' XLocation + 1];  case enumDirection.South:  	if (XLocation == 0)  		throw new Exception ();  	return cell [YLocation' XLocation - 1];  case enumDirection.East:  	if (YLocation == 0)  		throw new Exception ();  	return cell [YLocation - 1' XLocation];  case enumDirection.West:  	if (YLocation == 15)  		throw new Exception ();  	return cell [YLocation + 1' XLocation];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: if (XLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: if (YLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 0)  		throw new Exception ();  	return cell [YLocation' XLocation - 1];  case enumDirection.South:  	if (XLocation == 15)  		throw new Exception ();  	return cell [YLocation' XLocation + 1];  case enumDirection.East:  	if (YLocation == 15)  		throw new Exception ();  	return cell [YLocation + 1' XLocation];  case enumDirection.West:  	if (YLocation == 0)  		throw new Exception ();  	return cell [YLocation - 1' XLocation];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 0)  		throw new Exception ();  	return cell [YLocation' XLocation - 1];  case enumDirection.South:  	if (XLocation == 15)  		throw new Exception ();  	return cell [YLocation' XLocation + 1];  case enumDirection.East:  	if (YLocation == 15)  		throw new Exception ();  	return cell [YLocation + 1' XLocation];  case enumDirection.West:  	if (YLocation == 0)  		throw new Exception ();  	return cell [YLocation - 1' XLocation];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: if (XLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCell,The following statement contains a magic number: if (YLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetPrevCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (YLocation == 0)  		throw new Exception ("there is no prev cell");  	return cell [YLocation - 1' XLocation];  case enumDirection.South:  	if (YLocation == 15)  		throw new Exception ("there is no prev cell");  	return cell [YLocation + 1' XLocation];  case enumDirection.East:  	if (XLocation == 0)  		throw new Exception ("there is no prev cell");  	return cell [YLocation' XLocation - 1];  case enumDirection.West:  	if (XLocation == 15)  		throw new Exception ("there is no prev cell");  	return cell [YLocation' XLocation + 1];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetPrevCell,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (YLocation == 0)  		throw new Exception ("there is no prev cell");  	return cell [YLocation - 1' XLocation];  case enumDirection.South:  	if (YLocation == 15)  		throw new Exception ("there is no prev cell");  	return cell [YLocation + 1' XLocation];  case enumDirection.East:  	if (XLocation == 0)  		throw new Exception ("there is no prev cell");  	return cell [YLocation' XLocation - 1];  case enumDirection.West:  	if (XLocation == 15)  		throw new Exception ("there is no prev cell");  	return cell [YLocation' XLocation + 1];  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetPrevCell,The following statement contains a magic number: if (YLocation == 15)  	throw new Exception ("there is no prev cell");  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetPrevCell,The following statement contains a magic number: if (XLocation == 15)  	throw new Exception ("there is no prev cell");  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (robotSide) {  case enumSide.Front:  	switch (_direction) {  	case enumDirection.North:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.South:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.East:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.West:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	default:  		throw new Exception ();  	}  case enumSide.Right:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.South:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.East:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  case enumSide.Left:  	switch (_direction) {  	case enumDirection.North:  		if (XLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation - 1  		};  	case enumDirection.South:  		if (XLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation'  			XLocation + 1  		};  	case enumDirection.East:  		if (YLocation == 15)  			throw new Exception ();  		return new int[] {  			YLocation + 1'  			XLocation  		};  	case enumDirection.West:  		if (YLocation == 0)  			throw new Exception ();  		return new int[] {  			YLocation - 1'  			XLocation  		};  	default:  		throw new Exception ();  	}  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (YLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation + 1'  		XLocation  	};  case enumDirection.South:  	if (YLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation - 1'  		XLocation  	};  case enumDirection.East:  	if (XLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation + 1  	};  case enumDirection.West:  	if (XLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation - 1  	};  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (YLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation + 1'  		XLocation  	};  case enumDirection.South:  	if (YLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation - 1'  		XLocation  	};  case enumDirection.East:  	if (XLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation + 1  	};  case enumDirection.West:  	if (XLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation - 1  	};  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: if (YLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: if (XLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation + 1  	};  case enumDirection.South:  	if (XLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation - 1  	};  case enumDirection.East:  	if (YLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation - 1'  		XLocation  	};  case enumDirection.West:  	if (YLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation + 1'  		XLocation  	};  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation + 1  	};  case enumDirection.South:  	if (XLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation - 1  	};  case enumDirection.East:  	if (YLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation - 1'  		XLocation  	};  case enumDirection.West:  	if (YLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation + 1'  		XLocation  	};  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: if (XLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: if (YLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation - 1  	};  case enumDirection.South:  	if (XLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation + 1  	};  case enumDirection.East:  	if (YLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation + 1'  		XLocation  	};  case enumDirection.West:  	if (YLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation - 1'  		XLocation  	};  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: switch (_direction) {  case enumDirection.North:  	if (XLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation - 1  	};  case enumDirection.South:  	if (XLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation'  		XLocation + 1  	};  case enumDirection.East:  	if (YLocation == 15)  		throw new Exception ();  	return new int[] {  		YLocation + 1'  		XLocation  	};  case enumDirection.West:  	if (YLocation == 0)  		throw new Exception ();  	return new int[] {  		YLocation - 1'  		XLocation  	};  default:  	throw new Exception ();  }  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: if (XLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul.MicroMouse,Robot,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\MicroMouse\Robot.cs,GetNextCellLoc,The following statement contains a magic number: if (YLocation == 15)  	throw new Exception ();  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,picMazeHolder_Paint,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		drawCell (cells [i' j]' visitedCells [i' j]' i' j' g);  		//drawCellData (world.GetCellData (i' j)' i' j' g);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,picMazeHolder_Paint,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	for (int j = 0; j < 16; j++) {  		drawCell (cells [i' j]' visitedCells [i' j]' i' j' g);  		//drawCellData (world.GetCellData (i' j)' i' j' g);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,picMazeHolder_Paint,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	drawCell (cells [i' j]' visitedCells [i' j]' i' j' g);  	//drawCellData (world.GetCellData (i' j)' i' j' g);  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCellData,The following statement contains a magic number: g.DrawString (p' new System.Drawing.Font (FontFamily.GenericSerif' 10)' brush' new RectangleF (j * 32 + 5' (15 - i) * 32 + 5' 24' 24));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofResult == System.Windows.Forms.DialogResult.OK) {  	if (ofDialog.FileName.IndexOf (".maz") == -1) {  		try {  			var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  			if (_maze2 != null) {  				world = _maze2;  				world.ValidateCells ();  			}  			else  				MessageBox.Show ("error");  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	else {  		try {  			int['] iWalls = new int[16' 16];  			var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  			for (int i = 0; i < 16; i++) {  				var wallCols = _mazeWalls [15 - i].Split (' ');  				for (int j = 0; j < 16; j++) {  					iWalls [i' j] = int.Parse (wallCols [j]);  				}  			}  			world = new MouseWorld (iWalls);  			world.ValidateCells ();  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	picMazeHolder.Invalidate ();  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofResult == System.Windows.Forms.DialogResult.OK) {  	if (ofDialog.FileName.IndexOf (".maz") == -1) {  		try {  			var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  			if (_maze2 != null) {  				world = _maze2;  				world.ValidateCells ();  			}  			else  				MessageBox.Show ("error");  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	else {  		try {  			int['] iWalls = new int[16' 16];  			var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  			for (int i = 0; i < 16; i++) {  				var wallCols = _mazeWalls [15 - i].Split (' ');  				for (int j = 0; j < 16; j++) {  					iWalls [i' j] = int.Parse (wallCols [j]);  				}  			}  			world = new MouseWorld (iWalls);  			world.ValidateCells ();  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	picMazeHolder.Invalidate ();  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofResult == System.Windows.Forms.DialogResult.OK) {  	if (ofDialog.FileName.IndexOf (".maz") == -1) {  		try {  			var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  			if (_maze2 != null) {  				world = _maze2;  				world.ValidateCells ();  			}  			else  				MessageBox.Show ("error");  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	else {  		try {  			int['] iWalls = new int[16' 16];  			var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  			for (int i = 0; i < 16; i++) {  				var wallCols = _mazeWalls [15 - i].Split (' ');  				for (int j = 0; j < 16; j++) {  					iWalls [i' j] = int.Parse (wallCols [j]);  				}  			}  			world = new MouseWorld (iWalls);  			world.ValidateCells ();  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	picMazeHolder.Invalidate ();  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofResult == System.Windows.Forms.DialogResult.OK) {  	if (ofDialog.FileName.IndexOf (".maz") == -1) {  		try {  			var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  			if (_maze2 != null) {  				world = _maze2;  				world.ValidateCells ();  			}  			else  				MessageBox.Show ("error");  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	else {  		try {  			int['] iWalls = new int[16' 16];  			var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  			for (int i = 0; i < 16; i++) {  				var wallCols = _mazeWalls [15 - i].Split (' ');  				for (int j = 0; j < 16; j++) {  					iWalls [i' j] = int.Parse (wallCols [j]);  				}  			}  			world = new MouseWorld (iWalls);  			world.ValidateCells ();  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	picMazeHolder.Invalidate ();  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofResult == System.Windows.Forms.DialogResult.OK) {  	if (ofDialog.FileName.IndexOf (".maz") == -1) {  		try {  			var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  			if (_maze2 != null) {  				world = _maze2;  				world.ValidateCells ();  			}  			else  				MessageBox.Show ("error");  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	else {  		try {  			int['] iWalls = new int[16' 16];  			var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  			for (int i = 0; i < 16; i++) {  				var wallCols = _mazeWalls [15 - i].Split (' ');  				for (int j = 0; j < 16; j++) {  					iWalls [i' j] = int.Parse (wallCols [j]);  				}  			}  			world = new MouseWorld (iWalls);  			world.ValidateCells ();  		}  		catch (Exception ex) {  			MessageBox.Show ("error" + ex.Message);  		}  	}  	picMazeHolder.Invalidate ();  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofDialog.FileName.IndexOf (".maz") == -1) {  	try {  		var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  		if (_maze2 != null) {  			world = _maze2;  			world.ValidateCells ();  		}  		else  			MessageBox.Show ("error");  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  else {  	try {  		int['] iWalls = new int[16' 16];  		var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  		for (int i = 0; i < 16; i++) {  			var wallCols = _mazeWalls [15 - i].Split (' ');  			for (int j = 0; j < 16; j++) {  				iWalls [i' j] = int.Parse (wallCols [j]);  			}  		}  		world = new MouseWorld (iWalls);  		world.ValidateCells ();  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofDialog.FileName.IndexOf (".maz") == -1) {  	try {  		var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  		if (_maze2 != null) {  			world = _maze2;  			world.ValidateCells ();  		}  		else  			MessageBox.Show ("error");  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  else {  	try {  		int['] iWalls = new int[16' 16];  		var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  		for (int i = 0; i < 16; i++) {  			var wallCols = _mazeWalls [15 - i].Split (' ');  			for (int j = 0; j < 16; j++) {  				iWalls [i' j] = int.Parse (wallCols [j]);  			}  		}  		world = new MouseWorld (iWalls);  		world.ValidateCells ();  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofDialog.FileName.IndexOf (".maz") == -1) {  	try {  		var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  		if (_maze2 != null) {  			world = _maze2;  			world.ValidateCells ();  		}  		else  			MessageBox.Show ("error");  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  else {  	try {  		int['] iWalls = new int[16' 16];  		var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  		for (int i = 0; i < 16; i++) {  			var wallCols = _mazeWalls [15 - i].Split (' ');  			for (int j = 0; j < 16; j++) {  				iWalls [i' j] = int.Parse (wallCols [j]);  			}  		}  		world = new MouseWorld (iWalls);  		world.ValidateCells ();  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofDialog.FileName.IndexOf (".maz") == -1) {  	try {  		var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  		if (_maze2 != null) {  			world = _maze2;  			world.ValidateCells ();  		}  		else  			MessageBox.Show ("error");  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  else {  	try {  		int['] iWalls = new int[16' 16];  		var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  		for (int i = 0; i < 16; i++) {  			var wallCols = _mazeWalls [15 - i].Split (' ');  			for (int j = 0; j < 16; j++) {  				iWalls [i' j] = int.Parse (wallCols [j]);  			}  		}  		world = new MouseWorld (iWalls);  		world.ValidateCells ();  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: if (ofDialog.FileName.IndexOf (".maz") == -1) {  	try {  		var _maze2 = ObjectSaver.Load (ofDialog.FileName) as MouseWorld;  		if (_maze2 != null) {  			world = _maze2;  			world.ValidateCells ();  		}  		else  			MessageBox.Show ("error");  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  else {  	try {  		int['] iWalls = new int[16' 16];  		var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  		for (int i = 0; i < 16; i++) {  			var wallCols = _mazeWalls [15 - i].Split (' ');  			for (int j = 0; j < 16; j++) {  				iWalls [i' j] = int.Parse (wallCols [j]);  			}  		}  		world = new MouseWorld (iWalls);  		world.ValidateCells ();  	}  	catch (Exception ex) {  		MessageBox.Show ("error" + ex.Message);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: try {  	int['] iWalls = new int[16' 16];  	var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  	for (int i = 0; i < 16; i++) {  		var wallCols = _mazeWalls [15 - i].Split (' ');  		for (int j = 0; j < 16; j++) {  			iWalls [i' j] = int.Parse (wallCols [j]);  		}  	}  	world = new MouseWorld (iWalls);  	world.ValidateCells ();  }  catch (Exception ex) {  	MessageBox.Show ("error" + ex.Message);  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: try {  	int['] iWalls = new int[16' 16];  	var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  	for (int i = 0; i < 16; i++) {  		var wallCols = _mazeWalls [15 - i].Split (' ');  		for (int j = 0; j < 16; j++) {  			iWalls [i' j] = int.Parse (wallCols [j]);  		}  	}  	world = new MouseWorld (iWalls);  	world.ValidateCells ();  }  catch (Exception ex) {  	MessageBox.Show ("error" + ex.Message);  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: try {  	int['] iWalls = new int[16' 16];  	var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  	for (int i = 0; i < 16; i++) {  		var wallCols = _mazeWalls [15 - i].Split (' ');  		for (int j = 0; j < 16; j++) {  			iWalls [i' j] = int.Parse (wallCols [j]);  		}  	}  	world = new MouseWorld (iWalls);  	world.ValidateCells ();  }  catch (Exception ex) {  	MessageBox.Show ("error" + ex.Message);  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: try {  	int['] iWalls = new int[16' 16];  	var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  	for (int i = 0; i < 16; i++) {  		var wallCols = _mazeWalls [15 - i].Split (' ');  		for (int j = 0; j < 16; j++) {  			iWalls [i' j] = int.Parse (wallCols [j]);  		}  	}  	world = new MouseWorld (iWalls);  	world.ValidateCells ();  }  catch (Exception ex) {  	MessageBox.Show ("error" + ex.Message);  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: try {  	int['] iWalls = new int[16' 16];  	var _mazeWalls = System.IO.File.ReadAllLines (ofDialog.FileName);  	for (int i = 0; i < 16; i++) {  		var wallCols = _mazeWalls [15 - i].Split (' ');  		for (int j = 0; j < 16; j++) {  			iWalls [i' j] = int.Parse (wallCols [j]);  		}  	}  	world = new MouseWorld (iWalls);  	world.ValidateCells ();  }  catch (Exception ex) {  	MessageBox.Show ("error" + ex.Message);  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	var wallCols = _mazeWalls [15 - i].Split (' ');  	for (int j = 0; j < 16; j++) {  		iWalls [i' j] = int.Parse (wallCols [j]);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	var wallCols = _mazeWalls [15 - i].Split (' ');  	for (int j = 0; j < 16; j++) {  		iWalls [i' j] = int.Parse (wallCols [j]);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	var wallCols = _mazeWalls [15 - i].Split (' ');  	for (int j = 0; j < 16; j++) {  		iWalls [i' j] = int.Parse (wallCols [j]);  	}  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnLoadMap_Click,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	iWalls [i' j] = int.Parse (wallCols [j]);  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (visited)  	brush = new SolidBrush (Color.FromArgb (128' Color.Black));  else  	brush = new SolidBrush (Color.FromArgb (16' Color.Black));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (visited)  	brush = new SolidBrush (Color.FromArgb (128' Color.Black));  else  	brush = new SolidBrush (Color.FromArgb (16' Color.Black));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: brush = new SolidBrush (Color.FromArgb (128' Color.Black));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: brush = new SolidBrush (Color.FromArgb (16' Color.Black));  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.NorthWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.NorthWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.NorthWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.NorthWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.NorthWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.EastWall)  	g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.EastWall)  	g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.EastWall)  	g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.EastWall)  	g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.EastWall)  	g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j + 1) * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.SouthWall)  	g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.SouthWall)  	g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.SouthWall)  	g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.SouthWall)  	g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.SouthWall)  	g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' (j) * 32' (15 - i + 1) * 32' 34' 2);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.WestWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.WestWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.WestWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.WestWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: if (cellValue.WestWall)  	g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawCell,The following statement contains a magic number: g.FillRectangle (brush' j * 32' (15 - i) * 32' 2' 34);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: switch (r.Direction) {  case enumDirection.North:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  	});  	break;  case enumDirection.South:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.East:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  case enumDirection.West:  	g.FillPolygon (brush' new Point[] {  		new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  		new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  	});  	break;  default:  	g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 10' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillPolygon (brush' new Point[] {  	new Point (r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5 + 10)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5)'  	new Point (r.XLocation * 32 + 2 + 5 + 20' (15 - r.YLocation) * 32 + 2 + 5 + 20)  });  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,drawRobot,The following statement contains a magic number: g.FillRectangle (brush' r.XLocation * 32 + 2 + 5' (15 - r.YLocation) * 32 + 2 + 5' 20' 20);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,btnRun_Click,The following statement contains a magic number: switch (comboBox1.SelectedIndex) {  case 0:  	selectedAlg = new WallFollower (false);  	break;  case 1:  	selectedAlg = new DeadEnd ();  	break;  case 2:  default:  	selectedAlg = new FloodFill ();  	break;  }  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,algorithmRunner_DoWork,The following statement contains a magic number: do {  	picMazeHolder.Invalidate ();  	System.Threading.Thread.CurrentThread.Join (150);  }  while (world.Go_go_go () && !algorithmRunner.WorkerSupportsCancellation);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,algorithmRunner_DoWork,The following statement contains a magic number: System.Threading.Thread.CurrentThread.Join (150);  
Magic Number,MicroMouseSimul,mainForm,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mainForm.cs,algorithmRunner_DoWork,The following statement contains a magic number: System.Threading.Thread.CurrentThread.Join (150);  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (i < 16) {  			this.lblLeftWalls [i' j] = new Label ();  			if (j < 16)  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  			else  				this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  			this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  			this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  			this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  			this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  			this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  		}  		if (j < 16) {  			this.lblTopWalls [i' j] = new Label ();  			if (i < 16)  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  			else  				this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  			this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  			this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  			this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  			this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  			this.lblTopWalls [i' j].Cursor = Cursors.Hand;  			this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  			this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  			this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  			this.pnlMap.Controls.Add (lblTopWalls [i' j]);  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (i < 16) {  		this.lblLeftWalls [i' j] = new Label ();  		if (j < 16)  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  		else  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  		this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  		this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  		this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  		this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  		this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  	}  	if (j < 16) {  		this.lblTopWalls [i' j] = new Label ();  		if (i < 16)  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  		else  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  		this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  		this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  		this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  		this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblTopWalls [i' j].Cursor = Cursors.Hand;  		this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblTopWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (i < 16) {  		this.lblLeftWalls [i' j] = new Label ();  		if (j < 16)  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  		else  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  		this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  		this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  		this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  		this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  		this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  	}  	if (j < 16) {  		this.lblTopWalls [i' j] = new Label ();  		if (i < 16)  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  		else  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  		this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  		this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  		this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  		this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblTopWalls [i' j].Cursor = Cursors.Hand;  		this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblTopWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (i < 16) {  		this.lblLeftWalls [i' j] = new Label ();  		if (j < 16)  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  		else  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  		this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  		this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  		this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  		this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  		this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  	}  	if (j < 16) {  		this.lblTopWalls [i' j] = new Label ();  		if (i < 16)  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  		else  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  		this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  		this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  		this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  		this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblTopWalls [i' j].Cursor = Cursors.Hand;  		this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblTopWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (i < 16) {  		this.lblLeftWalls [i' j] = new Label ();  		if (j < 16)  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  		else  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  		this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  		this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  		this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  		this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  		this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  	}  	if (j < 16) {  		this.lblTopWalls [i' j] = new Label ();  		if (i < 16)  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  		else  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  		this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  		this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  		this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  		this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblTopWalls [i' j].Cursor = Cursors.Hand;  		this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblTopWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (i < 16) {  		this.lblLeftWalls [i' j] = new Label ();  		if (j < 16)  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  		else  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  		this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  		this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  		this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  		this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  		this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  	}  	if (j < 16) {  		this.lblTopWalls [i' j] = new Label ();  		if (i < 16)  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  		else  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  		this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  		this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  		this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  		this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblTopWalls [i' j].Cursor = Cursors.Hand;  		this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblTopWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (i < 16) {  		this.lblLeftWalls [i' j] = new Label ();  		if (j < 16)  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  		else  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  		this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  		this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  		this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  		this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  		this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  	}  	if (j < 16) {  		this.lblTopWalls [i' j] = new Label ();  		if (i < 16)  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  		else  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  		this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  		this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  		this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  		this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblTopWalls [i' j].Cursor = Cursors.Hand;  		this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblTopWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (i < 16) {  		this.lblLeftWalls [i' j] = new Label ();  		if (j < 16)  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  		else  			this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  		this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  		this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  		this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  		this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  		this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  	}  	if (j < 16) {  		this.lblTopWalls [i' j] = new Label ();  		if (i < 16)  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  		else  			this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  		this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  		this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  		this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  		this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  		this.lblTopWalls [i' j].Cursor = Cursors.Hand;  		this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  		this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  		this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  		this.pnlMap.Controls.Add (lblTopWalls [i' j]);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (i < 16) {  	this.lblLeftWalls [i' j] = new Label ();  	if (j < 16)  		this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  	else  		this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  	this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  	this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  	this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  	this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  	this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  	this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  	this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  	this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  	this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (i < 16) {  	this.lblLeftWalls [i' j] = new Label ();  	if (j < 16)  		this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  	else  		this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  	this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  	this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  	this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  	this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  	this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  	this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  	this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  	this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  	this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (i < 16) {  	this.lblLeftWalls [i' j] = new Label ();  	if (j < 16)  		this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  	else  		this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  	this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  	this.lblLeftWalls [i' j].Name = "leftWall" + i + "'" + j;  	this.lblLeftWalls [i' j].Size = new System.Drawing.Size (iWallWidth' iCellWidth);  	this.lblLeftWalls [i' j].BackColor = dicSelectedWalls [lblLeftWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  	this.lblLeftWalls [i' j].Cursor = Cursors.Hand;  	this.lblLeftWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  	this.lblLeftWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  	this.lblLeftWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  	this.pnlMap.Controls.Add (lblLeftWalls [i' j]);  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (j < 16)  	this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j].WestWall);  else  	this.dicSelectedWalls.Add (lblLeftWalls [i' j]' cells [i' j - 1].EastWall);  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: this.lblLeftWalls [i' j].Location = new Point (j * iCwWidth' (15 - i) * iCwWidth + iWallWidth);  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (j < 16) {  	this.lblTopWalls [i' j] = new Label ();  	if (i < 16)  		this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  	else  		this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  	this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  	this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  	this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  	this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  	this.lblTopWalls [i' j].Cursor = Cursors.Hand;  	this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  	this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  	this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  	this.pnlMap.Controls.Add (lblTopWalls [i' j]);  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (j < 16) {  	this.lblTopWalls [i' j] = new Label ();  	if (i < 16)  		this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  	else  		this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  	this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  	this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  	this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  	this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  	this.lblTopWalls [i' j].Cursor = Cursors.Hand;  	this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  	this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  	this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  	this.pnlMap.Controls.Add (lblTopWalls [i' j]);  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (j < 16) {  	this.lblTopWalls [i' j] = new Label ();  	if (i < 16)  		this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  	else  		this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  	this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  	this.lblTopWalls [i' j].Name = "topWall" + i + "'" + j;  	this.lblTopWalls [i' j].Size = new System.Drawing.Size (iCellWidth' iWallWidth);  	this.lblTopWalls [i' j].BackColor = dicSelectedWalls [lblTopWalls [i' j]] ? System.Drawing.Color.Black : System.Drawing.Color.Pink;  	this.lblTopWalls [i' j].Cursor = Cursors.Hand;  	this.lblTopWalls [i' j].MouseDown += new System.Windows.Forms.MouseEventHandler (this.wall_Click);  	this.lblTopWalls [i' j].MouseEnter += new System.EventHandler (this.wall_MouseEnter);  	this.lblTopWalls [i' j].MouseLeave += new System.EventHandler (this.wall_MouseLeave);  	this.pnlMap.Controls.Add (lblTopWalls [i' j]);  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: if (i < 16)  	this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i' j].SouthWall);  else  	this.dicSelectedWalls.Add (lblTopWalls [i' j]' cells [i - 1' j].NorthWall);  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,mapDesigner,The following statement contains a magic number: this.lblTopWalls [i' j].Location = new Point (j * iCwWidth + iWallWidth' (16 - i) * iCwWidth);  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (result == System.Windows.Forms.DialogResult.OK) {  	world.ValidateCells ();  	int['] cells = new int[16' 16];  	for (int i = 0; i < 17; i++) {  		for (int j = 0; j < 17; j++) {  			if (j < 16) {  				if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i' j] |= 4;  				if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  					cells [i - 1' j] |= 1;  			}  			if (i < 16) {  				if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j] |= 8;  				}  				if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  					cells [i' j - 1] |= 2;  				}  			}  		}  	}  	try {  		world.SetMaze (cells);  		ObjectSaver.Save (fdSave.FileName' world);  		//MessageBox.Show(this' "Your map has been saved."' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		this.Close ();  	}  	catch {  		MessageBox.Show (this' "Something goes wrong. We couldnt save your map.\nPlease try again."' "Oops"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int i = 0; i < 17; i++) {  	for (int j = 0; j < 17; j++) {  		if (j < 16) {  			if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i' j] |= 4;  			if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  				cells [i - 1' j] |= 1;  		}  		if (i < 16) {  			if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j] |= 8;  			}  			if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  				cells [i' j - 1] |= 2;  			}  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: for (int j = 0; j < 17; j++) {  	if (j < 16) {  		if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i' j] |= 4;  		if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  			cells [i - 1' j] |= 1;  	}  	if (i < 16) {  		if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j] |= 8;  		}  		if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  			cells [i' j - 1] |= 2;  		}  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (j < 16) {  	if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  		cells [i' j] |= 4;  	if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  		cells [i - 1' j] |= 1;  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (j < 16) {  	if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  		cells [i' j] |= 4;  	if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  		cells [i - 1' j] |= 1;  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (j < 16) {  	if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  		cells [i' j] |= 4;  	if (i > 0 && dicSelectedWalls [lblTopWalls [i' j]])  		cells [i - 1' j] |= 1;  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  	cells [i' j] |= 4;  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (i < 16 && dicSelectedWalls [lblTopWalls [i' j]])  	cells [i' j] |= 4;  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: cells [i' j] |= 4;  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (i < 16) {  	if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j] |= 8;  	}  	if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j - 1] |= 2;  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (i < 16) {  	if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j] |= 8;  	}  	if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j - 1] |= 2;  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (i < 16) {  	if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j] |= 8;  	}  	if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j - 1] |= 2;  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (i < 16) {  	if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j] |= 8;  	}  	if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  		cells [i' j - 1] |= 2;  	}  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  	cells [i' j] |= 8;  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (j < 16 && dicSelectedWalls [lblLeftWalls [i' j]]) {  	cells [i' j] |= 8;  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: cells [i' j] |= 8;  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: if (j > 0 && dicSelectedWalls [lblLeftWalls [i' j]]) {  	cells [i' j - 1] |= 2;  }  
Magic Number,MicroMouseSimul,mapDesigner,C:\repos\emech-en_Micromouse-Simulator\MicroMouseSimul\mapDesigner.cs,btnSave_Click,The following statement contains a magic number: cells [i' j - 1] |= 2;  
