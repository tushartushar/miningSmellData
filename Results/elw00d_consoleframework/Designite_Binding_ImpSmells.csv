Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Binding,BindingBase,C:\repos\elw00d_consoleframework\Binding\BindingBase.cs,Bind,Cyclomatic complexity of the method is 22
Long Parameter List,Binding,BindingBase,C:\repos\elw00d_consoleframework\Binding\BindingBase.cs,BindingBase,The method has 5 parameters. Parameters: target' targetProperty' source' sourceProperty' mode
Long Parameter List,Binding,BindingBase,C:\repos\elw00d_consoleframework\Binding\BindingBase.cs,BindingBase,The method has 6 parameters. Parameters: target' targetProperty' source' sourceProperty' mode' settings
Long Statement,Binding,BindingBase,C:\repos\elw00d_consoleframework\Binding\BindingBase.cs,Bind,The length of the statement  "                    if (null == adapter && targetPropertyInfo.GetGetMethod() == null) throw new Exception( "Target property getter not found" ); " is 124.
Long Statement,Binding,BindingSettingsBase,C:\repos\elw00d_consoleframework\Binding\BindingSettingsBase.cs,RegisterConverter,The length of the statement  "                    throw new Exception( String.Format( "Converter for {0} -> {1} classes is already registered."' first.Name' second.Name ) ); " is 123.
Missing Default,Binding,BindingBase,C:\repos\elw00d_consoleframework\Binding\BindingBase.cs,ApplyChanges,The following switch statement is missing a default case: switch (args.Type) {                  case ListChangedEventType.ItemsInserted: {                      for (int i = 0; i < args.Count; i++) {                          destList.Insert(args.Index + i' srcList[args.Index + i]);                      }                      break;                  }                  case ListChangedEventType.ItemsRemoved:                      for (int i = 0; i < args.Count; i++)                          destList.RemoveAt(args.Index);                      break;                  case ListChangedEventType.ItemReplaced: {                      destList[args.Index] = srcList[args.Index];                      break;                  }              }
Missing Default,Binding,BindingBase,C:\repos\elw00d_consoleframework\Binding\BindingBase.cs,ConnectSourceAndTarget,The following switch statement is missing a default case: switch ( realMode ) {                  case BindingMode.OneTime:                      break;                  case BindingMode.OneWay:                      source.PropertyChanged += SourceListener;                      break;                  case BindingMode.OneWayToSource:                      if (null == adapter) {                          ((INotifyPropertyChanged)target).PropertyChanged += TargetListener;                      } else {                          targetListenerWrapper = adapter.AddPropertyChangedListener(target' TargetListener);                      }                      break;                  case BindingMode.TwoWay:                      source.PropertyChanged += SourceListener;                      //                      if (null == adapter) {                          ((INotifyPropertyChanged)target).PropertyChanged += TargetListener;                      } else {                          targetListenerWrapper = adapter.AddPropertyChangedListener(target' TargetListener);                      }                      break;              }
