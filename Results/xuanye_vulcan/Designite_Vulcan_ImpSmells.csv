Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The method has 251 lines of code.
Long Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetTypeDeserializer,The method has 317 lines of code.
Complex Method,Vulcan.DataAccess.ORMapping.MSSql,MSSqlSQLBuilder,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MSSql\MSSqlSQLBuilder.cs,BuildInsertSql,Cyclomatic complexity of the method is 8
Complex Method,Vulcan.DataAccess.ORMapping.MSSql,MSSqlSQLBuilder,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MSSql\MSSqlSQLBuilder.cs,BuildInsertSql,Cyclomatic complexity of the method is 8
Complex Method,Vulcan.DataAccess.ORMapping,EntityReflect,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\EntityReflect.cs,GetDefineInfoFromType,Cyclomatic complexity of the method is 11
Complex Method,Vulcan.DataAccess.ORMapping.MySql,MySqlSQLBuilder,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MySql\MySqlSQLBuilder.cs,BuildInsertSql,Cyclomatic complexity of the method is 8
Complex Method,Vulcan.DataAccess.ORMapping.MySql,MySqlSQLBuilder,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MySql\MySqlSQLBuilder.cs,BuildInsertSql,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 32
Complex Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 66
Complex Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,LoadLocal,Cyclomatic complexity of the method is 17
Complex Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,StoreLocal,Cyclomatic complexity of the method is 17
Complex Method,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,Cyclomatic complexity of the method is 34
Complex Method,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddDynamicParams,Cyclomatic complexity of the method is 9
Complex Method,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,Cyclomatic complexity of the method is 12
Long Parameter List,Vulcan.DataAccess.ORMapping.MSSql,MSSqlRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MSSql\MSSqlRepository.cs,PageGet,The method has 7 parameters.
Long Parameter List,Vulcan.DataAccess.ORMapping.MySql,MySqlRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MySql\MySqlRepository.cs,PagedQuery,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Execute,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,QueryMultiple,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,QueryInternal,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,MultiMap,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,MultiMapImpl,The method has 10 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateDeserializers,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetCacheInfo,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetDeserializer,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetDapperRowDeserializer,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,SetupCommand,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,ExecuteCommand,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetStructDeserializer,The method has 8 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetTypeDeserializer,The method has 10 parameters.
Long Parameter List,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Add,The method has 5 parameters.
Long Parameter List,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetMember,The method has 5 parameters.
Long Statement,Vulcan.DataAccess.ORMapping.MSSql,MSSqlRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MSSql\MSSqlRepository.cs,PageGet,The length of the statement  "	string sql = string.Format (" select {0}'ROW_NUMBER() OVER({1}) AS RowNumber  from {2} where 1=1  {3} "' sqlColumns' sqlOrder' sqlTable' sqlCondition); " is 151.
Long Statement,Vulcan.DataAccess.ORMapping.MSSql,MSSqlRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MSSql\MSSqlRepository.cs,PageGet,The length of the statement  "	string pageSql = string.Format (" select * from ({0}) as pagetable where RowNumber >={1}  and RowNumber<= {2}  "' sql' pageStartIndex' pageEndIndex); " is 149.
Long Statement,Vulcan.DataAccess.ORMapping,EntityReflect,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\EntityReflect.cs,GetDefineInfoFromType,The length of the statement  "	TableNameAttribute tableAttribute = (TableNameAttribute)Attribute.GetCustomAttribute (type' typeof(TableNameAttribute)); " is 120.
Long Statement,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Insert,The length of the statement  "		ret = mgr.Connection.Query<long> (entity.GetInsertSQL ()' entity' mgr.Transaction' false' null' CommandType.Text).Single (); " is 124.
Long Statement,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The length of the statement  "		list = mgr.Connection.Query<T' T1' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList (); " is 126.
Long Statement,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The length of the statement  "		list = mgr.Connection.Query<T' T1' T2' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList (); " is 130.
Long Statement,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The length of the statement  "		list = mgr.Connection.Query<T' T1' T2' T3' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList (); " is 134.
Long Statement,Vulcan.DataAccess.ORMapping.MySql,MySqlRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\MySql\MySqlRepository.cs,PagedQuery,The length of the statement  "	string sql = string.Format (" select {0} from {1} where 1=1  {2} {3} limit {4}'{5} ;"' sqlColumns' sqlTable' sqlCondition' sqlOrder' pageStartIndex' currentPageCount); " is 167.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetBindByName,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null) { " is 193.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetCachedSQL,The length of the statement  "	var data = _queryCache.Select (pair => Tuple.Create (pair.Key.connectionString' pair.Key.sql' pair.Value.GetHitCount ())); " is 122.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,LookupDbType,The length of the statement  "	throw new NotSupportedException (string.Format ("The member {0} of type {1} cannot be used as a parameter value"' name' type)); " is 127.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Execute,The length of the statement  "	return ExecuteCommand (cnn' transaction' sql' (object)param == null ? null : info.ParamReader' (object)param' commandTimeout' commandType); " is 139.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,QueryMultiple,The length of the statement  "	Identity identity = new Identity (sql' commandType' cnn' typeof(GridReader)' (object)param == null ? null : ((object)param).GetType ()' null); " is 142.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 181.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,MultiMap,The length of the statement  "	var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' null' null); " is 182.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,MultiMapImpl,The length of the statement  "	identity = identity ?? new Identity (sql' commandType' cnn' typeof(TFirst)' (object)param == null ? null : ((object)param).GetType ()' new[] { " is 142.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,MultiMapImpl,The length of the statement  "		if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) { " is 143.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,MultiMapImpl,The length of the statement  "		Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (deserializer.Func' otherDeserializers' map); " is 164.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)); " is 158.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)); " is 204.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)); " is 248.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)); " is 292.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r)); " is 340.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetCacheInfo,The length of the statement  "			else if (typeof(IEnumerable<KeyValuePair<string' object>>).IsAssignableFrom (identity.parametersType) && typeof(System.Dynamic.IDynamicMetaObjectProvider).IsAssignableFrom (identity.parametersType)) { " is 200.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetDeserializer,The length of the statement  "	if (!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))) { " is 193.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The length of the statement  "				command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)"); " is 125.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,FilterParameters,The length of the statement  "	return parameters.Where (p => Regex.IsMatch (sql' @"[?@:]" + p.Name + "([^a-zA-Z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline)); " is 143.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "			if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf ("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) { " is 276.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "		if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 194.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "				il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 123.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetStructDeserializer,The length of the statement  "	// no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				string proposedTypes = "(" + String.Join ("' "' types.Select ((t' i) => t.FullName + " " + names [i]).ToArray ()) + ")"; " is 120.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				throw new InvalidOperationException (String.Format ("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 188.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "	var members = (specializedConstructor != null ? names.Select (n => typeMap.GetConstructorParameter (specializedConstructor' n)) : names.Select (n => typeMap.GetMember (n))).ToList (); " is 183.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); " is 168.
Long Statement,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetOperator,The length of the statement  "	return ResolveOperator (fromMethods = from.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (toMethods = to.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (fromMethods' from' to' "op_Explicit") ?? ResolveOperator (toMethods' from' to' "op_Explicit"); " is 354.
Long Statement,Dapper,DbString,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameter,The length of the statement  "	param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetPropertySetter,The length of the statement  "	return propertyInfo.DeclaringType == type ? propertyInfo.GetSetMethod (true) : propertyInfo.DeclaringType.GetProperty (propertyInfo.Name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetSetMethod (true); " is 228.
Long Statement,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetSettableProps,The length of the statement  "	return t.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where (p => GetPropertySetter (p' t) != null).ToList (); " is 150.
Long Statement,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,FindConstructor,The length of the statement  "	foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) { " is 142.
Long Statement,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,FindConstructor,The length of the statement  "			if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))) " is 172.
Long Statement,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetConstructorParameter,The length of the statement  "	return new SimpleMemberMap (columnName' parameters.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 145.
Long Statement,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetMember,The length of the statement  "	var property = _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 218.
Long Statement,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetMember,The length of the statement  "	var field = _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 207.
Complex Conditional,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null"  is complex.
Complex Conditional,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,FindConstructor,The conditional expression  "unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))"  is complex.
Empty Catch Block,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,QueryMultiple,The method has an empty catch block.
Empty Catch Block,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,QueryInternal,The method has an empty catch block.
Magic Number,Vulcan.Common,CryptographyManager,C:\repos\xuanye_vulcan\src\Vulcan\Common\CryptographyManager.cs,AESEncrypt,The following statement contains a magic number: return CryptographyManager.AESEncrypt (toEncrypt' rfc2898DeriveBytes.GetBytes (32)' rfc2898DeriveBytes.GetBytes (16));  
Magic Number,Vulcan.Common,CryptographyManager,C:\repos\xuanye_vulcan\src\Vulcan\Common\CryptographyManager.cs,AESEncrypt,The following statement contains a magic number: return CryptographyManager.AESEncrypt (toEncrypt' rfc2898DeriveBytes.GetBytes (32)' rfc2898DeriveBytes.GetBytes (16));  
Magic Number,Vulcan.Common,CryptographyManager,C:\repos\xuanye_vulcan\src\Vulcan\Common\CryptographyManager.cs,RFCDB,The following statement contains a magic number: return new Rfc2898DeriveBytes (password' CryptographyManager._slat' 1024);  
Magic Number,Vulcan.Common,CryptographyManager,C:\repos\xuanye_vulcan\src\Vulcan\Common\CryptographyManager.cs,AESDecrypt,The following statement contains a magic number: return CryptographyManager.AESDecrypt (toDecrypt' rfc2898DeriveBytes.GetBytes (32)' rfc2898DeriveBytes.GetBytes (16));  
Magic Number,Vulcan.Common,CryptographyManager,C:\repos\xuanye_vulcan\src\Vulcan\Common\CryptographyManager.cs,AESDecrypt,The following statement contains a magic number: return CryptographyManager.AESDecrypt (toDecrypt' rfc2898DeriveBytes.GetBytes (32)' rfc2898DeriveBytes.GetBytes (16));  
Magic Number,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The following statement contains a magic number: using (ConnectionManager mgr = GetConnection ()) {  	list = mgr.Connection.Query<T' T1' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList ();  }  
Magic Number,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The following statement contains a magic number: list = mgr.Connection.Query<T' T1' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList ();  
Magic Number,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The following statement contains a magic number: using (ConnectionManager mgr = GetConnection ()) {  	list = mgr.Connection.Query<T' T1' T2' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList ();  }  
Magic Number,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The following statement contains a magic number: list = mgr.Connection.Query<T' T1' T2' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList ();  
Magic Number,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The following statement contains a magic number: using (ConnectionManager mgr = GetConnection ()) {  	list = mgr.Connection.Query<T' T1' T2' T3' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList ();  }  
Magic Number,Vulcan.DataAccess.ORMapping,BaseRepository,C:\repos\xuanye_vulcan\src\Vulcan\DataAccess\ORMapping\BaseRepository.cs,Query,The following statement contains a magic number: list = mgr.Connection.Query<T' T1' T2' T3' T> (sql' parse' paras' mgr.Transaction' false' splitOn' 60000' CommandType.Text).ToList ();  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: unchecked {  	int colCount = reader.FieldCount' hash = colCount;  	for (int i = 0; i < colCount; i++) {  		// binding code is only interested in names - not types  		object tmp = reader.GetName (i);  		hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  	}  	return hash;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: for (int i = 0; i < colCount; i++) {  	// binding code is only interested in names - not types  	object tmp = reader.GetName (i);  	hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  				var grp = match.Value;  				var sb = new StringBuilder ("(").Append (grp).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (grp).Append (i);  				}  				return sb.Append (')').ToString ();  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  			var grp = match.Value;  			var sb = new StringBuilder ("(").Append (grp).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (grp).Append (i);  			}  			return sb.Append (')').ToString ();  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	}  	else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	}  	else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: listParam.Size = 4000;  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (item != null && ((string)item).Length > 4000) {  	listParam.Size = -1;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' "(SELECT NULL WHERE 1 = 0)");  }  else {  	command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  		var grp = match.Value;  		var sb = new StringBuilder ("(").Append (grp).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (grp).Append (i);  		}  		return sb.Append (')').ToString ();  	});  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' @"[?@:]" + Regex.Escape (namePrefix)' match =>  {  	var grp = match.Value;  	var sb = new StringBuilder ("(").Append (grp).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (grp).Append (i);  	}  	return sb.Append (')').ToString ();  });  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (grp).Append (i);  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf ("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]  		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (filterParams) {  		if (identity.sql.IndexOf ("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf (":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0 && identity.sql.IndexOf ("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0) {  			// can't see the parameter in the text (even in a comment' etc) - burn it with fire  			continue;  		}  	}  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [dbstring]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [dbstring] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [dbstring] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]  		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]  	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]  	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,LoadLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloc_S' (byte)index);  }  else {  	il.Emit (OpCodes.Ldloc' (short)index);  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,StoreLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Stloc_S' (byte)index);  }  else {  	il.Emit (OpCodes.Stloc' (short)index);  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloca_S' (byte)index);  }  else {  	il.Emit (OpCodes.Ldloca' (short)index);  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,SqlMapper,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	if (dbType == null && val != null)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Value = val ?? DBNull.Value;  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Value = val ?? DBNull.Value;  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameters,The following statement contains a magic number: p.Size = 4000;  
Magic Number,Dapper,DbString,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,AddParameter,The following statement contains a magic number: param.Size = 4000;  
Magic Number,Dapper,DefaultTypeMap,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) {  	ParameterInfo[] ctorParameters = ctor.GetParameters ();  	if (ctorParameters.Length == 0)  		return ctor;  	if (ctorParameters.Length != types.Length)  		continue;  	int i = 0;  	for (; i < ctorParameters.Length; i++) {  		if (!String.Equals (ctorParameters [i].Name' names [i]' StringComparison.OrdinalIgnoreCase))  			break;  		if (types [i] == typeof(byte[]) && ctorParameters [i].ParameterType.FullName == SqlMapper.LinqBinary)  			continue;  		var unboxedType = Nullable.GetUnderlyingType (ctorParameters [i].ParameterType) ?? ctorParameters [i].ParameterType;  		if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string)))  			break;  	}  	if (i == ctorParameters.Length)  		return ctor;  }  
Missing Default,Dapper,DynamicParameters,C:\repos\xuanye_vulcan\src\Vulcan\SqlMapper.cs,Clean,The following switch statement is missing a default case: switch (name [0]) {  case '@':  case ':':  case '?':  	return name.Substring (1);  }  
