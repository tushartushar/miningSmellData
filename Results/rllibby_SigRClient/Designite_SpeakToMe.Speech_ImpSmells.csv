Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SpeakToMe.Speech,RuleManager,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\RuleManager.cs,LocateMatchingRule,Cyclomatic complexity of the method is 12
Complex Method,SpeakToMe.Speech,TokenManager,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\TokenManager.cs,CreateQuotedPhraseTokens,Cyclomatic complexity of the method is 8
Complex Method,SpeakToMe.Speech.Tokens.Queries,TokenQueryQuantity,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQuantity.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,SpeakToMe.Speech.Tokens.Queries,TokenQueryAddress,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryAddress.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SpeakToMe.Speech.Tokens.Queries,TokenQueryBalance,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryBalance.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SpeakToMe.Speech.Tokens.Queries,TokenQueryPhoneNo,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryPhoneNo.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SpeakToMe.Speech.Tokens.Queries,TokenQueryTop,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryTop.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,Cyclomatic complexity of the method is 38
Complex Method,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,Cyclomatic complexity of the method is 13
Complex Method,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,Cyclomatic complexity of the method is 32
Complex Method,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,Parse,Cyclomatic complexity of the method is 16
Complex Method,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,Cyclomatic complexity of the method is 32
Complex Method,SpeakToMe.Speech.Tokens.Temporal,TokenTemporal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenTemporal.cs,Parse,Cyclomatic complexity of the method is 16
Complex Method,SpeakToMe.Speech.Tokens,Token,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Token.cs,Parse,Cyclomatic complexity of the method is 8
Long Parameter List,SpeakToMe.Speech,CommandProcessor,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\CommandProcessor.cs,ProcessCommand,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,AddressRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\AddressRules.cs,AddressResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,AddressRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\AddressRules.cs,AddressResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,AddressRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\AddressRules.cs,AddressResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,AddressRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\AddressRules.cs,AddressResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,AddressRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\AddressRules.cs,AddressResponse,The method has 6 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,AddressRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\AddressRules.cs,AddressResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,AddressRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\AddressRules.cs,AddressResponse,The method has 6 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 6 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 6 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,BalanceRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\BalanceRules.cs,BalanceResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,CashFlowRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\CashFlowRules.cs,CashFlowResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,ItemRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\ItemRules.cs,ItemResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,ItemRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\ItemRules.cs,ItemResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,ItemRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\ItemRules.cs,ItemResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,ItemRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\ItemRules.cs,ItemResponse,The method has 6 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,PhoneNoRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\PhoneNoRules.cs,PhoneNoResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,PhoneNoRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\PhoneNoRules.cs,PhoneNoResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,PhoneNoRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\PhoneNoRules.cs,PhoneNoResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,PhoneNoRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\PhoneNoRules.cs,PhoneNoResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,PhoneNoRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\PhoneNoRules.cs,PhoneNoResponse,The method has 6 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,PhoneNoRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\PhoneNoRules.cs,PhoneNoResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,PhoneNoRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\PhoneNoRules.cs,PhoneNoResponse,The method has 6 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,TopRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\TopRules.cs,TopResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,TopRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\TopRules.cs,TopResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,TopRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\TopRules.cs,TopResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Rules,TopRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Rules\TopRules.cs,TopResponse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Tokens.Queries,TokenQueryQuantity,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQuantity.cs,Parse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Tokens.Queries,TokenQueryAddress,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryAddress.cs,Parse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Tokens.Queries,TokenQueryBalance,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryBalance.cs,Parse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Tokens.Queries,TokenQueryPhoneNo,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryPhoneNo.cs,Parse,The method has 5 parameters.
Long Parameter List,SpeakToMe.Speech.Tokens.Queries,TokenQueryTop,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Queries\TokenQueryTop.cs,Parse,The method has 7 parameters.
Long Statement,SpeakToMe.Speech,TokenManager,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\TokenManager.cs,CreateQuotedPhraseTokens,The length of the statement  "			match = results.Where (r => word.Start >= r.Start && (word.Start + word.Length) <= (r.Start + r.Length)).FirstOrDefault (); " is 123.
Long Statement,SpeakToMe.Speech.Questions,QuestionManager,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Questions\QuestionManager.cs,CheckForActiveQuestion,The length of the statement  "		if ((mode == question.Mode) && string.Equals (userId' question.UserId) && string.Equals (conversationId' question.ConversationId)) { " is 132.
Long Statement,SpeakToMe.Speech.Tokens.Rules,DateRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Rules\DateRules.cs,GetSeriesFromTokens,The length of the statement  "		endDate = new DateTime (DateTime.Now.Year' (int)month.Value' new DateTime (DateTime.Now.Year' (int)month.Value + 1' 1).AddDays (-1).Day); " is 137.
Long Statement,SpeakToMe.Speech.Tokens.Rules,DateRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Rules\DateRules.cs,GetSeriesFromTokens,The length of the statement  "		endDate = new DateTime (DateTime.Now.Year + 1' (int)month.Value' new DateTime (DateTime.Now.Year' (int)month.Value + 1' 1).AddDays (-1).Day); " is 141.
Long Statement,SpeakToMe.Speech.Tokens.Rules,DateRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Rules\DateRules.cs,GetSeriesFromTokens,The length of the statement  "		endDate = new DateTime (DateTime.Now.Year' (int)month.Value' new DateTime (DateTime.Now.Year' (int)month.Value + 1' 1).AddDays (-1).Day); " is 137.
Long Statement,SpeakToMe.Speech.Tokens.Rules,DateRules,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Rules\DateRules.cs,GetSeriesFromTokens,The length of the statement  "		endDate = new DateTime (DateTime.Now.Year + 1' (int)month.Value' new DateTime (DateTime.Now.Year' (int)month.Value + 1' 1).AddDays (-1).Day); " is 141.
Long Statement,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,Parse,The length of the statement  "				Value = isPast ? GetPastDateForDay ((DayOfWeek)Enum.Parse (typeof(DayOfWeek)' this.Words [0])) : GetFutureDateForDay ((DayOfWeek)Enum.Parse (typeof(DayOfWeek)' this.Words [0]))' " is 177.
Long Statement,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,Parse,The length of the statement  "					Value = isPast ? GetPastDateForDay ((DayOfWeek)Enum.Parse (typeof(DayOfWeek)' this.Words [0])) : GetFutureDateForDay ((DayOfWeek)Enum.Parse (typeof(DayOfWeek)' this.Words [0])) " is 176.
Long Statement,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenOrdinal.cs,Parse,The length of the statement  "				if ((index + word.Length == input.Length && input [index - 1] == ' ') || (input [index - 1] == ' ' && input [index + word.Length] == ' ')) { " is 140.
Long Statement,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,LoadTokens,The length of the statement  "		if (type.Namespace == "SmartHome.SpeechProcessor.Tokens.Temporal.TemporalParts" && type.Name.StartsWith ("Token") && type.Name != "TokenDayOfWeek" && type.Name != "TokenMonth" && type.Name != "TokenOrdinal" && type.Name != "TokenRelativeTemporalOrdinal") { " is 256.
Long Statement,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,LoadTokens,The length of the statement  "		if (type.Namespace == "SpeakToMe.Speech.Tokens.Temporal.TemporalParts" && type.Name.StartsWith ("Token") && type.Name != "TokenDayOfWeek" && type.Name != "TokenMonth" && type.Name != "TokenOrdinal" && type.Name != "TokenRelativeTemporalOrdinal") { " is 247.
Long Statement,SpeakToMe.Speech.Tokens.Temporal,TokenTemporal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenTemporal.cs,LoadTokens,The length of the statement  "		if (type.Namespace == "SpeakToMe.Speech.Tokens.Temporal.TemporalParts" && type.Name.StartsWith ("Token") && type.Name != "TokenDayOfWeek" && type.Name != "TokenMonth" && type.Name != "TokenOrdinal" && type.Name != "TokenRelativeTemporalOrdinal") { " is 247.
Long Statement,SpeakToMe.Speech.Tokens.Verbs,TokenRemindMeAt,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Verbs\TokenRemindMeAt.cs,Parse,The length of the statement  "				string leftString = (remainder.Length <= temporalToken.Length) ? "" : remainder.Substring (temporalToken.Length + 1).Replace ("am"' "").Replace ("pm"' "").Replace ("to"' "").Trim (); " is 182.
Long Statement,SpeakToMe.Speech.Tokens.Verbs,TokenRemindMeTo,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Verbs\TokenRemindMeTo.cs,Parse,The length of the statement  "				string leftString = remainder.Substring (0' remainder.Length - temporalToken.Length - 3).Replace ("am"' "").Replace ("pm"' "").Replace ("at"' ""); " is 146.
Complex Conditional,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenOrdinal.cs,Parse,The conditional expression  "(index + word.Length == input.Length && input [index - 1] == ' ') || (input [index - 1] == ' ' && input [index + word.Length] == ' ')"  is complex.
Complex Conditional,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,LoadTokens,The conditional expression  "type.Namespace == "SmartHome.SpeechProcessor.Tokens.Temporal.TemporalParts" && type.Name.StartsWith ("Token") && type.Name != "TokenDayOfWeek" && type.Name != "TokenMonth" && type.Name != "TokenOrdinal" && type.Name != "TokenRelativeTemporalOrdinal""  is complex.
Complex Conditional,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,LoadTokens,The conditional expression  "type.Namespace == "SpeakToMe.Speech.Tokens.Temporal.TemporalParts" && type.Name.StartsWith ("Token") && type.Name != "TokenDayOfWeek" && type.Name != "TokenMonth" && type.Name != "TokenOrdinal" && type.Name != "TokenRelativeTemporalOrdinal""  is complex.
Complex Conditional,SpeakToMe.Speech.Tokens.Temporal,TokenTemporal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenTemporal.cs,LoadTokens,The conditional expression  "type.Namespace == "SpeakToMe.Speech.Tokens.Temporal.TemporalParts" && type.Name.StartsWith ("Token") && type.Name != "TokenDayOfWeek" && type.Name != "TokenMonth" && type.Name != "TokenOrdinal" && type.Name != "TokenRelativeTemporalOrdinal""  is complex.
Empty Catch Block,SpeakToMe.Speech,RuleManager,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\RuleManager.cs,LoadRules,The method has an empty catch block.
Empty Catch Block,SpeakToMe.Speech,TokenManager,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\TokenManager.cs,TokenizeInput,The method has an empty catch block.
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,IsInQuotes,The following statement contains a magic number: for (int i = 0; i < quotePoints.Count; i++) {  	if (i < quotePoints.Count - 1) {  		if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  			return true;  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,IsInQuotes,The following statement contains a magic number: if (i < quotePoints.Count - 1) {  	if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  		return true;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,IsInQuotes,The following statement contains a magic number: if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  	return true;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,GetFutureDateForDay,The following statement contains a magic number: if (days > 7) {  	days = days - 7;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,GetFutureDateForDay,The following statement contains a magic number: if (days > 7) {  	days = days - 7;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,GetFutureDateForDay,The following statement contains a magic number: days = days - 7;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayOfWeek,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenDayOfWeek.cs,GetPastDateForDay,The following statement contains a magic number: return DateTime.Now.AddDays (-7 + ((int)day - (int)DateTime.Now.DayOfWeek));  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: foreach (var word in this.Words) {  	int index = input.IndexOf (word);  	if (index > -1 && !IsInQuotes (index' quotePoints)) {  		string refString = this.Words [0];  		int retValue = 0;  		switch (refString) {  		case "january":  			retValue = 1;  			break;  		case "february":  			retValue = 2;  			break;  		case "march":  			retValue = 3;  			break;  		case "april":  			retValue = 4;  			break;  		case "may":  			retValue = 5;  			break;  		case "june":  			retValue = 6;  			break;  		case "july":  			retValue = 7;  			break;  		case "august":  			retValue = 8;  			break;  		case "september":  			retValue = 9;  			break;  		case "october":  			retValue = 10;  			break;  		case "november":  			retValue = 11;  			break;  		case "december":  			retValue = 12;  			break;  		}  		results.Add (new TokenResult {  			Length = word.Length'  			Start = index'  			TokenType = this.GetType ().ToString ()'  			Value = retValue'  			Token = new TokenMonth {  				Value = retValue  			}  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: if (index > -1 && !IsInQuotes (index' quotePoints)) {  	string refString = this.Words [0];  	int retValue = 0;  	switch (refString) {  	case "january":  		retValue = 1;  		break;  	case "february":  		retValue = 2;  		break;  	case "march":  		retValue = 3;  		break;  	case "april":  		retValue = 4;  		break;  	case "may":  		retValue = 5;  		break;  	case "june":  		retValue = 6;  		break;  	case "july":  		retValue = 7;  		break;  	case "august":  		retValue = 8;  		break;  	case "september":  		retValue = 9;  		break;  	case "october":  		retValue = 10;  		break;  	case "november":  		retValue = 11;  		break;  	case "december":  		retValue = 12;  		break;  	}  	results.Add (new TokenResult {  		Length = word.Length'  		Start = index'  		TokenType = this.GetType ().ToString ()'  		Value = retValue'  		Token = new TokenMonth {  			Value = retValue  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 2;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 3;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 4;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 5;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 6;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 7;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 8;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 9;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 10;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 11;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following statement contains a magic number: retValue = 12;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,IsInQuotes,The following statement contains a magic number: for (int i = 0; i < quotePoints.Count; i++) {  	if (i < quotePoints.Count - 1) {  		if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  			return true;  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,IsInQuotes,The following statement contains a magic number: if (i < quotePoints.Count - 1) {  	if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  		return true;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,IsInQuotes,The following statement contains a magic number: if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  	return true;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenOrdinal.cs,IsInQuotes,The following statement contains a magic number: for (int i = 0; i < quotePoints.Count; i++) {  	if (i < quotePoints.Count - 1) {  		if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  			return true;  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenOrdinal.cs,IsInQuotes,The following statement contains a magic number: if (i < quotePoints.Count - 1) {  	if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  		return true;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenOrdinal.cs,IsInQuotes,The following statement contains a magic number: if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  	return true;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenRelativeTemporalOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,IsInQuotes,The following statement contains a magic number: for (int i = 0; i < quotePoints.Count; i++) {  	if (i < quotePoints.Count - 1) {  		if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  			return true;  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenRelativeTemporalOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,IsInQuotes,The following statement contains a magic number: if (i < quotePoints.Count - 1) {  	if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  		return true;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenRelativeTemporalOrdinal,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,IsInQuotes,The following statement contains a magic number: if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  	return true;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayBeforeYesterday,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: if (index > -1 && !this.IsInQuotes (index' quotePoints)) {  	results.Add (new TokenResult {  		Length = this.Words [0].Length'  		Start = index'  		TokenType = typeof(TokenDayOfWeek).ToString ()'  		Value = DateTime.Now.AddDays (-2)'  		Token = new TokenDayOfWeek {  			Value = DateTime.Now.AddDays (-2)  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayBeforeYesterday,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: if (index > -1 && !this.IsInQuotes (index' quotePoints)) {  	results.Add (new TokenResult {  		Length = this.Words [0].Length'  		Start = index'  		TokenType = typeof(TokenDayOfWeek).ToString ()'  		Value = DateTime.Now.AddDays (-2)'  		Token = new TokenDayOfWeek {  			Value = DateTime.Now.AddDays (-2)  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayBeforeYesterday,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: results.Add (new TokenResult {  	Length = this.Words [0].Length'  	Start = index'  	TokenType = typeof(TokenDayOfWeek).ToString ()'  	Value = DateTime.Now.AddDays (-2)'  	Token = new TokenDayOfWeek {  		Value = DateTime.Now.AddDays (-2)  	}  });  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayBeforeYesterday,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: results.Add (new TokenResult {  	Length = this.Words [0].Length'  	Start = index'  	TokenType = typeof(TokenDayOfWeek).ToString ()'  	Value = DateTime.Now.AddDays (-2)'  	Token = new TokenDayOfWeek {  		Value = DateTime.Now.AddDays (-2)  	}  });  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayAfterTomorrow,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: if (index > -1 && !this.IsInQuotes (index' quotePoints)) {  	results.Add (new TokenResult {  		Length = this.Words [0].Length'  		Start = index'  		TokenType = typeof(TokenDayOfWeek).ToString ()'  		Value = DateTime.Now.AddDays (2)'  		Token = new TokenDayOfWeek {  			Value = DateTime.Now.AddDays (2)  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayAfterTomorrow,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: if (index > -1 && !this.IsInQuotes (index' quotePoints)) {  	results.Add (new TokenResult {  		Length = this.Words [0].Length'  		Start = index'  		TokenType = typeof(TokenDayOfWeek).ToString ()'  		Value = DateTime.Now.AddDays (2)'  		Token = new TokenDayOfWeek {  			Value = DateTime.Now.AddDays (2)  		}  	});  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayAfterTomorrow,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: results.Add (new TokenResult {  	Length = this.Words [0].Length'  	Start = index'  	TokenType = typeof(TokenDayOfWeek).ToString ()'  	Value = DateTime.Now.AddDays (2)'  	Token = new TokenDayOfWeek {  		Value = DateTime.Now.AddDays (2)  	}  });  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenDayAfterTomorrow,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenRelativeTemporalOrdinal.cs,Parse,The following statement contains a magic number: results.Add (new TokenResult {  	Length = this.Words [0].Length'  	Start = index'  	TokenType = typeof(TokenDayOfWeek).ToString ()'  	Value = DateTime.Now.AddDays (2)'  	Token = new TokenDayOfWeek {  		Value = DateTime.Now.AddDays (2)  	}  });  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: while (input.IndexOf ("/"' index + 1) > -1) {  	if (input.IndexOf ("/"' index + 1) > -1) {  		int localIndex = input.IndexOf ("/"' index + 1);  		int start = FindWordStart (input' localIndex);  		int length = GetLength (input' start);  		string word = input.Substring (start' length);  		var parts = word.Split ('/');  		if (!this.IsInQuotes (index + 1' quotePoints)) {  			if (parts.Count () == 3) {  				int month;  				int day;  				int year;  				if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  					var dt = new DateTime (year' month' day);  					return new List<TokenResult> {  						new TokenResult {  							Length = length'  							Start = start - 1'  							TokenType = this.GetType ().ToString ()'  							Value = dt'  							Token = new TokenSpecifiedDate {  								Value = dt  							}  						}  					};  				}  			}  		}  		index += length;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: while (input.IndexOf ("/"' index + 1) > -1) {  	if (input.IndexOf ("/"' index + 1) > -1) {  		int localIndex = input.IndexOf ("/"' index + 1);  		int start = FindWordStart (input' localIndex);  		int length = GetLength (input' start);  		string word = input.Substring (start' length);  		var parts = word.Split ('/');  		if (!this.IsInQuotes (index + 1' quotePoints)) {  			if (parts.Count () == 3) {  				int month;  				int day;  				int year;  				if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  					var dt = new DateTime (year' month' day);  					return new List<TokenResult> {  						new TokenResult {  							Length = length'  							Start = start - 1'  							TokenType = this.GetType ().ToString ()'  							Value = dt'  							Token = new TokenSpecifiedDate {  								Value = dt  							}  						}  					};  				}  			}  		}  		index += length;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: if (input.IndexOf ("/"' index + 1) > -1) {  	int localIndex = input.IndexOf ("/"' index + 1);  	int start = FindWordStart (input' localIndex);  	int length = GetLength (input' start);  	string word = input.Substring (start' length);  	var parts = word.Split ('/');  	if (!this.IsInQuotes (index + 1' quotePoints)) {  		if (parts.Count () == 3) {  			int month;  			int day;  			int year;  			if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  				var dt = new DateTime (year' month' day);  				return new List<TokenResult> {  					new TokenResult {  						Length = length'  						Start = start - 1'  						TokenType = this.GetType ().ToString ()'  						Value = dt'  						Token = new TokenSpecifiedDate {  							Value = dt  						}  					}  				};  			}  		}  	}  	index += length;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: if (input.IndexOf ("/"' index + 1) > -1) {  	int localIndex = input.IndexOf ("/"' index + 1);  	int start = FindWordStart (input' localIndex);  	int length = GetLength (input' start);  	string word = input.Substring (start' length);  	var parts = word.Split ('/');  	if (!this.IsInQuotes (index + 1' quotePoints)) {  		if (parts.Count () == 3) {  			int month;  			int day;  			int year;  			if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  				var dt = new DateTime (year' month' day);  				return new List<TokenResult> {  					new TokenResult {  						Length = length'  						Start = start - 1'  						TokenType = this.GetType ().ToString ()'  						Value = dt'  						Token = new TokenSpecifiedDate {  							Value = dt  						}  					}  				};  			}  		}  	}  	index += length;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: if (!this.IsInQuotes (index + 1' quotePoints)) {  	if (parts.Count () == 3) {  		int month;  		int day;  		int year;  		if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  			var dt = new DateTime (year' month' day);  			return new List<TokenResult> {  				new TokenResult {  					Length = length'  					Start = start - 1'  					TokenType = this.GetType ().ToString ()'  					Value = dt'  					Token = new TokenSpecifiedDate {  						Value = dt  					}  				}  			};  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: if (!this.IsInQuotes (index + 1' quotePoints)) {  	if (parts.Count () == 3) {  		int month;  		int day;  		int year;  		if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  			var dt = new DateTime (year' month' day);  			return new List<TokenResult> {  				new TokenResult {  					Length = length'  					Start = start - 1'  					TokenType = this.GetType ().ToString ()'  					Value = dt'  					Token = new TokenSpecifiedDate {  						Value = dt  					}  				}  			};  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: if (parts.Count () == 3) {  	int month;  	int day;  	int year;  	if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  		var dt = new DateTime (year' month' day);  		return new List<TokenResult> {  			new TokenResult {  				Length = length'  				Start = start - 1'  				TokenType = this.GetType ().ToString ()'  				Value = dt'  				Token = new TokenSpecifiedDate {  					Value = dt  				}  			}  		};  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: if (parts.Count () == 3) {  	int month;  	int day;  	int year;  	if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  		var dt = new DateTime (year' month' day);  		return new List<TokenResult> {  			new TokenResult {  				Length = length'  				Start = start - 1'  				TokenType = this.GetType ().ToString ()'  				Value = dt'  				Token = new TokenSpecifiedDate {  					Value = dt  				}  			}  		};  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,Parse,The following statement contains a magic number: if (int.TryParse (parts [0]' out month) && int.TryParse (parts [1]' out day) && int.TryParse (parts [2]' out year)) {  	var dt = new DateTime (year' month' day);  	return new List<TokenResult> {  		new TokenResult {  			Length = length'  			Start = start - 1'  			TokenType = this.GetType ().ToString ()'  			Value = dt'  			Token = new TokenSpecifiedDate {  				Value = dt  			}  		}  	};  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,IsInQuotes,The following statement contains a magic number: for (int i = 0; i < quotePoints.Count; i++) {  	if (i < quotePoints.Count - 1) {  		if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  			return true;  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,IsInQuotes,The following statement contains a magic number: if (i < quotePoints.Count - 1) {  	if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  		return true;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenSpecifiedDate,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenSpecifiedDate.cs,IsInQuotes,The following statement contains a magic number: if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  	return true;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	Word word = words [i];  	//if we find a quote in the word or the word is a quote' ignore   	if (word.WordValue.IndexOf ("\"") > -1) {  		inQuote = !inQuote;  	}  	if (inQuote) {  		continue;  	}  	bool isPm = false;  	int length = word.EndIndex - word.StartIndex;  	if (word.WordValue.IndexOf ("pm") > -1) {  		isPm = true;  	}  	word.WordValue = word.WordValue.Replace ("am"' "").Replace ("pm"' "");  	if (i < (words.Count - 1)) {  		Word nextWord = words [i + 1];  		if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  			isPm = true;  			i = nextWord.EndIndex;  			length = nextWord.EndIndex - word.StartIndex;  		}  	}  	//number hunting  	if (word.WordValue.IndexOf (":") > -1) {  		string[] parts = word.WordValue.Split (':');  		int hours;  		int minutes;  		int seconds = 0;  		if (!int.TryParse (parts [0]' out hours)) {  			continue;  		}  		if (!int.TryParse (parts [1]' out minutes)) {  			continue;  		}  		if (parts.Count () > 2) {  			if (int.TryParse (parts [2]' out seconds)) {  				continue;  			}  		}  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' minutes' seconds);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  	else {  		int hours;  		if (int.TryParse (word.WordValue' out hours)) {  			if (isPm && hours < 12) {  				hours += 12;  			}  			var ts = new TimeSpan (hours' 0' 0);  			var tr = new TokenResult {  				Length = length'  				Start = word.StartIndex'  				TokenType = this.GetType ().ToString ()'  				Value = ts'  				Token = new TokenTime {  					Value = ts  				}  			};  			results.Add (tr);  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	Word word = words [i];  	//if we find a quote in the word or the word is a quote' ignore   	if (word.WordValue.IndexOf ("\"") > -1) {  		inQuote = !inQuote;  	}  	if (inQuote) {  		continue;  	}  	bool isPm = false;  	int length = word.EndIndex - word.StartIndex;  	if (word.WordValue.IndexOf ("pm") > -1) {  		isPm = true;  	}  	word.WordValue = word.WordValue.Replace ("am"' "").Replace ("pm"' "");  	if (i < (words.Count - 1)) {  		Word nextWord = words [i + 1];  		if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  			isPm = true;  			i = nextWord.EndIndex;  			length = nextWord.EndIndex - word.StartIndex;  		}  	}  	//number hunting  	if (word.WordValue.IndexOf (":") > -1) {  		string[] parts = word.WordValue.Split (':');  		int hours;  		int minutes;  		int seconds = 0;  		if (!int.TryParse (parts [0]' out hours)) {  			continue;  		}  		if (!int.TryParse (parts [1]' out minutes)) {  			continue;  		}  		if (parts.Count () > 2) {  			if (int.TryParse (parts [2]' out seconds)) {  				continue;  			}  		}  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' minutes' seconds);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  	else {  		int hours;  		if (int.TryParse (word.WordValue' out hours)) {  			if (isPm && hours < 12) {  				hours += 12;  			}  			var ts = new TimeSpan (hours' 0' 0);  			var tr = new TokenResult {  				Length = length'  				Start = word.StartIndex'  				TokenType = this.GetType ().ToString ()'  				Value = ts'  				Token = new TokenTime {  					Value = ts  				}  			};  			results.Add (tr);  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	Word word = words [i];  	//if we find a quote in the word or the word is a quote' ignore   	if (word.WordValue.IndexOf ("\"") > -1) {  		inQuote = !inQuote;  	}  	if (inQuote) {  		continue;  	}  	bool isPm = false;  	int length = word.EndIndex - word.StartIndex;  	if (word.WordValue.IndexOf ("pm") > -1) {  		isPm = true;  	}  	word.WordValue = word.WordValue.Replace ("am"' "").Replace ("pm"' "");  	if (i < (words.Count - 1)) {  		Word nextWord = words [i + 1];  		if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  			isPm = true;  			i = nextWord.EndIndex;  			length = nextWord.EndIndex - word.StartIndex;  		}  	}  	//number hunting  	if (word.WordValue.IndexOf (":") > -1) {  		string[] parts = word.WordValue.Split (':');  		int hours;  		int minutes;  		int seconds = 0;  		if (!int.TryParse (parts [0]' out hours)) {  			continue;  		}  		if (!int.TryParse (parts [1]' out minutes)) {  			continue;  		}  		if (parts.Count () > 2) {  			if (int.TryParse (parts [2]' out seconds)) {  				continue;  			}  		}  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' minutes' seconds);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  	else {  		int hours;  		if (int.TryParse (word.WordValue' out hours)) {  			if (isPm && hours < 12) {  				hours += 12;  			}  			var ts = new TimeSpan (hours' 0' 0);  			var tr = new TokenResult {  				Length = length'  				Start = word.StartIndex'  				TokenType = this.GetType ().ToString ()'  				Value = ts'  				Token = new TokenTime {  					Value = ts  				}  			};  			results.Add (tr);  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	Word word = words [i];  	//if we find a quote in the word or the word is a quote' ignore   	if (word.WordValue.IndexOf ("\"") > -1) {  		inQuote = !inQuote;  	}  	if (inQuote) {  		continue;  	}  	bool isPm = false;  	int length = word.EndIndex - word.StartIndex;  	if (word.WordValue.IndexOf ("pm") > -1) {  		isPm = true;  	}  	word.WordValue = word.WordValue.Replace ("am"' "").Replace ("pm"' "");  	if (i < (words.Count - 1)) {  		Word nextWord = words [i + 1];  		if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  			isPm = true;  			i = nextWord.EndIndex;  			length = nextWord.EndIndex - word.StartIndex;  		}  	}  	//number hunting  	if (word.WordValue.IndexOf (":") > -1) {  		string[] parts = word.WordValue.Split (':');  		int hours;  		int minutes;  		int seconds = 0;  		if (!int.TryParse (parts [0]' out hours)) {  			continue;  		}  		if (!int.TryParse (parts [1]' out minutes)) {  			continue;  		}  		if (parts.Count () > 2) {  			if (int.TryParse (parts [2]' out seconds)) {  				continue;  			}  		}  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' minutes' seconds);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  	else {  		int hours;  		if (int.TryParse (word.WordValue' out hours)) {  			if (isPm && hours < 12) {  				hours += 12;  			}  			var ts = new TimeSpan (hours' 0' 0);  			var tr = new TokenResult {  				Length = length'  				Start = word.StartIndex'  				TokenType = this.GetType ().ToString ()'  				Value = ts'  				Token = new TokenTime {  					Value = ts  				}  			};  			results.Add (tr);  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	Word word = words [i];  	//if we find a quote in the word or the word is a quote' ignore   	if (word.WordValue.IndexOf ("\"") > -1) {  		inQuote = !inQuote;  	}  	if (inQuote) {  		continue;  	}  	bool isPm = false;  	int length = word.EndIndex - word.StartIndex;  	if (word.WordValue.IndexOf ("pm") > -1) {  		isPm = true;  	}  	word.WordValue = word.WordValue.Replace ("am"' "").Replace ("pm"' "");  	if (i < (words.Count - 1)) {  		Word nextWord = words [i + 1];  		if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  			isPm = true;  			i = nextWord.EndIndex;  			length = nextWord.EndIndex - word.StartIndex;  		}  	}  	//number hunting  	if (word.WordValue.IndexOf (":") > -1) {  		string[] parts = word.WordValue.Split (':');  		int hours;  		int minutes;  		int seconds = 0;  		if (!int.TryParse (parts [0]' out hours)) {  			continue;  		}  		if (!int.TryParse (parts [1]' out minutes)) {  			continue;  		}  		if (parts.Count () > 2) {  			if (int.TryParse (parts [2]' out seconds)) {  				continue;  			}  		}  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' minutes' seconds);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  	else {  		int hours;  		if (int.TryParse (word.WordValue' out hours)) {  			if (isPm && hours < 12) {  				hours += 12;  			}  			var ts = new TimeSpan (hours' 0' 0);  			var tr = new TokenResult {  				Length = length'  				Start = word.StartIndex'  				TokenType = this.GetType ().ToString ()'  				Value = ts'  				Token = new TokenTime {  					Value = ts  				}  			};  			results.Add (tr);  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	Word word = words [i];  	//if we find a quote in the word or the word is a quote' ignore   	if (word.WordValue.IndexOf ("\"") > -1) {  		inQuote = !inQuote;  	}  	if (inQuote) {  		continue;  	}  	bool isPm = false;  	int length = word.EndIndex - word.StartIndex;  	if (word.WordValue.IndexOf ("pm") > -1) {  		isPm = true;  	}  	word.WordValue = word.WordValue.Replace ("am"' "").Replace ("pm"' "");  	if (i < (words.Count - 1)) {  		Word nextWord = words [i + 1];  		if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  			isPm = true;  			i = nextWord.EndIndex;  			length = nextWord.EndIndex - word.StartIndex;  		}  	}  	//number hunting  	if (word.WordValue.IndexOf (":") > -1) {  		string[] parts = word.WordValue.Split (':');  		int hours;  		int minutes;  		int seconds = 0;  		if (!int.TryParse (parts [0]' out hours)) {  			continue;  		}  		if (!int.TryParse (parts [1]' out minutes)) {  			continue;  		}  		if (parts.Count () > 2) {  			if (int.TryParse (parts [2]' out seconds)) {  				continue;  			}  		}  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' minutes' seconds);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  	else {  		int hours;  		if (int.TryParse (word.WordValue' out hours)) {  			if (isPm && hours < 12) {  				hours += 12;  			}  			var ts = new TimeSpan (hours' 0' 0);  			var tr = new TokenResult {  				Length = length'  				Start = word.StartIndex'  				TokenType = this.GetType ().ToString ()'  				Value = ts'  				Token = new TokenTime {  					Value = ts  				}  			};  			results.Add (tr);  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i++) {  	Word word = words [i];  	//if we find a quote in the word or the word is a quote' ignore   	if (word.WordValue.IndexOf ("\"") > -1) {  		inQuote = !inQuote;  	}  	if (inQuote) {  		continue;  	}  	bool isPm = false;  	int length = word.EndIndex - word.StartIndex;  	if (word.WordValue.IndexOf ("pm") > -1) {  		isPm = true;  	}  	word.WordValue = word.WordValue.Replace ("am"' "").Replace ("pm"' "");  	if (i < (words.Count - 1)) {  		Word nextWord = words [i + 1];  		if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  			isPm = true;  			i = nextWord.EndIndex;  			length = nextWord.EndIndex - word.StartIndex;  		}  	}  	//number hunting  	if (word.WordValue.IndexOf (":") > -1) {  		string[] parts = word.WordValue.Split (':');  		int hours;  		int minutes;  		int seconds = 0;  		if (!int.TryParse (parts [0]' out hours)) {  			continue;  		}  		if (!int.TryParse (parts [1]' out minutes)) {  			continue;  		}  		if (parts.Count () > 2) {  			if (int.TryParse (parts [2]' out seconds)) {  				continue;  			}  		}  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' minutes' seconds);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  	else {  		int hours;  		if (int.TryParse (word.WordValue' out hours)) {  			if (isPm && hours < 12) {  				hours += 12;  			}  			var ts = new TimeSpan (hours' 0' 0);  			var tr = new TokenResult {  				Length = length'  				Start = word.StartIndex'  				TokenType = this.GetType ().ToString ()'  				Value = ts'  				Token = new TokenTime {  					Value = ts  				}  			};  			results.Add (tr);  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (i < (words.Count - 1)) {  	Word nextWord = words [i + 1];  	if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  		isPm = true;  		i = nextWord.EndIndex;  		length = nextWord.EndIndex - word.StartIndex;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (nextWord.WordValue.IndexOf ("pm") > -1 && nextWord.WordValue.Length == 2) {  	isPm = true;  	i = nextWord.EndIndex;  	length = nextWord.EndIndex - word.StartIndex;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (word.WordValue.IndexOf (":") > -1) {  	string[] parts = word.WordValue.Split (':');  	int hours;  	int minutes;  	int seconds = 0;  	if (!int.TryParse (parts [0]' out hours)) {  		continue;  	}  	if (!int.TryParse (parts [1]' out minutes)) {  		continue;  	}  	if (parts.Count () > 2) {  		if (int.TryParse (parts [2]' out seconds)) {  			continue;  		}  	}  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' minutes' seconds);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  else {  	int hours;  	if (int.TryParse (word.WordValue' out hours)) {  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' 0' 0);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (word.WordValue.IndexOf (":") > -1) {  	string[] parts = word.WordValue.Split (':');  	int hours;  	int minutes;  	int seconds = 0;  	if (!int.TryParse (parts [0]' out hours)) {  		continue;  	}  	if (!int.TryParse (parts [1]' out minutes)) {  		continue;  	}  	if (parts.Count () > 2) {  		if (int.TryParse (parts [2]' out seconds)) {  			continue;  		}  	}  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' minutes' seconds);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  else {  	int hours;  	if (int.TryParse (word.WordValue' out hours)) {  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' 0' 0);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (word.WordValue.IndexOf (":") > -1) {  	string[] parts = word.WordValue.Split (':');  	int hours;  	int minutes;  	int seconds = 0;  	if (!int.TryParse (parts [0]' out hours)) {  		continue;  	}  	if (!int.TryParse (parts [1]' out minutes)) {  		continue;  	}  	if (parts.Count () > 2) {  		if (int.TryParse (parts [2]' out seconds)) {  			continue;  		}  	}  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' minutes' seconds);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  else {  	int hours;  	if (int.TryParse (word.WordValue' out hours)) {  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' 0' 0);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (word.WordValue.IndexOf (":") > -1) {  	string[] parts = word.WordValue.Split (':');  	int hours;  	int minutes;  	int seconds = 0;  	if (!int.TryParse (parts [0]' out hours)) {  		continue;  	}  	if (!int.TryParse (parts [1]' out minutes)) {  		continue;  	}  	if (parts.Count () > 2) {  		if (int.TryParse (parts [2]' out seconds)) {  			continue;  		}  	}  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' minutes' seconds);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  else {  	int hours;  	if (int.TryParse (word.WordValue' out hours)) {  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' 0' 0);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (word.WordValue.IndexOf (":") > -1) {  	string[] parts = word.WordValue.Split (':');  	int hours;  	int minutes;  	int seconds = 0;  	if (!int.TryParse (parts [0]' out hours)) {  		continue;  	}  	if (!int.TryParse (parts [1]' out minutes)) {  		continue;  	}  	if (parts.Count () > 2) {  		if (int.TryParse (parts [2]' out seconds)) {  			continue;  		}  	}  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' minutes' seconds);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  else {  	int hours;  	if (int.TryParse (word.WordValue' out hours)) {  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' 0' 0);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (word.WordValue.IndexOf (":") > -1) {  	string[] parts = word.WordValue.Split (':');  	int hours;  	int minutes;  	int seconds = 0;  	if (!int.TryParse (parts [0]' out hours)) {  		continue;  	}  	if (!int.TryParse (parts [1]' out minutes)) {  		continue;  	}  	if (parts.Count () > 2) {  		if (int.TryParse (parts [2]' out seconds)) {  			continue;  		}  	}  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' minutes' seconds);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  else {  	int hours;  	if (int.TryParse (word.WordValue' out hours)) {  		if (isPm && hours < 12) {  			hours += 12;  		}  		var ts = new TimeSpan (hours' 0' 0);  		var tr = new TokenResult {  			Length = length'  			Start = word.StartIndex'  			TokenType = this.GetType ().ToString ()'  			Value = ts'  			Token = new TokenTime {  				Value = ts  			}  		};  		results.Add (tr);  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (parts.Count () > 2) {  	if (int.TryParse (parts [2]' out seconds)) {  		continue;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (parts.Count () > 2) {  	if (int.TryParse (parts [2]' out seconds)) {  		continue;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (int.TryParse (parts [2]' out seconds)) {  	continue;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (isPm && hours < 12) {  	hours += 12;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (isPm && hours < 12) {  	hours += 12;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: hours += 12;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (int.TryParse (word.WordValue' out hours)) {  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' 0' 0);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (int.TryParse (word.WordValue' out hours)) {  	if (isPm && hours < 12) {  		hours += 12;  	}  	var ts = new TimeSpan (hours' 0' 0);  	var tr = new TokenResult {  		Length = length'  		Start = word.StartIndex'  		TokenType = this.GetType ().ToString ()'  		Value = ts'  		Token = new TokenTime {  			Value = ts  		}  	};  	results.Add (tr);  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (isPm && hours < 12) {  	hours += 12;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: if (isPm && hours < 12) {  	hours += 12;  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenTime,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenTime.cs,Parse,The following statement contains a magic number: hours += 12;  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,ToString,The following statement contains a magic number: if ((this.EndDate - this.StartDate).Days > 31) {  	response += string.Format (" in {0}"' this.StartDate.Year);  }  else {  	response += string.Format (" in {0}"' IntToMonthName (this.StartDate.Month));  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToMonthName,The following statement contains a magic number: switch (value) {  case 1:  	return "January";  case 2:  	return "February";  case 3:  	return "March";  case 4:  	return "April";  case 5:  	return "May";  case 6:  	return "June";  case 7:  	return "July";  case 8:  	return "August";  case 9:  	return "September";  case 10:  	return "October";  case 11:  	return "November";  case 12:  	return "December";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenDeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenDeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens.Temporal,TokenIndeterminateSeries,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TokenIndeterminateSeries.cs,IntToOrdinal,The following statement contains a magic number: switch (value) {  case 1:  	return "1st";  case 2:  	return "2nd";  case 3:  	return "3rd";  case 4:  	return "4th";  case 5:  	return "5th";  case 6:  	return "6th";  case 7:  	return "7th";  case 8:  	return "8th";  case 9:  	return "9th";  case 10:  	return "10th";  case 11:  	return "11th";  case 12:  	return "12th";  case 13:  	return "13th";  case 14:  	return "14th";  case 15:  	return "15th";  case 16:  	return "16th";  case 17:  	return "17th";  case 18:  	return "18th";  case 19:  	return "19th";  case 20:  	return "20th";  case 21:  	return "21st";  case 22:  	return "22nd";  case 23:  	return "23rd";  case 24:  	return "24th";  case 25:  	return "25th";  case 26:  	return "26th";  case 27:  	return "27th";  case 28:  	return "28th";  case 29:  	return "29th";  case 30:  	return "30th";  case 31:  	return "31st";  default:  	return value.ToString ();  }  
Magic Number,SpeakToMe.Speech.Tokens,Token,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Token.cs,IsInQuotes,The following statement contains a magic number: for (int i = 0; i < quotePoints.Count; i++) {  	if (i < quotePoints.Count - 1) {  		if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  			return true;  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens,Token,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Token.cs,IsInQuotes,The following statement contains a magic number: if (i < quotePoints.Count - 1) {  	if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  		return true;  	}  }  
Magic Number,SpeakToMe.Speech.Tokens,Token,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Token.cs,IsInQuotes,The following statement contains a magic number: if (index > quotePoints [i] && index < quotePoints [i + 1] && i % 2 == 0) {  	return true;  }  
Magic Number,SpeakToMe.Speech.Tokens.Verbs,TokenRemindMeTo,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Verbs\TokenRemindMeTo.cs,Parse,The following statement contains a magic number: if (results.Any ())//if found   {  	tokenResults.AddRange (results);  	int startPos = results.First ().Start + results.First ().Length + 1;  	//Find first character position after string  	//Lets see is there is a preposition between this position and the end that is followed by a temporal phrase  	string remainder = input.Substring (startPos);  	if (remainder.Length > 0) {  		List<TokenResult> temporalResults = new List<TokenResult> ();  		temporalResults.AddRange (new TokenTemporal ().Parse (remainder' UserId));  		temporalResults.AddRange (new TokenDeterminateSeries ().Parse (remainder' UserId));  		temporalResults.AddRange (new TokenIndeterminateSeries ().Parse (remainder' UserId));  		//we found a temporal token  		if (temporalResults.Any ()) {  			//get the last-most result  			var temporalToken = temporalResults.OrderByDescending (token => token.Start).First ();  			string leftString = remainder.Substring (0' remainder.Length - temporalToken.Length - 3).Replace ("am"' "").Replace ("pm"' "").Replace ("at"' "");  			tokenResults.Add (new TokenResult {  				Length = leftString.Length'  				Start = temporalToken.Start'  				Token = new TokenQuotedPhrase {  					Value = leftString  				}'  				TokenType = typeof(TokenQuotedPhrase).ToString ()'  				Value = leftString  			});  			/*                         //now get the propositions in that same string                         var prepositionResults = new TokenPreposition().Parse(remainder' UserId);                          //get the last-most one                         if (prepositionResults.Any())                         {                             var prepResult = prepositionResults.OrderByDescending(prep => prep.Start).First();                         }                          */}  		else {  			tokenResults.Add (new TokenResult {  				Length = remainder.Length'  				Start = startPos'  				Token = new TokenQuotedPhrase {  					Value = remainder  				}'  				TokenType = typeof(TokenQuotedPhrase).ToString ()'  				Value = remainder  			});  		}  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Verbs,TokenRemindMeTo,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Verbs\TokenRemindMeTo.cs,Parse,The following statement contains a magic number: if (remainder.Length > 0) {  	List<TokenResult> temporalResults = new List<TokenResult> ();  	temporalResults.AddRange (new TokenTemporal ().Parse (remainder' UserId));  	temporalResults.AddRange (new TokenDeterminateSeries ().Parse (remainder' UserId));  	temporalResults.AddRange (new TokenIndeterminateSeries ().Parse (remainder' UserId));  	//we found a temporal token  	if (temporalResults.Any ()) {  		//get the last-most result  		var temporalToken = temporalResults.OrderByDescending (token => token.Start).First ();  		string leftString = remainder.Substring (0' remainder.Length - temporalToken.Length - 3).Replace ("am"' "").Replace ("pm"' "").Replace ("at"' "");  		tokenResults.Add (new TokenResult {  			Length = leftString.Length'  			Start = temporalToken.Start'  			Token = new TokenQuotedPhrase {  				Value = leftString  			}'  			TokenType = typeof(TokenQuotedPhrase).ToString ()'  			Value = leftString  		});  		/*                         //now get the propositions in that same string                         var prepositionResults = new TokenPreposition().Parse(remainder' UserId);                          //get the last-most one                         if (prepositionResults.Any())                         {                             var prepResult = prepositionResults.OrderByDescending(prep => prep.Start).First();                         }                          */}  	else {  		tokenResults.Add (new TokenResult {  			Length = remainder.Length'  			Start = startPos'  			Token = new TokenQuotedPhrase {  				Value = remainder  			}'  			TokenType = typeof(TokenQuotedPhrase).ToString ()'  			Value = remainder  		});  	}  }  
Magic Number,SpeakToMe.Speech.Tokens.Verbs,TokenRemindMeTo,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Verbs\TokenRemindMeTo.cs,Parse,The following statement contains a magic number: if (temporalResults.Any ()) {  	//get the last-most result  	var temporalToken = temporalResults.OrderByDescending (token => token.Start).First ();  	string leftString = remainder.Substring (0' remainder.Length - temporalToken.Length - 3).Replace ("am"' "").Replace ("pm"' "").Replace ("at"' "");  	tokenResults.Add (new TokenResult {  		Length = leftString.Length'  		Start = temporalToken.Start'  		Token = new TokenQuotedPhrase {  			Value = leftString  		}'  		TokenType = typeof(TokenQuotedPhrase).ToString ()'  		Value = leftString  	});  	/*                         //now get the propositions in that same string                         var prepositionResults = new TokenPreposition().Parse(remainder' UserId);                          //get the last-most one                         if (prepositionResults.Any())                         {                             var prepResult = prepositionResults.OrderByDescending(prep => prep.Start).First();                         }                          */}  else {  	tokenResults.Add (new TokenResult {  		Length = remainder.Length'  		Start = startPos'  		Token = new TokenQuotedPhrase {  			Value = remainder  		}'  		TokenType = typeof(TokenQuotedPhrase).ToString ()'  		Value = remainder  	});  }  
Missing Default,SpeakToMe.Speech.Tokens.Temporal.TemporalParts,TokenMonth,C:\repos\rllibby_SigRClient\SpeakToMe.Speech\Tokens\Temporal\TemporalParts\TokenMonth.cs,Parse,The following switch statement is missing a default case: switch (refString) {  case "january":  	retValue = 1;  	break;  case "february":  	retValue = 2;  	break;  case "march":  	retValue = 3;  	break;  case "april":  	retValue = 4;  	break;  case "may":  	retValue = 5;  	break;  case "june":  	retValue = 6;  	break;  case "july":  	retValue = 7;  	break;  case "august":  	retValue = 8;  	break;  case "september":  	retValue = 9;  	break;  case "october":  	retValue = 10;  	break;  case "november":  	retValue = 11;  	break;  case "december":  	retValue = 12;  	break;  }  
